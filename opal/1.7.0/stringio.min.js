Opal.queue((function(Opal){var $klass=Opal.klass,$defs=Opal.defs,$send2=Opal.send2,$find_super=Opal.find_super,$def=Opal.def,$eqeqeq=Opal.eqeqeq,$truthy=Opal.truthy,$rb_ge=Opal.rb_ge,$rb_gt=Opal.rb_gt,$rb_plus=Opal.rb_plus,$rb_minus=Opal.rb_minus,$return_ivar=Opal.return_ivar,$eqeq=Opal.eqeq,$alias=Opal.alias,$nesting=[],$$=Opal.$r($nesting),nil=Opal.nil,$$$=Opal.$$$;return Opal.add_stubs("new,call,close,attr_accessor,check_readable,==,length,===,>=,raise,>,+,-,seek,check_writable,String,[],eof?,write,read,tell"),function($base,$super,$parent_nesting){var self=$klass($base,$super,"StringIO"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting),$proto=self.$$prototype;return $proto.position=$proto.string=nil,$defs(self,"$open",(function $$open(string,mode){var res,block=$$open.$$p||nil,io=nil;return $$open.$$p=null,null==string&&(string=""),null==mode&&(mode=nil),io=this.$new(string,mode),res=block.$call(io),io.$close(),res}),-1),self.$attr_accessor("string"),$def(self,"$initialize",(function $$initialize(string,mode){return $$initialize.$$p=null,null==string&&(string=""),null==mode&&(mode="rw"),this.string=string,this.position=0,$send2(this,$find_super(this,"initialize",$$initialize,!1,!0),"initialize",[nil,mode],null)}),-1),$def(self,"$eof?",(function(){return this.$check_readable(),this.position["$=="](this.string.$length())})),$def(self,"$seek",(function(pos,whence){var $ret_or_1;return null==whence&&(whence=$$$($$("IO"),"SEEK_SET")),this.read_buffer="",$eqeqeq($$$($$("IO"),"SEEK_SET"),$ret_or_1=whence)?($truthy($rb_ge(pos,0))||this.$raise($$$($$("Errno"),"EINVAL")),this.position=pos):$eqeqeq($$$($$("IO"),"SEEK_CUR"),$ret_or_1)?$truthy($rb_gt($rb_plus(this.position,pos),this.string.$length()))?this.position=this.string.$length():this.position=$rb_plus(this.position,pos):$eqeqeq($$$($$("IO"),"SEEK_END"),$ret_or_1)&&($truthy($rb_gt(pos,this.string.$length()))?this.position=0:this.position=$rb_minus(this.position,pos)),0}),-2),$def(self,"$tell",$return_ivar("position")),$def(self,"$rewind",(function(){return this.$seek(0)})),$def(self,"$write",(function(string){var before=nil,after=nil;return this.$check_writable(),this.read_buffer="",string=this.$String(string),$eqeq(this.string.$length(),this.position)?(this.string=$rb_plus(this.string,string),this.position=$rb_plus(this.position,string.$length())):(before=this.string["$[]"](Opal.Range.$new(0,$rb_minus(this.position,1),!1)),after=this.string["$[]"](Opal.Range.$new($rb_plus(this.position,string.$length()),-1,!1)),this.string=$rb_plus($rb_plus(before,string),after),this.position=$rb_plus(this.position,string.$length()))})),$def(self,"$read",(function(length,outbuf){var string,str=nil;return null==length&&(length=nil),null==outbuf&&(outbuf=nil),this.$check_readable(),$truthy(this["$eof?"]())?nil:(string=$truthy(length)?(str=this.string["$[]"](this.position,length),this.position=$rb_plus(this.position,length),$truthy($rb_gt(this.position,this.string.$length()))&&(this.position=this.string.$length()),str):(str=this.string["$[]"](Opal.Range.$new(this.position,-1,!1)),this.position=this.string.$length(),str),$truthy(outbuf)?outbuf.$write(string):string)}),-1),$def(self,"$sysread",(function(length){return this.$check_readable(),this.$read(length)})),$alias(self,"eof","eof?"),$alias(self,"pos","tell"),$alias(self,"pos=","seek"),$alias(self,"readpartial","read")}($nesting[0],$$("IO"),$nesting)}));
