Opal.modules["cgi/util"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var $klass = Opal.klass, $module = Opal.module, $def = Opal.def, $const_set = Opal.const_set, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $alias = Opal.alias, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('gsub,last_match,===,to_i,chr,hex,escapeHTML,unescapeHTML,include,extend');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CGI');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Util');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$escape', function $$escape(c) {
        
        return encodeURI(c);
      });
      
      $def(self, '$unescape', function $$unescape(c) {
        
        return decodeURI(c);
      });
      
      $def(self, '$escapeURIComponent', function $$escapeURIComponent(c) {
        
        return encodeURIComponent(c);
      });
      
      $def(self, '$unescapeURIComponent', function $$unescapeURIComponent(c) {
        
        return decodeURIComponent(c);
      });
      $const_set($nesting[0], 'TABLE_FOR_ESCAPE_HTML__', (new Map([["'", "&#39;"], ["&", "&amp;"], ["\"", "&quot;"], ["<", "&lt;"], [">", "&gt;"]])));
      
      $def(self, '$escapeHTML', function $$escapeHTML(string) {
        
        return string.$gsub(/['&"<>]/, $$('TABLE_FOR_ESCAPE_HTML__'))
      });
      
      $def(self, '$unescapeHTML', function $$unescapeHTML(string) {
        
        return $send(string, 'gsub', [/&(apos|amp|quot|gt|lt|\#[0-9]+|\#[xX][0-9A-Fa-f]+);/], function $$1(){var match = nil, $ret_or_1 = nil, n = nil;

          
          match = $$$('Regexp').$last_match(1);
          if ($eqeqeq("apos", ($ret_or_1 = match))) {
            return "'"
          } else if ($eqeqeq("amp", $ret_or_1)) {
            return "&"
          } else if ($eqeqeq("quot", $ret_or_1)) {
            return "\""
          } else if ($eqeqeq("gt", $ret_or_1)) {
            return ">"
          } else if ($eqeqeq("lt", $ret_or_1)) {
            return "<"
          } else if ($eqeqeq(/^#0*(\d+)$/, $ret_or_1)) {
            
            n = $$$('Regexp').$last_match(1).$to_i();
            return n.$chr("utf-8");
          } else if ($eqeqeq(/^#x([0-9a-f]+)$/i, $ret_or_1)) {
            
            n = $$$('Regexp').$last_match(1).$hex();
            return n.$chr("utf-8");
          } else {
            return "&" + (match) + ";"
          };})
      });
      $alias(self, "escape_html", "escapeHTML");
      $alias(self, "unescape_html", "unescapeHTML");
      return $alias(self, "h", "escapeHTML");
    })($nesting[0], $nesting);
    self.$include($$('Util'));
    return self.$extend($$('Util'));
  })($nesting[0], null, $nesting)
};

Opal.modules["cgi"] = function(Opal) {/* Generated by Opal 1.8.2 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('require');
  return self.$require("cgi/util")
};
