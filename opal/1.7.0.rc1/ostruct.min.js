Opal.queue((function(Opal){var $klass=Opal.klass,$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$def=Opal.def,$slice=Opal.slice,$rb_gt=Opal.rb_gt,$neqeq=Opal.neqeq,$range=Opal.range,$send2=Opal.send2,$find_super=Opal.find_super,$rb_plus=Opal.rb_plus,$alias=Opal.alias,$nesting=[],nil=Opal.nil;return Opal.add_stubs("each_pair,[]=,new_ostruct_member,[],to_sym,>,length,raise,new,end_with?,!=,chomp,to_s,key?,enum_for,is_a?,==,instance_variable_get,===,eql?,dup,to_n,hash,attr_reader,__send__,singleton_class,delete,respond_to?,define_singleton_method,__id__,class,any?,+,join,map,inspect"),function($base,$super,$parent_nesting){var ostruct_ids,self=$klass($base,null,"OpenStruct"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return self.$$prototype.table=nil,$def(self,"$initialize",(function(hash){return null==hash&&(hash=nil),this.table=$hash2([],{}),$truthy(hash)?$send(hash,"each_pair",[],(function $$1(key,value){var $a,self=null==$$1.$$s?this:$$1.$$s;return null==self.table&&(self.table=nil),null==key&&(key=nil),null==value&&(value=nil),$a=[self.$new_ostruct_member(key),value],$send(self.table,"[]=",$a),$a[$a.length-1]}),{$$s:this}):nil}),-1),$def(self,"$[]",(function(name){return this.table["$[]"](name.$to_sym())})),$def(self,"$[]=",(function(name,value){var $a;return $a=[this.$new_ostruct_member(name),value],$send(this.table,"[]=",$a),$a[$a.length-1]})),$def(self,"$method_missing",(function(name,$a){var $post_args,args,$b,self=this;return $post_args=$slice(arguments,1),$truthy($rb_gt((args=$post_args).$length(),2))&&self.$raise($$("NoMethodError").$new("undefined method `"+name+"' for #<OpenStruct>",name)),$truthy(name["$end_with?"]("="))?($neqeq(args.$length(),1)&&self.$raise($$("ArgumentError"),"wrong number of arguments (0 for 1)"),$b=[self.$new_ostruct_member(name["$[]"]($range(0,-2,!1))),args["$[]"](0)],$send(self.table,"[]=",$b),$b[$b.length-1]):self.table["$[]"](name.$to_sym())}),-2),$def(self,"$respond_to_missing?",(function $OpenStruct_respond_to_missing$ques$4(mid,include_private){var $a,mname,$yield=$OpenStruct_respond_to_missing$ques$4.$$p||nil,$ret_or_1=nil;return $OpenStruct_respond_to_missing$ques$4.$$p=null,null==include_private&&(include_private=!1),mname=mid.$to_s().$chomp("=").$to_sym(),$truthy($ret_or_1=($a=this.table)===nil||null==$a?nil:$a["$key?"](mname))?$ret_or_1:$send2(this,$find_super(this,"respond_to_missing?",$OpenStruct_respond_to_missing$ques$4,!1,!0),"respond_to_missing?",[mid,include_private],$yield)}),-2),$def(self,"$each_pair",(function $$each_pair(){var $yield=$$each_pair.$$p||nil;return $$each_pair.$$p=null,$yield===nil?this.$enum_for("each_pair"):$send(this.table,"each_pair",[],(function(pair){return null==pair&&(pair=nil),Opal.yield1($yield,pair)}))})),$def(self,"$==",(function(other){return!!$truthy(other["$is_a?"]($$("OpenStruct")))&&this.table["$=="](other.$instance_variable_get("@table"))})),$def(self,"$===",(function(other){return!!$truthy(other["$is_a?"]($$("OpenStruct")))&&this.table["$==="](other.$instance_variable_get("@table"))})),$def(self,"$eql?",(function(other){return!!$truthy(other["$is_a?"]($$("OpenStruct")))&&this.table["$eql?"](other.$instance_variable_get("@table"))})),$def(self,"$to_h",(function(){return this.table.$dup()})),$def(self,"$to_n",(function(){return this.table.$to_n()})),$def(self,"$hash",(function(){return this.table.$hash()})),self.$attr_reader("table"),$def(self,"$delete_field",(function(name){var sym;sym=name.$to_sym();try{this.$singleton_class().$__send__("remove_method",sym,sym+"=")}catch($err){if(!Opal.rescue($err,[$$("NameError")]))throw $err;Opal.pop_exception()}return this.table.$delete(sym)})),$def(self,"$new_ostruct_member",(function(name){return name=name.$to_sym(),$truthy(this["$respond_to?"](name))||($send(this,"define_singleton_method",[name],(function $$9(){var self=null==$$9.$$s?this:$$9.$$s;return null==self.table&&(self.table=nil),self.table["$[]"](name)}),{$$s:this}),$send(this,"define_singleton_method",[name+"="],(function $$10(x){var $a,self=null==$$10.$$s?this:$$10.$$s;return null==self.table&&(self.table=nil),null==x&&(x=nil),$a=[name,x],$send(self.table,"[]=",$a),$a[$a.length-1]}),{$$s:this})),name})),$def(self,"$inspect",(function(){var self=this,result=nil,top=void 0===ostruct_ids,ostruct_id=self.$__id__();return function(){try{return result="#<"+self.$class(),top&&(ostruct_ids={}),ostruct_ids.hasOwnProperty(ostruct_id)?result+" ...>":(ostruct_ids[ostruct_id]=!0,$truthy(self.table["$any?"]())&&(result=$rb_plus(result," ")),result=$rb_plus(result,$send(self.$each_pair(),"map",[],(function(name,value){return null==name&&(name=nil),null==value&&(value=nil),name+"="+value.$inspect()})).$join(", ")),result=$rb_plus(result,">"))}finally{top&&(ostruct_ids=void 0)}}()})),$alias(self,"to_s","inspect")}($nesting[0],0,$nesting)}));
