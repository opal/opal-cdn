Opal.queue((function(Opal){var $module=Opal.module,$const_set=Opal.const_set,$send2=Opal.send2,$find_super=Opal.find_super,$truthy=Opal.truthy,$rb_lt=Opal.rb_lt,$defs=Opal.defs,$send=Opal.send,$slice=Opal.slice,$to_a=Opal.to_a,$def=Opal.def,$alias=Opal.alias,$hash2=Opal.hash2,$gvars=Opal.gvars,$regexp=Opal.regexp,$thrower=Opal.thrower,$nesting=[],nil=Opal.nil;return Opal.add_stubs("<,bind,module_eval,Raise,class,extend,def_e2message,def_exception,instance_eval,[]=,new,const_defined?,remove_const,const_set,e2mm_message,nil?,caller,=~,[],quote,shift,raise,sprintf,Fail,inspect,each,ancestors"),function($base,$parent_nesting){var self=$module($base,"Exception2MessageMapper"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $const_set($nesting[0],"E2MM",$$("Exception2MessageMapper")),$defs($$("E2MM"),"$extend_object",(function $$extend_object(cl){var $yield=$$extend_object.$$p||nil;return $$extend_object.$$p=null,$send2(this,$find_super(this,"extend_object",$$extend_object,!1,!0),"extend_object",[cl],$yield),$truthy($rb_lt(cl,$$("E2MM")))?nil:cl.$bind(this)})),$def(self,"$bind",(function(cl){return $send(this,"module_eval",[],(function $$1(){var self=null==$$1.$$s?this:$$1.$$s;return $def(self,"$Raise",(function($a,$b){var $post_args,err,rest,self=this;return($post_args=$slice(arguments)).length>0&&(err=$post_args.shift()),null==err&&(err=nil),rest=$post_args,$send($$("Exception2MessageMapper"),"Raise",[self.$class(),err].concat($to_a(rest)))}),-1),$alias(self,"Fail","Raise"),function(self,$parent_nesting){Opal.udef(self,"$included")}(Opal.get_singleton_class(self)),$defs(self,"$included",(function(mod){return mod.$extend($$("Exception2MessageMapper"))}))}),{$$s:this})})),$def(self,"$Raise",(function($a,$b){var $post_args,err,rest,self=this;return($post_args=$slice(arguments)).length>0&&(err=$post_args.shift()),null==err&&(err=nil),rest=$post_args,$send($$("E2MM"),"Raise",[self,err].concat($to_a(rest)))}),-1),$alias(self,"Fail","Raise"),$alias(self,"fail","Raise"),$def(self,"$def_e2message",(function(c,m){return $$("E2MM").$def_e2message(this,c,m)})),$def(self,"$def_exception",(function(n,m,s){return null==s&&(s=$$("StandardError")),$$("E2MM").$def_exception(this,n,m,s)}),-3),self.MessageMap=$hash2([],{}),$defs($$("E2MM"),"$def_e2message",(function(k,c,m){return $send($$("E2MM"),"instance_eval",[],(function $$2(){var $a,self=null==$$2.$$s?this:$$2.$$s;return null==self.MessageMap&&(self.MessageMap=nil),$a=[[k,c],m],$send(self.MessageMap,"[]=",$a),$a[$a.length-1]}),{$$s:this}),c})),$defs($$("E2MM"),"$def_exception",(function(k,n,m,s){var e;return null==s&&(s=$$("StandardError")),e=$$("Class").$new(s),$send($$("E2MM"),"instance_eval",[],(function $$3(){var $a,self=null==$$3.$$s?this:$$3.$$s;return null==self.MessageMap&&(self.MessageMap=nil),$a=[[k,e],m],$send(self.MessageMap,"[]=",$a),$a[$a.length-1]}),{$$s:this}),$truthy(k["$const_defined?"](n,!1))&&$send(k,"module_eval",[],(function $$4(){return(null==$$4.$$s?this:$$4.$$s).$remove_const(n)}),{$$s:this}),k.$const_set(n,e)}),-4),$defs($$("E2MM"),"$Raise",(function($a,$b,$c){var $post_args,klass,err,rest,self=this,form=nil,b=nil;return null==$gvars["@"]&&($gvars["@"]=nil),($post_args=$slice(arguments)).length>0&&(klass=$post_args.shift()),null==klass&&(klass=$$("E2MM")),$post_args.length>0&&(err=$post_args.shift()),null==err&&(err=nil),rest=$post_args,$truthy(form=self.$e2mm_message(klass,err))?(b=$truthy($gvars["@"]["$nil?"]())?self.$caller(1):$gvars["@"],$truthy(b["$[]"](0)["$=~"]($regexp(["^",$$("Regexp").$quote("./e2mmap.rb"),":"])))&&b.$shift(),self.$raise(err,$send(self,"sprintf",[form].concat($to_a(rest))),b)):$$("E2MM").$Fail($$("E2MM"),$$("ErrNotRegisteredException"),err.$inspect())}),-1),function(self,$parent_nesting){$alias(self,"Fail","Raise")}(Opal.get_singleton_class($$("E2MM"))),$defs($$("E2MM"),"$e2mm_message",(function(klass,exp){try{var $t_return=$thrower("return");return $send(klass.$ancestors(),"each",[],(function $$5(c){var mes,self=null==$$5.$$s?this:$$5.$$s;if(null==self.MessageMap&&(self.MessageMap=nil),null==c&&(c=nil),!$truthy(mes=self.MessageMap["$[]"]([c,exp])))return nil;$t_return.$throw(mes)}),{$$s:this,$$ret:$t_return}),nil}catch($e){if($e===$t_return)return $e.$v;throw $e}})),function(self,$parent_nesting){$alias(self,"message","e2mm_message")}(Opal.get_singleton_class(self)),$$("E2MM").$def_exception($$("E2MM"),"ErrNotRegisteredException","not registered exception(%s)")}($nesting[0],$nesting)}));
