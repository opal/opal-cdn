Opal.modules["shellwords"] = function(Opal) {/* Generated by Opal 1.6.0.alpha1 */
  var $module = Opal.module, $rb_plus = Opal.rb_plus, $send = Opal.send, $to_ary = Opal.to_ary, $truthy = Opal.truthy, $def = Opal.def, $alias = Opal.alias, $klass = Opal.klass, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('+,new,scan,raise,inspect,gsub,<<,shellsplit,module_function,to_s,empty?,dup,shellescape,join,map,shelljoin,split,escape');
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Shellwords');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$shellsplit', function $$shellsplit(line) {
      var self = this, words = nil, field = nil;

      
      line = $rb_plus(line, " ");
      words = [];
      field = $$('String').$new();
      $send(line, 'scan', [/\s*(?:([^\s\\\'\"]+)|'([^\']*)'|"((?:[^\"\\]|\\.)*)"|(\\.?)|(\S))(\r?\n?\Z|\s)?/m], function $$1($mlhs_tmp1){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s, word = nil, sq = nil, dq = nil, esc = nil, garbage = nil, sep = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
        $b = $mlhs_tmp1, $a = $to_ary($b), (word = ($a[0] == null ? nil : $a[0])), (sq = ($a[1] == null ? nil : $a[1])), (dq = ($a[2] == null ? nil : $a[2])), (esc = ($a[3] == null ? nil : $a[3])), (garbage = ($a[4] == null ? nil : $a[4])), (sep = ($a[5] == null ? nil : $a[5])), $b;
        if ($truthy(garbage)) {
          self.$raise($$('ArgumentError'), "Unmatched quote: " + (line.$inspect()))
        };
        field = $rb_plus(field, ($truthy(($ret_or_1 = ($truthy(($ret_or_2 = ($truthy(($ret_or_3 = word)) ? ($ret_or_3) : (sq)))) ? ($ret_or_2) : (($truthy(($ret_or_3 = dq)) ? (dq.$gsub(/\\([$`"\\\n])/, "\\1")) : ($ret_or_3)))))) ? ($ret_or_1) : (esc.$gsub(/\\(.)/, "\\1"))));
        if ($truthy(sep)) {
          
          words['$<<'](field);
          return (field = $$('String').$new());
        } else {
          return nil
        };}, {$$arity: 1, $$s: self, $$has_top_level_mlhs_arg: true});
      return words;
    }, 1);
    $alias(self, "shellwords", "shellsplit");
    self.$module_function("shellsplit", "shellwords");
    (function(self, $parent_nesting) {
      
      return $alias(self, "split", "shellsplit")
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$shellescape', function $$shellescape(str) {
      
      
      str = str.$to_s();
      if ($truthy(str['$empty?']())) {
        return "''".$dup()
      };
      str = str.$dup();
      str = str.$gsub(/[^A-Za-z0-9_\-.,:+\/@\n]/, "\\\\\\&");
      str = str.$gsub(/\n/, "'\n'");
      return str;
    }, 1);
    self.$module_function("shellescape");
    (function(self, $parent_nesting) {
      
      return $alias(self, "escape", "shellescape")
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$shelljoin', function $$shelljoin(array) {
      var self = this;

      return $send(array, 'map', [], function $$2(arg){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if (arg == null) arg = nil;
        return self.$shellescape(arg);}, {$$arity: 1, $$s: self}).$join(" ")
    }, 1);
    self.$module_function("shelljoin");
    return (function(self, $parent_nesting) {
      
      return $alias(self, "join", "shelljoin")
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    
    $def(self, '$shellsplit', function $$shellsplit() {
      var self = this;

      return $$('Shellwords').$split(self)
    }, 0);
    return $def(self, '$shellescape', function $$shellescape() {
      var self = this;

      return $$('Shellwords').$escape(self)
    }, 0);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$shelljoin', function $$shelljoin() {
      var self = this;

      return $$('Shellwords').$join(self)
    }, 0)
  })($nesting[0], null, $nesting);
};
