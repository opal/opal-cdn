Opal.modules.ruby2_keywords=function(Opal){var self,$klass=Opal.klass,$truthy=Opal.truthy,$slice=Opal.slice,$def=Opal.def,$defs=Opal.defs,$return_self=Opal.return_self,$return_val=Opal.return_val,$nesting=[],$$=Opal.$r($nesting),nil=Opal.nil,main=nil;return Opal.add_stubs("private_method_defined?,private,eval,respond_to?,method_defined?,dup"),self=$klass($nesting[0],null,"Module"),$truthy(self["$private_method_defined?"]("ruby2_keywords"))||(self.$private(),$def(self,"$ruby2_keywords",(function(name,$a){return $slice(arguments,1),nil}),-2)),main=$$("TOPLEVEL_BINDING").$eval("self"),$truthy(main["$respond_to?"]("ruby2_keywords",!0))||$defs(main,"$ruby2_keywords",(function(name,$a){return $slice(arguments,1),nil}),-2),function($base,$super){var self=$klass($base,null,"Proc");$truthy(self["$method_defined?"]("ruby2_keywords"))||$def(self,"$ruby2_keywords",$return_self)}($nesting[0]),function(self,$parent_nesting){return $truthy(self["$method_defined?"]("ruby2_keywords_hash?"))||$def(self,"$ruby2_keywords_hash?",$return_val(!1)),$truthy(self["$method_defined?"]("ruby2_keywords_hash"))?nil:$def(self,"$ruby2_keywords_hash",(function(hash){return hash.$dup()}))}(Opal.get_singleton_class($$("Hash")))};
