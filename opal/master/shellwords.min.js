Opal.modules.shellwords=function(Opal){var $nesting=[],nil=Opal.nil,$module=Opal.module,$rb_plus=Opal.rb_plus,$send=Opal.send,$to_ary=Opal.to_ary,$truthy=Opal.truthy,$def=Opal.def,$alias=Opal.alias,$klass=Opal.klass;return Opal.add_stubs("+,new,scan,raise,inspect,gsub,<<,module_function,to_s,empty?,dup,join,map,shellescape,split,escape"),function($base,$parent_nesting){var self=$module($base,"Shellwords"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$shellsplit",(function(line){var words=nil,field=nil;return line=$rb_plus(line," "),words=[],field=$$("String").$new(),$send(line,"scan",[/\s*(?:([^\s\\\'\"]+)|'([^\']*)'|"((?:[^\"\\]|\\.)*)"|(\\.?)|(\S))(\r?\n?\Z|\s)?/m],(function $$1($mlhs_tmp1){var $a,word,sq,garbage,sep,$ret_or_1,$ret_or_2,self=null==$$1.$$s?this:$$1.$$s,dq=nil,esc=nil,$ret_or_3=nil;return null==$mlhs_tmp1&&($mlhs_tmp1=nil),word=null==($a=$to_ary($mlhs_tmp1))[0]?nil:$a[0],sq=null==$a[1]?nil:$a[1],dq=null==$a[2]?nil:$a[2],esc=null==$a[3]?nil:$a[3],garbage=null==$a[4]?nil:$a[4],sep=null==$a[5]?nil:$a[5],$truthy(garbage)&&self.$raise($$("ArgumentError"),"Unmatched quote: "+line.$inspect()),field=$rb_plus(field,$truthy($ret_or_1=$truthy($ret_or_2=$truthy($ret_or_3=word)?$ret_or_3:sq)?$ret_or_2:$truthy($ret_or_3=dq)?dq.$gsub(/\\([$`"\\\n])/,"\\1"):$ret_or_3)?$ret_or_1:esc.$gsub(/\\(.)/,"\\1")),$truthy(sep)?(words["$<<"](field),field=$$("String").$new()):nil}),{$$arity:1,$$s:this,$$has_top_level_mlhs_arg:!0}),words}),1),$alias(self,"shellwords","shellsplit"),self.$module_function("shellsplit","shellwords"),function(self,$parent_nesting){$alias(self,"split","shellsplit")}(Opal.get_singleton_class(self)),$def(self,"$shellescape",(function(str){return str=str.$to_s(),$truthy(str["$empty?"]())?"''".$dup():str=(str=(str=str.$dup()).$gsub(/[^A-Za-z0-9_\-.,:+\/@\n]/,"\\\\\\&")).$gsub(/\n/,"'\n'")}),1),self.$module_function("shellescape"),function(self,$parent_nesting){$alias(self,"escape","shellescape")}(Opal.get_singleton_class(self)),$def(self,"$shelljoin",(function(array){return $send(array,"map",[],(function $$2(arg){return null==arg&&(arg=nil),(null==$$2.$$s?this:$$2.$$s).$shellescape(arg)}),{$$arity:1,$$s:this}).$join(" ")}),1),self.$module_function("shelljoin"),function(self,$parent_nesting){$alias(self,"join","shelljoin")}(Opal.get_singleton_class(self))}($nesting[0],$nesting),function($base,$super,$parent_nesting){var self=$klass($base,null,"String"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$shellsplit",(function(){return $$("Shellwords").$split(this)}),0),$def(self,"$shellescape",(function(){return $$("Shellwords").$escape(this)}),0)}($nesting[0],0,$nesting),function($base,$super,$parent_nesting){var self=$klass($base,null,"Array"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $def(self,"$shelljoin",(function(){return $$("Shellwords").$join(this)}),0)}($nesting[0],0,$nesting)};
