Opal.modules["date/formatters"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $slice = Opal.slice, $extract_kwargs = Opal.extract_kwargs, $ensure_kwargs = Opal.ensure_kwargs, $kwrestargs = Opal.kwrestargs, $send = Opal.send, $to_a = Opal.to_a, $hash = Opal.hash, $hash2 = Opal.hash2, $defs = Opal.defs, $alias = Opal.alias, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil;

  Opal.add_stubs('def_formatter,asctime,iso8601,rfc2822,xmlschema');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$def_formatter', function $$def_formatter($a, $b) {
      var $post_args, $kwargs, args, kwargs, self = this;

      
      $post_args = $slice(arguments);
      $kwargs = $extract_kwargs($post_args);
      $kwargs = $ensure_kwargs($kwargs);
      args = $post_args;
      kwargs = $kwrestargs($kwargs, {});
      return $send($$('Time'), 'def_formatter', $to_a(args).concat([Opal.to_hash(kwargs).$merge($hash2(["on"], {"on": self}))]));
    }, -1);
    self.$def_formatter("asctime", "%c");
    $alias(self, "ctime", "asctime");
    self.$def_formatter("iso8601", "%F");
    $alias(self, "xmlschema", "iso8601");
    self.$def_formatter("rfc3339", "%FT%T%:z");
    self.$def_formatter("rfc2822", "%a, %-d %b %Y %T %z");
    $alias(self, "rfc822", "rfc2822");
    self.$def_formatter("httpdate", "%a, %d %b %Y %T GMT", $hash2(["utc"], {"utc": true}));
    self.$def_formatter("jisx0301", "%J");
    return $alias(self, "to_s", "iso8601");
  })($nesting[0], null, $nesting);
  return (function($base, $super) {
    var self = $klass($base, $super, 'DateTime');

    
    
    self.$def_formatter("xmlschema", "%FT%T", $hash2(["fractions", "tz_format"], {"fractions": true, "tz_format": "%:z"}));
    $alias(self, "iso8601", "xmlschema");
    $alias(self, "rfc3339", "xmlschema");
    self.$def_formatter("jisx0301", "%JT%T", $hash2(["fractions", "tz_format"], {"fractions": true, "tz_format": "%:z"}));
    $alias(self, "to_s", "xmlschema");
    return self.$def_formatter("zone", "%:z");
  })($nesting[0], $$('Date'));
};

Opal.modules["date/date_time"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $def = Opal.def, $alias = Opal.alias, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $truthy = Opal.truthy, $return_self = Opal.return_self, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('wrap,now,parse,new,def_delegators,min,sec,/,usec,sec_fraction,gmt_offset,*,+,-,is_a?,clone,_parse_offset,dup,year,month,day');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DateTime');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.date = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$now', function $$now() {
        var self = this;

        return self.$wrap($$('Time').$now())
      });
      return $def(self, '$parse', function $$parse(str) {
        var self = this;

        return self.$wrap($$('Time').$parse(str))
      });
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(year, month, day, hours, minutes, seconds, offset, start) {
      var self = this;

      
      if (year == null) year = -4712;
      if (month == null) month = 1;
      if (day == null) day = 1;
      if (hours == null) hours = 0;
      if (minutes == null) minutes = 0;
      if (seconds == null) seconds = 0;
      if (offset == null) offset = 0;
      if (start == null) start = $$('ITALY');
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      self.date = $$('Time').$new(year, month, day, hours, minutes, seconds, offset);
      return (self.start = start);
    }, -1);
    self.$def_delegators("@date", "min", "hour", "sec");
    $alias(self, "minute", "min");
    $alias(self, "second", "sec");
    
    $def(self, '$sec_fraction', function $$sec_fraction() {
      var self = this;

      return $rb_divide(self.date.$usec(), $$$('Rational').$new(1000000, 1))
    });
    $alias(self, "second_fraction", "sec_fraction");
    
    $def(self, '$offset', function $$offset() {
      var self = this;

      return $rb_divide(self.date.$gmt_offset(), $rb_times(24, $$$('Rational').$new(3600, 1)))
    });
    
    $def(self, '$+', function $DateTime_$plus$1(other) {
      var self = this;

      return $$$('DateTime').$wrap($rb_plus(self.date, other))
    });
    
    $def(self, '$-', function $DateTime_$minus$2(other) {
      var self = this, result = nil;

      
      if (Opal.is_a(other, $$$('Date'))) other = other.date;
      result = $rb_minus(self.date, other);
      if ($truthy(result['$is_a?']($$$('Time')))) {
        return $$$('DateTime').$wrap(result)
      } else {
        return result
      };
    });
    
    $def(self, '$new_offset', function $$new_offset(offset) {
      var self = this, new_date = nil;

      
      new_date = self.$clone();
      offset = $$('Time').$_parse_offset(offset);
      new_date.date.timezone = offset;
      return new_date;
    });
    
    $def(self, '$to_datetime', $return_self);
    
    $def(self, '$to_time', function $$to_time() {
      var self = this;

      return self.date.$dup()
    });
    return $def(self, '$to_date', function $$to_date() {
      var self = this;

      return $$('Date').$new(self.$year(), self.$month(), self.$day())
    });
  })($nesting[0], $$('Date'), $nesting)
};

Opal.modules["forwardable"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $def = Opal.def, $slice = Opal.slice, $to_a = Opal.to_a, $alias = Opal.alias, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('each,respond_to?,def_instance_delegator,include?,start_with?,to_s,define_method,__send__,instance_variable_get,to_proc,instance_delegate,def_instance_delegators,def_single_delegator,define_singleton_method,single_delegate,def_single_delegators');
  
  (function($base) {
    var self = $module($base, 'Forwardable');

    
    
    
    $def(self, '$instance_delegate', function $$instance_delegate(hash) {
      var self = this;

      return $send(hash, 'each', [], function $$1(methods, accessor){var self = $$1.$$s == null ? this : $$1.$$s;

        
        if (methods == null) methods = nil;
        if (accessor == null) accessor = nil;
        if (!$truthy(methods['$respond_to?']("each"))) {
          methods = [methods]
        };
        return $send(methods, 'each', [], function $$2(method){var self = $$2.$$s == null ? this : $$2.$$s;

          
          if (method == null) method = nil;
          return self.$def_instance_delegator(accessor, method);}, {$$s: self});}, {$$s: self})
    });
    
    $def(self, '$def_instance_delegators', function $$def_instance_delegators(accessor, $a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice(arguments, 1);
      methods = $post_args;
      return $send(methods, 'each', [], function $$3(method){var self = $$3.$$s == null ? this : $$3.$$s;

        
        if (method == null) method = nil;
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil
        };
        return self.$def_instance_delegator(accessor, method);}, {$$s: self});
    }, -2);
    
    $def(self, '$def_instance_delegator', function $$def_instance_delegator(accessor, method, ali) {
      var $yield = $$def_instance_delegator.$$p || nil, self = this;

      $$def_instance_delegator.$$p = null;
      
      if (ali == null) ali = method;
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_method', [ali], function $$4($a){var block = $$4.$$p || nil, $post_args, args, self = $$4.$$s == null ? this : $$4.$$s;

          $$4.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self})
      } else {
        return $send(self, 'define_method', [ali], function $$5($a){var block = $$5.$$p || nil, $post_args, args, self = $$5.$$s == null ? this : $$5.$$s;

          $$5.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$__send__(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self})
      };
    }, -3);
    $alias(self, "delegate", "instance_delegate");
    $alias(self, "def_delegators", "def_instance_delegators");
    return $alias(self, "def_delegator", "def_instance_delegator");
  })($nesting[0]);
  return (function($base) {
    var self = $module($base, 'SingleForwardable');

    
    
    
    $def(self, '$single_delegate', function $$single_delegate(hash) {
      var self = this;

      return $send(hash, 'each', [], function $$6(methods, accessor){var self = $$6.$$s == null ? this : $$6.$$s;

        
        if (methods == null) methods = nil;
        if (accessor == null) accessor = nil;
        if (!$truthy(methods['$respond_to?']("each"))) {
          methods = [methods]
        };
        return $send(methods, 'each', [], function $$7(method){var self = $$7.$$s == null ? this : $$7.$$s;

          
          if (method == null) method = nil;
          return self.$def_single_delegator(accessor, method);}, {$$s: self});}, {$$s: self})
    });
    
    $def(self, '$def_single_delegators', function $$def_single_delegators(accessor, $a) {
      var $post_args, methods, self = this;

      
      $post_args = $slice(arguments, 1);
      methods = $post_args;
      return $send(methods, 'each', [], function $$8(method){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (method == null) method = nil;
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil
        };
        return self.$def_single_delegator(accessor, method);}, {$$s: self});
    }, -2);
    
    $def(self, '$def_single_delegator', function $$def_single_delegator(accessor, method, ali) {
      var $yield = $$def_single_delegator.$$p || nil, self = this;

      $$def_single_delegator.$$p = null;
      
      if (ali == null) ali = method;
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_singleton_method', [ali], function $$9($a){var block = $$9.$$p || nil, $post_args, args, self = $$9.$$s == null ? this : $$9.$$s;

          $$9.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self})
      } else {
        return $send(self, 'define_singleton_method', [ali], function $$10($a){var block = $$10.$$p || nil, $post_args, args, self = $$10.$$s == null ? this : $$10.$$s;

          $$10.$$p = null;
          
          ;
          $post_args = $slice(arguments);
          args = $post_args;
          return $send(self.$__send__(accessor), '__send__', [method].concat($to_a(args)), block.$to_proc());}, {$$arity: -1, $$s: self})
      };
    }, -3);
    $alias(self, "delegate", "single_delegate");
    $alias(self, "def_delegators", "def_single_delegators");
    return $alias(self, "def_delegator", "def_single_delegator");
  })($nesting[0]);
};

Opal.modules["time"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $defs = Opal.defs, $ensure_kwargs = Opal.ensure_kwargs, $send = Opal.send, $eqeqeq = Opal.eqeqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $hash2 = Opal.hash2, $alias = Opal.alias, $def = Opal.def, $return_self = Opal.return_self, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('define_method,===,new_offset,utc,year,month,day,getutc,strftime,>,+,def_formatter,rfc2822,xmlschema,wrap,require');
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $defs(self, '$parse', function $$parse(str) {
      
      return new Date(Date.parse(str));
    });
    $defs(self, '$def_formatter', function $$def_formatter(name, format, $kwargs) {
      var on_utc, utc_tz, tz_format, fractions, on, self = this;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      on_utc = $kwargs.$$smap["on_utc"];if (on_utc == null) on_utc = false;
      
      utc_tz = $kwargs.$$smap["utc_tz"];if (utc_tz == null) utc_tz = nil;
      
      tz_format = $kwargs.$$smap["tz_format"];if (tz_format == null) tz_format = nil;
      
      fractions = $kwargs.$$smap["fractions"];if (fractions == null) fractions = false;
      
      on = $kwargs.$$smap["on"];if (on == null) on = self;
      return $send(on, 'define_method', [name], function $$1(fdigits){var $a, $b, self = $$1.$$s == null ? this : $$1.$$s, $ret_or_2 = nil, $ret_or_1 = nil, date = nil, str = nil;

        
        if (fdigits == null) fdigits = 0;
        if ($eqeqeq(($truthy(($ret_or_2 = (($a = $$$('::', 'DateTime', 'skip_raise')) ? 'constant' : nil))) ? ($$$('DateTime')) : ($ret_or_2)), ($ret_or_1 = self))) {
          date = ($truthy(on_utc) ? (self.$new_offset(0)) : (self))
        } else if ($eqeqeq(($truthy(($ret_or_2 = (($b = $$$('::', 'Date', 'skip_raise')) ? 'constant' : nil))) ? ($$$('Date')) : ($ret_or_2)), $ret_or_1)) {
          date = $$$('Time').$utc(self.$year(), self.$month(), self.$day())
        } else if ($eqeqeq($$$('Time'), $ret_or_1)) {
          date = ($truthy(on_utc) ? (self.$getutc()) : (self))
        } else {
          nil
        };
        str = date.$strftime(format);
        if (($truthy(fractions) && ($truthy($rb_gt(fdigits, 0))))) {
          str = $rb_plus(str, date.$strftime(".%" + (fdigits) + "N"))
        };
        if ($truthy(utc_tz)) {
          str = $rb_plus(str, ($truthy(self.$utc()) ? (utc_tz) : (date.$strftime(tz_format))))
        } else if ($truthy(tz_format)) {
          str = $rb_plus(str, date.$strftime(tz_format))
        };
        return str;}, {$$arity: -1, $$s: self});
    }, -3);
    self.$def_formatter("rfc2822", "%a, %d %b %Y %T ", $hash2(["utc_tz", "tz_format"], {"utc_tz": "-00:00", "tz_format": "%z"}));
    $alias(self, "rfc822", "rfc2822");
    self.$def_formatter("httpdate", "%a, %d %b %Y %T GMT", $hash2(["on_utc"], {"on_utc": true}));
    self.$def_formatter("xmlschema", "%FT%T", $hash2(["utc_tz", "tz_format", "fractions"], {"utc_tz": "Z", "tz_format": "%:z", "fractions": true}));
    $alias(self, "iso8601", "xmlschema");
    
    $def(self, '$to_date', function $$to_date() {
      var self = this;

      return $$('Date').$wrap(self)
    });
    
    $def(self, '$to_datetime', function $$to_datetime() {
      var self = this;

      return $$('DateTime').$wrap(self)
    });
    return $def(self, '$to_time', $return_self);
  })($nesting[0], null, $nesting);
  return self.$require("date");
};

Opal.modules["date/infinity"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $def = Opal.def, $return_val = Opal.return_val, $eqeqeq = Opal.eqeqeq, $to_ary = Opal.to_ary, $send2 = Opal.send2, $find_super = Opal.find_super, $eqeq = Opal.eqeq, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,<=>,attr_reader,nonzero?,d,zero?,new,class,-@,+@,===,coerce,==,>');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Infinity');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.d = nil;
      
      self.$include($$('Comparable'));
      
      $def(self, '$initialize', function $$initialize(d) {
        var self = this;

        
        if (d == null) d = 1;
        return (self.d = d['$<=>'](0));
      }, -1);
      self.$attr_reader("d");
      
      $def(self, '$zero?', $return_val(false));
      
      $def(self, '$finite?', $return_val(false));
      
      $def(self, '$infinite?', function $Infinity_infinite$ques$1() {
        var self = this;

        return self.$d()['$nonzero?']()
      });
      
      $def(self, '$nan?', function $Infinity_nan$ques$2() {
        var self = this;

        return self.$d()['$zero?']()
      });
      
      $def(self, '$abs', function $$abs() {
        var self = this;

        return self.$class().$new()
      });
      
      $def(self, '$-@', function $Infinity_$minus$$3() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']())
      });
      
      $def(self, '$+@', function $Infinity_$plus$$4() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']())
      });
      
      $def(self, '$<=>', function $Infinity_$lt_eq_gt$5(other) {
        var $a, $b, self = this, $ret_or_1 = nil, l = nil, r = nil;

        if ($eqeqeq($$('Infinity'), ($ret_or_1 = other))) {
          return self.$d()['$<=>'](other.$d())
        } else if ($eqeqeq($$('Numeric'), $ret_or_1)) {
          return self.$d()
        } else {
          
          try {
            
            $b = other.$coerce(self), $a = $to_ary($b), (l = ($a[0] == null ? nil : $a[0])), (r = ($a[1] == null ? nil : $a[1])), $b;
            return l['$<=>'](r);
          } catch ($err) {
            if (Opal.rescue($err, [$$('NoMethodError')])) {
              try {
                return nil
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };
        }
      });
      
      $def(self, '$coerce', function $$coerce(other) {
        var $yield = $$coerce.$$p || nil, self = this, $ret_or_1 = nil;

        $$coerce.$$p = null;
        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return [self.$d()['$-@'](), self.$d()]
        } else {
          return $send2(self, $find_super(self, 'coerce', $$coerce, false, true), 'coerce', [other], $yield)
        }
      });
      return $def(self, '$to_f', function $$to_f() {
        var self = this;

        
        if ($eqeq(self.d, 0)) {
          return 0
        };
        if ($truthy($rb_gt(self.d, 0))) {
          return $$$($$('Float'), 'INFINITY')
        } else {
          return $$$($$('Float'), 'INFINITY')['$-@']()
        };
      });
    })($nesting[0], $$('Numeric'), $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["date"] = function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $rb_plus = Opal.rb_plus, $def = Opal.def, $send = Opal.send, $alias = Opal.alias, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_times = Opal.rb_times, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,extend,new,-@,+,allocate,join,compact,map,to_proc,downcase,wrap,raise,attr_reader,<=>,jd,===,<<,prev_month,dup,def_delegators,day,month,clone,prev_day,next_day,_days_in_month,class,-,year,prev_year,to_s,strftime,to_i,<,*,reverse,step,abs,each,==,next');
  
  self.$require("forwardable");
  self.$require("date/infinity");
  self.$require("time");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.date = $proto.start = nil;
    
    self.$include($$('Comparable'));
    self.$extend($$('Forwardable'));
    $const_set($nesting[0], 'JULIAN', $$('Infinity').$new());
    $const_set($nesting[0], 'GREGORIAN', $$('Infinity').$new()['$-@']());
    $const_set($nesting[0], 'ITALY', 2299161);
    $const_set($nesting[0], 'ENGLAND', 2361222);
    $const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    $const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    $const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    $const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$wrap', function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.start = $$('ITALY');
        instance.date = native$;
        return instance;
      });
      
      $def(self, '$parse', function $$parse(string, comp) {
        var self = this;

        
        if (comp == null) comp = true;
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $$('MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return $$('ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send($$('DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send($$('MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $$('DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($$('ArgumentError'), "invalid date");
      }, -2);
      
      $def(self, '$today', function $$today() {
        var self = this;

        return self.$wrap(new Date())
      });
      
      $def(self, '$gregorian_leap?', function $gregorian_leap$ques$1(year) {
        
        return (new Date(year, 1, 29).getMonth()-1) === 0
      });
      return $alias(self, "civil", "new");
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(year, month, day, start) {
      var self = this;

      
      if (year == null) year = -4712;
      if (month == null) month = 1;
      if (day == null) day = 1;
      if (start == null) start = $$('ITALY');
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      self.date = new Date(year, month - 1, day);
      return (self.start = start);
    }, -1);
    self.$attr_reader("start");
    
    $def(self, '$<=>', function $Date_$lt_eq_gt$2(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if ($$$('Date')['$==='](other)) {
        var a = self.date, b = other.date;
        if (!Opal.is_a(self, $$$('DateTime'))) a.setHours(0, 0, 0, 0);
        if (!Opal.is_a(other, $$$('DateTime'))) b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    });
    
    $def(self, '$>>', function $Date_$gt$gt$3(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self['$<<'](n['$-@']());
    });
    
    $def(self, '$<<', function $Date_$lt$lt$4(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n);
    });
    
    $def(self, '$clone', function $$clone() {
      var self = this, date = nil;

      
      date = $$('Date').$wrap(self.date.$dup());
      date.start = self.start;
      return date;
    });
    self.$def_delegators("@date", "sunday?", "monday?", "tuesday?", "wednesday?", "thursday?", "friday?", "saturday?", "day", "month", "year", "wday", "yday");
    $alias(self, "mday", "day");
    $alias(self, "mon", "month");
    
    $def(self, '$jd', function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    });
    
    $def(self, '$julian?', function $Date_julian$ques$5() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    });
    
    $def(self, '$new_start', function $$new_start(start) {
      var self = this, new_date = nil;

      
      new_date = self.$clone();
      new_date.start = start;
      return new_date;
    });
    
    $def(self, '$next', function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    });
    
    $def(self, '$-', function $Date_$minus$6(date) {
      var self = this;

      
      
      if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
    ;
      return self.$prev_day(date);
    });
    
    $def(self, '$+', function $Date_$plus$7(date) {
      var self = this;

      return self.$next_day(date)
    });
    
    $def(self, '$prev_day', function $$prev_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (n.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - n);
        return result;
      }
      else {
        self.$raise($$$('TypeError'));
      }
    ;
    }, -1);
    
    $def(self, '$next_day', function $$next_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_day(n['$-@']());
    }, -1);
    
    $def(self, '$prev_month', function $$prev_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (!n.$$is_number) self.$raise($$$('TypeError'))
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - n);
      date.setDate(Math.min(cur, $$('Date').$_days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, -1);
    
    $def(self, '$next_month', function $$next_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n['$-@']());
    }, -1);
    
    $def(self, '$prev_year', function $$prev_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$class().$new($rb_minus(self.$year(), years), self.$month(), self.$day());
    }, -1);
    
    $def(self, '$next_year', function $$next_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_year(years['$-@']());
    }, -1);
    
    $def(self, '$strftime', function $$strftime(format) {
      var self = this;

      
      if (format == null) format = "";
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format)
    ;
    }, -1);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    });
    
    $def(self, '$to_time', function $$to_time() {
      var self = this;

      return $$('Time').$new(self.$year(), self.$month(), self.$day())
    });
    
    $def(self, '$to_date', $return_self);
    
    $def(self, '$to_datetime', function $$to_datetime() {
      var self = this;

      return $$('DateTime').$new(self.$year(), self.$month(), self.$day())
    });
    
    $def(self, '$to_n', $return_ivar("date"));
    
    $def(self, '$step', function $$step(limit, step) {
      var block = $$step.$$p || nil, self = this, steps_count = nil, steps = nil, result = nil;

      $$step.$$p = null;
      
      ;
      if (step == null) step = 1;
      steps_count = $rb_minus(limit, self).$to_i();
      steps = ($truthy($rb_lt($rb_times(steps_count, step), 0)) ? ([]) : ($truthy($rb_lt(steps_count, 0)) ? ($send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], "-@".$to_proc()).$reverse()) : (Opal.Range.$new(0, steps_count, false).$step(step.$abs()))));
      result = $send(steps, 'map', [], function $$8(i){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (i == null) i = nil;
        return $rb_plus(self, i);}, {$$s: self});
      if ((block !== nil)) {
        
        $send(result, 'each', [], function $$9(i){
          
          if (i == null) i = nil;
          return Opal.yield1(block, i);;});
        return self;
      } else {
        return result
      };
    }, -2);
    
    $def(self, '$upto', function $$upto(max) {
      var block = $$upto.$$p || nil, self = this;

      $$upto.$$p = null;
      
      ;
      return $send(self, 'step', [max, 1], block.$to_proc());
    });
    
    $def(self, '$downto', function $$downto(min) {
      var block = $$downto.$$p || nil, self = this;

      $$downto.$$p = null;
      
      ;
      return $send(self, 'step', [min, -1], block.$to_proc());
    });
    
    $def(self, '$cwday', function $$cwday() {
      var self = this;

      return self.date.getDay() || 7
    });
    
    $def(self, '$cweek', function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    });
    $defs(self, '$_days_in_month', function $$_days_in_month(year, month) {
      
      
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    
    });
    $alias(self, "eql?", "==");
    return $alias(self, "succ", "next");
  })($nesting[0], null, $nesting);
  self.$require("date/date_time");
  return self.$require("date/formatters");
};

Opal.queue(function(Opal) {/* Generated by Opal 1.6.1 */
  var $klass = Opal.klass, $const_set = Opal.const_set, $rb_plus = Opal.rb_plus, $def = Opal.def, $send = Opal.send, $alias = Opal.alias, $rb_minus = Opal.rb_minus, $return_self = Opal.return_self, $return_ivar = Opal.return_ivar, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $rb_times = Opal.rb_times, $defs = Opal.defs, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,include,extend,new,-@,+,allocate,join,compact,map,to_proc,downcase,wrap,raise,attr_reader,<=>,jd,===,<<,prev_month,dup,def_delegators,day,month,clone,prev_day,next_day,_days_in_month,class,-,year,prev_year,to_s,strftime,to_i,<,*,reverse,step,abs,each,==,next');
  
  self.$require("forwardable");
  self.$require("date/infinity");
  self.$require("time");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.date = $proto.start = nil;
    
    self.$include($$('Comparable'));
    self.$extend($$('Forwardable'));
    $const_set($nesting[0], 'JULIAN', $$('Infinity').$new());
    $const_set($nesting[0], 'GREGORIAN', $$('Infinity').$new()['$-@']());
    $const_set($nesting[0], 'ITALY', 2299161);
    $const_set($nesting[0], 'ENGLAND', 2361222);
    $const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    $const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    $const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    $const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$wrap', function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.start = $$('ITALY');
        instance.date = native$;
        return instance;
      });
      
      $def(self, '$parse', function $$parse(string, comp) {
        var self = this;

        
        if (comp == null) comp = true;
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = $$('MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return $$('ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send($$('DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send($$('MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + $$('DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise($$('ArgumentError'), "invalid date");
      }, -2);
      
      $def(self, '$today', function $$today() {
        var self = this;

        return self.$wrap(new Date())
      });
      
      $def(self, '$gregorian_leap?', function $gregorian_leap$ques$1(year) {
        
        return (new Date(year, 1, 29).getMonth()-1) === 0
      });
      return $alias(self, "civil", "new");
    })(Opal.get_singleton_class(self), $nesting);
    
    $def(self, '$initialize', function $$initialize(year, month, day, start) {
      var self = this;

      
      if (year == null) year = -4712;
      if (month == null) month = 1;
      if (day == null) day = 1;
      if (start == null) start = $$('ITALY');
      
      // Because of Gregorian reform calendar goes from 1582-10-04 to 1582-10-15.
      // All days in between end up as 4 october.
      if (year === 1582 && month === 10 && day > 4 && day < 15) {
        day = 4;
      }
    ;
      self.date = new Date(year, month - 1, day);
      return (self.start = start);
    }, -1);
    self.$attr_reader("start");
    
    $def(self, '$<=>', function $Date_$lt_eq_gt$2(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if ($$$('Date')['$==='](other)) {
        var a = self.date, b = other.date;
        if (!Opal.is_a(self, $$$('DateTime'))) a.setHours(0, 0, 0, 0);
        if (!Opal.is_a(other, $$$('DateTime'))) b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    });
    
    $def(self, '$>>', function $Date_$gt$gt$3(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self['$<<'](n['$-@']());
    });
    
    $def(self, '$<<', function $Date_$lt$lt$4(n) {
      var self = this;

      
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n);
    });
    
    $def(self, '$clone', function $$clone() {
      var self = this, date = nil;

      
      date = $$('Date').$wrap(self.date.$dup());
      date.start = self.start;
      return date;
    });
    self.$def_delegators("@date", "sunday?", "monday?", "tuesday?", "wednesday?", "thursday?", "friday?", "saturday?", "day", "month", "year", "wday", "yday");
    $alias(self, "mday", "day");
    $alias(self, "mon", "month");
    
    $def(self, '$jd', function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    });
    
    $def(self, '$julian?', function $Date_julian$ques$5() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    });
    
    $def(self, '$new_start', function $$new_start(start) {
      var self = this, new_date = nil;

      
      new_date = self.$clone();
      new_date.start = start;
      return new_date;
    });
    
    $def(self, '$next', function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    });
    
    $def(self, '$-', function $Date_$minus$6(date) {
      var self = this;

      
      
      if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
    ;
      return self.$prev_day(date);
    });
    
    $def(self, '$+', function $Date_$plus$7(date) {
      var self = this;

      return self.$next_day(date)
    });
    
    $def(self, '$prev_day', function $$prev_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (n.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - n);
        return result;
      }
      else {
        self.$raise($$$('TypeError'));
      }
    ;
    }, -1);
    
    $def(self, '$next_day', function $$next_day(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_day(n['$-@']());
    }, -1);
    
    $def(self, '$prev_month', function $$prev_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      
      if (!n.$$is_number) self.$raise($$$('TypeError'))
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - n);
      date.setDate(Math.min(cur, $$('Date').$_days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    ;
    }, -1);
    
    $def(self, '$next_month', function $$next_month(n) {
      var self = this;

      
      if (n == null) n = 1;
      if (!n.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_month(n['$-@']());
    }, -1);
    
    $def(self, '$prev_year', function $$prev_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$class().$new($rb_minus(self.$year(), years), self.$month(), self.$day());
    }, -1);
    
    $def(self, '$next_year', function $$next_year(years) {
      var self = this;

      
      if (years == null) years = 1;
      if (!years.$$is_number) self.$raise($$$('TypeError'));
      return self.$prev_year(years['$-@']());
    }, -1);
    
    $def(self, '$strftime', function $$strftime(format) {
      var self = this;

      
      if (format == null) format = "";
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format)
    ;
    }, -1);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    });
    
    $def(self, '$to_time', function $$to_time() {
      var self = this;

      return $$('Time').$new(self.$year(), self.$month(), self.$day())
    });
    
    $def(self, '$to_date', $return_self);
    
    $def(self, '$to_datetime', function $$to_datetime() {
      var self = this;

      return $$('DateTime').$new(self.$year(), self.$month(), self.$day())
    });
    
    $def(self, '$to_n', $return_ivar("date"));
    
    $def(self, '$step', function $$step(limit, step) {
      var block = $$step.$$p || nil, self = this, steps_count = nil, steps = nil, result = nil;

      $$step.$$p = null;
      
      ;
      if (step == null) step = 1;
      steps_count = $rb_minus(limit, self).$to_i();
      steps = ($truthy($rb_lt($rb_times(steps_count, step), 0)) ? ([]) : ($truthy($rb_lt(steps_count, 0)) ? ($send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], "-@".$to_proc()).$reverse()) : (Opal.Range.$new(0, steps_count, false).$step(step.$abs()))));
      result = $send(steps, 'map', [], function $$8(i){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (i == null) i = nil;
        return $rb_plus(self, i);}, {$$s: self});
      if ((block !== nil)) {
        
        $send(result, 'each', [], function $$9(i){
          
          if (i == null) i = nil;
          return Opal.yield1(block, i);;});
        return self;
      } else {
        return result
      };
    }, -2);
    
    $def(self, '$upto', function $$upto(max) {
      var block = $$upto.$$p || nil, self = this;

      $$upto.$$p = null;
      
      ;
      return $send(self, 'step', [max, 1], block.$to_proc());
    });
    
    $def(self, '$downto', function $$downto(min) {
      var block = $$downto.$$p || nil, self = this;

      $$downto.$$p = null;
      
      ;
      return $send(self, 'step', [min, -1], block.$to_proc());
    });
    
    $def(self, '$cwday', function $$cwday() {
      var self = this;

      return self.date.getDay() || 7
    });
    
    $def(self, '$cweek', function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    });
    $defs(self, '$_days_in_month', function $$_days_in_month(year, month) {
      
      
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    
    });
    $alias(self, "eql?", "==");
    return $alias(self, "succ", "next");
  })($nesting[0], null, $nesting);
  self.$require("date/date_time");
  return self.$require("date/formatters");
});
