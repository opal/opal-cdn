/* Generated by Opal 1.3.0.dev */
Opal.modules["base64"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$delete']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Base64');

    var $nesting = [self].concat($parent_nesting), $Base64_decode64$1, $Base64_encode64$2, $Base64_strict_decode64$3, $Base64_strict_encode64$4, $Base64_urlsafe_decode64$5, $Base64_urlsafe_encode64$6;

    
    
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var encode, decode;

    // encoder
    // [https://gist.github.com/999166] by [https://github.com/nignag]
    encode = function (input) {
      var str = String(input);
      /* eslint-disable */
      for (
        // initialize result and counter
        var block, charCode, idx = 0, map = chars, output = '';
        // if the next str index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        str.charAt(idx | 0) || (map = '=', idx % 1);
        // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)
      ) {
        charCode = str.charCodeAt(idx += 3/4);
        if (charCode > 0xFF) {
          self.$raise($$($nesting, 'ArgumentError'), "invalid character (failed: The string to be encoded contains characters outside of the Latin1 range.)");
        }
        block = block << 8 | charCode;
      }
      return output;
      /* eslint-enable */
    };

    // decoder
    // [https://gist.github.com/1020396] by [https://github.com/atk]
    decode = function (input) {
      var str = String(input).replace(/=+$/, '');
      if (str.length % 4 == 1) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid base64 (failed: The string to be decoded is not correctly encoded.)");
      }
      /* eslint-disable */
      for (
        // initialize result and counters
        var bc = 0, bs, buffer, idx = 0, output = '';
        // get next character
        buffer = str.charAt(idx++);
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
          // and if not first of each 4 characters,
          // convert the first 8 bits to one ascii character
          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
      ) {
        // try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
      }
      return output;
      /* eslint-enable */
    };
  ;
    Opal.defs(self, '$decode64', $Base64_decode64$1 = function $$decode64(string) {
      var self = this;

      return decode(string.replace(/\r?\n/g, ''));
    }, $Base64_decode64$1.$$arity = 1);
    Opal.defs(self, '$encode64', $Base64_encode64$2 = function $$encode64(string) {
      var self = this;

      return encode(string).replace(/(.{60})/g, "$1\n").replace(/([^\n])$/g, "$1\n");
    }, $Base64_encode64$2.$$arity = 1);
    Opal.defs(self, '$strict_decode64', $Base64_strict_decode64$3 = function $$strict_decode64(string) {
      var self = this;

      return decode(string);
    }, $Base64_strict_decode64$3.$$arity = 1);
    Opal.defs(self, '$strict_encode64', $Base64_strict_encode64$4 = function $$strict_encode64(string) {
      var self = this;

      return encode(string);
    }, $Base64_strict_encode64$4.$$arity = 1);
    Opal.defs(self, '$urlsafe_decode64', $Base64_urlsafe_decode64$5 = function $$urlsafe_decode64(string) {
      var self = this;

      return decode(string.replace(/\-/g, '+').replace(/_/g, '/'));
    }, $Base64_urlsafe_decode64$5.$$arity = 1);
    return (Opal.defs(self, '$urlsafe_encode64', $Base64_urlsafe_encode64$6 = function $$urlsafe_encode64(string, $kwargs) {
      var padding, self = this, str = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      padding = $kwargs.$$smap["padding"];
      if (padding == null) {
        padding = true
      };
      str = encode(string).replace(/\+/g, '-').replace(/\//g, '_');
      if ($truthy(padding)) {
      } else {
        str = str.$delete("=")
      };
      return str;
    }, $Base64_urlsafe_encode64$6.$$arity = -2), nil) && 'urlsafe_encode64';
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["corelib/pack_unpack/format_string_parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$raise']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'PackUnpack');

    var $nesting = [self].concat($parent_nesting);

    
    var directives = [
      // Integer
      'C',
      'S',
      'L',
      'Q',
      'J',

      'c',
      's',
      'l',
      'q',
      'j',

      'n',
      'N',
      'v',
      'V',

      'U',
      'w',

      // Float
      'D',
      'd',
      'F',
      'f',
      'E',
      'e',
      'G',
      'g',

      // String
      'A',
      'a',
      'Z',
      'B',
      'b',
      'H',
      'h',
      'u',
      'M',
      'm',

      'P',
      'p',

      // Misc
      '@',
      'X',
      'x'
    ];

    var modifiers = [
      '!', // ignored
      '_', // ignored
      '>', // big endian
      '<'  // little endian
    ];

    self.eachDirectiveAndCount = function(format, callback) {
      var currentDirective,
          currentCount,
          currentModifiers,
          countSpecified;

      function reset() {
        currentDirective = null;
        currentCount = 0;
        currentModifiers = [];
        countSpecified = false;
      }

      reset();

      function yieldAndReset() {
        if (currentDirective == null) {
          reset();
          return;
        }

        var directiveSupportsModifiers = /[sSiIlLqQjJ]/.test(currentDirective);

        if (!directiveSupportsModifiers && currentModifiers.length > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "'" + (currentModifiers[0]) + "' allowed only after types sSiIlLqQjJ")
        }

        if (currentModifiers.indexOf('<') !== -1 && currentModifiers.indexOf('>') !== -1) {
          self.$raise($$($nesting, 'RangeError'), "Can't use both '<' and '>'")
        }

        if (!countSpecified) {
          currentCount = 1;
        }

        if (currentModifiers.indexOf('>') !== -1) {
          currentDirective = currentDirective + '>';
        }

        callback(currentDirective, currentCount);

        reset();
      }

      for (var i = 0; i < format.length; i++) {
        var currentChar = format[i];

        if (directives.indexOf(currentChar) !== -1) {
          // Directive char always resets current state
          yieldAndReset();
          currentDirective = currentChar;
        } else if (currentDirective) {
          if (/\d/.test(currentChar)) {
            // Count can be represented as a sequence of digits
            currentCount = currentCount * 10 + parseInt(currentChar, 10);
            countSpecified = true;
          } else if (currentChar === '*' && countSpecified === false) {
            // Count can be represented by a star character
            currentCount = Infinity;
            countSpecified = true;
          } else if (modifiers.indexOf(currentChar) !== -1 && countSpecified === false) {
            // Directives can be specified only after directive and before count
            currentModifiers.push(currentChar);
          } else {
            yieldAndReset();
          }
        }
      }

      yieldAndReset();
    }
  
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["corelib/string/unpack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$flatten', '$decode64', '$raise', '$delete', '$gsub', '$coerce_to!', '$inspect', '$[]', '$unpack']);
  
  self.$require("base64");
  self.$require("corelib/pack_unpack/format_string_parser");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_unpack$1, $String_unpack1$2, expected = nil, given = nil;

    
    
    // Format Parser
    var eachDirectiveAndCount = Opal.PackUnpack.eachDirectiveAndCount;

    function flattenArray(callback) {
      return function(data) {
        var array = callback(data);
        return (array).$flatten();
      }
    }

    function mapChunksToWords(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse().reduce(function(result, singleByte) {
            return result * 256 + singleByte;
          }, 0);
        });
      }
    }

    function chunkBy(chunkSize, callback) {
      return function(data) {
        var array = callback(data),
            chunks = [],
            chunksCount = (array.length / chunkSize);

        for (var i = 0; i < chunksCount; i++) {
          var chunk = array.splice(0, chunkSize);
          if (chunk.length === chunkSize) {
            chunks.push(chunk);
          }
        }

        return chunks;
      }
    }

    function toNByteSigned(bytesCount, callback) {
      return function(data) {
        var unsignedBits = callback(data),
            bitsCount = bytesCount * 8,
            limit = Math.pow(2, bitsCount);

        return unsignedBits.map(function(n) {
          if (n >= limit / 2) {
            n -= limit;
          }

          return n;
        });
      }
    }

    function bytesToAsciiChars(callback) {
      return function(data) {
        var bytes = callback(data);

        return bytes.map(function(singleByte) {
          return String.fromCharCode(singleByte);
        });
      }
    }

    function joinChars(callback) {
      return function(data) {
        var chars = callback(data);
        return chars.join('');
      }
    }

    function wrapIntoArray(callback) {
      return function(data) {
        var object = callback(data);
        return [object];
      }
    }

    function filterTrailingChars(chars) {
      var charCodesToFilter = chars.map(function(s) { return s.charCodeAt(0); });

      return function(callback) {
        return function(data) {
          var charCodes = callback(data);

          while (charCodesToFilter.indexOf(charCodes[charCodes.length - 1]) !== -1) {
            charCodes = charCodes.slice(0, charCodes.length - 1);
          }

          return charCodes;
        }
      }
    }

    var filterTrailingZerosAndSpaces = filterTrailingChars(["\u0000", " "]);

    function invertChunks(callback) {
      return function(data) {
        var chunks = callback(data);

        return chunks.map(function(chunk) {
          return chunk.reverse();
        });
      }
    }

    function uudecode(callback) {
      return function(data) {
        var bytes = callback(data);

        var stop = false;
        var i = 0, length = 0;

        var result = [];

        do {
          if (i < bytes.length) {
            var n = bytes[i] - 32 & 0x3F;

            ++i;

            if (bytes[i] === 10) {
              continue;
            }

            if (n > 45) {
              return '';
            }

            length += n;

            while (n > 0) {
              var c1 = bytes[i];
              var c2 = bytes[i + 1];
              var c3 = bytes[i + 2];
              var c4 = bytes[i + 3];

              var b1 = (c1 - 32 & 0x3F) << 2 | (c2 - 32 & 0x3F) >> 4;
              var b2 = (c2 - 32 & 0x3F) << 4 | (c3 - 32 & 0x3F) >> 2;
              var b3 = (c3 - 32 & 0x3F) << 6 | c4 - 32 & 0x3F;

              result.push(b1 & 0xFF);
              result.push(b2 & 0xFF);
              result.push(b3 & 0xFF);

              i += 4;
              n -= 3;
            }

            ++i;
          } else {
            break;
          }
        } while (true);

        return result.slice(0, length);
      }
    }

    function toBits(callback) {
      return function(data) {
        var bytes = callback(data);

        var bits = bytes.map(function(singleByte) {
          return singleByte.toString(2);
        });

        return bits;
      }
    }

    function decodeBERCompressedIntegers(callback) {
      return function(data) {
        var bytes = callback(data), result = [], buffer = '';

        for (var i = 0; i < bytes.length; i++) {
          var singleByte = bytes[i],
              bits = singleByte.toString(2);

          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          var firstBit = bits[0];
          bits = bits.slice(1, bits.length);

          buffer = buffer.concat(bits);

          if (firstBit === '0') {
            var decoded = parseInt(buffer, 2);
            result.push(decoded);
            buffer = ''
          }
        }

        return result;
      }
    }

    function base64Decode(callback) {
      return function(data) {
        return $$($nesting, 'Base64').$decode64(callback(data));
      }
    }

    // quoted-printable decode
    function qpdecode(callback) {
      return function(data) {
        var string = callback(data);

        return string
          .replace(/[\t\x20]$/gm, '')
          .replace(/=(?:\r\n?|\n|$)/g, '')
          .replace(/=([a-fA-F0-9]{2})/g, function($0, $1) {
            var codePoint = parseInt($1, 16);
            return String.fromCharCode(codePoint);
          });
      }
    }

    function identityFunction(value) { return value; }

    var handlers = {
      // Integer
      'C': identityFunction,
      'S': mapChunksToWords(chunkBy(2, identityFunction)),
      'L': mapChunksToWords(chunkBy(4, identityFunction)),
      'Q': mapChunksToWords(chunkBy(8, identityFunction)),
      'J': null,

      'S>': mapChunksToWords(invertChunks(chunkBy(2, identityFunction))),
      'L>': mapChunksToWords(invertChunks(chunkBy(4, identityFunction))),
      'Q>': mapChunksToWords(invertChunks(chunkBy(8, identityFunction))),

      'c': toNByteSigned(1, identityFunction),
      's': toNByteSigned(2, mapChunksToWords(chunkBy(2, identityFunction))),
      'l': toNByteSigned(4, mapChunksToWords(chunkBy(4, identityFunction))),
      'q': toNByteSigned(8, mapChunksToWords(chunkBy(8, identityFunction))),
      'j': null,

      's>': toNByteSigned(2, mapChunksToWords(invertChunks(chunkBy(2, identityFunction)))),
      'l>': toNByteSigned(4, mapChunksToWords(invertChunks(chunkBy(4, identityFunction)))),
      'q>': toNByteSigned(8, mapChunksToWords(invertChunks(chunkBy(8, identityFunction)))),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': identityFunction,
      'w': decodeBERCompressedIntegers(identityFunction),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': wrapIntoArray(joinChars(bytesToAsciiChars(filterTrailingZerosAndSpaces(identityFunction)))),
      'a': wrapIntoArray(joinChars(bytesToAsciiChars(identityFunction))),
      'Z': joinChars(bytesToAsciiChars(identityFunction)),
      'B': joinChars(identityFunction),
      'b': joinChars(identityFunction),
      'H': joinChars(identityFunction),
      'h': joinChars(identityFunction),
      'u': joinChars(bytesToAsciiChars(uudecode(identityFunction))),
      'M': qpdecode(joinChars(bytesToAsciiChars(identityFunction))),
      'm': base64Decode(joinChars(bytesToAsciiChars(identityFunction))),

      'P': null,
      'p': null
    };

    function readBytes(n) {
      return function(bytes) {
        var chunk = bytes.slice(0, n);
        bytes = bytes.slice(n, bytes.length);
        return { chunk: chunk, rest: bytes };
      }
    }

    function readUnicodeCharChunk(bytes) {
      var currentByteIndex = 0;
      var bytesLength = bytes.length;
      function readByte() {
        var result = bytes[currentByteIndex++];
        bytesLength = bytes.length - currentByteIndex;
        return result;
      }

      var c = readByte(), extraLength;

      if (c >> 7 == 0) {
        // 0xxx xxxx
        return { chunk: [c], rest: bytes.slice(currentByteIndex) };
      }

      if (c >> 6 == 0x02) {
        self.$raise($$($nesting, 'ArgumentError'), "malformed UTF-8 character")
      }

      if (c >> 5 == 0x06) {
        // 110x xxxx (two bytes)
        extraLength = 1;
      } else if (c >> 4 == 0x0e) {
        // 1110 xxxx (three bytes)
        extraLength = 2;
      } else if (c >> 3 == 0x1e) {
        // 1111 0xxx (four bytes)
        extraLength = 3;
      } else if (c >> 2 == 0x3e) {
        // 1111 10xx (five bytes)
        extraLength = 4;
      } else if (c >> 1 == 0x7e) {
        // 1111 110x (six bytes)
        extraLength = 5;
      } else {
        self.$raise("malformed UTF-8 character")
      }

      if (extraLength > bytesLength) {
        ((expected = extraLength + 1), (given = bytesLength + 1), self.$raise($$($nesting, 'ArgumentError'), "" + "malformed UTF-8 character (expected " + (expected) + " bytes, given " + (given) + " bytes)"))
      }

      // Remove the UTF-8 prefix from the char
      var mask = (1 << (8 - extraLength - 1)) - 1,
          result = c & mask;

      for (var i = 0; i < extraLength; i++) {
        c = readByte();

        if (c >> 6 != 0x02) {
          self.$raise("Invalid multibyte sequence")
        }

        result = (result << 6) | (c & 0x3f);
      }

      if (result <= 0xffff) {
        return { chunk: [result], rest: bytes.slice(currentByteIndex) };
      } else {
        result -= 0x10000;
        var high = ((result >> 10) & 0x3ff) + 0xd800,
            low = (result & 0x3ff) + 0xdc00;
        return { chunk: [high, low], rest: bytes.slice(currentByteIndex) };
      }
    }

    function readUuencodingChunk(buffer) {
      var length = buffer.indexOf(32); // 32 = space

      if (length === -1) {
        return { chunk: buffer, rest: [] };
      } else {
        return { chunk: buffer.slice(0, length), rest: buffer.slice(length, buffer.length) };
      }
    }

    function readNBitsLSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits).split('').reverse().join('');

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readNBitsMSBFirst(buffer, count) {
      var result = '';

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            bitsToTake = Math.min(count, 8),
            bytesToTake = Math.ceil(bitsToTake / 8);

        buffer = buffer.slice(1, buffer.length);

        if (singleByte != null) {
          var bits = singleByte.toString(2);
          bits = Array(8 - bits.length + 1).join('0').concat(bits);

          for (var j = 0; j < bitsToTake; j++) {
            result += bits[j] || '0';
            count--;
          }
        }
      }

      return { chunk: [result], rest: buffer };
    }

    function readWhileFirstBitIsOne(buffer) {
      var result = [];

      for (var i = 0; i < buffer.length; i++) {
        var singleByte = buffer[i];

        result.push(singleByte);

        if ((singleByte & 128) === 0) {
          break;
        }
      }

      return { chunk: result, rest: buffer.slice(result.length, buffer.length) };
    }

    function readTillNullCharacter(buffer, count) {
      var result = [];

      for (var i = 0; i < count && i < buffer.length; i++) {
        var singleByte = buffer[i];

        if (singleByte === 0) {
          break;
        } else {
          result.push(singleByte);
        }
      }

      if (count === Infinity) {
        count = result.length;
      }

      if (buffer[count] === 0) {
        count++;
      }

      buffer = buffer.slice(count, buffer.length);

      return { chunk: result, rest: buffer };
    }

    function readHexCharsHighNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[0]);
          count--;
        } else {
          result.push(hex[0], hex[1]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readHexCharsLowNibbleFirst(buffer, count) {
      var result = [];

      while (count > 0 && buffer.length > 0) {
        var singleByte = buffer[0],
            hex = singleByte.toString(16);

        buffer = buffer.slice(1, buffer.length);
        hex = Array(2 - hex.length + 1).join('0').concat(hex);

        if (count === 1) {
          result.push(hex[1]);
          count--;
        } else {
          result.push(hex[1], hex[0]);
          count -= 2;
        }
      }

      return { chunk: result, rest: buffer };
    }

    function readNTimesAndMerge(callback) {
      return function(buffer, count) {
        var chunk = [], chunkData;

        if (count === Infinity) {
          while (buffer.length > 0) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        } else {
          for (var i = 0; i < count; i++) {
            chunkData = callback(buffer);
            buffer = chunkData.rest;
            chunk = chunk.concat(chunkData.chunk);
          }
        }

        return { chunk: chunk, rest: buffer };
      }
    }

    function readAll(buffer, count) {
      return { chunk: buffer, rest: [] };
    }

    var readChunk = {
      // Integer
      'C': readNTimesAndMerge(readBytes(1)),
      'S': readNTimesAndMerge(readBytes(2)),
      'L': readNTimesAndMerge(readBytes(4)),
      'Q': readNTimesAndMerge(readBytes(8)),
      'J': null,

      'S>': readNTimesAndMerge(readBytes(2)),
      'L>': readNTimesAndMerge(readBytes(4)),
      'Q>': readNTimesAndMerge(readBytes(8)),

      'c': readNTimesAndMerge(readBytes(1)),
      's': readNTimesAndMerge(readBytes(2)),
      'l': readNTimesAndMerge(readBytes(4)),
      'q': readNTimesAndMerge(readBytes(8)),
      'j': null,

      's>': readNTimesAndMerge(readBytes(2)),
      'l>': readNTimesAndMerge(readBytes(4)),
      'q>': readNTimesAndMerge(readBytes(8)),

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': readNTimesAndMerge(readUnicodeCharChunk),
      'w': readNTimesAndMerge(readWhileFirstBitIsOne),

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': readNTimesAndMerge(readBytes(1)),
      'a': readNTimesAndMerge(readBytes(1)),
      'Z': readTillNullCharacter,
      'B': readNBitsMSBFirst,
      'b': readNBitsLSBFirst,
      'H': readHexCharsHighNibbleFirst,
      'h': readHexCharsLowNibbleFirst,
      'u': readNTimesAndMerge(readUuencodingChunk),
      'M': readAll,
      'm': readAll,

      'P': null,
      'p': null
    }

    var autocompletion = {
      // Integer
      'C': true,
      'S': true,
      'L': true,
      'Q': true,
      'J': null,

      'S>': true,
      'L>': true,
      'Q>': true,

      'c': true,
      's': true,
      'l': true,
      'q': true,
      'j': null,

      's>': true,
      'l>': true,
      'q>': true,

      'n': null, // aliased later
      'N': null, // aliased later
      'v': null, // aliased later
      'V': null, // aliased later

      'U': false,
      'w': false,

      // Float
      'D': null,
      'd': null,
      'F': null,
      'f': null,
      'E': null,
      'e': null,
      'G': null,
      'g': null,

      // String
      'A': false,
      'a': false,
      'Z': false,
      'B': false,
      'b': false,
      'H': false,
      'h': false,
      'u': false,
      'M': false,
      'm': false,

      'P': null,
      'p': null
    }

    var optimized = {
      'C*': handlers['C'],
      'c*': handlers['c'],
      'A*': handlers['A'],
      'a*': handlers['a'],
      'M*': wrapIntoArray(handlers['M']),
      'm*': wrapIntoArray(handlers['m']),
      'S*': handlers['S'],
      's*': handlers['s'],
      'L*': handlers['L'],
      'l*': handlers['l'],
      'Q*': handlers['Q'],
      'q*': handlers['q'],
      'S>*': handlers['S>'],
      's>*': handlers['s>'],
      'L>*': handlers['L>'],
      'l>*': handlers['l>'],
      'Q>*': handlers['Q>'],
      'q>*': handlers['q>']
    }

    function alias(existingDirective, newDirective) {
      readChunk[newDirective] = readChunk[existingDirective];
      handlers[newDirective] = handlers[existingDirective];
      autocompletion[newDirective] = autocompletion[existingDirective];
    }

    alias('S>', 'n');
    alias('L>', 'N');

    alias('S', 'v');
    alias('L', 'V');
  ;
    
    Opal.def(self, '$unpack', $String_unpack$1 = function $$unpack(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      
      var output = [];

      // A very optimized handler for U*.
      if (format == "U*" &&
          self.internal_encoding.name === "UTF-8" &&
          typeof self.codePointAt === "function") {

        var cp, j = 0;

        output = new Array(self.length);
        for (var i = 0; i < self.length; i++) {
          cp = output[j++] = self.codePointAt(i);
          if (cp > 0xffff) i++;
        }
        return output.slice(0, j);
      }

      var buffer = self.$bytes();


      // optimization
      var optimizedHandler = optimized[format];
      if (optimizedHandler) {
        return optimizedHandler(buffer);
      }

      function autocomplete(array, size) {
        while (array.length < size) {
          array.push(nil);
        }

        return array;
      }

      function processChunk(directive, count) {
        var chunk,
            chunkReader = readChunk[directive];

        if (chunkReader == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no chunk reader defined)")
        }

        var chunkData = chunkReader(buffer, count);
        chunk = chunkData.chunk;
        buffer = chunkData.rest;

        var handler = handlers[directive];

        if (handler == null) {
          self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no handler defined)")
        }

        return handler(chunk);
      }

      eachDirectiveAndCount(format, function(directive, count) {
        var part = processChunk(directive, count);

        if (count !== Infinity) {
          var shouldAutocomplete = autocompletion[directive];

          if (shouldAutocomplete == null) {
            self.$raise("" + "Unsupported unpack directive " + ((directive).$inspect()) + " (no autocompletion rule defined)")
          }

          if (shouldAutocomplete) {
            autocomplete(part, count);
          }
        }

        output = output.concat(part);
      });

      return output;
    ;
    }, $String_unpack$1.$$arity = 1);
    return (Opal.def(self, '$unpack1', $String_unpack1$2 = function $$unpack1(format) {
      var self = this;

      
      format = $$($nesting, 'Opal')['$coerce_to!'](format, $$($nesting, 'String'), "to_str").$gsub(/\s/, "").$delete("\u0000");
      return self.$unpack(format['$[]'](0))['$[]'](0);
    }, $String_unpack1$2.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$reject', '$delete_if', '$to_proc', '$keep_if', '$each_key', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$any?', '$!', '$intersect?', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Set');

    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_keep_if$20, $Set_reject$excl$23, $Set_select$excl$24, $Set_add$ques$25, $Set_each$26, $Set_empty$ques$27, $Set_eql$ques$28, $Set_clear$30, $Set_include$ques$31, $Set_merge$32, $Set_replace$34, $Set_size$35, $Set_subtract$36, $Set_$$38, $Set_superset$ques$39, $Set_proper_superset$ques$41, $Set_subset$ques$43, $Set_proper_subset$ques$45, $Set_intersect$ques$47, $Set_disjoint$ques$50, $Set_to_a$51;

    self.$$prototype.hash = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      ary = $post_args;;
      return self.$new(ary);
    }, $Set_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {
      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;

      if ($iter) $Set_initialize$2.$$p = null;
      
      
      if ($iter) $Set_initialize$2.$$p = null;;
      
      if (enum$ == null) {
        enum$ = nil;
      };
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (item == null) {
            item = nil;
          };
          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
      } else {
        return self.$merge(enum$)
      };
    }, $Set_initialize$2.$$arity = -1);
    
    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, $Set_dup$4.$$arity = 0);
    
    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, $Set_$minus$5.$$arity = 1);
    $alias(self, "difference", "-");
    
    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, $Set_inspect$6.$$arity = 0);
    
    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {
      var $$8, self = this, $ret_or_1 = nil;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy((function() {if ($truthy(($ret_or_1 = other['$is_a?']($$($nesting, 'Set'))))) {
        return self.$size()['$=='](other.$size())
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.hash == null) self.hash = nil;

          
          
          if (o == null) {
            o = nil;
          };
          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      } else {
        return false
      }
    }, $Set_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, $Set_add$9.$$arity = 1);
    $alias(self, "<<", "add");
    
    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {
      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;

      if ($iter) $Set_classify$10.$$p = null;
      
      
      if ($iter) $Set_classify$10.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("classify")
      };
      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s == null ? this : $$11.$$s, $writer = nil;

        
        
        if (h == null) {
          h = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));
      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s == null ? this : $$12.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return result;
    }, $Set_classify$10.$$arity = 0);
    
    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {
      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;

      if ($iter) $Set_collect$excl$13.$$p = null;
      
      
      if ($iter) $Set_collect$excl$13.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s == null ? this : $$14.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      return self.$replace(result);
    }, $Set_collect$excl$13.$$arity = 0);
    $alias(self, "map!", "collect!");
    
    Opal.def(self, '$delete', $Set_delete$15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, $Set_delete$15.$$arity = 1);
    
    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, $Set_delete$ques$16.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {
      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_delete_if$17.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s == null ? this : $$18.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s == null ? this : $$19.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self;
    }, $Set_delete_if$17.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Set_keep_if$20 = function $$keep_if() {
      var $$21, $$22, $iter = $Set_keep_if$20.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Set_keep_if$20.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], ($$21 = function(o){var self = $$21.$$s == null ? this : $$21.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return Opal.yield1($yield, o);;}, $$21.$$s = self, $$21.$$arity = 1, $$21)), 'each', [], ($$22 = function(o){var self = $$22.$$s == null ? this : $$22.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) {
          o = nil;
        };
        return self.hash.$delete(o);}, $$22.$$s = self, $$22.$$arity = 1, $$22));
      return self;
    }, $Set_keep_if$20.$$arity = 0);
    
    Opal.def(self, '$reject!', $Set_reject$excl$23 = function() {
      var $iter = $Set_reject$excl$23.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_reject$excl$23.$$p = null;
      
      
      if ($iter) $Set_reject$excl$23.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_reject$excl$23.$$arity = 0);
    
    Opal.def(self, '$select!', $Set_select$excl$24 = function() {
      var $iter = $Set_select$excl$24.$$p, block = $iter || nil, self = this, before = nil;

      if ($iter) $Set_select$excl$24.$$p = null;
      
      
      if ($iter) $Set_select$excl$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if (self.$size()['$=='](before)) {
        return nil
      } else {
        return self
      };
    }, $Set_select$excl$24.$$arity = 0);
    $alias(self, "filter!", "select!");
    
    Opal.def(self, '$add?', $Set_add$ques$25 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, $Set_add$ques$25.$$arity = 1);
    
    Opal.def(self, '$each', $Set_each$26 = function $$each() {
      var $iter = $Set_each$26.$$p, block = $iter || nil, self = this;

      if ($iter) $Set_each$26.$$p = null;
      
      
      if ($iter) $Set_each$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, $Set_each$26.$$arity = 0);
    
    Opal.def(self, '$empty?', $Set_empty$ques$27 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, $Set_empty$ques$27.$$arity = 0);
    
    Opal.def(self, '$eql?', $Set_eql$ques$28 = function(other) {
      var $$29, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$29 = function(){var self = $$29.$$s == null ? this : $$29.$$s;
        if (self.hash == null) self.hash = nil;

        return self.hash}, $$29.$$s = self, $$29.$$arity = 0, $$29)))
    }, $Set_eql$ques$28.$$arity = 1);
    
    Opal.def(self, '$clear', $Set_clear$30 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, $Set_clear$30.$$arity = 0);
    
    Opal.def(self, '$include?', $Set_include$ques$31 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, $Set_include$ques$31.$$arity = 1);
    $alias(self, "member?", "include?");
    
    Opal.def(self, '$merge', $Set_merge$32 = function $$merge(enum$) {
      var $$33, self = this;

      
      $send(enum$, 'each', [], ($$33 = function(item){var self = $$33.$$s == null ? this : $$33.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$add(item);}, $$33.$$s = self, $$33.$$arity = 1, $$33));
      return self;
    }, $Set_merge$32.$$arity = 1);
    
    Opal.def(self, '$replace', $Set_replace$34 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, $Set_replace$34.$$arity = 1);
    
    Opal.def(self, '$size', $Set_size$35 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, $Set_size$35.$$arity = 0);
    $alias(self, "length", "size");
    
    Opal.def(self, '$subtract', $Set_subtract$36 = function $$subtract(enum$) {
      var $$37, self = this;

      
      $send(enum$, 'each', [], ($$37 = function(item){var self = $$37.$$s == null ? this : $$37.$$s;

        
        
        if (item == null) {
          item = nil;
        };
        return self.$delete(item);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
      return self;
    }, $Set_subtract$36.$$arity = 1);
    
    Opal.def(self, '$|', $Set_$$38 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, $Set_$$38.$$arity = 1);
    
    Opal.def(self, '$superset?', $Set_superset$ques$39 = function(set) {
      var $$40, self = this, $ret_or_2 = nil;

      
      if ($truthy(($ret_or_2 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_2
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$40 = function(o){var self = $$40.$$s == null ? this : $$40.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$40.$$s = self, $$40.$$arity = 1, $$40));
    }, $Set_superset$ques$39.$$arity = 1);
    $alias(self, ">=", "superset?");
    
    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$41 = function(set) {
      var $$42, self = this, $ret_or_3 = nil;

      
      if ($truthy(($ret_or_3 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_3
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], ($$42 = function(o){var self = $$42.$$s == null ? this : $$42.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return self['$include?'](o);}, $$42.$$s = self, $$42.$$arity = 1, $$42));
    }, $Set_proper_superset$ques$41.$$arity = 1);
    $alias(self, ">", "proper_superset?");
    
    Opal.def(self, '$subset?', $Set_subset$ques$43 = function(set) {
      var $$44, self = this, $ret_or_4 = nil;

      
      if ($truthy(($ret_or_4 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_4
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$44 = function(o){var self = $$44.$$s == null ? this : $$44.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$44.$$s = self, $$44.$$arity = 1, $$44));
    }, $Set_subset$ques$43.$$arity = 1);
    $alias(self, "<=", "subset?");
    
    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$45 = function(set) {
      var $$46, self = this, $ret_or_5 = nil;

      
      if ($truthy(($ret_or_5 = set['$is_a?']($$($nesting, 'Set'))))) {
        $ret_or_5
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], ($$46 = function(o){var self = $$46.$$s == null ? this : $$46.$$s;

        
        
        if (o == null) {
          o = nil;
        };
        return set['$include?'](o);}, $$46.$$s = self, $$46.$$arity = 1, $$46));
    }, $Set_proper_subset$ques$45.$$arity = 1);
    $alias(self, "<", "proper_subset?");
    
    Opal.def(self, '$intersect?', $Set_intersect$ques$47 = function(set) {
      var $$48, $$49, self = this;

      
      if ($truthy(set['$is_a?']($$($nesting, 'Set')))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "value must be a set")
      };
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], ($$48 = function(o){var self = $$48.$$s == null ? this : $$48.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return set['$include?'](o);}, $$48.$$s = self, $$48.$$arity = 1, $$48))
      } else {
        return $send(set, 'any?', [], ($$49 = function(o){var self = $$49.$$s == null ? this : $$49.$$s;

          
          
          if (o == null) {
            o = nil;
          };
          return self['$include?'](o);}, $$49.$$s = self, $$49.$$arity = 1, $$49))
      };
    }, $Set_intersect$ques$47.$$arity = 1);
    
    Opal.def(self, '$disjoint?', $Set_disjoint$ques$50 = function(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, $Set_disjoint$ques$50.$$arity = 1);
    $alias(self, "+", "|");
    $alias(self, "union", "|");
    return (Opal.def(self, '$to_a', $Set_to_a$51 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, $Set_to_a$51.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$52;

    return (Opal.def(self, '$to_set', $Enumerable_to_set$52 = function $$to_set($a, $b) {
      var $iter = $Enumerable_to_set$52.$$p, block = $iter || nil, $post_args, klass, args, self = this;

      if ($iter) $Enumerable_to_set$52.$$p = null;
      
      
      if ($iter) $Enumerable_to_set$52.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'Set');
      };
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerable_to_set$52.$$arity = -1), nil) && 'to_set'
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["ast/node"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_sym', '$freeze', '$to_a', '$assign_properties', '$hash', '$class', '$eql?', '$type', '$children', '$each', '$instance_variable_set', '$protected', '$private', '$==', '$nil?', '$original_dup', '$send', '$equal?', '$respond_to?', '$to_ast', '$updated', '$+', '$*', '$fancy_type', '$is_a?', '$to_sexp', '$inspect', '$map', '$to_sexp_array', '$gsub', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $Node_initialize$1, $Node_eql$ques$2, $Node_assign_properties$3, $Node_dup$5, $Node_updated$6, $Node_$eq_eq$7, $Node_concat$8, $Node_append$9, $Node_to_sexp$10, $Node_inspect$12, $Node_to_ast$14, $Node_to_sexp_array$15, $Node_deconstruct$17, $Node_fancy_type$18;

      self.$$prototype.type = self.$$prototype.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      $alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      Opal.def(self, '$initialize', $Node_initialize$1 = function $$initialize(type, children, properties) {
        var $a, self = this;

        
        
        if (children == null) {
          children = [];
        };
        
        if (properties == null) {
          properties = $hash2([], {});
        };
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, $Node_initialize$1.$$arity = -2);
      
      Opal.def(self, '$eql?', $Node_eql$ques$2 = function(other) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.$class()['$eql?'](other.$class())))) {
          return self.type['$eql?'](other.$type())
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return self.children['$eql?'](other.$children())
        } else {
          return $ret_or_1
        }
      }, $Node_eql$ques$2.$$arity = 1);
      
      Opal.def(self, '$assign_properties', $Node_assign_properties$3 = function $$assign_properties(properties) {
        var $$4, self = this;

        
        $send(properties, 'each', [], ($$4 = function(name, value){var self = $$4.$$s == null ? this : $$4.$$s;

          
          
          if (name == null) {
            name = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return self.$instance_variable_set("" + "@" + (name), value);}, $$4.$$s = self, $$4.$$arity = 2, $$4));
        return nil;
      }, $Node_assign_properties$3.$$arity = 1);
      self.$protected("assign_properties");
      $alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      Opal.def(self, '$dup', $Node_dup$5 = function $$dup() {
        var self = this;

        return self
      }, $Node_dup$5.$$arity = 0);
      $alias(self, "clone", "dup");
      
      Opal.def(self, '$updated', $Node_updated$6 = function $$updated(type, children, properties) {
        var self = this, new_type = nil, $ret_or_3 = nil, new_children = nil, $ret_or_4 = nil, new_properties = nil, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil, copy = nil;

        
        
        if (type == null) {
          type = nil;
        };
        
        if (children == null) {
          children = nil;
        };
        
        if (properties == null) {
          properties = nil;
        };
        new_type = (function() {if ($truthy(($ret_or_3 = type))) {
          return $ret_or_3
        } else {
          return self.type
        }; return nil; })();
        new_children = (function() {if ($truthy(($ret_or_4 = children))) {
          return $ret_or_4
        } else {
          return self.children
        }; return nil; })();
        new_properties = (function() {if ($truthy(($ret_or_5 = properties))) {
          return $ret_or_5
        } else {
          return $hash2([], {})
        }; return nil; })();
        if ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = self.type['$=='](new_type)))) {
          return self.children['$=='](new_children)
        } else {
          return $ret_or_7
        }; return nil; })()))) {
          return properties['$nil?']()
        } else {
          return $ret_or_6
        }; return nil; })())) {
          return self
        } else {
          
          copy = self.$original_dup();
          copy.$send("initialize", new_type, new_children, new_properties);
          return copy;
        };
      }, $Node_updated$6.$$arity = -1);
      
      Opal.def(self, '$==', $Node_$eq_eq$7 = function(other) {
        var self = this, $ret_or_8 = nil;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          if ($truthy(($ret_or_8 = other.$type()['$=='](self.$type())))) {
            return other.$children()['$=='](self.$children())
          } else {
            return $ret_or_8
          };
        } else {
          return false
        }
      }, $Node_$eq_eq$7.$$arity = 1);
      
      Opal.def(self, '$concat', $Node_concat$8 = function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      }, $Node_concat$8.$$arity = 1);
      $alias(self, "+", "concat");
      
      Opal.def(self, '$append', $Node_append$9 = function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      }, $Node_append$9.$$arity = 1);
      $alias(self, "<<", "append");
      
      Opal.def(self, '$to_sexp', $Node_to_sexp$10 = function $$to_sexp(indent) {
        var $$11, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

          
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + " " + (child.$inspect())))
          };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_to_sexp$10.$$arity = -1);
      $alias(self, "to_s", "to_sexp");
      
      Opal.def(self, '$inspect', $Node_inspect$12 = function $$inspect(indent) {
        var $$13, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], ($$13 = function(child){var self = $$13.$$s == null ? this : $$13.$$s;

          
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + ", " + (child.$inspect())))
          };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_inspect$12.$$arity = -1);
      
      Opal.def(self, '$to_ast', $Node_to_ast$14 = function $$to_ast() {
        var self = this;

        return self
      }, $Node_to_ast$14.$$arity = 0);
      
      Opal.def(self, '$to_sexp_array', $Node_to_sexp_array$15 = function $$to_sexp_array() {
        var $$16, self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], ($$16 = function(child){var self = $$16.$$s == null ? this : $$16.$$s;

          
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        return [self.$type()].concat(Opal.to_a(children_sexp_arrs));
      }, $Node_to_sexp_array$15.$$arity = 0);
      
      Opal.def(self, '$deconstruct', $Node_deconstruct$17 = function $$deconstruct() {
        var self = this;

        return [self.$type()].concat(Opal.to_a(self.$children()))
      }, $Node_deconstruct$17.$$arity = 0);
      self.$protected();
      return (Opal.def(self, '$fancy_type', $Node_fancy_type$18 = function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      }, $Node_fancy_type$18.$$arity = 0), nil) && 'fancy_type';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["ast/processor/mixin"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$to_ast', '$type', '$respond_to?', '$send', '$handler_missing', '$map', '$to_a', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Mixin');

        var $nesting = [self].concat($parent_nesting), $Mixin_process$1, $Mixin_process_all$2, $Mixin_handler_missing$4;

        
        
        Opal.def(self, '$process', $Mixin_process$1 = function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil};
          node = node.$to_ast();
          on_handler = "" + "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node};
          return node;
        }, $Mixin_process$1.$$arity = 1);
        
        Opal.def(self, '$process_all', $Mixin_process_all$2 = function $$process_all(nodes) {
          var $$3, self = this;

          return $send(nodes.$to_a(), 'map', [], ($$3 = function(node){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (node == null) {
              node = nil;
            };
            return self.$process(node);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Mixin_process_all$2.$$arity = 1);
        return (Opal.def(self, '$handler_missing', $Mixin_handler_missing$4 = function $$handler_missing(node) {
          var self = this;

          return nil
        }, $Mixin_handler_missing$4.$$arity = 1), nil) && 'handler_missing';
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("ast/processor/mixin");
      return self.$include($$($nesting, 'Mixin'));
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["ast/sexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Sexp');

      var $nesting = [self].concat($parent_nesting), $Sexp_s$1;

      return (Opal.def(self, '$s', $Sexp_s$1 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$($nesting, 'Node').$new(type, children);
      }, $Sexp_s$1.$$arity = -2), nil) && 's'
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["ast"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$require']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("ast/node");
    self.$require("ast/processor");
    return self.$require("ast/sexp");
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/ast/node"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$[]', '$frozen?', '$dup', '$node=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1;

        
        self.$attr_reader("location");
        $alias(self, "loc", "location");
        return (Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var self = this, location = nil, $writer = nil;

          if ($truthy((location = properties['$[]']("location")))) {
            
            if ($truthy(location['$frozen?']())) {
              location = location.$dup()};
            
            $writer = [self];
            $send(location, 'node=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (self.location = location);
          } else {
            return nil
          }
        }, $Node_assign_properties$1.$$arity = 1), nil) && 'assign_properties';
      })($nesting[0], $$$($$$('::', 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/ast/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$attr_reader', '$[]', '$frozen?', '$dup', '$merge!', '$loc', '$line', '$column']);
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1, $Node_line$2, $Node_column$3;

        self.$$prototype.meta = nil;
        
        self.$attr_reader("meta");
        
        Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var $iter = $Node_assign_properties$1.$$p, $yield = $iter || nil, self = this, meta = nil, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Node_assign_properties$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()};
            self.meta['$merge!'](meta);
          } else {
            self.meta = (function() {if ($truthy(($ret_or_1 = self.meta))) {
              return $ret_or_1
            } else {
              return $hash2([], {})
            }; return nil; })()
          };
          return $send2(self, $find_super(self, 'assign_properties', $Node_assign_properties$1, false, true), 'assign_properties', $zuper, $iter);
        }, $Node_assign_properties$1.$$arity = 1);
        
        Opal.def(self, '$line', $Node_line$2 = function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        }, $Node_line$2.$$arity = 0);
        return (Opal.def(self, '$column', $Node_column$3 = function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        }, $Node_column$3.$$arity = 0), nil) && 'column';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, self = this, $ret_or_1 = nil, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = (function() {if ($truthy(($ret_or_1 = self.racc_debug_out))) {
            return $ret_or_1
          } else {
            return $gvars.stderr
          }; return nil; })();};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s, $c, $d, $e, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = (function() {if ($truthy(($ret_or_2 = token_table['$[]'](tok)))) {
                      return $ret_or_2
                    } else {
                      return 1
                    }; return nil; })()
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = $rb_ge(i, 0)))) {
                return (act = action_table['$[]'](i))
              } else {
                return $ret_or_4
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_3
              }; return nil; })())) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

          
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s == null ? this : $$11.$$s, $e, $f, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil, $ret_or_8 = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = (function() {if ($truthy(($ret_or_5 = token_table['$[]'](tok)))) {
                return $ret_or_5
              } else {
                return 1
              }; return nil; })()
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = $rb_ge(i, 0)))) {
              return (act = action_table['$[]'](i))
            } else {
              return $ret_or_7
            }; return nil; })()))) {
              return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
            } else {
              return $ret_or_6
            }; return nil; })())) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy((function() {if ($truthy(($ret_or_8 = (function() {if ($truthy(($ret_or_9 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()))) {
              return $ret_or_9
            } else {
              return self.racc_read_next['$!']()
            }; return nil; })()))) {
              return $ret_or_8
            } else {
              return self.racc_t['$=='](0)
            }; return nil; })())) {
              
              if ($truthy((function() {if ($truthy(($ret_or_10 = (function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = i))) {
                return (i = $rb_plus(i, self.racc_t))
              } else {
                return $ret_or_13
              }; return nil; })()))) {
                return $rb_ge(i, 0)
              } else {
                return $ret_or_12
              }; return nil; })()))) {
                return (act = action_table['$[]'](i))
              } else {
                return $ret_or_11
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_10
              }; return nil; })())) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, $ret_or_14 = nil, $ret_or_15 = nil, code = nil, $case = nil, i = nil, $ret_or_16 = nil, $ret_or_17 = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy((function() {if ($truthy(($ret_or_14 = $rb_gt(act, 0)))) {
          return $rb_lt(act, shift_n)
        } else {
          return $ret_or_14
        }; return nil; })())) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy((function() {if ($truthy(($ret_or_15 = $rb_lt(act, 0)))) {
          return $rb_gt(act, reduce_n['$-@']())
        } else {
          return $ret_or_15
        }; return nil; })())) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.racc_state == null) self.racc_state = nil;

            
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy((function() {if ($truthy(($ret_or_16 = (function() {if ($truthy(($ret_or_17 = $rb_ge(i, 0)))) {
                
                return (act = action_table['$[]'](i));
              } else {
                return $ret_or_17
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_16
              }; return nil; })())) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, $ret_or_18 = nil, $ret_or_19 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy((function() {if ($truthy(($ret_or_18 = (function() {if ($truthy(($ret_or_19 = $rb_ge(i, 0)))) {
            
            return (curstate = goto_table['$[]'](i));
          } else {
            return $ret_or_19
          }; return nil; })()))) {
            return goto_check['$[]'](i)['$=='](k1)
          } else {
            return $ret_or_18
          }; return nil; })())) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var self = this, $ret_or_20 = nil;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), (function() {if ($truthy(($ret_or_20 = self.$token_to_str(t)))) {
          return $ret_or_20
        } else {
          return "?"
        }; return nil; })()))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s == null ? this : $$22.$$s;

            
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s == null ? this : $$27.$$s;

          
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s == null ? this : $$29.$$s;

          
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var self = this, $ret_or_21 = nil;

        if ($truthy(($ret_or_21 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)))) {
          return $ret_or_21
        } else {
          return self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string")
        }
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'VERSION', "3.1.1.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$-', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParseError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting);
  if ($truthy((($a = $$$('::', 'ParseError', 'skip_raise')) ? 'constant' : nil))) {
  } else {
    Opal.const_set($nesting[0], 'ParseError', $$$($$($nesting, 'Racc'), 'ParseError'))
  };
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Racc');

    var $nesting = [self].concat($parent_nesting), $a;

    
    if ($truthy((($a = $$($nesting, 'Racc_No_Extensions', 'skip_raise')) ? 'constant' : nil))) {
    } else {
      Opal.const_set($nesting[0], 'Racc_No_Extensions', false)
    };
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Parser');

      var $nesting = [self].concat($parent_nesting), $Parser_racc_runtime_type$1, $Parser__racc_setup$2, $Parser__racc_init_sysvars$3, $Parser_do_parse$4, $Parser_next_token$5, $Parser__racc_do_parse_rb$6, $Parser_yyparse$8, $Parser__racc_yyparse_rb$9, $Parser__racc_evalact$12, $Parser__racc_do_reduce$14, $Parser_on_error$15, $Parser_yyerror$16, $Parser_yyaccept$17, $Parser_yyerrok$18, $Parser_racc_read_token$19, $Parser_racc_shift$20, $Parser_racc_reduce$21, $Parser_racc_accept$23, $Parser_racc_e_pop$24, $Parser_racc_next_state$25, $Parser_racc_print_stacks$26, $Parser_racc_print_states$28, $Parser_racc_token2str$30, $Parser_token_to_str$31;

      self.$$prototype.yydebug = self.$$prototype.racc_debug_out = self.$$prototype.racc_error_status = self.$$prototype.racc_t = self.$$prototype.racc_vstack = self.$$prototype.racc_val = self.$$prototype.racc_state = self.$$prototype.racc_tstack = nil;
      
      Opal.const_set($nesting[0], 'Racc_Runtime_Version', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version_R', "1.4.6");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));
      Opal.const_set($nesting[0], 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");
      Opal.const_set($nesting[0], 'Racc_YY_Parse_Method', "_racc_yyparse_rb");
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Version', $$($nesting, 'Racc_Runtime_Core_Version_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Core_Revision', $$($nesting, 'Racc_Runtime_Core_Revision_R'));
      Opal.const_set($nesting[0], 'Racc_Runtime_Type', "ruby");
      Opal.defs($$($nesting, 'Parser'), '$racc_runtime_type', $Parser_racc_runtime_type$1 = function $$racc_runtime_type() {
        var self = this;

        return $$($nesting, 'Racc_Runtime_Type')
      }, $Parser_racc_runtime_type$1.$$arity = 0);
      
      Opal.def(self, '$_racc_setup', $Parser__racc_setup$2 = function $$_racc_setup() {
        var $a, $b, self = this, $ret_or_1 = nil, arg = nil, $writer = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        
        if ($truthy($$$(self.$class(), 'Racc_debug_parser'))) {
        } else {
          self.yydebug = false
        };
        if ($truthy((($a = self['yydebug'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        } else {
          self.yydebug = false
        };
        if ($truthy(self.yydebug)) {
          
          if ($truthy((($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {
          } else {
            self.racc_debug_out = $gvars.stderr
          };
          self.racc_debug_out = (function() {if ($truthy(($ret_or_1 = self.racc_debug_out))) {
            return $ret_or_1
          } else {
            return $gvars.stderr
          }; return nil; })();};
        arg = $$$(self.$class(), 'Racc_arg');
        if ($truthy($rb_lt(arg.$size(), 14))) {
          
          $writer = [13, true];
          $send(arg, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return arg;
      }, $Parser__racc_setup$2.$$arity = 0);
      
      Opal.def(self, '$_racc_init_sysvars', $Parser__racc_init_sysvars$3 = function $$_racc_init_sysvars() {
        var self = this;

        
        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return (self.racc_error_status = 0);
      }, $Parser__racc_init_sysvars$3.$$arity = 0);
      
      Opal.def(self, '$do_parse', $Parser_do_parse$4 = function $$do_parse() {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_Main_Parsing_Routine'), self.$_racc_setup(), false)
      }, $Parser_do_parse$4.$$arity = 0);
      
      Opal.def(self, '$next_token', $Parser_next_token$5 = function $$next_token() {
        var self = this;

        return self.$raise($$($nesting, 'NotImplementedError'), "" + (self.$class()) + "#next_token is not defined")
      }, $Parser_next_token$5.$$arity = 0);
      
      Opal.def(self, '$_racc_do_parse_rb', $Parser__racc_do_parse_rb$6 = function $$_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, $$7, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        tok = (act = (i = nil));
        return $send(self, 'catch', ["racc_end_parse"], ($$7 = function(){var self = $$7.$$s == null ? this : $$7.$$s, $c, $d, $e, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              if ($truthy(self.racc_read_next)) {
                if ($truthy(self.racc_t['$!='](0))) {
                  
                  $e = self.$next_token(), $d = Opal.to_ary($e), (tok = ($d[0] == null ? nil : $d[0])), (self.racc_val = ($d[1] == null ? nil : $d[1])), $e;
                  if ($truthy(tok)) {
                    self.racc_t = (function() {if ($truthy(($ret_or_2 = token_table['$[]'](tok)))) {
                      return $ret_or_2
                    } else {
                      return 1
                    }; return nil; })()
                  } else {
                    self.racc_t = 0
                  };
                  if ($truthy(self.yydebug)) {
                    self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                  self.racc_read_next = false;}};
              i = $rb_plus(i, self.racc_t);
              if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = $rb_ge(i, 0)))) {
                return (act = action_table['$[]'](i))
              } else {
                return $ret_or_4
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_3
              }; return nil; })())) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
          }}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      }, $Parser__racc_do_parse_rb$6.$$arity = 2);
      
      Opal.def(self, '$yyparse', $Parser_yyparse$8 = function $$yyparse(recv, mid) {
        var self = this;

        return self.$__send__($$($nesting, 'Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true)
      }, $Parser_yyparse$8.$$arity = 2);
      
      Opal.def(self, '$_racc_yyparse_rb', $Parser__racc_yyparse_rb$9 = function $$_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, $$10, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (action_default = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (token_table = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return $send(self, 'catch', ["racc_end_parse"], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $c, $d, $$11;
          if (self.racc_state == null) self.racc_state = nil;

          
          while (!($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1)))))) {
            while ($truthy((act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)))) {
              
            }
          };
          return $send(recv, '__send__', [mid], ($$11 = function(tok, val){var self = $$11.$$s == null ? this : $$11.$$s, $e, $f, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil, $ret_or_8 = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;

            
            
            if (tok == null) {
              tok = nil;
            };
            
            if (val == null) {
              val = nil;
            };
            if ($truthy(tok)) {
              self.racc_t = (function() {if ($truthy(($ret_or_5 = token_table['$[]'](tok)))) {
                return $ret_or_5
              } else {
                return 1
              }; return nil; })()
            } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = $rb_ge(i, 0)))) {
              return (act = action_table['$[]'](i))
            } else {
              return $ret_or_7
            }; return nil; })()))) {
              return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
            } else {
              return $ret_or_6
            }; return nil; })())) {
            } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ($truthy((act = self.$_racc_evalact(act, arg)))) {
              
            };
            while ($truthy((function() {if ($truthy(($ret_or_8 = (function() {if ($truthy(($ret_or_9 = (i = action_pointer['$[]'](self.racc_state['$[]'](-1)))['$!']()))) {
              return $ret_or_9
            } else {
              return self.racc_read_next['$!']()
            }; return nil; })()))) {
              return $ret_or_8
            } else {
              return self.racc_t['$=='](0)
            }; return nil; })())) {
              
              if ($truthy((function() {if ($truthy(($ret_or_10 = (function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = i))) {
                return (i = $rb_plus(i, self.racc_t))
              } else {
                return $ret_or_13
              }; return nil; })()))) {
                return $rb_ge(i, 0)
              } else {
                return $ret_or_12
              }; return nil; })()))) {
                return (act = action_table['$[]'](i))
              } else {
                return $ret_or_11
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_10
              }; return nil; })())) {
              } else {
                act = action_default['$[]'](self.racc_state['$[]'](-1))
              };
              while ($truthy((act = self.$_racc_evalact(act, arg)))) {
                
              };
            };}, $$11.$$s = self, $$11.$$arity = 2, $$11));}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      }, $Parser__racc_yyparse_rb$9.$$arity = 4);
      
      Opal.def(self, '$_racc_evalact', $Parser__racc_evalact$12 = function $$_racc_evalact(act, arg) {
        var $a, $b, $$13, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, $ret_or_14 = nil, $ret_or_15 = nil, code = nil, $case = nil, i = nil, $ret_or_16 = nil, $ret_or_17 = nil;

        
        $b = arg, $a = Opal.to_ary($b), (action_table = ($a[0] == null ? nil : $a[0])), (action_check = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (action_pointer = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), (_ = ($a[5] == null ? nil : $a[5])), (_ = ($a[6] == null ? nil : $a[6])), (_ = ($a[7] == null ? nil : $a[7])), (_ = ($a[8] == null ? nil : $a[8])), (_ = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (shift_n = ($a[11] == null ? nil : $a[11])), (reduce_n = ($a[12] == null ? nil : $a[12])), (_ = ($a[13] == null ? nil : $a[13])), (_ = ($a[14] == null ? nil : $a[14])), $b;
        if ($truthy((function() {if ($truthy(($ret_or_14 = $rb_gt(act, 0)))) {
          return $rb_lt(act, shift_n)
        } else {
          return $ret_or_14
        }; return nil; })())) {
          
          if ($truthy($rb_gt(self.racc_error_status, 0))) {
            if (self.racc_t['$=='](1)) {
            } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ($truthy(self.yydebug)) {
            
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ($truthy((function() {if ($truthy(($ret_or_15 = $rb_lt(act, 0)))) {
          return $rb_gt(act, reduce_n['$-@']())
        } else {
          return $ret_or_15
        }; return nil; })())) {
          
          code = $send(self, 'catch', ["racc_jump"], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.racc_state == null) self.racc_state = nil;

            
            self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          if ($truthy(code)) {
            $case = code;
            if ((1)['$===']($case)) {
            self.racc_user_yyerror = true;
            return reduce_n['$-@']();}
            else if ((2)['$===']($case)) {return shift_n}
            else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          
          if ($truthy(self.yydebug)) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          
          $case = self.racc_error_status;
          if ((0)['$===']($case)) {if ($truthy(arg['$[]'](21))) {
          } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}
          else if ((3)['$===']($case)) {
          if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ($truthy(true)) {
            
            if ($truthy((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))) {
              
              i = $rb_plus(i, 1);
              if ($truthy((function() {if ($truthy(($ret_or_16 = (function() {if ($truthy(($ret_or_17 = $rb_ge(i, 0)))) {
                
                return (act = action_table['$[]'](i));
              } else {
                return $ret_or_17
              }; return nil; })()))) {
                return action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1))
              } else {
                return $ret_or_16
              }; return nil; })())) {
                break;};};
            if ($truthy($rb_le(self.racc_state.$size(), 1))) {
              self.$throw("racc_end_parse", nil)};
            self.racc_state.$pop();
            self.racc_vstack.$pop();
            if ($truthy(self.yydebug)) {
              
              self.racc_tstack.$pop();
              self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};
          };
          return act;
        } else {
          self.$raise("" + "[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ($truthy(self.yydebug)) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, $Parser__racc_evalact$12.$$arity = 2);
      
      Opal.def(self, '$_racc_do_reduce', $Parser__racc_do_reduce$14 = function $$_racc_do_reduce(arg, act) {
        var $a, $b, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, $writer = nil, k1 = nil, $ret_or_18 = nil, $ret_or_19 = nil, curstate = nil;

        
        $b = arg, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (goto_table = ($a[4] == null ? nil : $a[4])), (goto_check = ($a[5] == null ? nil : $a[5])), (goto_default = ($a[6] == null ? nil : $a[6])), (goto_pointer = ($a[7] == null ? nil : $a[7])), (nt_base = ($a[8] == null ? nil : $a[8])), (reduce_table = ($a[9] == null ? nil : $a[9])), (_ = ($a[10] == null ? nil : $a[10])), (_ = ($a[11] == null ? nil : $a[11])), (_ = ($a[12] == null ? nil : $a[12])), (use_result = ($a[13] == null ? nil : $a[13])), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ($truthy(self.yydebug)) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ($truthy(self.yydebug)) {
          
          $writer = [len['$-@'](), len, void_array];
          $send(tstack, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [len['$-@'](), len, void_array];
        $send(vstack, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [len['$-@'](), len, void_array];
        $send(state, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(use_result)) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
        } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ($truthy(self.yydebug)) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ($truthy((i = goto_pointer['$[]'](k1)))) {
          
          i = $rb_plus(i, state['$[]'](-1));
          if ($truthy((function() {if ($truthy(($ret_or_18 = (function() {if ($truthy(($ret_or_19 = $rb_ge(i, 0)))) {
            
            return (curstate = goto_table['$[]'](i));
          } else {
            return $ret_or_19
          }; return nil; })()))) {
            return goto_check['$[]'](i)['$=='](k1)
          } else {
            return $ret_or_18
          }; return nil; })())) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, $Parser__racc_do_reduce$14.$$arity = 2);
      
      Opal.def(self, '$on_error', $Parser_on_error$15 = function $$on_error(t, val, vstack) {
        var self = this, $ret_or_20 = nil;

        return self.$raise($$($nesting, 'ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), (function() {if ($truthy(($ret_or_20 = self.$token_to_str(t)))) {
          return $ret_or_20
        } else {
          return "?"
        }; return nil; })()))
      }, $Parser_on_error$15.$$arity = 3);
      
      Opal.def(self, '$yyerror', $Parser_yyerror$16 = function $$yyerror() {
        var self = this;

        return self.$throw("racc_jump", 1)
      }, $Parser_yyerror$16.$$arity = 0);
      
      Opal.def(self, '$yyaccept', $Parser_yyaccept$17 = function $$yyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2)
      }, $Parser_yyaccept$17.$$arity = 0);
      
      Opal.def(self, '$yyerrok', $Parser_yyerrok$18 = function $$yyerrok() {
        var self = this;

        return (self.racc_error_status = 0)
      }, $Parser_yyerrok$18.$$arity = 0);
      
      Opal.def(self, '$racc_read_token', $Parser_racc_read_token$19 = function $$racc_read_token(t, tok, val) {
        var self = this;

        
        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, $Parser_racc_read_token$19.$$arity = 3);
      
      Opal.def(self, '$racc_shift', $Parser_racc_shift$20 = function $$racc_shift(tok, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_shift$20.$$arity = 3);
      
      Opal.def(self, '$racc_reduce', $Parser_racc_reduce$21 = function $$racc_reduce(toks, sim, tstack, vstack) {
        var $$22, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("reduce ");
        if ($truthy(toks['$empty?']())) {
          out.$print(" <none>")
        } else {
          $send(toks, 'each', [], ($$22 = function(t){var self = $$22.$$s == null ? this : $$22.$$s;

            
            
            if (t == null) {
              t = nil;
            };
            return out.$print(" ", self.$racc_token2str(t));}, $$22.$$s = self, $$22.$$arity = 1, $$22))
        };
        out.$puts("" + " --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_reduce$21.$$arity = 4);
      
      Opal.def(self, '$racc_accept', $Parser_racc_accept$23 = function $$racc_accept() {
        var self = this;

        
        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, $Parser_racc_accept$23.$$arity = 0);
      
      Opal.def(self, '$racc_e_pop', $Parser_racc_e_pop$24 = function $$racc_e_pop(state, tstack, vstack) {
        var self = this;

        
        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_e_pop$24.$$arity = 3);
      
      Opal.def(self, '$racc_next_state', $Parser_racc_next_state$25 = function $$racc_next_state(curstate, state) {
        var self = this;

        
        self.racc_debug_out.$puts("" + "goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, $Parser_racc_next_state$25.$$arity = 2);
      
      Opal.def(self, '$racc_print_stacks', $Parser_racc_print_stacks$26 = function $$racc_print_stacks(t, v) {
        var $$27, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(t, 'each_index', [], ($$27 = function(i){var self = $$27.$$s == null ? this : $$27.$$s;

          
          
          if (i == null) {
            i = nil;
          };
          return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")");}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        return out.$puts(" ]");
      }, $Parser_racc_print_stacks$26.$$arity = 2);
      
      Opal.def(self, '$racc_print_states', $Parser_racc_print_states$28 = function $$racc_print_states(s) {
        var $$29, self = this, out = nil;

        
        out = self.racc_debug_out;
        out.$print("        [");
        $send(s, 'each', [], ($$29 = function(st){var self = $$29.$$s == null ? this : $$29.$$s;

          
          
          if (st == null) {
            st = nil;
          };
          return out.$print(" ", st);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        return out.$puts(" ]");
      }, $Parser_racc_print_states$28.$$arity = 1);
      
      Opal.def(self, '$racc_token2str', $Parser_racc_token2str$30 = function $$racc_token2str(tok) {
        var self = this, $ret_or_21 = nil;

        if ($truthy(($ret_or_21 = $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](tok)))) {
          return $ret_or_21
        } else {
          return self.$raise("" + "[Racc Bug] can't convert token " + (tok) + " to string")
        }
      }, $Parser_racc_token2str$30.$$arity = 1);
      return (Opal.def(self, '$token_to_str', $Parser_token_to_str$31 = function $$token_to_str(t) {
        var self = this;

        return $$$(self.$class(), 'Racc_token_to_s_table')['$[]'](t)
      }, $Parser_token_to_str$31.$$arity = 1), nil) && 'token_to_str';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/messages"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$[]', '$===', '$empty?', '$format']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'MESSAGES', $hash2(["unicode_point_too_large", "invalid_escape", "incomplete_escape", "invalid_hex_escape", "invalid_unicode_escape", "unterminated_unicode", "escape_eof", "string_eof", "regexp_options", "cvar_name", "ivar_name", "trailing_in_number", "empty_numeric", "invalid_octal", "no_dot_digit_literal", "bare_backslash", "unexpected", "embedded_document", "heredoc_id_has_newline", "heredoc_id_ends_with_nl", "unterminated_heredoc_id", "invalid_escape_use", "ambiguous_literal", "ambiguous_regexp", "ambiguous_prefix", "triple_dot_at_eol", "nth_ref_alias", "begin_in_method", "backref_assignment", "invalid_assignment", "module_name_const", "unexpected_token", "argument_const", "argument_ivar", "argument_gvar", "argument_cvar", "duplicate_argument", "empty_symbol", "odd_hash", "singleton_literal", "dynamic_const", "const_reassignment", "module_in_def", "class_in_def", "unexpected_percent_str", "block_and_blockarg", "masgn_as_condition", "block_given_to_yield", "invalid_regexp", "invalid_return", "csend_in_lhs_of_masgn", "cant_assign_to_numparam", "reserved_for_numparam", "ordinary_param_defined", "numparam_used_in_outer_scope", "circular_argument_reference", "pm_interp_in_var_name", "lvar_name", "undefined_lvar", "duplicate_variable_name", "duplicate_pattern_key", "endless_setter", "invalid_id_to_get", "forward_arg_after_restarg", "no_anonymous_blockarg", "useless_else", "duplicate_hash_key", "invalid_encoding", "invalid_action", "clobbered", "different_replacements", "swallowed_insertions", "swallowed_insertions_conflict", "crossing_deletions", "crossing_deletions_conflict", "crossing_insertions", "crossing_insertions_conflict"], {"unicode_point_too_large": "invalid Unicode codepoint (too large)", "invalid_escape": "invalid escape character syntax", "incomplete_escape": "incomplete character syntax", "invalid_hex_escape": "invalid hex escape", "invalid_unicode_escape": "invalid Unicode escape", "unterminated_unicode": "unterminated Unicode escape", "escape_eof": "escape sequence meets end of file", "string_eof": "unterminated string meets end of file", "regexp_options": "unknown regexp options: %{options}", "cvar_name": "`%{name}' is not allowed as a class variable name", "ivar_name": "`%{name}' is not allowed as an instance variable name", "trailing_in_number": "trailing `%{character}' in number", "empty_numeric": "numeric literal without digits", "invalid_octal": "invalid octal digit", "no_dot_digit_literal": "no .<digit> floating literal anymore; put 0 before dot", "bare_backslash": "bare backslash only allowed before newline", "unexpected": "unexpected `%{character}'", "embedded_document": "embedded document meets end of file (and they embark on a romantic journey)", "heredoc_id_has_newline": "here document identifier across newlines, never match", "heredoc_id_ends_with_nl": "here document identifier ends with a newline", "unterminated_heredoc_id": "unterminated heredoc id", "invalid_escape_use": "invalid character syntax; use ?%{escape}", "ambiguous_literal": "ambiguous first argument; put parentheses or a space even after the operator", "ambiguous_regexp": "ambiguity between regexp and two divisions: wrap regexp in parentheses or add a space after `/' operator", "ambiguous_prefix": "`%{prefix}' interpreted as argument prefix", "triple_dot_at_eol": "... at EOL, should be parenthesized", "nth_ref_alias": "cannot define an alias for a back-reference variable", "begin_in_method": "BEGIN in method", "backref_assignment": "cannot assign to a back-reference variable", "invalid_assignment": "cannot assign to a keyword", "module_name_const": "class or module name must be a constant literal", "unexpected_token": "unexpected token %{token}", "argument_const": "formal argument cannot be a constant", "argument_ivar": "formal argument cannot be an instance variable", "argument_gvar": "formal argument cannot be a global variable", "argument_cvar": "formal argument cannot be a class variable", "duplicate_argument": "duplicate argument name", "empty_symbol": "empty symbol literal", "odd_hash": "odd number of entries for a hash", "singleton_literal": "cannot define a singleton method for a literal", "dynamic_const": "dynamic constant assignment", "const_reassignment": "constant re-assignment", "module_in_def": "module definition in method body", "class_in_def": "class definition in method body", "unexpected_percent_str": "%{type}: unknown type of percent-literal", "block_and_blockarg": "both block argument and literal block are passed", "masgn_as_condition": "multiple assignment in conditional context", "block_given_to_yield": "block given to yield", "invalid_regexp": "%{message}", "invalid_return": "Invalid return in class/module body", "csend_in_lhs_of_masgn": "&. inside multiple assignment destination", "cant_assign_to_numparam": "cannot assign to numbered parameter %{name}", "reserved_for_numparam": "%{name} is reserved for numbered parameter", "ordinary_param_defined": "ordinary parameter is defined", "numparam_used_in_outer_scope": "numbered parameter is already used in an outer scope", "circular_argument_reference": "circular argument reference %{var_name}", "pm_interp_in_var_name": "symbol literal with interpolation is not allowed", "lvar_name": "`%{name}' is not allowed as a local variable name", "undefined_lvar": "no such local variable: `%{name}'", "duplicate_variable_name": "duplicate variable name %{name}", "duplicate_pattern_key": "duplicate hash pattern key %{name}", "endless_setter": "setter method cannot be defined in an endless method definition", "invalid_id_to_get": "identifier %{identifier} is not valid to get", "forward_arg_after_restarg": "... after rest argument", "no_anonymous_blockarg": "no anonymous block parameter", "useless_else": "else without rescue is useless", "duplicate_hash_key": "key is duplicated and overwritten", "invalid_encoding": "literal contains escape sequences incompatible with UTF-8", "invalid_action": "cannot %{action}", "clobbered": "clobbered by: %{action}", "different_replacements": "different replacements: %{replacement} vs %{other_replacement}", "swallowed_insertions": "this replacement:", "swallowed_insertions_conflict": "swallows some inner rewriting actions:", "crossing_deletions": "the deletion of:", "crossing_deletions_conflict": "is crossing:", "crossing_insertions": "the rewriting action on:", "crossing_insertions_conflict": "is crossing that on:"}).$freeze());
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Messages');

      var $nesting = [self].concat($parent_nesting), $Messages_compile$1;

      return (Opal.defs(self, '$compile', $Messages_compile$1 = function $$compile(reason, arguments$) {
        var self = this, template = nil, $ret_or_1 = nil;

        
        template = $$($nesting, 'MESSAGES')['$[]'](reason);
        if ($truthy((function() {if ($truthy(($ret_or_1 = $$($nesting, 'Hash')['$==='](arguments$)))) {
          return arguments$['$empty?']()
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return template};
        return self.$format(template, arguments$);
      }, $Messages_compile$1.$$arity = 2), nil) && 'compile'
    })($nesting[0], $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/deprecation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_writer', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Deprecation');

      var $nesting = [self].concat($parent_nesting), $Deprecation_warn_of_deprecation$1;

      
      self.$attr_writer("warned_of_deprecation");
      return (Opal.def(self, '$warn_of_deprecation', $Deprecation_warn_of_deprecation$1 = function $$warn_of_deprecation() {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;
        if (self.warned_of_deprecation == null) self.warned_of_deprecation = nil;

        return (self.warned_of_deprecation = (function() {if ($truthy(($ret_or_1 = self.warned_of_deprecation))) {
          return $ret_or_1
        } else if ($truthy(($ret_or_2 = self.$warn($$$(self, 'DEPRECATION_WARNING'))))) {
          return $ret_or_2
        } else {
          return true
        }; return nil; })())
      }, $Deprecation_warn_of_deprecation$1.$$arity = 0), nil) && 'warn_of_deprecation';
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/ast/processor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$updated', '$process_all', '$on_var', '$!', '$nil?', '$process', '$on_vasgn', '$on_argument', '$is_a?', '$[]', '$children', '$process_regular_node', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $Processor_process_regular_node$1, $Processor_on_var$2, $Processor_process_variable_node$3, $Processor_on_vasgn$4, $Processor_process_var_asgn_node$5, $Processor_on_op_asgn$6, $Processor_on_const$7, $Processor_on_casgn$8, $Processor_on_argument$9, $Processor_process_argument_node$10, $Processor_on_procarg0$11, $Processor_on_def$12, $Processor_on_defs$13, $Processor_on_send$14, $Processor_on_numblock$15, $Processor_process_variable_node$16, $Processor_process_var_asgn_node$17, $Processor_process_argument_node$18, $Processor_on_empty_else$19;

        
        
        Opal.def(self, '$process_regular_node', $Processor_process_regular_node$1 = function $$process_regular_node(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node))
        }, $Processor_process_regular_node$1.$$arity = 1);
        $alias(self, "on_dstr", "process_regular_node");
        $alias(self, "on_dsym", "process_regular_node");
        $alias(self, "on_regexp", "process_regular_node");
        $alias(self, "on_xstr", "process_regular_node");
        $alias(self, "on_splat", "process_regular_node");
        $alias(self, "on_kwsplat", "process_regular_node");
        $alias(self, "on_array", "process_regular_node");
        $alias(self, "on_pair", "process_regular_node");
        $alias(self, "on_hash", "process_regular_node");
        $alias(self, "on_kwargs", "process_regular_node");
        $alias(self, "on_irange", "process_regular_node");
        $alias(self, "on_erange", "process_regular_node");
        
        Opal.def(self, '$on_var', $Processor_on_var$2 = function $$on_var(node) {
          var self = this;

          return node
        }, $Processor_on_var$2.$$arity = 1);
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$3 = function $$process_variable_node(node) {
          var self = this;

          return self.$on_var(node)
        }, $Processor_process_variable_node$3.$$arity = 1);
        $alias(self, "on_lvar", "process_variable_node");
        $alias(self, "on_ivar", "process_variable_node");
        $alias(self, "on_gvar", "process_variable_node");
        $alias(self, "on_cvar", "process_variable_node");
        $alias(self, "on_back_ref", "process_variable_node");
        $alias(self, "on_nth_ref", "process_variable_node");
        
        Opal.def(self, '$on_vasgn', $Processor_on_vasgn$4 = function $$on_vasgn(node) {
          var $a, self = this, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_vasgn$4.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$5 = function $$process_var_asgn_node(node) {
          var self = this;

          return self.$on_vasgn(node)
        }, $Processor_process_var_asgn_node$5.$$arity = 1);
        $alias(self, "on_lvasgn", "process_var_asgn_node");
        $alias(self, "on_ivasgn", "process_var_asgn_node");
        $alias(self, "on_gvasgn", "process_var_asgn_node");
        $alias(self, "on_cvasgn", "process_var_asgn_node");
        $alias(self, "on_and_asgn", "process_regular_node");
        $alias(self, "on_or_asgn", "process_regular_node");
        
        Opal.def(self, '$on_op_asgn', $Processor_on_op_asgn$6 = function $$on_op_asgn(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (var_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        }, $Processor_on_op_asgn$6.$$arity = 1);
        $alias(self, "on_mlhs", "process_regular_node");
        $alias(self, "on_masgn", "process_regular_node");
        
        Opal.def(self, '$on_const', $Processor_on_const$7 = function $$on_const(node) {
          var $a, self = this, scope_node = nil, name = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, [self.$process(scope_node), name]);
        }, $Processor_on_const$7.$$arity = 1);
        
        Opal.def(self, '$on_casgn', $Processor_on_casgn$8 = function $$on_casgn(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)])
          } else {
            return node.$updated(nil, [self.$process(scope_node), name])
          };
        }, $Processor_on_casgn$8.$$arity = 1);
        $alias(self, "on_args", "process_regular_node");
        
        Opal.def(self, '$on_argument', $Processor_on_argument$9 = function $$on_argument(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (arg_name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [arg_name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_argument$9.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$10 = function $$process_argument_node(node) {
          var self = this;

          return self.$on_argument(node)
        }, $Processor_process_argument_node$10.$$arity = 1);
        $alias(self, "on_arg", "process_argument_node");
        $alias(self, "on_optarg", "process_argument_node");
        $alias(self, "on_restarg", "process_argument_node");
        $alias(self, "on_blockarg", "process_argument_node");
        $alias(self, "on_shadowarg", "process_argument_node");
        $alias(self, "on_kwarg", "process_argument_node");
        $alias(self, "on_kwoptarg", "process_argument_node");
        $alias(self, "on_kwrestarg", "process_argument_node");
        $alias(self, "on_forward_arg", "process_argument_node");
        
        Opal.def(self, '$on_procarg0', $Processor_on_procarg0$11 = function $$on_procarg0(node) {
          var self = this;

          if ($truthy(node.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$on_argument(node)
          } else {
            return self.$process_regular_node(node)
          }
        }, $Processor_on_procarg0$11.$$arity = 1);
        $alias(self, "on_arg_expr", "process_regular_node");
        $alias(self, "on_restarg_expr", "process_regular_node");
        $alias(self, "on_blockarg_expr", "process_regular_node");
        $alias(self, "on_block_pass", "process_regular_node");
        $alias(self, "on_module", "process_regular_node");
        $alias(self, "on_class", "process_regular_node");
        $alias(self, "on_sclass", "process_regular_node");
        
        Opal.def(self, '$on_def', $Processor_on_def$12 = function $$on_def(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (args_node = ($a[1] == null ? nil : $a[1])), (body_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_def$12.$$arity = 1);
        
        Opal.def(self, '$on_defs', $Processor_on_defs$13 = function $$on_defs(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (definee_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (args_node = ($a[2] == null ? nil : $a[2])), (body_node = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_defs$13.$$arity = 1);
        $alias(self, "on_undef", "process_regular_node");
        $alias(self, "on_alias", "process_regular_node");
        
        Opal.def(self, '$on_send', $Processor_on_send$14 = function $$on_send(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          
          $a = [].concat(Opal.to_a(node)), (receiver_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (arg_nodes = $slice.call($a, 2)), $a;
          if ($truthy(receiver_node)) {
            receiver_node = self.$process(receiver_node)};
          return node.$updated(nil, [receiver_node, method_name].concat(Opal.to_a(self.$process_all(arg_nodes))));
        }, $Processor_on_send$14.$$arity = 1);
        $alias(self, "on_csend", "on_send");
        $alias(self, "on_index", "process_regular_node");
        $alias(self, "on_indexasgn", "process_regular_node");
        $alias(self, "on_block", "process_regular_node");
        $alias(self, "on_lambda", "process_regular_node");
        
        Opal.def(self, '$on_numblock', $Processor_on_numblock$15 = function $$on_numblock(node) {
          var $a, self = this, method_call = nil, max_numparam = nil, body = nil;

          
          $a = [].concat(Opal.to_a(node)), (method_call = ($a[0] == null ? nil : $a[0])), (max_numparam = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(method_call), max_numparam, self.$process(body)]);
        }, $Processor_on_numblock$15.$$arity = 1);
        $alias(self, "on_while", "process_regular_node");
        $alias(self, "on_while_post", "process_regular_node");
        $alias(self, "on_until", "process_regular_node");
        $alias(self, "on_until_post", "process_regular_node");
        $alias(self, "on_for", "process_regular_node");
        $alias(self, "on_return", "process_regular_node");
        $alias(self, "on_break", "process_regular_node");
        $alias(self, "on_next", "process_regular_node");
        $alias(self, "on_redo", "process_regular_node");
        $alias(self, "on_retry", "process_regular_node");
        $alias(self, "on_super", "process_regular_node");
        $alias(self, "on_yield", "process_regular_node");
        $alias(self, "on_defined?", "process_regular_node");
        $alias(self, "on_not", "process_regular_node");
        $alias(self, "on_and", "process_regular_node");
        $alias(self, "on_or", "process_regular_node");
        $alias(self, "on_if", "process_regular_node");
        $alias(self, "on_when", "process_regular_node");
        $alias(self, "on_case", "process_regular_node");
        $alias(self, "on_iflipflop", "process_regular_node");
        $alias(self, "on_eflipflop", "process_regular_node");
        $alias(self, "on_match_current_line", "process_regular_node");
        $alias(self, "on_match_with_lvasgn", "process_regular_node");
        $alias(self, "on_resbody", "process_regular_node");
        $alias(self, "on_rescue", "process_regular_node");
        $alias(self, "on_ensure", "process_regular_node");
        $alias(self, "on_begin", "process_regular_node");
        $alias(self, "on_kwbegin", "process_regular_node");
        $alias(self, "on_preexe", "process_regular_node");
        $alias(self, "on_postexe", "process_regular_node");
        $alias(self, "on_case_match", "process_regular_node");
        $alias(self, "on_in_match", "process_regular_node");
        $alias(self, "on_match_pattern", "process_regular_node");
        $alias(self, "on_match_pattern_p", "process_regular_node");
        $alias(self, "on_in_pattern", "process_regular_node");
        $alias(self, "on_if_guard", "process_regular_node");
        $alias(self, "on_unless_guard", "process_regular_node");
        $alias(self, "on_match_var", "process_variable_node");
        $alias(self, "on_match_rest", "process_regular_node");
        $alias(self, "on_pin", "process_regular_node");
        $alias(self, "on_match_alt", "process_regular_node");
        $alias(self, "on_match_as", "process_regular_node");
        $alias(self, "on_array_pattern", "process_regular_node");
        $alias(self, "on_array_pattern_with_tail", "process_regular_node");
        $alias(self, "on_hash_pattern", "process_regular_node");
        $alias(self, "on_const_pattern", "process_regular_node");
        $alias(self, "on_find_pattern", "process_regular_node");
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$16 = function $$process_variable_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_variable_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_var instead.");
          return self.$on_var(node);
        }, $Processor_process_variable_node$16.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$17 = function $$process_var_asgn_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_var_asgn_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_vasgn instead.");
          return self.$on_vasgn(node);
        }, $Processor_process_var_asgn_node$17.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$18 = function $$process_argument_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_argument_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_argument instead.");
          return self.$on_argument(node);
        }, $Processor_process_argument_node$18.$$arity = 1);
        return (Opal.def(self, '$on_empty_else', $Processor_on_empty_else$19 = function $$on_empty_else(node) {
          var self = this;

          return node
        }, $Processor_on_empty_else$19.$$arity = 1), nil) && 'on_empty_else';
      })($nesting[0], $$$($$$('::', 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/meta"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$freeze', '$to_set']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Meta');

      var $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'NODE_TYPES', ["true", "false", "nil", "int", "float", "str", "dstr", "sym", "dsym", "xstr", "regopt", "regexp", "array", "splat", "pair", "kwsplat", "hash", "irange", "erange", "self", "lvar", "ivar", "cvar", "gvar", "const", "defined?", "lvasgn", "ivasgn", "cvasgn", "gvasgn", "casgn", "mlhs", "masgn", "op_asgn", "and_asgn", "ensure", "rescue", "arg_expr", "or_asgn", "back_ref", "nth_ref", "match_with_lvasgn", "match_current_line", "module", "class", "sclass", "def", "defs", "undef", "alias", "args", "cbase", "arg", "optarg", "restarg", "blockarg", "block_pass", "kwarg", "kwoptarg", "kwrestarg", "kwnilarg", "send", "csend", "super", "zsuper", "yield", "block", "and", "not", "or", "if", "when", "case", "while", "until", "while_post", "until_post", "for", "break", "next", "redo", "return", "resbody", "kwbegin", "begin", "retry", "preexe", "postexe", "iflipflop", "eflipflop", "shadowarg", "complex", "rational", "__FILE__", "__LINE__", "__ENCODING__", "ident", "lambda", "indexasgn", "index", "procarg0", "restarg_expr", "blockarg_expr", "objc_kwarg", "objc_restarg", "objc_varargs", "numargs", "numblock", "forward_args", "forwarded_args", "forward_arg", "case_match", "in_match", "in_pattern", "match_var", "pin", "match_alt", "match_as", "match_rest", "array_pattern", "match_with_trailing_comma", "array_pattern_with_tail", "hash_pattern", "const_pattern", "if_guard", "unless_guard", "match_nil_pattern", "empty_else", "find_pattern", "kwargs", "match_pattern_p", "match_pattern"].$to_set().$freeze())
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/buffer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $enc = Opal.enc, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader', '$empty?', '$=~', '$start_with?', '$freeze', '$==', '$[]', '$nil?', '$!=', '$match', '$find', '$encoding', '$recognize_encoding', '$force_encoding', '$encode', '$to_s', '$source=', '$-', '$open', '$read', '$raise', '$frozen?', '$dup', '$reencode_string', '$class', '$valid_encoding?', '$name', '$raw_source=', '$gsub', '$!', '$ascii_only?', '$line_index_for_position', '$line_begins', '$+', '$to_a', '$lines', '$end_with?', '$<<', '$each', '$chomp!', '$fetch', '$source_lines', '$<', '$>=', '$size', '$new', '$source', '$source_range', '$private', '$index', '$bsearch', '$[]=', '$method_defined?', '$bsearch_index']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Buffer');

        var $nesting = [self].concat($parent_nesting), $Buffer_recognize_encoding$1, $Buffer_reencode_string$2, $Buffer_initialize$3, $Buffer_read$4, $Buffer_source$6, $Buffer_source$eq$7, $Buffer_raw_source$eq$8, $Buffer_slice$9, $Buffer_decompose_position$10, $Buffer_line_for_position$11, $Buffer_column_for_position$12, $Buffer_source_lines$13, $Buffer_source_line$15, $Buffer_line_range$16, $Buffer_source_range$17, $Buffer_last_line$18, $Buffer_freeze$19, $Buffer_inspect$20, $Buffer_line_begins$21, $Buffer_line_index_for_position$22, $Buffer_bsearch$23, $Buffer_bsearch$25;

        self.$$prototype.name = self.$$prototype.source = self.$$prototype.slice_source = self.$$prototype.first_line = self.$$prototype.lines = self.$$prototype.source_range = self.$$prototype.line_begins = self.$$prototype.line_index_for_position = self.$$prototype.line_range = nil;
        
        self.$attr_reader("name", "first_line");
        Opal.const_set($nesting[0], 'ENCODING_RE', Opal.regexp([$enc("[\\s#](en)?coding\\s*[:=]\\s*", "ASCII-8BIT"), $enc("(", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("(utf8-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+?)(-unix|-dos|-mac)", "ASCII-8BIT"), $enc("|", "ASCII-8BIT"), $enc("([A-Za-z0-9_-]+)", "ASCII-8BIT"), $enc(")", "ASCII-8BIT"), $enc("", "ASCII-8BIT")]));
        Opal.defs(self, '$recognize_encoding', $Buffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $a, $b, self = this, first_line = nil, second_line = nil, encoding_line = nil, $ret_or_1 = nil, result = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          
          if ($truthy(string['$empty?']())) {
            return nil};
          string['$=~'](/^(.*)\n?(.*\n)?/);
          $a = [(($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))], (first_line = $a[0]), (second_line = $a[1]), $a;
          if ($truthy(first_line['$start_with?']($enc("\xEF\xBB\xBF", "ASCII-8BIT").$freeze()))) {
            return $$$($$($nesting, 'Encoding'), 'UTF_8')
          } else if (first_line['$[]'](0, 2)['$==']($enc("#!", "ASCII-8BIT").$freeze())) {
            encoding_line = second_line
          } else {
            encoding_line = first_line
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = encoding_line['$nil?']()))) {
            return $ret_or_1
          } else {
            return encoding_line['$[]'](0)['$!=']($enc("#", "ASCII-8BIT"))
          }; return nil; })())) {
            return nil};
          if ($truthy((result = $$($nesting, 'ENCODING_RE').$match(encoding_line)))) {
            return $$($nesting, 'Encoding').$find((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = result['$[]'](3)))) {
              return $ret_or_3
            } else {
              return result['$[]'](4)
            }; return nil; })()))) {
              return $ret_or_2
            } else {
              return result['$[]'](6)
            }; return nil; })())
          } else {
            return nil
          };
        }, $Buffer_recognize_encoding$1.$$arity = 1);
        Opal.defs(self, '$reencode_string', $Buffer_reencode_string$2 = function $$reencode_string(input) {
          var self = this, original_encoding = nil, detected_encoding = nil;

          
          original_encoding = input.$encoding();
          detected_encoding = self.$recognize_encoding(input.$force_encoding($$$($$($nesting, 'Encoding'), 'BINARY')));
          if ($truthy(detected_encoding['$nil?']())) {
            return input.$force_encoding(original_encoding)
          } else if (detected_encoding['$==']($$$($$($nesting, 'Encoding'), 'BINARY'))) {
            return input
          } else {
            return input.$force_encoding(detected_encoding).$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))
          };
        }, $Buffer_reencode_string$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $Buffer_initialize$3 = function $$initialize(name, $a, $b) {
          var $post_args, $kwargs, first_line, source, self = this, $writer = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          $kwargs = Opal.extract_kwargs($post_args);
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          if ($post_args.length > 0) {
            first_line = $post_args[0];
            $post_args.splice(0, 1);
          }
          if (first_line == null) {
            first_line = 1;
          };
          
          source = $kwargs.$$smap["source"];
          if (source == null) {
            source = nil
          };
          self.name = name.$to_s();
          self.source = nil;
          self.first_line = first_line;
          self.lines = nil;
          self.line_begins = nil;
          self.slice_source = nil;
          self.line_index_for_position = $hash2([], {});
          if ($truthy(source)) {
            
            $writer = [source];
            $send(self, 'source=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $Buffer_initialize$3.$$arity = -2);
        
        Opal.def(self, '$read', $Buffer_read$4 = function $$read() {
          var $$5, self = this;

          
          $send($$($nesting, 'File'), 'open', [self.name, $enc("rb", "ASCII-8BIT")], ($$5 = function(io){var self = $$5.$$s == null ? this : $$5.$$s, $writer = nil;

            
            
            if (io == null) {
              io = nil;
            };
            $writer = [io.$read()];
            $send(self, 'source=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return self;
        }, $Buffer_read$4.$$arity = 0);
        
        Opal.def(self, '$source', $Buffer_source$6 = function $$source() {
          var self = this;

          
          if ($truthy(self.source['$nil?']())) {
            self.$raise($$($nesting, 'RuntimeError'), $enc("Cannot extract source from uninitialized Source::Buffer", "ASCII-8BIT"))};
          return self.source;
        }, $Buffer_source$6.$$arity = 0);
        
        Opal.def(self, '$source=', $Buffer_source$eq$7 = function(input) {
          var self = this, $writer = nil;

          
          if ($truthy(input['$frozen?']())) {
            input = input.$dup()};
          input = self.$class().$reencode_string(input);
          if ($truthy(input['$valid_encoding?']())) {
          } else {
            self.$raise($$($nesting, 'EncodingError'), "" + "invalid byte sequence in " + (input.$encoding().$name()))
          };
          
          $writer = [input];
          $send(self, 'raw_source=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $Buffer_source$eq$7.$$arity = 1);
        
        Opal.def(self, '$raw_source=', $Buffer_raw_source$eq$8 = function(input) {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil;

          
          if ($truthy(self.source)) {
            self.$raise($$($nesting, 'ArgumentError'), $enc("Source::Buffer is immutable", "ASCII-8BIT"))};
          self.source = input.$gsub($enc("\r\n", "ASCII-8BIT").$freeze(), $enc("\n", "ASCII-8BIT").$freeze()).$freeze();
          if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.source['$ascii_only?']()['$!']()))) {
            return self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'UTF_32LE'))
          } else {
            return $ret_or_5
          }; return nil; })()))) {
            return self.source.$encoding()['$!=']($$$($$($nesting, 'Encoding'), 'BINARY'))
          } else {
            return $ret_or_4
          }; return nil; })())) {
            return (self.slice_source = self.source.$encode($$$($$($nesting, 'Encoding'), 'UTF_32LE')))
          } else {
            return nil
          };
        }, $Buffer_raw_source$eq$8.$$arity = 1);
        
        Opal.def(self, '$slice', $Buffer_slice$9 = function $$slice(range) {
          var self = this;

          if ($truthy(self.slice_source['$nil?']())) {
            return self.source['$[]'](range)
          } else {
            return self.slice_source['$[]'](range).$encode(self.source.$encoding())
          }
        }, $Buffer_slice$9.$$arity = 1);
        
        Opal.def(self, '$decompose_position', $Buffer_decompose_position$10 = function $$decompose_position(position) {
          var self = this, line_index = nil, line_begin = nil;

          
          line_index = self.$line_index_for_position(position);
          line_begin = self.$line_begins()['$[]'](line_index);
          return [$rb_plus(self.first_line, line_index), $rb_minus(position, line_begin)];
        }, $Buffer_decompose_position$10.$$arity = 1);
        
        Opal.def(self, '$line_for_position', $Buffer_line_for_position$11 = function $$line_for_position(position) {
          var self = this;

          return $rb_plus(self.$line_index_for_position(position), self.first_line)
        }, $Buffer_line_for_position$11.$$arity = 1);
        
        Opal.def(self, '$column_for_position', $Buffer_column_for_position$12 = function $$column_for_position(position) {
          var self = this, line_index = nil;

          
          line_index = self.$line_index_for_position(position);
          return $rb_minus(position, self.$line_begins()['$[]'](line_index));
        }, $Buffer_column_for_position$12.$$arity = 1);
        
        Opal.def(self, '$source_lines', $Buffer_source_lines$13 = function $$source_lines() {
          var $$14, self = this, $ret_or_6 = nil, lines = nil;

          return (self.lines = (function() {if ($truthy(($ret_or_6 = self.lines))) {
            return $ret_or_6
          } else {
            
            lines = self.source.$lines().$to_a();
            if ($truthy(self.source['$end_with?']($enc("\n", "ASCII-8BIT").$freeze()))) {
              lines['$<<']($enc("", "ASCII-8BIT").$dup())};
            $send(lines, 'each', [], ($$14 = function(line){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (line == null) {
                line = nil;
              };
              line['$chomp!']($enc("\n", "ASCII-8BIT").$freeze());
              return line.$freeze();}, $$14.$$s = self, $$14.$$arity = 1, $$14));
            return lines.$freeze();
          }; return nil; })())
        }, $Buffer_source_lines$13.$$arity = 0);
        
        Opal.def(self, '$source_line', $Buffer_source_line$15 = function $$source_line(lineno) {
          var self = this;

          return self.$source_lines().$fetch($rb_minus(lineno, self.first_line)).$dup()
        }, $Buffer_source_line$15.$$arity = 1);
        
        Opal.def(self, '$line_range', $Buffer_line_range$16 = function $$line_range(lineno) {
          var self = this, index = nil, $ret_or_7 = nil;

          
          index = $rb_minus(lineno, self.first_line);
          if ($truthy((function() {if ($truthy(($ret_or_7 = $rb_lt(index, 0)))) {
            return $ret_or_7
          } else {
            return $rb_ge($rb_plus(index, 1), self.$line_begins().$size())
          }; return nil; })())) {
            return self.$raise($$($nesting, 'IndexError'), "" + "Parser::Source::Buffer: range for line " + ("" + (lineno) + " requested, valid line numbers are " + (self.first_line) + "..") + ("" + ($rb_minus($rb_plus(self.first_line, self.$line_begins().$size()), 2))))
          } else {
            return $$($nesting, 'Range').$new(self, self.$line_begins()['$[]'](index), $rb_minus(self.$line_begins()['$[]']($rb_plus(index, 1)), 1))
          };
        }, $Buffer_line_range$16.$$arity = 1);
        
        Opal.def(self, '$source_range', $Buffer_source_range$17 = function $$source_range() {
          var self = this, $ret_or_8 = nil;

          return (self.source_range = (function() {if ($truthy(($ret_or_8 = self.source_range))) {
            return $ret_or_8
          } else {
            return $$($nesting, 'Range').$new(self, 0, self.$source().$size())
          }; return nil; })())
        }, $Buffer_source_range$17.$$arity = 0);
        
        Opal.def(self, '$last_line', $Buffer_last_line$18 = function $$last_line() {
          var self = this;

          return $rb_minus($rb_plus(self.$line_begins().$size(), self.first_line), 2)
        }, $Buffer_last_line$18.$$arity = 0);
        
        Opal.def(self, '$freeze', $Buffer_freeze$19 = function $$freeze() {
          var $iter = $Buffer_freeze$19.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Buffer_freeze$19.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.$source_lines();
          self.$line_begins();
          self.$source_range();
          return $send2(self, $find_super(self, 'freeze', $Buffer_freeze$19, false, true), 'freeze', $zuper, $iter);
        }, $Buffer_freeze$19.$$arity = 0);
        
        Opal.def(self, '$inspect', $Buffer_inspect$20 = function $$inspect() {
          var self = this;

          return "" + "#<" + (self.$class()) + " " + (self.$name()) + ">"
        }, $Buffer_inspect$20.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$line_begins', $Buffer_line_begins$21 = function $$line_begins() {
          var $a, self = this, $ret_or_9 = nil, begins = nil, index = nil;

          return (self.line_begins = (function() {if ($truthy(($ret_or_9 = self.line_begins))) {
            return $ret_or_9
          } else {
            
            begins = [0];
            index = 0;
            while ($truthy((index = self.source.$index($enc("\n", "ASCII-8BIT").$freeze(), index)))) {
              
              index = $rb_plus(index, 1);
              begins['$<<'](index);
            };
            begins['$<<']($rb_plus(self.source.$size(), 1));
            return begins;
          }; return nil; })())
        }, $Buffer_line_begins$21.$$arity = 0);
        
        Opal.def(self, '$line_index_for_position', $Buffer_line_index_for_position$22 = function $$line_index_for_position(position) {
          var self = this, $ret_or_10 = nil, index = nil, $writer = nil;

          if ($truthy(($ret_or_10 = self.line_index_for_position['$[]'](position)))) {
            return $ret_or_10
          } else {
            
            index = $rb_minus(self.$bsearch(self.$line_begins(), position), 1);
            if ($truthy(self.line_index_for_position['$frozen?']())) {
            } else {
              
              $writer = [position, index];
              $send(self.line_index_for_position, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            return index;
          }
        }, $Buffer_line_index_for_position$22.$$arity = 1);
        if ($truthy($$($nesting, 'Array')['$method_defined?']("bsearch_index"))) {
          return (Opal.def(self, '$bsearch', $Buffer_bsearch$23 = function $$bsearch(line_begins, position) {
            var $$24, self = this, $ret_or_11 = nil;

            if ($truthy(($ret_or_11 = $send(line_begins, 'bsearch_index', [], ($$24 = function(line_begin){var self = $$24.$$s == null ? this : $$24.$$s;

              
              
              if (line_begin == null) {
                line_begin = nil;
              };
              return $rb_lt(position, line_begin);}, $$24.$$s = self, $$24.$$arity = 1, $$24))))) {
              return $ret_or_11
            } else {
              return $rb_minus(line_begins.$size(), 1)
            }
          }, $Buffer_bsearch$23.$$arity = 2), nil) && 'bsearch'
        } else {
          return (Opal.def(self, '$bsearch', $Buffer_bsearch$25 = function $$bsearch(line_begins, position) {
            var $$26, self = this, $ret_or_12 = nil, $ret_or_13 = nil;

            
            self.line_range = (function() {if ($truthy(($ret_or_12 = self.line_range))) {
              return $ret_or_12
            } else {
              return Opal.Range.$new(0,line_begins.$size(), true)
            }; return nil; })();
            if ($truthy(($ret_or_13 = $send(self.line_range, 'bsearch', [], ($$26 = function(i){var self = $$26.$$s == null ? this : $$26.$$s;

              
              
              if (i == null) {
                i = nil;
              };
              return $rb_lt(position, line_begins['$[]'](i));}, $$26.$$s = self, $$26.$$arity = 1, $$26))))) {
              return $ret_or_13
            } else {
              return $rb_minus(line_begins.$size(), 1)
            };
          }, $Buffer_bsearch$25.$$arity = 2), nil) && 'bsearch'
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/range"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $alias = Opal.alias;

  Opal.add_stubs(['$include', '$attr_reader', '$<', '$raise', '$nil?', '$freeze', '$with', '$-', '$line_for_position', '$alias_method', '$column_for_position', '$!=', '$line', '$last_line', '$inspect', '$column', '$last_column', '$source_line', '$slice', '$begin_pos', '$end_pos', '$include?', '$source', '$to_a', '$decompose_position', '$join', '$name', '$+', '$new', '$min', '$max', '$disjoint?', '$empty?', '$>=', '$!', '$<=>', '$contains?', '$overlaps?', '$==', '$*', '$is_a?', '$source_buffer', '$nonzero?', '$hash']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Range');

        var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_begin$2, $Range_end$3, $Range_size$4, $Range_line$5, $Range_column$6, $Range_last_line$7, $Range_last_column$8, $Range_column_range$9, $Range_source_line$10, $Range_source$11, $Range_is$ques$12, $Range_to_a$13, $Range_to_range$14, $Range_to_s$15, $Range_with$16, $Range_adjust$17, $Range_resize$18, $Range_join$19, $Range_intersect$20, $Range_disjoint$ques$21, $Range_overlaps$ques$22, $Range_contains$ques$23, $Range_contained$ques$24, $Range_crossing$ques$25, $Range_empty$ques$26, $Range_$lt_eq_gt$27, $Range_hash$28, $Range_inspect$29;

        self.$$prototype.begin_pos = self.$$prototype.end_pos = self.$$prototype.source_buffer = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("source_buffer");
        self.$attr_reader("begin_pos", "end_pos");
        
        Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(source_buffer, begin_pos, end_pos) {
          var $a, self = this;

          
          if ($truthy($rb_lt(end_pos, begin_pos))) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: end_pos must not be less than begin_pos")};
          if ($truthy(source_buffer['$nil?']())) {
            self.$raise($$($nesting, 'ArgumentError'), "Parser::Source::Range: source_buffer must not be nil")};
          self.source_buffer = source_buffer;
          $a = [begin_pos, end_pos], (self.begin_pos = $a[0]), (self.end_pos = $a[1]), $a;
          return self.$freeze();
        }, $Range_initialize$1.$$arity = 3);
        
        Opal.def(self, '$begin', $Range_begin$2 = function $$begin() {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": self.begin_pos}))
        }, $Range_begin$2.$$arity = 0);
        
        Opal.def(self, '$end', $Range_end$3 = function $$end() {
          var self = this;

          return self.$with($hash2(["begin_pos"], {"begin_pos": self.end_pos}))
        }, $Range_end$3.$$arity = 0);
        
        Opal.def(self, '$size', $Range_size$4 = function $$size() {
          var self = this;

          return $rb_minus(self.end_pos, self.begin_pos)
        }, $Range_size$4.$$arity = 0);
        $alias(self, "length", "size");
        
        Opal.def(self, '$line', $Range_line$5 = function $$line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.begin_pos)
        }, $Range_line$5.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Range_column$6 = function $$column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.begin_pos)
        }, $Range_column$6.$$arity = 0);
        
        Opal.def(self, '$last_line', $Range_last_line$7 = function $$last_line() {
          var self = this;

          return self.source_buffer.$line_for_position(self.end_pos)
        }, $Range_last_line$7.$$arity = 0);
        
        Opal.def(self, '$last_column', $Range_last_column$8 = function $$last_column() {
          var self = this;

          return self.source_buffer.$column_for_position(self.end_pos)
        }, $Range_last_column$8.$$arity = 0);
        
        Opal.def(self, '$column_range', $Range_column_range$9 = function $$column_range() {
          var self = this;

          
          if ($truthy(self.$line()['$!='](self.$last_line()))) {
            self.$raise($$($nesting, 'RangeError'), "" + (self.$inspect()) + " spans more than one line")};
          return Opal.Range.$new(self.$column(),self.$last_column(), true);
        }, $Range_column_range$9.$$arity = 0);
        
        Opal.def(self, '$source_line', $Range_source_line$10 = function $$source_line() {
          var self = this;

          return self.source_buffer.$source_line(self.$line())
        }, $Range_source_line$10.$$arity = 0);
        
        Opal.def(self, '$source', $Range_source$11 = function $$source() {
          var self = this;

          return self.source_buffer.$slice(Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true))
        }, $Range_source$11.$$arity = 0);
        
        Opal.def(self, '$is?', $Range_is$ques$12 = function($a) {
          var $post_args, what, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          what = $post_args;;
          return what['$include?'](self.$source());
        }, $Range_is$ques$12.$$arity = -1);
        
        Opal.def(self, '$to_a', $Range_to_a$13 = function $$to_a() {
          var self = this;

          return Opal.Range.$new(self.begin_pos,self.end_pos, true).$to_a()
        }, $Range_to_a$13.$$arity = 0);
        
        Opal.def(self, '$to_range', $Range_to_range$14 = function $$to_range() {
          var self = this;

          return Opal.Range.$new(self.$begin_pos(),self.$end_pos(), true)
        }, $Range_to_range$14.$$arity = 0);
        
        Opal.def(self, '$to_s', $Range_to_s$15 = function $$to_s() {
          var $a, $b, self = this, line = nil, column = nil;

          
          $b = self.source_buffer.$decompose_position(self.begin_pos), $a = Opal.to_ary($b), (line = ($a[0] == null ? nil : $a[0])), (column = ($a[1] == null ? nil : $a[1])), $b;
          return [self.source_buffer.$name(), line, $rb_plus(column, 1)].$join(":");
        }, $Range_to_s$15.$$arity = 0);
        
        Opal.def(self, '$with', $Range_with$16 = function($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = self.begin_pos
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = self.end_pos
          };
          return $$($nesting, 'Range').$new(self.source_buffer, begin_pos, end_pos);
        }, $Range_with$16.$$arity = -1);
        
        Opal.def(self, '$adjust', $Range_adjust$17 = function $$adjust($kwargs) {
          var begin_pos, end_pos, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          begin_pos = $kwargs.$$smap["begin_pos"];
          if (begin_pos == null) {
            begin_pos = 0
          };
          
          end_pos = $kwargs.$$smap["end_pos"];
          if (end_pos == null) {
            end_pos = 0
          };
          return $$($nesting, 'Range').$new(self.source_buffer, $rb_plus(self.begin_pos, begin_pos), $rb_plus(self.end_pos, end_pos));
        }, $Range_adjust$17.$$arity = -1);
        
        Opal.def(self, '$resize', $Range_resize$18 = function $$resize(new_size) {
          var self = this;

          return self.$with($hash2(["end_pos"], {"end_pos": $rb_plus(self.begin_pos, new_size)}))
        }, $Range_resize$18.$$arity = 1);
        
        Opal.def(self, '$join', $Range_join$19 = function $$join(other) {
          var self = this;

          return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$min(), [self.end_pos, other.$end_pos()].$max())
        }, $Range_join$19.$$arity = 1);
        
        Opal.def(self, '$intersect', $Range_intersect$20 = function $$intersect(other) {
          var self = this;

          if ($truthy(self['$disjoint?'](other))) {
            return nil
          } else {
            return $$($nesting, 'Range').$new(self.source_buffer, [self.begin_pos, other.$begin_pos()].$max(), [self.end_pos, other.$end_pos()].$min())
          }
        }, $Range_intersect$20.$$arity = 1);
        
        Opal.def(self, '$disjoint?', $Range_disjoint$ques$21 = function(other) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_1 = self['$empty?']()))) {
            return other['$empty?']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return self.begin_pos['$!='](other.$begin_pos())
          } else if ($truthy(($ret_or_2 = $rb_ge(self.begin_pos, other.$end_pos())))) {
            return $ret_or_2
          } else {
            return $rb_ge(other.$begin_pos(), self.end_pos)
          }
        }, $Range_disjoint$ques$21.$$arity = 1);
        
        Opal.def(self, '$overlaps?', $Range_overlaps$ques$22 = function(other) {
          var self = this;

          return self['$disjoint?'](other)['$!']()
        }, $Range_overlaps$ques$22.$$arity = 1);
        
        Opal.def(self, '$contains?', $Range_contains$ques$23 = function(other) {
          var self = this;

          return $rb_ge($rb_plus(other.$begin_pos()['$<=>'](self.begin_pos), self.end_pos['$<=>'](other.$end_pos())), (function() {if ($truthy(other['$empty?']())) {
            return 2
          } else {
            return 1
          }; return nil; })())
        }, $Range_contains$ques$23.$$arity = 1);
        
        Opal.def(self, '$contained?', $Range_contained$ques$24 = function(other) {
          var self = this;

          return other['$contains?'](self)
        }, $Range_contained$ques$24.$$arity = 1);
        
        Opal.def(self, '$crossing?', $Range_crossing$ques$25 = function(other) {
          var self = this;

          
          if ($truthy(self['$overlaps?'](other))) {
          } else {
            return false
          };
          return $rb_times(self.begin_pos['$<=>'](other.$begin_pos()), self.end_pos['$<=>'](other.$end_pos()))['$=='](1);
        }, $Range_crossing$ques$25.$$arity = 1);
        
        Opal.def(self, '$empty?', $Range_empty$ques$26 = function() {
          var self = this;

          return self.begin_pos['$=='](self.end_pos)
        }, $Range_empty$ques$26.$$arity = 0);
        
        Opal.def(self, '$<=>', $Range_$lt_eq_gt$27 = function(other) {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_3 = other['$is_a?']($$$($$$($$$('::', 'Parser'), 'Source'), 'Range'))))) {
            return self.source_buffer['$=='](other.$source_buffer())
          } else {
            return $ret_or_3
          }; return nil; })())) {
          } else {
            return nil
          };
          if ($truthy(($ret_or_4 = self.begin_pos['$<=>'](other.$begin_pos())['$nonzero?']()))) {
            return $ret_or_4
          } else {
            
            return self.end_pos['$<=>'](other.$end_pos());
          };
        }, $Range_$lt_eq_gt$27.$$arity = 1);
        self.$alias_method("eql?", "==");
        
        Opal.def(self, '$hash', $Range_hash$28 = function $$hash() {
          var self = this;

          return [self.source_buffer, self.begin_pos, self.end_pos].$hash()
        }, $Range_hash$28.$$arity = 0);
        return (Opal.def(self, '$inspect', $Range_inspect$29 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Range " + (self.source_buffer.$name()) + " " + (self.begin_pos) + "..." + (self.end_pos) + ">"
        }, $Range_inspect$29.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/comment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$alias_method', '$new', '$associate', '$associate_locations', '$associate_by_identity', '$freeze', '$source', '$start_with?', '$text', '$==', '$type', '$is_a?', '$location', '$to_s', '$expression', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $Comment_associate$1, $Comment_associate_locations$2, $Comment_associate_by_identity$3, $Comment_initialize$4, $Comment_type$5, $Comment_inline$ques$6, $Comment_document$ques$7, $Comment_$eq_eq$8, $Comment_inspect$9;

        self.$$prototype.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        Opal.defs(self, '$associate', $Comment_associate$1 = function $$associate(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate();
        }, $Comment_associate$1.$$arity = 2);
        Opal.defs(self, '$associate_locations', $Comment_associate_locations$2 = function $$associate_locations(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate_locations();
        }, $Comment_associate_locations$2.$$arity = 2);
        Opal.defs(self, '$associate_by_identity', $Comment_associate_by_identity$3 = function $$associate_by_identity(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate_by_identity();
        }, $Comment_associate_by_identity$3.$$arity = 2);
        
        Opal.def(self, '$initialize', $Comment_initialize$4 = function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$($nesting, 'Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        }, $Comment_initialize$4.$$arity = 1);
        
        Opal.def(self, '$type', $Comment_type$5 = function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        }, $Comment_type$5.$$arity = 0);
        
        Opal.def(self, '$inline?', $Comment_inline$ques$6 = function() {
          var self = this;

          return self.$type()['$==']("inline")
        }, $Comment_inline$ques$6.$$arity = 0);
        
        Opal.def(self, '$document?', $Comment_document$ques$7 = function() {
          var self = this;

          return self.$type()['$==']("document")
        }, $Comment_document$ques$7.$$arity = 0);
        
        Opal.def(self, '$==', $Comment_$eq_eq$8 = function(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other['$is_a?']($$$($$($nesting, 'Source'), 'Comment'))))) {
            return self.location['$=='](other.$location())
          } else {
            return $ret_or_1
          }
        }, $Comment_$eq_eq$8.$$arity = 1);
        return (Opal.def(self, '$inspect', $Comment_inspect$9 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        }, $Comment_inspect$9.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/comment/associator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$do_associate', '$private', '$freeze', '$[]', '$include?', '$type', '$sort_by', '$compact', '$children', '$begin_pos', '$expression', '$loc', '$select', '$is_a?', '$new', '$[]=', '$-', '$==', '$compare_by_identity', '$advance_comment', '$advance_through_directives', '$visit', '$process_leading_comments', '$location', '$<=', '$line', '$last_line', '$each', '$children_in_source_order', '$process_trailing_comments', '$current_comment_before?', '$associate_and_advance_comment', '$current_comment_before_end?', '$current_comment_decorates?', '$+', '$!', '$end_pos', '$<<', '$start_with?', '$text', '$=~']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Associator');

        var $nesting = [self].concat($parent_nesting), $Associator_initialize$1, $Associator_associate$2, $Associator_associate_locations$3, $Associator_associate_by_identity$4, $Associator_children_in_source_order$5, $Associator_do_associate$8, $Associator_visit$10, $Associator_process_leading_comments$12, $Associator_process_trailing_comments$13, $Associator_advance_comment$14, $Associator_current_comment_before$ques$15, $Associator_current_comment_before_end$ques$16, $Associator_current_comment_decorates$ques$17, $Associator_associate_and_advance_comment$18, $Associator_advance_through_directives$19;

        self.$$prototype.map_using = self.$$prototype.mapping = self.$$prototype.skip_directives = self.$$prototype.ast = self.$$prototype.current_comment = self.$$prototype.comment_num = self.$$prototype.comments = nil;
        
        self.$attr_accessor("skip_directives");
        
        Opal.def(self, '$initialize', $Associator_initialize$1 = function $$initialize(ast, comments) {
          var self = this;

          
          self.ast = ast;
          self.comments = comments;
          return (self.skip_directives = true);
        }, $Associator_initialize$1.$$arity = 2);
        
        Opal.def(self, '$associate', $Associator_associate$2 = function $$associate() {
          var self = this;

          
          self.map_using = "eql";
          return self.$do_associate();
        }, $Associator_associate$2.$$arity = 0);
        
        Opal.def(self, '$associate_locations', $Associator_associate_locations$3 = function $$associate_locations() {
          var self = this;

          
          self.map_using = "location";
          return self.$do_associate();
        }, $Associator_associate_locations$3.$$arity = 0);
        
        Opal.def(self, '$associate_by_identity', $Associator_associate_by_identity$4 = function $$associate_by_identity() {
          var self = this;

          
          self.map_using = "identity";
          return self.$do_associate();
        }, $Associator_associate_by_identity$4.$$arity = 0);
        self.$private();
        Opal.const_set($nesting[0], 'POSTFIX_TYPES', $$($nesting, 'Set')['$[]']("if", "while", "while_post", "until", "until_post", "masgn").$freeze());
        
        Opal.def(self, '$children_in_source_order', $Associator_children_in_source_order$5 = function $$children_in_source_order(node) {
          var $$6, $$7, self = this;

          if ($truthy($$($nesting, 'POSTFIX_TYPES')['$include?'](node.$type()))) {
            return $send(node.$children().$compact(), 'sort_by', [], ($$6 = function(child){var self = $$6.$$s == null ? this : $$6.$$s;

              
              
              if (child == null) {
                child = nil;
              };
              return child.$loc().$expression().$begin_pos();}, $$6.$$s = self, $$6.$$arity = 1, $$6))
          } else {
            return $send(node.$children(), 'select', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s, $ret_or_1 = nil, $ret_or_2 = nil;

              
              
              if (child == null) {
                child = nil;
              };
              if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = child['$is_a?']($$$($$($nesting, 'AST'), 'Node'))))) {
                return child.$loc()
              } else {
                return $ret_or_2
              }; return nil; })()))) {
                return child.$loc().$expression()
              } else {
                return $ret_or_1
              };}, $$7.$$s = self, $$7.$$arity = 1, $$7))
          }
        }, $Associator_children_in_source_order$5.$$arity = 1);
        
        Opal.def(self, '$do_associate', $Associator_do_associate$8 = function $$do_associate() {
          var $$9, self = this;

          
          self.mapping = $send($$($nesting, 'Hash'), 'new', [], ($$9 = function(h, k){var self = $$9.$$s == null ? this : $$9.$$s, $writer = nil;

            
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, []];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          if (self.map_using['$==']("identity")) {
            self.mapping.$compare_by_identity()};
          self.comment_num = -1;
          self.$advance_comment();
          if ($truthy(self.skip_directives)) {
            self.$advance_through_directives()};
          if ($truthy(self.ast)) {
            self.$visit(self.ast)};
          return self.mapping;
        }, $Associator_do_associate$8.$$arity = 0);
        
        Opal.def(self, '$visit', $Associator_visit$10 = function $$visit(node) {
          var $$11, self = this, node_loc = nil, $ret_or_3 = nil;

          
          self.$process_leading_comments(node);
          if ($truthy(self.current_comment)) {
          } else {
            return nil
          };
          node_loc = node.$location();
          if ($truthy((function() {if ($truthy(($ret_or_3 = $rb_le(self.current_comment.$location().$line(), node_loc.$last_line())))) {
            return $ret_or_3
          } else {
            return node_loc['$is_a?']($$$($$($nesting, 'Map'), 'Heredoc'))
          }; return nil; })())) {
            
            $send(self.$children_in_source_order(node), 'each', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (child == null) {
                child = nil;
              };
              return self.$visit(child);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
            return self.$process_trailing_comments(node);
          } else {
            return nil
          };
        }, $Associator_visit$10.$$arity = 1);
        
        Opal.def(self, '$process_leading_comments', $Associator_process_leading_comments$12 = function $$process_leading_comments(node) {
          var $a, self = this;

          
          if (node.$type()['$==']("begin")) {
            return nil};
          while ($truthy(self['$current_comment_before?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_leading_comments$12.$$arity = 1);
        
        Opal.def(self, '$process_trailing_comments', $Associator_process_trailing_comments$13 = function $$process_trailing_comments(node) {
          var $a, self = this;

          
          while ($truthy(self['$current_comment_before_end?'](node))) {
            self.$associate_and_advance_comment(node)
          };
          while ($truthy(self['$current_comment_decorates?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_trailing_comments$13.$$arity = 1);
        
        Opal.def(self, '$advance_comment', $Associator_advance_comment$14 = function $$advance_comment() {
          var self = this;

          
          self.comment_num = $rb_plus(self.comment_num, 1);
          return (self.current_comment = self.comments['$[]'](self.comment_num));
        }, $Associator_advance_comment$14.$$arity = 0);
        
        Opal.def(self, '$current_comment_before?', $Associator_current_comment_before$ques$15 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$begin_pos());
        }, $Associator_current_comment_before$ques$15.$$arity = 1);
        
        Opal.def(self, '$current_comment_before_end?', $Associator_current_comment_before_end$ques$16 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$end_pos());
        }, $Associator_current_comment_before_end$ques$16.$$arity = 1);
        
        Opal.def(self, '$current_comment_decorates?', $Associator_current_comment_decorates$ques$17 = function(node) {
          var self = this;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          return self.current_comment.$location().$line()['$=='](node.$location().$last_line());
        }, $Associator_current_comment_decorates$ques$17.$$arity = 1);
        
        Opal.def(self, '$associate_and_advance_comment', $Associator_associate_and_advance_comment$18 = function $$associate_and_advance_comment(node) {
          var self = this, key = nil;

          
          key = (function() {if (self.map_using['$==']("location")) {
            return node.$location()
          } else {
            return node
          }; return nil; })();
          self.mapping['$[]'](key)['$<<'](self.current_comment);
          return self.$advance_comment();
        }, $Associator_associate_and_advance_comment$18.$$arity = 1);
        Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^#\s*(-\*-|)\s*(frozen_string_literal|warn_indent|warn_past_scope):.*\1$/);
        return (Opal.def(self, '$advance_through_directives', $Associator_advance_through_directives$19 = function $$advance_through_directives() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_4 = self.current_comment))) {
            return self.current_comment.$text()['$start_with?']("#!".$freeze())
          } else {
            return $ret_or_4
          }; return nil; })())) {
            self.$advance_comment()};
          if ($truthy((function() {if ($truthy(($ret_or_5 = self.current_comment))) {
            return self.current_comment.$text()['$=~']($$($nesting, 'MAGIC_COMMENT_RE'))
          } else {
            return $ret_or_5
          }; return nil; })())) {
            self.$advance_comment()};
          if ($truthy((function() {if ($truthy(($ret_or_6 = self.current_comment))) {
            return self.current_comment.$text()['$=~']($$$($$($nesting, 'Buffer'), 'ENCODING_RE'))
          } else {
            return $ret_or_6
          }; return nil; })())) {
            return self.$advance_comment()
          } else {
            return nil
          };
        }, $Associator_advance_through_directives$19.$$arity = 0), nil) && 'advance_through_directives';
      })($$($nesting, 'Comment'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$warn_of_deprecation', '$class', '$new', '$lambda', '$puts', '$render', '$consumer=', '$-', '$append', '$freeze', '$begin', '$end', '$+', '$in_transaction?', '$raise', '$dup', '$source', '$each', '$sort', '$begin_pos', '$range', '$length', '$replacement', '$[]=', '$private', '$empty?', '$!', '$allow_multiple_insertions?', '$clobbered_insertion?', '$raise_clobber_error', '$record_insertion', '$adjacent_updates?', '$find', '$overlaps?', '$replace_compatible_with_insertion?', '$merge_actions!', '$<<', '$active_queue', '$adjacent_insertions?', '$merge_actions', '$delete', '$can_merge?', '$record_replace', '$|', '$active_insertions', '$active_insertions=', '$active_clobber', '$clobbered_position_mask', '$active_clobber=', '$size', '$!=', '$&', '$<=', '$end_pos', '$adjacent_insertion_mask', '$select', '$adjacent?', '$adjacent_position_mask', '$>=', '$==', '$[]', '$all?', '$intersect', '$nil?', '$max', '$sort_by', '$push', '$join', '$first', '$max_by', '$merge_replacements', '$replace_actions', '$disjoint?', '$<', '$process', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rewriter');

        var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$1, $Rewriter_remove$3, $Rewriter_insert_before$4, $Rewriter_wrap$5, $Rewriter_insert_before_multi$6, $Rewriter_insert_after$7, $Rewriter_insert_after_multi$8, $Rewriter_replace$9, $Rewriter_process$10, $Rewriter_transaction$12, $Rewriter_append$13, $Rewriter_record_insertion$16, $Rewriter_record_replace$17, $Rewriter_clobbered_position_mask$18, $Rewriter_adjacent_position_mask$19, $Rewriter_adjacent_insertion_mask$20, $Rewriter_clobbered_insertion$ques$21, $Rewriter_adjacent_insertions$ques$23, $Rewriter_adjacent_updates$ques$25, $Rewriter_replace_compatible_with_insertion$ques$27, $Rewriter_can_merge$ques$28, $Rewriter_merge_actions$30, $Rewriter_merge_actions$excl$33, $Rewriter_merge_replacements$34, $Rewriter_replace_actions$36, $Rewriter_raise_clobber_error$38, $Rewriter_in_transaction$ques$39, $Rewriter_active_queue$40, $Rewriter_active_clobber$41, $Rewriter_active_insertions$42, $Rewriter_active_clobber$eq$43, $Rewriter_active_insertions$eq$44, $Rewriter_adjacent$ques$45;

        self.$$prototype.diagnostics = self.$$prototype.insert_before_multi_order = self.$$prototype.insert_after_multi_order = self.$$prototype.source_buffer = self.$$prototype.queue = self.$$prototype.clobber = self.$$prototype.insertions = self.$$prototype.pending_queue = self.$$prototype.pending_clobber = self.$$prototype.pending_insertions = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $Rewriter_initialize$1 = function $$initialize(source_buffer) {
          var $$2, self = this, $writer = nil;

          
          self.$class().$warn_of_deprecation();
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$send(self, 'lambda', [], ($$2 = function(diag){var self = $$2.$$s == null ? this : $$2.$$s;
            if ($gvars.stderr == null) $gvars.stderr = nil;

            
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.queue = [];
          self.clobber = 0;
          self.insertions = 0;
          self.insert_before_multi_order = 0;
          self.insert_after_multi_order = 0;
          self.pending_queue = nil;
          self.pending_clobber = nil;
          return (self.pending_insertions = nil);
        }, $Rewriter_initialize$1.$$arity = 1);
        
        Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, "".$freeze()))
        }, $Rewriter_remove$3.$$arity = 1);
        
        Opal.def(self, '$insert_before', $Rewriter_insert_before$4 = function $$insert_before(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content))
        }, $Rewriter_insert_before$4.$$arity = 2);
        
        Opal.def(self, '$wrap', $Rewriter_wrap$5 = function $$wrap(range, before, after) {
          var self = this;

          
          self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), before));
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), after));
        }, $Rewriter_wrap$5.$$arity = 3);
        
        Opal.def(self, '$insert_before_multi', $Rewriter_insert_before_multi$6 = function $$insert_before_multi(range, content) {
          var self = this;

          
          self.insert_before_multi_order = $rb_minus(self.insert_before_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content, true, self.insert_before_multi_order));
        }, $Rewriter_insert_before_multi$6.$$arity = 2);
        
        Opal.def(self, '$insert_after', $Rewriter_insert_after$7 = function $$insert_after(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content))
        }, $Rewriter_insert_after$7.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $Rewriter_insert_after_multi$8 = function $$insert_after_multi(range, content) {
          var self = this;

          
          self.insert_after_multi_order = $rb_plus(self.insert_after_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content, true, self.insert_after_multi_order));
        }, $Rewriter_insert_after_multi$8.$$arity = 2);
        
        Opal.def(self, '$replace', $Rewriter_replace$9 = function $$replace(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, content))
        }, $Rewriter_replace$9.$$arity = 2);
        
        Opal.def(self, '$process', $Rewriter_process$10 = function $$process() {
          var $$11, self = this, adjustment = nil, source = nil;

          
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("" + "Do not call " + (self.$class()) + "#" + ("process") + " inside a transaction")};
          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          $send(self.queue.$sort(), 'each', [], ($$11 = function(action){var self = $$11.$$s == null ? this : $$11.$$s, begin_pos = nil, end_pos = nil, $writer = nil;

            
            
            if (action == null) {
              action = nil;
            };
            begin_pos = $rb_plus(action.$range().$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, action.$range().$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), action.$replacement()];
            $send(source, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(action.$replacement().$length(), action.$range().$length())));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return source;
        }, $Rewriter_process$10.$$arity = 0);
        
        Opal.def(self, '$transaction', $Rewriter_transaction$12 = function $$transaction() {
          var $iter = $Rewriter_transaction$12.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Rewriter_transaction$12.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Nested transaction is not supported")};
          self.pending_queue = self.queue.$dup();
          self.pending_clobber = self.clobber;
          self.pending_insertions = self.insertions;
          Opal.yieldX($yield, []);
          self.queue = self.pending_queue;
          self.clobber = self.pending_clobber;
          self.insertions = self.pending_insertions;
          return self;
          } finally {
            ((self.pending_queue = nil), (self.pending_clobber = nil), (self.pending_insertions = nil))
          }; })()
        }, $Rewriter_transaction$12.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$append', $Rewriter_append$13 = function $$append(action) {
          var $$14, $$15, self = this, range = nil, $ret_or_1 = nil, conflicting = nil, adjacent = nil, insertions = nil;

          
          range = action.$range();
          if ($truthy(range['$empty?']())) {
            
            if ($truthy(action.$replacement()['$empty?']())) {
              return self};
            if ($truthy((function() {if ($truthy(($ret_or_1 = action['$allow_multiple_insertions?']()['$!']()))) {
              
              return (conflicting = self['$clobbered_insertion?'](range));
            } else {
              return $ret_or_1
            }; return nil; })())) {
              self.$raise_clobber_error(action, [conflicting])};
            self.$record_insertion(range);
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              
              conflicting = $send(adjacent, 'find', [], ($$14 = function(a){var self = $$14.$$s == null ? this : $$14.$$s, $ret_or_2 = nil;

                
                
                if (a == null) {
                  a = nil;
                };
                if ($truthy(($ret_or_2 = a.$range()['$overlaps?'](range)))) {
                  return self['$replace_compatible_with_insertion?'](a, action)['$!']()
                } else {
                  return $ret_or_2
                };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
              if ($truthy(conflicting)) {
                self.$raise_clobber_error(action, [conflicting])};
              self['$merge_actions!'](action, adjacent);
            } else {
              self.$active_queue()['$<<'](action)
            };
          } else {
            
            if ($truthy((insertions = self['$adjacent_insertions?'](range)))) {
              $send(insertions, 'each', [], ($$15 = function(insertion){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_3 = nil;

                
                
                if (insertion == null) {
                  insertion = nil;
                };
                if ($truthy((function() {if ($truthy(($ret_or_3 = range['$overlaps?'](insertion.$range())))) {
                  return self['$replace_compatible_with_insertion?'](action, insertion)['$!']()
                } else {
                  return $ret_or_3
                }; return nil; })())) {
                  return self.$raise_clobber_error(action, [insertion])
                } else {
                  
                  action = self.$merge_actions(action, [insertion]);
                  return self.$active_queue().$delete(insertion);
                };}, $$15.$$s = self, $$15.$$arity = 1, $$15))};
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              if ($truthy(self['$can_merge?'](action, adjacent))) {
                
                self.$record_replace(range);
                self['$merge_actions!'](action, adjacent);
              } else {
                self.$raise_clobber_error(action, adjacent)
              }
            } else {
              
              self.$record_replace(range);
              self.$active_queue()['$<<'](action);
            };
          };
          return self;
        }, $Rewriter_append$13.$$arity = 1);
        
        Opal.def(self, '$record_insertion', $Rewriter_record_insertion$16 = function $$record_insertion(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_insertions()['$|']((1)['$<<'](range.$begin_pos()))];
          $send(self, 'active_insertions=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_insertion$16.$$arity = 1);
        
        Opal.def(self, '$record_replace', $Rewriter_record_replace$17 = function $$record_replace(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_clobber()['$|'](self.$clobbered_position_mask(range))];
          $send(self, 'active_clobber=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_replace$17.$$arity = 1);
        
        Opal.def(self, '$clobbered_position_mask', $Rewriter_clobbered_position_mask$18 = function $$clobbered_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<'](range.$size()), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_clobbered_position_mask$18.$$arity = 1);
        
        Opal.def(self, '$adjacent_position_mask', $Rewriter_adjacent_position_mask$19 = function $$adjacent_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 2)), 1)['$<<']($rb_minus(range.$begin_pos(), 1))
        }, $Rewriter_adjacent_position_mask$19.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertion_mask', $Rewriter_adjacent_insertion_mask$20 = function $$adjacent_insertion_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 1)), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_adjacent_insertion_mask$20.$$arity = 1);
        
        Opal.def(self, '$clobbered_insertion?', $Rewriter_clobbered_insertion$ques$21 = function(insertion) {
          var $$22, self = this, insertion_pos = nil;

          
          insertion_pos = insertion.$begin_pos();
          if ($truthy(self.$active_insertions()['$&']((1)['$<<'](insertion_pos))['$!='](0))) {
            return $send(self.$active_queue(), 'find', [], ($$22 = function(a){var self = $$22.$$s == null ? this : $$22.$$s, $ret_or_4 = nil;

              
              
              if (a == null) {
                a = nil;
              };
              if ($truthy(($ret_or_4 = $rb_le(a.$range().$begin_pos(), insertion_pos)))) {
                return $rb_le(insertion_pos, a.$range().$end_pos())
              } else {
                return $ret_or_4
              };}, $$22.$$s = self, $$22.$$arity = 1, $$22))
          } else {
            return nil
          };
        }, $Rewriter_clobbered_insertion$ques$21.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertions?', $Rewriter_adjacent_insertions$ques$23 = function(range) {
          var $$24, self = this, result = nil;

          if ($truthy(self.$active_insertions()['$&'](self.$adjacent_insertion_mask(range))['$!='](0))) {
            
            result = $send(self.$active_queue(), 'select', [], ($$24 = function(a){var self = $$24.$$s == null ? this : $$24.$$s, $ret_or_5 = nil;

              
              
              if (a == null) {
                a = nil;
              };
              if ($truthy(($ret_or_5 = a.$range()['$empty?']()))) {
                return self['$adjacent?'](range, a.$range())
              } else {
                return $ret_or_5
              };}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            if ($truthy(result['$empty?']())) {
              return nil
            } else {
              return result
            };
          } else {
            return nil
          }
        }, $Rewriter_adjacent_insertions$ques$23.$$arity = 1);
        
        Opal.def(self, '$adjacent_updates?', $Rewriter_adjacent_updates$ques$25 = function(range) {
          var $$26, self = this;

          if ($truthy(self.$active_clobber()['$&'](self.$adjacent_position_mask(range))['$!='](0))) {
            return $send(self.$active_queue(), 'select', [], ($$26 = function(a){var self = $$26.$$s == null ? this : $$26.$$s;

              
              
              if (a == null) {
                a = nil;
              };
              return self['$adjacent?'](range, a.$range());}, $$26.$$s = self, $$26.$$arity = 1, $$26))
          } else {
            return nil
          }
        }, $Rewriter_adjacent_updates$ques$25.$$arity = 1);
        
        Opal.def(self, '$replace_compatible_with_insertion?', $Rewriter_replace_compatible_with_insertion$ques$27 = function(replace, insertion) {
          var self = this, $ret_or_6 = nil, $ret_or_7 = nil, offset = nil;

          if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = $rb_ge($rb_minus(replace.$replacement().$length(), replace.$range().$size()), insertion.$range().$size())))) {
            
            return (offset = $rb_minus(insertion.$range().$begin_pos(), replace.$range().$begin_pos()));
          } else {
            return $ret_or_7
          }; return nil; })()))) {
            return replace.$replacement()['$[]'](offset, insertion.$replacement().$length())['$=='](insertion.$replacement())
          } else {
            return $ret_or_6
          }
        }, $Rewriter_replace_compatible_with_insertion$ques$27.$$arity = 2);
        
        Opal.def(self, '$can_merge?', $Rewriter_can_merge$ques$28 = function(action, existing) {
          var $$29, self = this, range = nil;

          
          range = action.$range();
          return $send(existing, 'all?', [], ($$29 = function(other){var self = $$29.$$s == null ? this : $$29.$$s, overlap = nil, repl1_offset = nil, repl2_offset = nil, repl1_length = nil, repl2_length = nil, replacement1 = nil, $ret_or_8 = nil, replacement2 = nil, $ret_or_9 = nil;

            
            
            if (other == null) {
              other = nil;
            };
            overlap = range.$intersect(other.$range());
            if ($truthy(overlap['$nil?']())) {
              return true;};
            repl1_offset = $rb_minus(overlap.$begin_pos(), range.$begin_pos());
            repl2_offset = $rb_minus(overlap.$begin_pos(), other.$range().$begin_pos());
            repl1_length = [$rb_minus(other.$range().$length(), repl2_offset), $rb_minus(other.$replacement().$length(), repl2_offset)].$max();
            repl2_length = [$rb_minus(range.$length(), repl1_offset), $rb_minus(action.$replacement().$length(), repl1_offset)].$max();
            replacement1 = (function() {if ($truthy(($ret_or_8 = action.$replacement()['$[]'](repl1_offset, repl1_length)))) {
              return $ret_or_8
            } else {
              return "".$freeze()
            }; return nil; })();
            replacement2 = (function() {if ($truthy(($ret_or_9 = other.$replacement()['$[]'](repl2_offset, repl2_length)))) {
              return $ret_or_9
            } else {
              return "".$freeze()
            }; return nil; })();
            return replacement1['$=='](replacement2);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        }, $Rewriter_can_merge$ques$28.$$arity = 2);
        
        Opal.def(self, '$merge_actions', $Rewriter_merge_actions$30 = function $$merge_actions(action, existing) {
          var $$31, $$32, self = this, actions = nil, range = nil;

          
          actions = $send(existing.$push(action), 'sort_by', [], ($$31 = function(a){var self = $$31.$$s == null ? this : $$31.$$s;

            
            
            if (a == null) {
              a = nil;
            };
            return [a.$range().$begin_pos(), a.$range().$end_pos()];}, $$31.$$s = self, $$31.$$arity = 1, $$31));
          range = actions.$first().$range().$join($send(actions, 'max_by', [], ($$32 = function(a){var self = $$32.$$s == null ? this : $$32.$$s;

            
            
            if (a == null) {
              a = nil;
            };
            return a.$range().$end_pos();}, $$32.$$s = self, $$32.$$arity = 1, $$32)).$range());
          return $$$($$($nesting, 'Rewriter'), 'Action').$new(range, self.$merge_replacements(actions));
        }, $Rewriter_merge_actions$30.$$arity = 2);
        
        Opal.def(self, '$merge_actions!', $Rewriter_merge_actions$excl$33 = function(action, existing) {
          var self = this, new_action = nil;

          
          new_action = self.$merge_actions(action, existing);
          self.$active_queue().$delete(action);
          return self.$replace_actions(existing, new_action);
        }, $Rewriter_merge_actions$excl$33.$$arity = 2);
        
        Opal.def(self, '$merge_replacements', $Rewriter_merge_replacements$34 = function $$merge_replacements(actions) {
          var $$35, self = this, result = nil, prev_act = nil;

          
          result = "".$dup();
          prev_act = nil;
          $send(actions, 'each', [], ($$35 = function(act){var self = $$35.$$s == null ? this : $$35.$$s, $ret_or_10 = nil, prev_end = nil, offset = nil;

            
            
            if (act == null) {
              act = nil;
            };
            if ($truthy((function() {if ($truthy(($ret_or_10 = prev_act['$!']()))) {
              return $ret_or_10
            } else {
              return act.$range()['$disjoint?'](prev_act.$range())
            }; return nil; })())) {
              result['$<<'](act.$replacement())
            } else {
              
              prev_end = [$rb_plus(prev_act.$range().$begin_pos(), prev_act.$replacement().$length()), prev_act.$range().$end_pos()].$max();
              offset = $rb_minus(prev_end, act.$range().$begin_pos());
              if ($truthy($rb_lt(offset, act.$replacement().$size()))) {
                result['$<<'](act.$replacement()['$[]'](Opal.Range.$new(offset, -1, false)))};
            };
            return (prev_act = act);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
          return result;
        }, $Rewriter_merge_replacements$34.$$arity = 1);
        
        Opal.def(self, '$replace_actions', $Rewriter_replace_actions$36 = function $$replace_actions(old, updated) {
          var $$37, self = this;

          
          $send(old, 'each', [], ($$37 = function(act){var self = $$37.$$s == null ? this : $$37.$$s;

            
            
            if (act == null) {
              act = nil;
            };
            return self.$active_queue().$delete(act);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
          return self.$active_queue()['$<<'](updated);
        }, $Rewriter_replace_actions$36.$$arity = 2);
        
        Opal.def(self, '$raise_clobber_error', $Rewriter_raise_clobber_error$38 = function $$raise_clobber_error(action, existing) {
          var self = this, diagnostic = nil;

          
          diagnostic = $$($nesting, 'Diagnostic').$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
          self.diagnostics.$process(diagnostic);
          diagnostic = $$($nesting, 'Diagnostic').$new("note", "clobbered", $hash2(["action"], {"action": existing['$[]'](0)}), existing['$[]'](0).$range());
          self.diagnostics.$process(diagnostic);
          return self.$raise($$($nesting, 'ClobberingError'), "Parser::Source::Rewriter detected clobbering");
        }, $Rewriter_raise_clobber_error$38.$$arity = 2);
        
        Opal.def(self, '$in_transaction?', $Rewriter_in_transaction$ques$39 = function() {
          var self = this;

          return self.pending_queue['$nil?']()['$!']()
        }, $Rewriter_in_transaction$ques$39.$$arity = 0);
        
        Opal.def(self, '$active_queue', $Rewriter_active_queue$40 = function $$active_queue() {
          var self = this, $ret_or_11 = nil;

          if ($truthy(($ret_or_11 = self.pending_queue))) {
            return $ret_or_11
          } else {
            return self.queue
          }
        }, $Rewriter_active_queue$40.$$arity = 0);
        
        Opal.def(self, '$active_clobber', $Rewriter_active_clobber$41 = function $$active_clobber() {
          var self = this, $ret_or_12 = nil;

          if ($truthy(($ret_or_12 = self.pending_clobber))) {
            return $ret_or_12
          } else {
            return self.clobber
          }
        }, $Rewriter_active_clobber$41.$$arity = 0);
        
        Opal.def(self, '$active_insertions', $Rewriter_active_insertions$42 = function $$active_insertions() {
          var self = this, $ret_or_13 = nil;

          if ($truthy(($ret_or_13 = self.pending_insertions))) {
            return $ret_or_13
          } else {
            return self.insertions
          }
        }, $Rewriter_active_insertions$42.$$arity = 0);
        
        Opal.def(self, '$active_clobber=', $Rewriter_active_clobber$eq$43 = function(value) {
          var self = this;

          if ($truthy(self.pending_clobber)) {
            return (self.pending_clobber = value)
          } else {
            return (self.clobber = value)
          }
        }, $Rewriter_active_clobber$eq$43.$$arity = 1);
        
        Opal.def(self, '$active_insertions=', $Rewriter_active_insertions$eq$44 = function(value) {
          var self = this;

          if ($truthy(self.pending_insertions)) {
            return (self.pending_insertions = value)
          } else {
            return (self.insertions = value)
          }
        }, $Rewriter_active_insertions$eq$44.$$arity = 1);
        
        Opal.def(self, '$adjacent?', $Rewriter_adjacent$ques$45 = function(range1, range2) {
          var self = this, $ret_or_14 = nil;

          if ($truthy(($ret_or_14 = $rb_le(range1.$begin_pos(), range2.$end_pos())))) {
            return $rb_le(range2.$begin_pos(), range1.$end_pos())
          } else {
            return $ret_or_14
          }
        }, $Rewriter_adjacent$ques$45.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Source::Rewriter is deprecated.", "Please update your code to use Parser::Source::TreeRewriter instead"].$join("\n").$freeze());
        return self.$extend($$($nesting, 'Deprecation'));
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/rewriter/action"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$alias_method', '$freeze', '$<=>', '$begin_pos', '$range', '$zero?', '$order', '$==', '$length', '$empty?', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_$lt_eq_gt$2, $Action_to_s$3;

        self.$$prototype.range = self.$$prototype.replacement = nil;
        
        self.$include($$($nesting, 'Comparable'));
        self.$attr_reader("range", "replacement", "allow_multiple_insertions", "order");
        self.$alias_method("allow_multiple_insertions?", "allow_multiple_insertions");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, replacement, allow_multiple_insertions, order) {
          var self = this;

          
          
          if (replacement == null) {
            replacement = "";
          };
          
          if (allow_multiple_insertions == null) {
            allow_multiple_insertions = false;
          };
          
          if (order == null) {
            order = 0;
          };
          self.range = range;
          self.replacement = replacement;
          self.allow_multiple_insertions = allow_multiple_insertions;
          self.order = order;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -2);
        
        Opal.def(self, '$<=>', $Action_$lt_eq_gt$2 = function(other) {
          var self = this, result = nil;

          
          result = self.$range().$begin_pos()['$<=>'](other.$range().$begin_pos());
          if ($truthy(result['$zero?']())) {
          } else {
            return result
          };
          return self.$order()['$<=>'](other.$order());
        }, $Action_$lt_eq_gt$2.$$arity = 1);
        return (Opal.def(self, '$to_s', $Action_to_s$3 = function $$to_s() {
          var self = this, $ret_or_1 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_1 = self.range.$length()['$=='](0)))) {
            return self.replacement['$empty?']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return "do nothing"
          } else if (self.range.$length()['$=='](0)) {
            return "" + "insert " + (self.replacement.$inspect())
          } else if ($truthy(self.replacement['$empty?']())) {
            return "" + "remove " + (self.range.$length()) + " character(s)"
          } else {
            return "" + "replace " + (self.range.$length()) + " character(s) with " + (self.replacement.$inspect())
          }
        }, $Action_to_s$3.$$arity = 0), nil) && 'to_s';
      })($$($nesting, 'Rewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/tree_rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $lambda = Opal.lambda, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash = Opal.hash, $slice = Opal.slice;

  Opal.add_stubs(['$attr_reader', '$new', '$puts', '$render', '$consumer=', '$-', '$freeze', '$check_policy_validity', '$method', '$adjust', '$source_range', '$empty?', '$==', '$source_buffer', '$raise', '$combine', '$action_root', '$merge!', '$dup', '$contract', '$+', '$begin_pos', '$range', '$end_pos', '$check_range_validity', '$moved', '$to_s', '$replace', '$wrap', '$source', '$each', '$ordered_replacements', '$<<', '$[]', '$length', '$join', '$nested_actions', '$class', '$name', '$action_summary', '$warn_of_deprecation', '$insert_before', '$insert_after', '$extend', '$protected', '$private', '$as_replacements', '$size', '$===', '$first', '$map', '$to_range', '$inspect', '$values', '$<', '$>', '$trigger_policy', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TreeRewriter');

        var $nesting = [self].concat($parent_nesting), $TreeRewriter_initialize$1, $TreeRewriter_empty$ques$3, $TreeRewriter_merge$excl$4, $TreeRewriter_merge$5, $TreeRewriter_import$excl$6, $TreeRewriter_replace$7, $TreeRewriter_wrap$8, $TreeRewriter_remove$9, $TreeRewriter_insert_before$10, $TreeRewriter_insert_after$11, $TreeRewriter_process$12, $TreeRewriter_as_replacements$14, $TreeRewriter_as_nested_actions$15, $TreeRewriter_transaction$16, $TreeRewriter_in_transaction$ques$17, $TreeRewriter_inspect$18, $TreeRewriter_insert_before_multi$19, $TreeRewriter_insert_after_multi$20, $TreeRewriter_action_summary$21, $TreeRewriter_check_policy_validity$23, $TreeRewriter_combine$24, $TreeRewriter_check_range_validity$25, $TreeRewriter_enforce_policy$26, $TreeRewriter_trigger_policy$27;

        self.$$prototype.diagnostics = self.$$prototype.source_buffer = self.$$prototype.enforcer = self.$$prototype.action_root = self.$$prototype.in_transaction = self.$$prototype.policy = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $TreeRewriter_initialize$1 = function $$initialize(source_buffer, $kwargs) {
          var crossing_deletions, different_replacements, swallowed_insertions, $$2, self = this, $writer = nil, all_encompassing_range = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          crossing_deletions = $kwargs.$$smap["crossing_deletions"];
          if (crossing_deletions == null) {
            crossing_deletions = "accept"
          };
          
          different_replacements = $kwargs.$$smap["different_replacements"];
          if (different_replacements == null) {
            different_replacements = "accept"
          };
          
          swallowed_insertions = $kwargs.$$smap["swallowed_insertions"];
          if (swallowed_insertions == null) {
            swallowed_insertions = "accept"
          };
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$lambda(($$2 = function(diag){var self = $$2.$$s == null ? this : $$2.$$s;
            if ($gvars.stderr == null) $gvars.stderr = nil;

            
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.in_transaction = false;
          self.policy = $hash2(["crossing_deletions", "different_replacements", "swallowed_insertions"], {"crossing_deletions": crossing_deletions, "different_replacements": different_replacements, "swallowed_insertions": swallowed_insertions}).$freeze();
          self.$check_policy_validity();
          self.enforcer = self.$method("enforce_policy");
          all_encompassing_range = self.source_buffer.$source_range().$adjust($hash2(["begin_pos", "end_pos"], {"begin_pos": -1, "end_pos": 1}));
          return (self.action_root = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(all_encompassing_range, self.enforcer));
        }, $TreeRewriter_initialize$1.$$arity = -2);
        
        Opal.def(self, '$empty?', $TreeRewriter_empty$ques$3 = function() {
          var self = this;

          return self.action_root['$empty?']()
        }, $TreeRewriter_empty$ques$3.$$arity = 0);
        
        Opal.def(self, '$merge!', $TreeRewriter_merge$excl$4 = function(with$) {
          var self = this;

          
          if (self.$source_buffer()['$=='](with$.$source_buffer())) {
          } else {
            self.$raise("TreeRewriter are not for the same source_buffer")
          };
          self.action_root = self.action_root.$combine(with$.$action_root());
          return self;
        }, $TreeRewriter_merge$excl$4.$$arity = 1);
        
        Opal.def(self, '$merge', $TreeRewriter_merge$5 = function $$merge(with$) {
          var self = this;

          return self.$dup()['$merge!'](with$)
        }, $TreeRewriter_merge$5.$$arity = 1);
        
        Opal.def(self, '$import!', $TreeRewriter_import$excl$6 = function(foreign_rewriter, $kwargs) {
          var offset, self = this, contracted = nil, merge_effective_range = nil, merge_with = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          offset = $kwargs.$$smap["offset"];
          if (offset == null) {
            offset = 0
          };
          if ($truthy(foreign_rewriter['$empty?']())) {
            return self};
          contracted = foreign_rewriter.$action_root().$contract();
          merge_effective_range = $$$($$$($$$('::', 'Parser'), 'Source'), 'Range').$new(self.source_buffer, $rb_plus(contracted.$range().$begin_pos(), offset), $rb_plus(contracted.$range().$end_pos(), offset));
          self.$check_range_validity(merge_effective_range);
          merge_with = contracted.$moved(self.source_buffer, offset);
          self.action_root = self.action_root.$combine(merge_with);
          return self;
        }, $TreeRewriter_import$excl$6.$$arity = -2);
        
        Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
          var self = this;

          return self.$combine(range, $hash2(["replacement"], {"replacement": content}))
        }, $TreeRewriter_replace$7.$$arity = 2);
        
        Opal.def(self, '$wrap', $TreeRewriter_wrap$8 = function $$wrap(range, insert_before, insert_after) {
          var self = this;

          return self.$combine(range, $hash2(["insert_before", "insert_after"], {"insert_before": insert_before.$to_s(), "insert_after": insert_after.$to_s()}))
        }, $TreeRewriter_wrap$8.$$arity = 3);
        
        Opal.def(self, '$remove', $TreeRewriter_remove$9 = function $$remove(range) {
          var self = this;

          return self.$replace(range, "".$freeze())
        }, $TreeRewriter_remove$9.$$arity = 1);
        
        Opal.def(self, '$insert_before', $TreeRewriter_insert_before$10 = function $$insert_before(range, content) {
          var self = this;

          return self.$wrap(range, content, nil)
        }, $TreeRewriter_insert_before$10.$$arity = 2);
        
        Opal.def(self, '$insert_after', $TreeRewriter_insert_after$11 = function $$insert_after(range, content) {
          var self = this;

          return self.$wrap(range, nil, content)
        }, $TreeRewriter_insert_after$11.$$arity = 2);
        
        Opal.def(self, '$process', $TreeRewriter_process$12 = function $$process() {
          var $$13, self = this, source = nil, chunks = nil, last_end = nil;

          
          source = self.source_buffer.$source();
          chunks = [];
          last_end = 0;
          $send(self.action_root.$ordered_replacements(), 'each', [], ($$13 = function(range, replacement){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (range == null) {
              range = nil;
            };
            
            if (replacement == null) {
              replacement = nil;
            };
            chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,range.$begin_pos(), true)))['$<<'](replacement);
            return (last_end = range.$end_pos());}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          chunks['$<<'](source['$[]'](Opal.Range.$new(last_end,source.$length(), true)));
          return chunks.$join();
        }, $TreeRewriter_process$12.$$arity = 0);
        
        Opal.def(self, '$as_replacements', $TreeRewriter_as_replacements$14 = function $$as_replacements() {
          var self = this;

          return self.action_root.$ordered_replacements()
        }, $TreeRewriter_as_replacements$14.$$arity = 0);
        
        Opal.def(self, '$as_nested_actions', $TreeRewriter_as_nested_actions$15 = function $$as_nested_actions() {
          var self = this;

          return self.action_root.$nested_actions()
        }, $TreeRewriter_as_nested_actions$15.$$arity = 0);
        
        Opal.def(self, '$transaction', $TreeRewriter_transaction$16 = function $$transaction() {
          var $iter = $TreeRewriter_transaction$16.$$p, $yield = $iter || nil, self = this, previous = nil, restore_root = nil;

          if ($iter) $TreeRewriter_transaction$16.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          previous = self.in_transaction;
          self.in_transaction = true;
          restore_root = self.action_root;
          Opal.yieldX($yield, []);
          restore_root = nil;
          return self;
          } finally {
            ((function() {if ($truthy(restore_root)) {
              return (self.action_root = restore_root)
            } else {
              return nil
            }; return nil; })(), (self.in_transaction = previous))
          }; })()
        }, $TreeRewriter_transaction$16.$$arity = 0);
        
        Opal.def(self, '$in_transaction?', $TreeRewriter_in_transaction$ques$17 = function() {
          var self = this;

          return self.in_transaction
        }, $TreeRewriter_in_transaction$ques$17.$$arity = 0);
        
        Opal.def(self, '$inspect', $TreeRewriter_inspect$18 = function $$inspect() {
          var self = this;

          return "" + "#<" + (self.$class()) + " " + (self.$source_buffer().$name()) + ": " + (self.$action_summary()) + ">"
        }, $TreeRewriter_inspect$18.$$arity = 0);
        
        Opal.def(self, '$insert_before_multi', $TreeRewriter_insert_before_multi$19 = function $$insert_before_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_before(range, text);
        }, $TreeRewriter_insert_before_multi$19.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $TreeRewriter_insert_after_multi$20 = function $$insert_after_multi(range, text) {
          var self = this;

          
          self.$class().$warn_of_deprecation();
          return self.$insert_after(range, text);
        }, $TreeRewriter_insert_after_multi$20.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["TreeRewriter#insert_before_multi and insert_before_multi exist only for legacy compatibility.", "Please update your code to use `wrap`, `insert_before` or `insert_after` instead."].$join("\n").$freeze());
        self.$extend($$($nesting, 'Deprecation'));
        self.$protected();
        self.$attr_reader("action_root");
        self.$private();
        
        Opal.def(self, '$action_summary', $TreeRewriter_action_summary$21 = function $$action_summary() {
          var $$22, self = this, replacements = nil, $case = nil, suffix = nil, parts = nil;

          
          replacements = self.$as_replacements();
          $case = replacements.$size();
          if ((0)['$===']($case)) {return "empty"}
          else if ($range(1, 3, false)['$===']($case)) {nil}
          else {
          replacements = replacements.$first(3);
          suffix = "…";};
          parts = $send(replacements, 'map', [], ($$22 = function($mlhs_tmp1){var self = $$22.$$s == null ? this : $$22.$$s, $a, $b, range = nil, str = nil;

            
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            $b = $mlhs_tmp1, $a = Opal.to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (str = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(str['$empty?']())) {
              return "" + "-" + (range.$to_range())
            } else if (range.$size()['$=='](0)) {
              return "" + "+" + (str.$inspect()) + "@" + (range.$begin_pos())
            } else {
              return "" + "^" + (str.$inspect()) + "@" + (range.$to_range())
            };}, $$22.$$s = self, $$22.$$arity = 1, $$22.$$has_top_level_mlhs_arg = true, $$22));
          if ($truthy(suffix)) {
            parts['$<<'](suffix)};
          return parts.$join(", ");
        }, $TreeRewriter_action_summary$21.$$arity = 0);
        Opal.const_set($nesting[0], 'ACTIONS', ["accept", "warn", "raise"].$freeze());
        
        Opal.def(self, '$check_policy_validity', $TreeRewriter_check_policy_validity$23 = function $$check_policy_validity() {
          var self = this, invalid = nil;

          
          invalid = $rb_minus(self.policy.$values(), $$($nesting, 'ACTIONS'));
          if ($truthy(invalid['$empty?']())) {
            return nil
          } else {
            return self.$raise($$($nesting, 'ArgumentError'), "" + "Invalid policy: " + (invalid.$join(", ")))
          };
        }, $TreeRewriter_check_policy_validity$23.$$arity = 0);
        
        Opal.def(self, '$combine', $TreeRewriter_combine$24 = function $$combine(range, attributes) {
          var self = this, action = nil;

          
          range = self.$check_range_validity(range);
          action = $$$($$($nesting, 'TreeRewriter'), 'Action').$new(range, self.enforcer, Opal.to_hash(attributes));
          self.action_root = self.action_root.$combine(action);
          return self;
        }, $TreeRewriter_combine$24.$$arity = 2);
        
        Opal.def(self, '$check_range_validity', $TreeRewriter_check_range_validity$25 = function $$check_range_validity(range) {
          var self = this, $ret_or_1 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_1 = $rb_lt(range.$begin_pos(), 0)))) {
            return $ret_or_1
          } else {
            return $rb_gt(range.$end_pos(), self.source_buffer.$source().$size())
          }; return nil; })())) {
            self.$raise($$($nesting, 'IndexError'), "" + "The range " + (range.$to_range()) + " is outside the bounds of the source")};
          return range;
        }, $TreeRewriter_check_range_validity$25.$$arity = 1);
        
        Opal.def(self, '$enforce_policy', $TreeRewriter_enforce_policy$26 = function $$enforce_policy(event) {
          var $iter = $TreeRewriter_enforce_policy$26.$$p, $yield = $iter || nil, self = this, values = nil;

          if ($iter) $TreeRewriter_enforce_policy$26.$$p = null;
          
          if (self.policy['$[]'](event)['$==']("accept")) {
            return nil};
          if ($truthy((values = Opal.yieldX($yield, [])))) {
          } else {
            return nil
          };
          return self.$trigger_policy(event, Opal.to_hash(values));
        }, $TreeRewriter_enforce_policy$26.$$arity = 1);
        Opal.const_set($nesting[0], 'POLICY_TO_LEVEL', $hash2(["warn", "raise"], {"warn": "warning", "raise": "error"}).$freeze());
        return (Opal.def(self, '$trigger_policy', $TreeRewriter_trigger_policy$27 = function $$trigger_policy(event, $kwargs) {
          var range, conflict, arguments$, $a, $b, self = this, action = nil, $ret_or_2 = nil, diag = nil, highlights = nil;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.$raise()
          };
          
          conflict = $kwargs.$$smap["conflict"];
          if (conflict == null) {
            conflict = nil
          };
          
          arguments$ = Opal.kwrestargs($kwargs, {'range': true,'conflict': true});;
          action = (function() {if ($truthy(($ret_or_2 = self.policy['$[]'](event)))) {
            return $ret_or_2
          } else {
            return "raise"
          }; return nil; })();
          diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), event, arguments$, range);
          self.diagnostics.$process(diag);
          if ($truthy(conflict)) {
            
            $b = conflict, $a = Opal.to_ary($b), (range = ($a[0] == null ? nil : $a[0])), (highlights = $slice.call($a, 1)), $b;
            diag = $$$($$($nesting, 'Parser'), 'Diagnostic').$new($$($nesting, 'POLICY_TO_LEVEL')['$[]'](action), "" + (event) + "_conflict", arguments$, range, highlights);
            self.diagnostics.$process(diag);};
          if (action['$==']("raise")) {
            return self.$raise($$$($$($nesting, 'Parser'), 'ClobberingError'), "Parser::Source::TreeRewriter detected clobbering")
          } else {
            return nil
          };
        }, $TreeRewriter_trigger_policy$27.$$arity = -2), nil) && 'trigger_policy';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/tree_rewriter/action"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$empty?', '$do_combine', '$==', '$<<', '$begin', '$concat', '$flat_map', '$to_proc', '$end', '$!', '$insert_before', '$insert_after', '$replacement', '$raise', '$insertion?', '$with', '$begin_pos', '$range', '$first', '$children', '$end_pos', '$last', '$new', '$+', '$map', '$moved', '$protected', '$swallow', '$class', '$merge', '$place_in_hierarchy', '$analyse_hierarchy', '$[]', '$fuse_deletions', '$combine_children', '$inject', '$size', '$bsearch', '$bsearch_child_index', '$>', '$-', '$>=', '$===', '$<=>', '$<=', '$check_fusible', '$<', '$shift', '$pop', '$compact!', '$each', '$call', '$call_enforcer_for_merge', '$!=', '$select']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Action');

        var $nesting = [self].concat($parent_nesting), $Action_initialize$1, $Action_combine$2, $Action_empty$ques$3, $Action_ordered_replacements$4, $Action_nested_actions$5, $Action_insertion$ques$6, $Action_contract$7, $Action_moved$8, $Action_with$10, $Action_do_combine$11, $Action_place_in_hierarchy$12, $Action_combine_children$13, $Action_fuse_deletions$15, $Action_bsearch_child_index$16, $Action_analyse_hierarchy$18, $Action_check_fusible$21, $Action_merge$24, $Action_call_enforcer_for_merge$25, $Action_swallow$27;

        self.$$prototype.insert_before = self.$$prototype.insert_after = self.$$prototype.children = self.$$prototype.replacement = self.$$prototype.range = self.$$prototype.enforcer = nil;
        
        self.$attr_reader("range", "replacement", "insert_before", "insert_after");
        
        Opal.def(self, '$initialize', $Action_initialize$1 = function $$initialize(range, enforcer, $kwargs) {
          var insert_before, replacement, insert_after, children, $a, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = ""
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = nil
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = ""
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = []
          };
          $a = [range, enforcer, children.$freeze(), insert_before.$freeze(), replacement, insert_after.$freeze()], (self.range = $a[0]), (self.enforcer = $a[1]), (self.children = $a[2]), (self.insert_before = $a[3]), (self.replacement = $a[4]), (self.insert_after = $a[5]), $a;
          return self.$freeze();
        }, $Action_initialize$1.$$arity = -3);
        
        Opal.def(self, '$combine', $Action_combine$2 = function $$combine(action) {
          var self = this;

          
          if ($truthy(action['$empty?']())) {
            return self};
          return self.$do_combine(action);
        }, $Action_combine$2.$$arity = 1);
        
        Opal.def(self, '$empty?', $Action_empty$ques$3 = function() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

          if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.insert_before['$empty?']()))) {
            return self.insert_after['$empty?']()
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return self.children['$empty?']()
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            
            if ($truthy(($ret_or_4 = self.replacement['$=='](nil)))) {
              return $ret_or_4
            } else {
              
              if ($truthy(($ret_or_5 = self.replacement['$empty?']()))) {
                return self.range['$empty?']()
              } else {
                return $ret_or_5
              };
            };
          } else {
            return $ret_or_1
          }
        }, $Action_empty$ques$3.$$arity = 0);
        
        Opal.def(self, '$ordered_replacements', $Action_ordered_replacements$4 = function $$ordered_replacements() {
          var self = this, reps = nil;

          
          reps = [];
          if ($truthy(self.insert_before['$empty?']())) {
          } else {
            reps['$<<']([self.range.$begin(), self.insert_before])
          };
          if ($truthy(self.replacement)) {
            reps['$<<']([self.range, self.replacement])};
          reps.$concat($send(self.children, 'flat_map', [], "ordered_replacements".$to_proc()));
          if ($truthy(self.insert_after['$empty?']())) {
          } else {
            reps['$<<']([self.range.$end(), self.insert_after])
          };
          return reps;
        }, $Action_ordered_replacements$4.$$arity = 0);
        
        Opal.def(self, '$nested_actions', $Action_nested_actions$5 = function $$nested_actions() {
          var self = this, actions = nil, $ret_or_6 = nil;

          
          actions = [];
          if ($truthy((function() {if ($truthy(($ret_or_6 = self.insert_before['$empty?']()['$!']()))) {
            return $ret_or_6
          } else {
            return self.insert_after['$empty?']()['$!']()
          }; return nil; })())) {
            actions['$<<'](["wrap", self.range, self.insert_before, self.insert_after])};
          if ($truthy(self.replacement)) {
            actions['$<<'](["replace", self.range, self.replacement])};
          return actions.$concat($send(self.children, 'flat_map', [], "nested_actions".$to_proc()));
        }, $Action_nested_actions$5.$$arity = 0);
        
        Opal.def(self, '$insertion?', $Action_insertion$ques$6 = function() {
          var self = this, $ret_or_7 = nil, $ret_or_8 = nil, $ret_or_9 = nil;

          if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self.$insert_before()['$empty?']()['$!']()))) {
            return $ret_or_8
          } else {
            return self.$insert_after()['$empty?']()['$!']()
          }; return nil; })()))) {
            return $ret_or_7
          } else {
            
            if ($truthy(($ret_or_9 = self.$replacement()))) {
              return self.$replacement()['$empty?']()['$!']()
            } else {
              return $ret_or_9
            };
          }
        }, $Action_insertion$ques$6.$$arity = 0);
        
        Opal.def(self, '$contract', $Action_contract$7 = function $$contract() {
          var self = this, range = nil;

          
          if ($truthy(self['$empty?']())) {
            self.$raise("Empty actions can not be contracted")};
          if ($truthy(self['$insertion?']())) {
            return self};
          range = self.range.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": self.$children().$first().$range().$begin_pos(), "end_pos": self.$children().$last().$range().$end_pos()}));
          return self.$with($hash2(["range"], {"range": range}));
        }, $Action_contract$7.$$arity = 0);
        
        Opal.def(self, '$moved', $Action_moved$8 = function $$moved(source_buffer, offset) {
          var $$9, self = this, moved_range = nil;

          
          moved_range = $$$($$$($$$('::', 'Parser'), 'Source'), 'Range').$new(source_buffer, $rb_plus(self.range.$begin_pos(), offset), $rb_plus(self.range.$end_pos(), offset));
          return self.$with($hash2(["range", "children"], {"range": moved_range, "children": $send(self.$children(), 'map', [], ($$9 = function(child){var self = $$9.$$s == null ? this : $$9.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return child.$moved(source_buffer, offset);}, $$9.$$s = self, $$9.$$arity = 1, $$9))}));
        }, $Action_moved$8.$$arity = 2);
        self.$protected();
        self.$attr_reader("children");
        
        Opal.def(self, '$with', $Action_with$10 = function($kwargs) {
          var range, enforcer, children, insert_before, replacement, insert_after, self = this;

          
          
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else if (!$kwargs.$$is_hash) {
            throw Opal.ArgumentError.$new('expected kwargs');
          };
          
          range = $kwargs.$$smap["range"];
          if (range == null) {
            range = self.range
          };
          
          enforcer = $kwargs.$$smap["enforcer"];
          if (enforcer == null) {
            enforcer = self.enforcer
          };
          
          children = $kwargs.$$smap["children"];
          if (children == null) {
            children = self.children
          };
          
          insert_before = $kwargs.$$smap["insert_before"];
          if (insert_before == null) {
            insert_before = self.insert_before
          };
          
          replacement = $kwargs.$$smap["replacement"];
          if (replacement == null) {
            replacement = self.replacement
          };
          
          insert_after = $kwargs.$$smap["insert_after"];
          if (insert_after == null) {
            insert_after = self.insert_after
          };
          if ($truthy(replacement)) {
            children = self.$swallow(children)};
          return self.$class().$new(range, enforcer, $hash2(["children", "insert_before", "replacement", "insert_after"], {"children": children, "insert_before": insert_before, "replacement": replacement, "insert_after": insert_after}));
        }, $Action_with$10.$$arity = -1);
        
        Opal.def(self, '$do_combine', $Action_do_combine$11 = function $$do_combine(action) {
          var self = this;

          if (action.$range()['$=='](self.range)) {
            return self.$merge(action)
          } else {
            return self.$place_in_hierarchy(action)
          }
        }, $Action_do_combine$11.$$arity = 1);
        
        Opal.def(self, '$place_in_hierarchy', $Action_place_in_hierarchy$12 = function $$place_in_hierarchy(action) {
          var self = this, family = nil, extra_sibbling = nil;

          
          family = self.$analyse_hierarchy(action);
          if ($truthy(family['$[]']("fusible"))) {
            return self.$fuse_deletions(action, family['$[]']("fusible"), [].concat(Opal.to_a(family['$[]']("sibbling_left"))).concat(Opal.to_a(family['$[]']("child"))).concat(Opal.to_a(family['$[]']("sibbling_right"))))
          } else {
            
            extra_sibbling = (function() {if ($truthy(family['$[]']("parent"))) {
              return family['$[]']("parent").$do_combine(action)
            } else if ($truthy(family['$[]']("child"))) {
              return action.$with($hash2(["children", "enforcer"], {"children": family['$[]']("child"), "enforcer": self.enforcer})).$combine_children(action.$children())
            } else {
              return action
            }; return nil; })();
            return self.$with($hash2(["children"], {"children": [].concat(Opal.to_a(family['$[]']("sibbling_left"))).concat([extra_sibbling]).concat(Opal.to_a(family['$[]']("sibbling_right")))}));
          };
        }, $Action_place_in_hierarchy$12.$$arity = 1);
        
        Opal.def(self, '$combine_children', $Action_combine_children$13 = function $$combine_children(more_children) {
          var $$14, self = this;

          return $send(more_children, 'inject', [self], ($$14 = function(parent, new_child){var self = $$14.$$s == null ? this : $$14.$$s;

            
            
            if (parent == null) {
              parent = nil;
            };
            
            if (new_child == null) {
              new_child = nil;
            };
            return parent.$place_in_hierarchy(new_child);}, $$14.$$s = self, $$14.$$arity = 2, $$14))
        }, $Action_combine_children$13.$$arity = 1);
        
        Opal.def(self, '$fuse_deletions', $Action_fuse_deletions$15 = function $$fuse_deletions(action, fusible, other_sibblings) {
          var self = this, without_fusible = nil, fused_range = nil, fused_deletion = nil;

          
          without_fusible = self.$with($hash2(["children"], {"children": other_sibblings}));
          fused_range = $send([action].concat(Opal.to_a(fusible)), 'map', [], "range".$to_proc()).$inject("join");
          fused_deletion = action.$with($hash2(["range"], {"range": fused_range}));
          return without_fusible.$do_combine(fused_deletion);
        }, $Action_fuse_deletions$15.$$arity = 3);
        
        Opal.def(self, '$bsearch_child_index', $Action_bsearch_child_index$16 = function $$bsearch_child_index(from) {
          var $$17, $iter = $Action_bsearch_child_index$16.$$p, $yield = $iter || nil, self = this, size = nil, $ret_or_10 = nil;

          if ($iter) $Action_bsearch_child_index$16.$$p = null;
          
          
          if (from == null) {
            from = 0;
          };
          size = self.children.$size();
          if ($truthy(($ret_or_10 = $send(Opal.Range.$new(from,size, true), 'bsearch', [], ($$17 = function(i){var self = $$17.$$s == null ? this : $$17.$$s;
            if (self.children == null) self.children = nil;

            
            
            if (i == null) {
              i = nil;
            };
            return Opal.yield1($yield, self.children['$[]'](i));;}, $$17.$$s = self, $$17.$$arity = 1, $$17))))) {
            return $ret_or_10
          } else {
            return size
          };
        }, $Action_bsearch_child_index$16.$$arity = -1);
        
        Opal.def(self, '$analyse_hierarchy', $Action_analyse_hierarchy$18 = function $$analyse_hierarchy(action) {
          var $$19, $$20, self = this, r = nil, left_index = nil, start = nil, right_index = nil, center = nil, $case = nil, parent = nil, overlap_left = nil, overlap_right = nil, $ret_or_11 = nil, $ret_or_12 = nil, contained = nil, fusible = nil;

          
          r = action.$range();
          left_index = $send(self, 'bsearch_child_index', [], ($$19 = function(child){var self = $$19.$$s == null ? this : $$19.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return $rb_gt(child.$range().$end_pos(), r.$begin_pos());}, $$19.$$s = self, $$19.$$arity = 1, $$19));
          start = (function() {if (left_index['$=='](0)) {
            return 0
          } else {
            return $rb_minus(left_index, 1)
          }; return nil; })();
          right_index = $send(self, 'bsearch_child_index', [start], ($$20 = function(child){var self = $$20.$$s == null ? this : $$20.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return $rb_ge(child.$range().$begin_pos(), r.$end_pos());}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          center = $rb_minus(right_index, left_index);
          $case = center;
          if ((0)['$===']($case)) {nil}
          else if ((-1)['$===']($case)) {
          left_index = $rb_minus(left_index, 1);
          right_index = $rb_plus(right_index, 1);
          parent = self.children['$[]'](left_index);}
          else {
          overlap_left = self.children['$[]'](left_index).$range().$begin_pos()['$<=>'](r.$begin_pos());
          overlap_right = self.children['$[]']($rb_minus(right_index, 1)).$range().$end_pos()['$<=>'](r.$end_pos());
          if ($truthy((function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = center['$=='](1)))) {
            return $rb_le(overlap_left, 0)
          } else {
            return $ret_or_12
          }; return nil; })()))) {
            return $rb_ge(overlap_right, 0)
          } else {
            return $ret_or_11
          }; return nil; })())) {
            parent = self.children['$[]'](left_index)
          } else {
            
            contained = self.children['$[]'](Opal.Range.$new(left_index,right_index, true));
            fusible = self.$check_fusible(action, (function() {if ($truthy($rb_lt(overlap_left, 0))) {
              return contained.$shift()
            } else {
              return nil
            }; return nil; })(), (function() {if ($truthy($rb_gt(overlap_right, 0))) {
              return contained.$pop()
            } else {
              return nil
            }; return nil; })());
          };};
          return $hash2(["parent", "sibbling_left", "sibbling_right", "fusible", "child"], {"parent": parent, "sibbling_left": self.children['$[]'](Opal.Range.$new(0,left_index, true)), "sibbling_right": self.children['$[]'](Opal.Range.$new(right_index,self.children.$size(), true)), "fusible": fusible, "child": contained});
        }, $Action_analyse_hierarchy$18.$$arity = 1);
        
        Opal.def(self, '$check_fusible', $Action_check_fusible$21 = function $$check_fusible(action, $a) {
          var $post_args, fusible, $$22, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          fusible = $post_args;;
          fusible['$compact!']();
          if ($truthy(fusible['$empty?']())) {
            return nil};
          $send(fusible, 'each', [], ($$22 = function(child){var self = $$22.$$s == null ? this : $$22.$$s, $$23, kind = nil, $ret_or_13 = nil;
            if (self.enforcer == null) self.enforcer = nil;

            
            
            if (child == null) {
              child = nil;
            };
            kind = (function() {if ($truthy((function() {if ($truthy(($ret_or_13 = action['$insertion?']()))) {
              return $ret_or_13
            } else {
              return child['$insertion?']()
            }; return nil; })())) {
              return "crossing_insertions"
            } else {
              return "crossing_deletions"
            }; return nil; })();
            return $send(self.enforcer, 'call', [kind], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

              return $hash2(["range", "conflict"], {"range": action.$range(), "conflict": child.$range()})}, $$23.$$s = self, $$23.$$arity = 0, $$23));}, $$22.$$s = self, $$22.$$arity = 1, $$22));
          return fusible;
        }, $Action_check_fusible$21.$$arity = -2);
        
        Opal.def(self, '$merge', $Action_merge$24 = function $$merge(action) {
          var self = this, $ret_or_14 = nil;

          
          self.$call_enforcer_for_merge(action);
          return self.$with($hash2(["insert_before", "replacement", "insert_after"], {"insert_before": "" + (action.$insert_before()) + (self.$insert_before()), "replacement": (function() {if ($truthy(($ret_or_14 = action.$replacement()))) {
            return $ret_or_14
          } else {
            return self.replacement
          }; return nil; })(), "insert_after": "" + (self.$insert_after()) + (action.$insert_after())})).$combine_children(action.$children());
        }, $Action_merge$24.$$arity = 1);
        
        Opal.def(self, '$call_enforcer_for_merge', $Action_call_enforcer_for_merge$25 = function $$call_enforcer_for_merge(action) {
          var $$26, self = this;

          return $send(self.enforcer, 'call', ["different_replacements"], ($$26 = function(){var self = $$26.$$s == null ? this : $$26.$$s, $ret_or_15 = nil, $ret_or_16 = nil;
            if (self.replacement == null) self.replacement = nil;
            if (self.range == null) self.range = nil;

            if ($truthy((function() {if ($truthy(($ret_or_15 = (function() {if ($truthy(($ret_or_16 = self.replacement))) {
              return action.$replacement()
            } else {
              return $ret_or_16
            }; return nil; })()))) {
              return self.replacement['$!='](action.$replacement())
            } else {
              return $ret_or_15
            }; return nil; })())) {
              return $hash2(["range", "replacement", "other_replacement"], {"range": self.range, "replacement": action.$replacement(), "other_replacement": self.replacement})
            } else {
              return nil
            }}, $$26.$$s = self, $$26.$$arity = 0, $$26))
        }, $Action_call_enforcer_for_merge$25.$$arity = 1);
        return (Opal.def(self, '$swallow', $Action_swallow$27 = function $$swallow(children) {
          var $$28, self = this;

          
          $send(self.enforcer, 'call', ["swallowed_insertions"], ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s, insertions = nil;
            if (self.range == null) self.range = nil;

            
            insertions = $send(children, 'select', [], "insertion?".$to_proc());
            if ($truthy(insertions['$empty?']())) {
              return nil
            } else {
              return $hash2(["range", "conflict"], {"range": self.range, "conflict": $send(insertions, 'map', [], "range".$to_proc())})
            };}, $$28.$$s = self, $$28.$$arity = 0, $$28));
          return [];
        }, $Action_swallow$27.$$arity = 1), nil) && 'swallow';
      })($$($nesting, 'TreeRewriter'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$freeze', '$line', '$alias_method', '$column', '$last_line', '$last_column', '$with', '$update_expression', '$==', '$class', '$reduce', '$map', '$instance_variables', '$instance_variable_get', '$send', '$inject', '$to_sym', '$[]', '$[]=', '$-', '$protected', '$tap', '$dup', '$to_proc']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Map');

        var $nesting = [self].concat($parent_nesting), $Map_initialize$1, $Map_initialize_copy$2, $Map_node$eq$3, $Map_line$4, $Map_column$5, $Map_last_line$6, $Map_last_column$7, $Map_with_expression$8, $Map_$eq_eq$10, $Map_to_hash$12, $Map_with$14, $Map_update_expression$15;

        self.$$prototype.node = self.$$prototype.expression = nil;
        
        self.$attr_reader("node");
        self.$attr_reader("expression");
        
        Opal.def(self, '$initialize', $Map_initialize$1 = function $$initialize(expression) {
          var self = this;

          return (self.expression = expression)
        }, $Map_initialize$1.$$arity = 1);
        
        Opal.def(self, '$initialize_copy', $Map_initialize_copy$2 = function $$initialize_copy(other) {
          var $iter = $Map_initialize_copy$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Map_initialize_copy$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $send2(self, $find_super(self, 'initialize_copy', $Map_initialize_copy$2, false, true), 'initialize_copy', $zuper, $iter);
          return (self.node = nil);
        }, $Map_initialize_copy$2.$$arity = 1);
        
        Opal.def(self, '$node=', $Map_node$eq$3 = function(node) {
          var self = this;

          
          self.node = node;
          self.$freeze();
          return self.node;
        }, $Map_node$eq$3.$$arity = 1);
        
        Opal.def(self, '$line', $Map_line$4 = function $$line() {
          var self = this;

          return self.expression.$line()
        }, $Map_line$4.$$arity = 0);
        self.$alias_method("first_line", "line");
        
        Opal.def(self, '$column', $Map_column$5 = function $$column() {
          var self = this;

          return self.expression.$column()
        }, $Map_column$5.$$arity = 0);
        
        Opal.def(self, '$last_line', $Map_last_line$6 = function $$last_line() {
          var self = this;

          return self.expression.$last_line()
        }, $Map_last_line$6.$$arity = 0);
        
        Opal.def(self, '$last_column', $Map_last_column$7 = function $$last_column() {
          var self = this;

          return self.expression.$last_column()
        }, $Map_last_column$7.$$arity = 0);
        
        Opal.def(self, '$with_expression', $Map_with_expression$8 = function $$with_expression(expression_l) {
          var $$9, self = this;

          return $send(self, 'with', [], ($$9 = function(map){var self = $$9.$$s == null ? this : $$9.$$s;

            
            
            if (map == null) {
              map = nil;
            };
            return map.$update_expression(expression_l);}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $Map_with_expression$8.$$arity = 1);
        
        Opal.def(self, '$==', $Map_$eq_eq$10 = function(other) {
          var $$11, self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other.$class()['$=='](self.$class())))) {
            return $send(self.$instance_variables(), 'map', [], ($$11 = function(ivar){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (ivar == null) {
                ivar = nil;
              };
              return self.$instance_variable_get(ivar)['$=='](other.$send("instance_variable_get", ivar));}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$reduce("&")
          } else {
            return $ret_or_1
          }
        }, $Map_$eq_eq$10.$$arity = 1);
        
        Opal.def(self, '$to_hash', $Map_to_hash$12 = function $$to_hash() {
          var $$13, self = this;

          return $send(self.$instance_variables(), 'inject', [$hash2([], {})], ($$13 = function(hash, ivar){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

            
            
            if (hash == null) {
              hash = nil;
            };
            
            if (ivar == null) {
              ivar = nil;
            };
            if (ivar.$to_sym()['$==']("@node")) {
              return hash;};
            
            $writer = [ivar['$[]']($range(1, -1, false)).$to_sym(), self.$instance_variable_get(ivar)];
            $send(hash, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return hash;}, $$13.$$s = self, $$13.$$arity = 2, $$13))
        }, $Map_to_hash$12.$$arity = 0);
        self.$protected();
        
        Opal.def(self, '$with', $Map_with$14 = function() {
          var $iter = $Map_with$14.$$p, block = $iter || nil, self = this;

          if ($iter) $Map_with$14.$$p = null;
          
          
          if ($iter) $Map_with$14.$$p = null;;
          return $send(self.$dup(), 'tap', [], block.$to_proc());
        }, $Map_with$14.$$arity = 0);
        return (Opal.def(self, '$update_expression', $Map_update_expression$15 = function $$update_expression(expression_l) {
          var self = this;

          return (self.expression = expression_l)
        }, $Map_update_expression$15.$$arity = 1), nil) && 'update_expression';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/operator"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Operator');

        var $nesting = [self].concat($parent_nesting), $Operator_initialize$1;

        
        self.$attr_reader("operator");
        return (Opal.def(self, '$initialize', $Operator_initialize$1 = function $$initialize(operator, expression) {
          var $iter = $Operator_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Operator_initialize$1.$$p = null;
          
          self.operator = operator;
          return $send2(self, $find_super(self, 'initialize', $Operator_initialize$1, false, true), 'initialize', [expression], null);
        }, $Operator_initialize$1.$$arity = 2), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/collection"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Collection');

        var $nesting = [self].concat($parent_nesting), $Collection_initialize$1;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Collection_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Collection_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Collection_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $Collection_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Collection_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/constant"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Constant');

        var $nesting = [self].concat($parent_nesting), $Constant_initialize$1, $Constant_with_operator$2, $Constant_update_operator$4;

        
        self.$attr_reader("double_colon");
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Constant_initialize$1 = function $$initialize(double_colon, name, expression) {
          var $a, $iter = $Constant_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Constant_initialize$1.$$p = null;
          
          $a = [double_colon, name], (self.double_colon = $a[0]), (self.name = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $Constant_initialize$1, false, true), 'initialize', [expression], null);
        }, $Constant_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Constant_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Constant_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Constant_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Constant_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/variable"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Variable');

        var $nesting = [self].concat($parent_nesting), $Variable_initialize$1, $Variable_with_operator$2, $Variable_update_operator$4;

        
        self.$attr_reader("name");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Variable_initialize$1 = function $$initialize(name_l, expression_l) {
          var $iter = $Variable_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Variable_initialize$1.$$p = null;
          
          
          if (expression_l == null) {
            expression_l = name_l;
          };
          self.name = name_l;
          return $send2(self, $find_super(self, 'initialize', $Variable_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Variable_initialize$1.$$arity = -2);
        
        Opal.def(self, '$with_operator', $Variable_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Variable_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Variable_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Variable_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/keyword"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Keyword');

        var $nesting = [self].concat($parent_nesting), $Keyword_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Keyword_initialize$1 = function $$initialize(keyword_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Keyword_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Keyword_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $Keyword_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Keyword_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/definition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader', '$join']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Definition');

        var $nesting = [self].concat($parent_nesting), $Definition_initialize$1;

        self.$$prototype.keyword = self.$$prototype.end = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Definition_initialize$1 = function $$initialize(keyword_l, operator_l, name_l, end_l) {
          var $iter = $Definition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Definition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          return $send2(self, $find_super(self, 'initialize', $Definition_initialize$1, false, true), 'initialize', [self.keyword.$join(self.end)], null);
        }, $Definition_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/method_definition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$join']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MethodDefinition');

        var $nesting = [self].concat($parent_nesting), $MethodDefinition_initialize$1;

        self.$$prototype.keyword = nil;
        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("name");
        self.$attr_reader("end");
        self.$attr_reader("assignment");
        return (Opal.def(self, '$initialize', $MethodDefinition_initialize$1 = function $$initialize(keyword_l, operator_l, name_l, end_l, assignment_l, body_l) {
          var $iter = $MethodDefinition_initialize$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil;

          if ($iter) $MethodDefinition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.operator = operator_l;
          self.name = name_l;
          self.end = end_l;
          self.assignment = assignment_l;
          return $send2(self, $find_super(self, 'initialize', $MethodDefinition_initialize$1, false, true), 'initialize', [self.keyword.$join((function() {if ($truthy(($ret_or_1 = end_l))) {
            return $ret_or_1
          } else {
            return body_l
          }; return nil; })())], null);
        }, $MethodDefinition_initialize$1.$$arity = 6), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/send"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Send');

        var $nesting = [self].concat($parent_nesting), $Send_initialize$1, $Send_with_operator$2, $Send_update_operator$4;

        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        Opal.def(self, '$initialize', $Send_initialize$1 = function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Send_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Send_initialize$1.$$p = null;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $Send_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Send_initialize$1.$$arity = 5);
        
        Opal.def(self, '$with_operator', $Send_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Send_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Send_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Send_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/index"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Index');

        var $nesting = [self].concat($parent_nesting), $Index_initialize$1, $Index_with_operator$2, $Index_update_operator$4;

        
        self.$attr_reader("begin");
        self.$attr_reader("end");
        self.$attr_reader("operator");
        
        Opal.def(self, '$initialize', $Index_initialize$1 = function $$initialize(begin_l, end_l, expression_l) {
          var $a, $iter = $Index_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Index_initialize$1.$$p = null;
          
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          self.operator = nil;
          return $send2(self, $find_super(self, 'initialize', $Index_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Index_initialize$1.$$arity = 3);
        
        Opal.def(self, '$with_operator', $Index_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Index_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Index_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Index_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/condition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Condition');

        var $nesting = [self].concat($parent_nesting), $Condition_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("begin");
        self.$attr_reader("else");
        self.$attr_reader("end");
        return (Opal.def(self, '$initialize', $Condition_initialize$1 = function $$initialize(keyword_l, begin_l, else_l, end_l, expression_l) {
          var $a, $iter = $Condition_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Condition_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          $a = [begin_l, else_l, end_l], (self.begin = $a[0]), (self["else"] = $a[1]), (self.end = $a[2]), $a;
          return $send2(self, $find_super(self, 'initialize', $Condition_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Condition_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/ternary"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ternary');

        var $nesting = [self].concat($parent_nesting), $Ternary_initialize$1;

        
        self.$attr_reader("question");
        self.$attr_reader("colon");
        return (Opal.def(self, '$initialize', $Ternary_initialize$1 = function $$initialize(question_l, colon_l, expression_l) {
          var $a, $iter = $Ternary_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Ternary_initialize$1.$$p = null;
          
          $a = [question_l, colon_l], (self.question = $a[0]), (self.colon = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $Ternary_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Ternary_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/for"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'For');

        var $nesting = [self].concat($parent_nesting), $For_initialize$1;

        
        self.$attr_reader("keyword", "in");
        self.$attr_reader("begin", "end");
        return (Opal.def(self, '$initialize', $For_initialize$1 = function $$initialize(keyword_l, in_l, begin_l, end_l, expression_l) {
          var $a, $iter = $For_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $For_initialize$1.$$p = null;
          
          $a = [keyword_l, in_l], (self.keyword = $a[0]), (self["in"] = $a[1]), $a;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, $find_super(self, 'initialize', $For_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $For_initialize$1.$$arity = 5), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/rescue_body"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueBody');

        var $nesting = [self].concat($parent_nesting), $RescueBody_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("assoc");
        self.$attr_reader("begin");
        return (Opal.def(self, '$initialize', $RescueBody_initialize$1 = function $$initialize(keyword_l, assoc_l, begin_l, expression_l) {
          var $iter = $RescueBody_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $RescueBody_initialize$1.$$p = null;
          
          self.keyword = keyword_l;
          self.assoc = assoc_l;
          self.begin = begin_l;
          return $send2(self, $find_super(self, 'initialize', $RescueBody_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $RescueBody_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/heredoc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Heredoc');

        var $nesting = [self].concat($parent_nesting), $Heredoc_initialize$1;

        
        self.$attr_reader("heredoc_body");
        self.$attr_reader("heredoc_end");
        return (Opal.def(self, '$initialize', $Heredoc_initialize$1 = function $$initialize(begin_l, body_l, end_l) {
          var $iter = $Heredoc_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Heredoc_initialize$1.$$p = null;
          
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $send2(self, $find_super(self, 'initialize', $Heredoc_initialize$1, false, true), 'initialize', [begin_l], null);
        }, $Heredoc_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/source/map/objc_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ObjcKwarg');

        var $nesting = [self].concat($parent_nesting), $ObjcKwarg_initialize$1;

        
        self.$attr_reader("keyword");
        self.$attr_reader("operator");
        self.$attr_reader("argument");
        return (Opal.def(self, '$initialize', $ObjcKwarg_initialize$1 = function $$initialize(keyword_l, operator_l, argument_l, expression_l) {
          var $a, $iter = $ObjcKwarg_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ObjcKwarg_initialize$1.$$p = null;
          
          $a = [keyword_l, operator_l, argument_l], (self.keyword = $a[0]), (self.operator = $a[1]), (self.argument = $a[2]), $a;
          return $send2(self, $find_super(self, 'initialize', $ObjcKwarg_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $ObjcKwarg_initialize$1.$$arity = 4), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/syntax_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$attr_reader', '$message']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting), $SyntaxError_initialize$1;

      
      self.$attr_reader("diagnostic");
      return (Opal.def(self, '$initialize', $SyntaxError_initialize$1 = function $$initialize(diagnostic) {
        var $iter = $SyntaxError_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SyntaxError_initialize$1.$$p = null;
        
        self.diagnostic = diagnostic;
        return $send2(self, $find_super(self, 'initialize', $SyntaxError_initialize$1, false, true), 'initialize', [diagnostic.$message()], null);
      }, $SyntaxError_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/clobbering_error"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ClobberingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'RuntimeError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/diagnostic"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$attr_reader', '$include?', '$raise', '$join', '$inspect', '$dup', '$compile', '$==', '$line', '$last_line', '$is?', '$+', '$message', '$render_line', '$first_line_only', '$last_line_only', '$-', '$source_buffer', '$decompose_position', '$end_pos', '$>', '$private', '$source_line', '$*', '$length', '$each', '$line_range', '$intersect', '$column_range', '$size', '$[]=', '$!', '$>=', '$map', '$name', '$!=', '$resize', '$=~', '$source', '$adjust']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Diagnostic');

      var $nesting = [self].concat($parent_nesting), $Diagnostic_initialize$1, $Diagnostic_message$2, $Diagnostic_render$3, $Diagnostic_render_line$4, $Diagnostic_first_line_only$7, $Diagnostic_last_line_only$8;

      self.$$prototype.reason = self.$$prototype["arguments"] = self.$$prototype.location = self.$$prototype.level = self.$$prototype.highlights = nil;
      
      Opal.const_set($nesting[0], 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());
      self.$attr_reader("level", "reason", "arguments");
      self.$attr_reader("location", "highlights");
      
      Opal.def(self, '$initialize', $Diagnostic_initialize$1 = function $$initialize(level, reason, arguments$, location, highlights) {
        var self = this, $ret_or_1 = nil;

        
        
        if (highlights == null) {
          highlights = [];
        };
        if ($truthy($$($nesting, 'LEVELS')['$include?'](level))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "Diagnostic#level must be one of " + ($$($nesting, 'LEVELS').$join(", ")) + "; ") + ("" + (level.$inspect()) + " provided."))
        };
        if ($truthy(location)) {
        } else {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = (function() {if ($truthy(($ret_or_1 = arguments$))) {
          return $ret_or_1
        } else {
          return $hash2([], {})
        }; return nil; })().$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      }, $Diagnostic_initialize$1.$$arity = -5);
      
      Opal.def(self, '$message', $Diagnostic_message$2 = function $$message() {
        var self = this;

        return $$($nesting, 'Messages').$compile(self.reason, self["arguments"])
      }, $Diagnostic_message$2.$$arity = 0);
      
      Opal.def(self, '$render', $Diagnostic_render$3 = function $$render() {
        var $a, $b, self = this, $ret_or_2 = nil, first_line = nil, last_line = nil, num_lines = nil, buffer = nil, last_lineno = nil, last_column = nil;

        if ($truthy((function() {if ($truthy(($ret_or_2 = self.location.$line()['$=='](self.location.$last_line())))) {
          return $ret_or_2
        } else {
          return self.location['$is?']("\n")
        }; return nil; })())) {
          return $rb_plus(["" + (self.location) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(self.location))
        } else {
          
          first_line = self.$first_line_only(self.location);
          last_line = self.$last_line_only(self.location);
          num_lines = $rb_plus($rb_minus(self.location.$last_line(), self.location.$line()), 1);
          buffer = self.location.$source_buffer();
          $b = buffer.$decompose_position(self.location.$end_pos()), $a = Opal.to_ary($b), (last_lineno = ($a[0] == null ? nil : $a[0])), (last_column = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_plus($rb_plus(["" + (self.location) + "-" + (last_lineno) + ":" + (last_column) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(first_line, $rb_gt(num_lines, 2), false)), self.$render_line(last_line, false, true));
        }
      }, $Diagnostic_render$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$render_line', $Diagnostic_render_line$4 = function $$render_line(range, ellipsis, range_end) {
        var $$5, $$6, self = this, source_line = nil, highlight_line = nil, $ret_or_3 = nil, $writer = nil;

        
        
        if (ellipsis == null) {
          ellipsis = false;
        };
        
        if (range_end == null) {
          range_end = false;
        };
        source_line = range.$source_line();
        highlight_line = $rb_times(" ", source_line.$length());
        $send(self.highlights, 'each', [], ($$5 = function(highlight){var self = $$5.$$s == null ? this : $$5.$$s, line_range = nil, $writer = nil;

          
          
          if (highlight == null) {
            highlight = nil;
          };
          line_range = range.$source_buffer().$line_range(range.$line());
          if ($truthy((highlight = highlight.$intersect(line_range)))) {
            
            $writer = [highlight.$column_range(), $rb_times("~", highlight.$size())];
            $send(highlight_line, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(range['$is?']("\n"))) {
          highlight_line = $rb_plus(highlight_line, "^")
        } else if ($truthy((function() {if ($truthy(($ret_or_3 = range_end['$!']()))) {
          return $rb_ge(range.$size(), 1)
        } else {
          return $ret_or_3
        }; return nil; })())) {
          
          $writer = [range.$column_range(), $rb_plus("^", $rb_times("~", $rb_minus(range.$size(), 1)))];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [range.$column_range(), $rb_times("~", range.$size())];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(ellipsis)) {
          highlight_line = $rb_plus(highlight_line, "...")};
        return $send([source_line, highlight_line], 'map', [], ($$6 = function(line){var self = $$6.$$s == null ? this : $$6.$$s;

          
          
          if (line == null) {
            line = nil;
          };
          return "" + (range.$source_buffer().$name()) + ":" + (range.$line()) + ": " + (line);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $Diagnostic_render_line$4.$$arity = -2);
      
      Opal.def(self, '$first_line_only', $Diagnostic_first_line_only$7 = function $$first_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$resize(range.$source()['$=~'](/\n/))
        } else {
          return range
        }
      }, $Diagnostic_first_line_only$7.$$arity = 1);
      return (Opal.def(self, '$last_line_only', $Diagnostic_last_line_only$8 = function $$last_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$adjust($hash2(["begin_pos"], {"begin_pos": range.$source()['$=~'](/[^\n]*$/)}))
        } else {
          return range
        }
      }, $Diagnostic_last_line_only$8.$$arity = 1), nil) && 'last_line_only';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/diagnostic/engine"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$ignore?', '$call', '$raise?', '$raise', '$protected', '$==', '$level']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $Engine_initialize$1, $Engine_process$2, $Engine_ignore$ques$3, $Engine_raise$ques$4;

      self.$$prototype.consumer = self.$$prototype.ignore_warnings = self.$$prototype.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      Opal.def(self, '$initialize', $Engine_initialize$1 = function $$initialize(consumer) {
        var self = this;

        
        
        if (consumer == null) {
          consumer = nil;
        };
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, $Engine_initialize$1.$$arity = -1);
      
      Opal.def(self, '$process', $Engine_process$2 = function $$process(diagnostic) {
        var self = this;

        
        if ($truthy(self['$ignore?'](diagnostic))) {
        } else if ($truthy(self.consumer)) {
          self.consumer.$call(diagnostic)};
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$($nesting, 'Parser'), 'SyntaxError'), diagnostic)};
        return self;
      }, $Engine_process$2.$$arity = 1);
      self.$protected();
      
      Opal.def(self, '$ignore?', $Engine_ignore$ques$3 = function(diagnostic) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.ignore_warnings))) {
          return diagnostic.$level()['$==']("warning")
        } else {
          return $ret_or_1
        }
      }, $Engine_ignore$ques$3.$$arity = 1);
      return (Opal.def(self, '$raise?', $Engine_raise$ques$4 = function(diagnostic) {
        var self = this, $ret_or_2 = nil, $ret_or_3 = nil;

        if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.all_errors_are_fatal))) {
          return diagnostic.$level()['$==']("error")
        } else {
          return $ret_or_3
        }; return nil; })()))) {
          return $ret_or_2
        } else {
          return diagnostic.$level()['$==']("fatal")
        }
      }, $Engine_raise$ques$4.$$arity = 1), nil) && 'raise?';
    })($$($nesting, 'Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/static_environment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$reset', '$[]', '$push', '$dup', '$pop', '$add', '$to_sym', '$include?', '$declare', '$declared?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $StaticEnvironment_initialize$1, $StaticEnvironment_reset$2, $StaticEnvironment_extend_static$3, $StaticEnvironment_extend_dynamic$4, $StaticEnvironment_unextend$5, $StaticEnvironment_declare$6, $StaticEnvironment_declared$ques$7, $StaticEnvironment_declare_forward_args$8, $StaticEnvironment_declared_forward_args$ques$9, $StaticEnvironment_declare_anonymous_blockarg$10, $StaticEnvironment_declared_anonymous_blockarg$ques$11, $StaticEnvironment_empty$ques$12;

      self.$$prototype.stack = self.$$prototype.variables = nil;
      
      Opal.const_set($nesting[0], 'FORWARD_ARGS', "FORWARD_ARGS");
      Opal.const_set($nesting[0], 'ANONYMOUS_BLOCKARG', "ANONYMOUS_BLOCKARG");
      
      Opal.def(self, '$initialize', $StaticEnvironment_initialize$1 = function $$initialize() {
        var self = this;

        return self.$reset()
      }, $StaticEnvironment_initialize$1.$$arity = 0);
      
      Opal.def(self, '$reset', $StaticEnvironment_reset$2 = function $$reset() {
        var self = this;

        
        self.variables = $$($nesting, 'Set')['$[]']();
        return (self.stack = []);
      }, $StaticEnvironment_reset$2.$$arity = 0);
      
      Opal.def(self, '$extend_static', $StaticEnvironment_extend_static$3 = function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$($nesting, 'Set')['$[]']();
        return self;
      }, $StaticEnvironment_extend_static$3.$$arity = 0);
      
      Opal.def(self, '$extend_dynamic', $StaticEnvironment_extend_dynamic$4 = function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      }, $StaticEnvironment_extend_dynamic$4.$$arity = 0);
      
      Opal.def(self, '$unextend', $StaticEnvironment_unextend$5 = function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      }, $StaticEnvironment_unextend$5.$$arity = 0);
      
      Opal.def(self, '$declare', $StaticEnvironment_declare$6 = function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      }, $StaticEnvironment_declare$6.$$arity = 1);
      
      Opal.def(self, '$declared?', $StaticEnvironment_declared$ques$7 = function(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      }, $StaticEnvironment_declared$ques$7.$$arity = 1);
      
      Opal.def(self, '$declare_forward_args', $StaticEnvironment_declare_forward_args$8 = function $$declare_forward_args() {
        var self = this;

        return self.$declare($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declare_forward_args$8.$$arity = 0);
      
      Opal.def(self, '$declared_forward_args?', $StaticEnvironment_declared_forward_args$ques$9 = function() {
        var self = this;

        return self['$declared?']($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declared_forward_args$ques$9.$$arity = 0);
      
      Opal.def(self, '$declare_anonymous_blockarg', $StaticEnvironment_declare_anonymous_blockarg$10 = function $$declare_anonymous_blockarg() {
        var self = this;

        return self.$declare($$($nesting, 'ANONYMOUS_BLOCKARG'))
      }, $StaticEnvironment_declare_anonymous_blockarg$10.$$arity = 0);
      
      Opal.def(self, '$declared_anonymous_blockarg?', $StaticEnvironment_declared_anonymous_blockarg$ques$11 = function() {
        var self = this;

        return self['$declared?']($$($nesting, 'ANONYMOUS_BLOCKARG'))
      }, $StaticEnvironment_declared_anonymous_blockarg$ques$11.$$arity = 0);
      return (Opal.def(self, '$empty?', $StaticEnvironment_empty$ques$12 = function() {
        var self = this;

        return self.stack['$empty?']()
      }, $StaticEnvironment_empty$ques$12.$$arity = 0), nil) && 'empty?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash = Opal.hash, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$private', '$_lex_trans_keys=', '$-', '$_lex_key_spans=', '$_lex_index_offsets=', '$_lex_indicies=', '$_lex_trans_targs=', '$_lex_trans_actions=', '$_lex_to_state_actions=', '$_lex_from_state_actions=', '$_lex_eof_trans=', '$lex_start=', '$lex_error=', '$lex_en_interp_words=', '$lex_en_interp_string=', '$lex_en_plain_words=', '$lex_en_plain_string=', '$lex_en_interp_backslash_delimited=', '$lex_en_plain_backslash_delimited=', '$lex_en_interp_backslash_delimited_words=', '$lex_en_plain_backslash_delimited_words=', '$lex_en_regexp_modifiers=', '$lex_en_expr_variable=', '$lex_en_expr_fname=', '$lex_en_expr_endfn=', '$lex_en_expr_dot=', '$lex_en_expr_arg=', '$lex_en_expr_cmdarg=', '$lex_en_expr_endarg=', '$lex_en_expr_mid=', '$lex_en_expr_beg=', '$lex_en_expr_labelarg=', '$lex_en_expr_value=', '$lex_en_expr_end=', '$lex_en_leading_dot=', '$lex_en_line_comment=', '$lex_en_line_begin=', '$freeze', '$ord', '$union', '$chars', '$attr_reader', '$reset', '$lex_en_line_begin', '$class', '$new', '$source', '$==', '$encoding', '$unpack', '$[]', '$lex_en_expr_dot', '$lex_en_expr_fname', '$lex_en_expr_value', '$lex_en_expr_beg', '$lex_en_expr_mid', '$lex_en_expr_arg', '$lex_en_expr_cmdarg', '$lex_en_expr_end', '$lex_en_expr_endarg', '$lex_en_expr_endfn', '$lex_en_expr_labelarg', '$lex_en_interp_string', '$lex_en_interp_words', '$lex_en_plain_string', '$fetch', '$invert', '$push', '$count', '$pop', '$any?', '$shift', '$send', '$+', '$size', '$<=', '$===', '$<<', '$>', '$!=', '$emit_comment', '$tok', '$literal', '$flush_string', '$extend_content', '$emit', '$heredoc?', '$saved_herebody_s=', '$start_interp_brace', '$[]=', '$diagnostic', '$range', '$str_s', '$gsub', '$version?', '$nest_and_try_closing', '$heredoc_e', '$pop_literal', '$infer_indent_level', '$words?', '$!', '$eof_codepoint?', '$extend_space', '$extend_string', '$>=', '$active?', '$slice', '$start_with?', '$chr', '$munge_escape?', '$regexp?', '$match', '$squiggly_heredoc?', '$supports_line_continuation_via_slash?', '$include?', '$scan', '$join', '$=~', '$to_i', '$stack_pop', '$emit_table', '$push_literal', '$in_argdef', '$arg_or_cmdarg', '$<', '$emit_do', '$nil?', '$declared?', '$last', '$getbyte', '$inspect', '$end_with?', '$empty?', '$index', '$call', '$Float', '$to_f', '$length', '$lambda', '$Rational', '$Complex', '$each', '$encode_escape', '$%', '$in_kwarg', '$end_interp_brace_and_try_closing', '$lexpop', '$saved_herebody_s', '$next_state_for_literal', '$rstrip', '$&', '$|', '$lex_error', '$protected', '$force_encoding', '$process', '$backslash_delimited?', '$interpolate?', '$lex_en_interp_backslash_delimited_words', '$lex_en_plain_backslash_delimited_words', '$lex_en_plain_words', '$lex_en_interp_backslash_delimited', '$lex_en_plain_backslash_delimited', '$dedent_level', '$type', '$lex_en_regexp_modifiers', '$upcase']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $Lexer_initialize$1, $Lexer_reset$2, $Lexer_source_buffer$eq$3, $Lexer_encoding$4, $Lexer_state$5, $Lexer_state$eq$6, $Lexer_push_cmdarg$7, $Lexer_pop_cmdarg$8, $Lexer_push_cond$9, $Lexer_pop_cond$10, $Lexer_dedent_level$11, $Lexer_advance$12, $Lexer_eof_codepoint$ques$42, $Lexer_version$ques$43, $Lexer_stack_pop$44, $Lexer_encode_escape$45, $Lexer_tok$46, $Lexer_range$47, $Lexer_emit$48, $Lexer_emit_table$49, $Lexer_emit_do$50, $Lexer_arg_or_cmdarg$51, $Lexer_emit_comment$52, $Lexer_diagnostic$53, $Lexer_push_literal$54, $Lexer_next_state_for_literal$55, $Lexer_literal$56, $Lexer_pop_literal$57, $Lexer$58, $writer = nil;

    self.$$prototype.source_buffer = self.$$prototype.source_pts = self.$$prototype.cs = self.$$prototype.cmdarg_stack = self.$$prototype.cmdarg = self.$$prototype.cond_stack = self.$$prototype.cond = self.$$prototype.dedent_level = self.$$prototype.token_queue = self.$$prototype.p = self.$$prototype.command_start = self.$$prototype.herebody_s = self.$$prototype.sharp_s = self.$$prototype.ts = self.$$prototype.te = self.$$prototype.top = self.$$prototype.stack = self.$$prototype.version = self.$$prototype.escape_s = self.$$prototype.escape = self.$$prototype.act = self.$$prototype.context = self.$$prototype.static_env = self.$$prototype.newline_s = self.$$prototype.lambda_stack = self.$$prototype.paren_nest = self.$$prototype.num_digits_s = self.$$prototype.num_suffix_s = self.$$prototype.num_base = self.$$prototype.num_xfrm = self.$$prototype.eq_begin_s = self.$$prototype.cs_before_block_comment = self.$$prototype.tokens = self.$$prototype.comments = self.$$prototype.diagnostics = self.$$prototype.literal_stack = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 46, 46, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 9, 92, 10, 10, 9, 92, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 127, 61, 61, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 10, 10, 0, 127, 0, 127, 61, 126, 93, 93, 0, 127, 0, 127, 10, 10, 34, 34, 10, 10, 39, 39, 0, 127, 10, 96, 96, 96, 0, 45, 0, 120, 0, 120, 0, 92, 0, 120, 0, 120, 0, 45, 0, 120, 0, 120, 67, 99, 45, 45, 0, 92, 0, 120, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 115, 115, 99, 99, 117, 117, 101, 101, 99, 99, 117, 117, 101, 101, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 92, 9, 92, 10, 10, 10, 10, 10, 10, 10, 10, 46, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 0, 35, 36, 123, 0, 127, 48, 57, 0, 127, 0, 26, 0, 35, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 32, 9, 32, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 115, 115, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 46, 46, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 9, 32, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 0, 127, 38, 61, 0, 0, 42, 61, 61, 61, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 10, 10, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 0, 127, 48, 57, 0, 127, 124, 124, 64, 64, 60, 61, 0, 0, 10, 34, 10, 39, 96, 96, 62, 62, 61, 126, 61, 62, 0, 122, 0, 0, 0, 127, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 48, 102, 48, 102, 0, 0, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 48, 102, 48, 102, 0, 0, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 92, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 10, 10, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 102, 102, 0, 0, 101, 105, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 102, 102, 0, 0, 101, 105, 115, 115, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 10, 10, 46, 46, 10, 10, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]];
    $send(self, '_lex_trans_keys=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 84, 1, 84, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 1, 128, 128, 66, 1, 128, 128, 1, 1, 1, 1, 128, 87, 1, 46, 121, 121, 93, 121, 121, 46, 121, 121, 33, 1, 93, 121, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 84, 84, 1, 1, 1, 1, 1, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 36, 88, 128, 10, 128, 27, 36, 24, 88, 128, 10, 128, 33, 24, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 24, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 24, 1, 24, 66, 1, 1, 128, 24, 0, 20, 1, 84, 84, 84, 1, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 128, 10, 128, 1, 1, 2, 0, 25, 30, 1, 1, 66, 2, 123, 0, 128, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 55, 55, 0, 55, 55, 0, 46, 93, 93, 0, 0, 93, 55, 55, 0, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 93, 24, 0, 1, 1, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 1, 54, 48, 75, 67, 15, 58, 1, 0, 5, 0, 0, 67, 67, 67, 67, 10, 1, 0, 5, 1, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 84, 84, 84, 1, 1, 1, 1, 1, 52, 1, 92, 101, 91, 1]];
    $send(self, '_lex_key_spans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 731, 853, 947, 1069, 1191, 1238, 1360, 1482, 1516, 1518, 1612, 1734, 1838, 1967, 2096, 2225, 2354, 2401, 2523, 2645, 2739, 2861, 2983, 3030, 3152, 3274, 3308, 3310, 3404, 3526, 3630, 3759, 3888, 4017, 4146, 4275, 4404, 4533, 4662, 4791, 4920, 5049, 5178, 5307, 5436, 5565, 5567, 5569, 5571, 5700, 5702, 5704, 5706, 5708, 5837, 5966, 6095, 6224, 6353, 6482, 6611, 6740, 6869, 6998, 7127, 7256, 7385, 7514, 7643, 7772, 7901, 8030, 8032, 8034, 8036, 8038, 8048, 8050, 8052, 8054, 8056, 8058, 8060, 8062, 8064, 8193, 8195, 8324, 8409, 8411, 8496, 8498, 8500, 8502, 8504, 8506, 8508, 8637, 8639, 8724, 8809, 8894, 8979, 9064, 9066, 9195, 9324, 9391, 9393, 9522, 9651, 9653, 9655, 9657, 9659, 9788, 9876, 9878, 9925, 10047, 10169, 10263, 10385, 10507, 10554, 10676, 10798, 10832, 10834, 10928, 11050, 11154, 11283, 11412, 11541, 11670, 11799, 11928, 11930, 11932, 12061, 12077, 12088, 12099, 12110, 12121, 12123, 12125, 12127, 12129, 12131, 12133, 12135, 12264, 12266, 12351, 12436, 12521, 12606, 12691, 12776, 12778, 12780, 12865, 12950, 12952, 12954, 12956, 12958, 12960, 13057, 13082, 13083, 13085, 13087, 13089, 13114, 13116, 13118, 13212, 13237, 13326, 13455, 13466, 13595, 13717, 13718, 13719, 13728, 13737, 13738, 13739, 13833, 13834, 13835, 13836, 13930, 13932, 13933, 13934, 13935, 14029, 14085, 14141, 14142, 14198, 14254, 14255, 14302, 14396, 14490, 14491, 14492, 14586, 14642, 14698, 14699, 14746, 14748, 14842, 14919, 14975, 15031, 15087, 15088, 15215, 15342, 15343, 15470, 15471, 15598, 15725, 15852, 15979, 15980, 16107, 16234, 16361, 16488, 16615, 16742, 16743, 16744, 16800, 16801, 16895, 16984, 17113, 17124, 17253, 17375, 17376, 17377, 17386, 17395, 17396, 17397, 17491, 17492, 17493, 17494, 17588, 17590, 17591, 17592, 17593, 17687, 17743, 17799, 17800, 17856, 17912, 17913, 17960, 18054, 18148, 18149, 18150, 18244, 18300, 18356, 18357, 18404, 18406, 18500, 18577, 18633, 18689, 18745, 18746, 18873, 19000, 19001, 19128, 19129, 19256, 19383, 19510, 19637, 19638, 19765, 19892, 20019, 20146, 20273, 20400, 20401, 20402, 20458, 20459, 20553, 20578, 20606, 20700, 20728, 20765, 20854, 20983, 20994, 21123, 21151, 21188, 21213, 21302, 21431, 21442, 21571, 21605, 21630, 21689, 21748, 21778, 21907, 21918, 22047, 22176, 22305, 22434, 22459, 22460, 22527, 22529, 22531, 22660, 22789, 22800, 22802, 22804, 22806, 22808, 22810, 22813, 22815, 22882, 22884, 22887, 23016, 23145, 23274, 23403, 23532, 23661, 23790, 23792, 23794, 23923, 24052, 24181, 24310, 24439, 24568, 24697, 24826, 24955, 25084, 25213, 25342, 25471, 25600, 25729, 25858, 25987, 26116, 26245, 26374, 26503, 26632, 26761, 26890, 27019, 27148, 27277, 27406, 27535, 27664, 27793, 27922, 28051, 28180, 28309, 28438, 28567, 28696, 28825, 28954, 29083, 29212, 29341, 29470, 29599, 29728, 29857, 29986, 30115, 30244, 30373, 30502, 30631, 30760, 30889, 31018, 31147, 31276, 31405, 31534, 31663, 31792, 31921, 32050, 32179, 32308, 32437, 32566, 32695, 32824, 32953, 33082, 33211, 33340, 33469, 33598, 33727, 33856, 33985, 34114, 34243, 34372, 34501, 34503, 34632, 34761, 34786, 34788, 34790, 34792, 34794, 34795, 34924, 35053, 35055, 35056, 35081, 35082, 35149, 35151, 35153, 35155, 35157, 35159, 35162, 35164, 35231, 35233, 35236, 35365, 35367, 35369, 35371, 35499, 35628, 35691, 35745, 35799, 35800, 35854, 35909, 35911, 35913, 35915, 35940, 35941, 36070, 36071, 36188, 36189, 36191, 36193, 36194, 36248, 36250, 36252, 36254, 36279, 36281, 36410, 36412, 36414, 36416, 36418, 36547, 36676, 36805, 36806, 36935, 36937, 37062, 37087, 37089, 37091, 37093, 37094, 37096, 37097, 37226, 37355, 37380, 37381, 37383, 37385, 37387, 37388, 37517, 37646, 37775, 37904, 38033, 38162, 38291, 38420, 38549, 38678, 38807, 38936, 39065, 39194, 39323, 39452, 39581, 39710, 39715, 39716, 39783, 39785, 39786, 39787, 39788, 39813, 39815, 39840, 39907, 39909, 39911, 40040, 40065, 40066, 40087, 40089, 40174, 40259, 40344, 40346, 40348, 40350, 40378, 40507, 40636, 40638, 40639, 40706, 40709, 40710, 40711, 40712, 40713, 40780, 40909, 40920, 40922, 40924, 40926, 40929, 40931, 40933, 40936, 41065, 41076, 41205, 41207, 41209, 41212, 41213, 41239, 41270, 41272, 41274, 41341, 41344, 41468, 41469, 41598, 41727, 41849, 41850, 41851, 41860, 41869, 41870, 41871, 41965, 41966, 41967, 41968, 42062, 42064, 42065, 42066, 42067, 42161, 42217, 42273, 42274, 42330, 42386, 42387, 42434, 42528, 42622, 42623, 42624, 42718, 42774, 42830, 42831, 42878, 42880, 42974, 43051, 43107, 43163, 43219, 43220, 43347, 43474, 43475, 43602, 43603, 43730, 43857, 43984, 44111, 44112, 44239, 44366, 44493, 44620, 44747, 44874, 45001, 45128, 45255, 45382, 45509, 45636, 45763, 45890, 46017, 46144, 46271, 46398, 46525, 46526, 46527, 46583, 46584, 46713, 46842, 46971, 46972, 46974, 46975, 47104, 47233, 47362, 47491, 47620, 47749, 47878, 48007, 48136, 48265, 48394, 48523, 48652, 48781, 48910, 49039, 49168, 49297, 49426, 49555, 49684, 49813, 49942, 50071, 50200, 50329, 50458, 50587, 50716, 50845, 50974, 51103, 51232, 51361, 51490, 51619, 51748, 51877, 52006, 52135, 52264, 52393, 52522, 52651, 52780, 52909, 53038, 53167, 53296, 53425, 53554, 53683, 53812, 53941, 54070, 54199, 54328, 54457, 54586, 54715, 54844, 54911, 55040, 55169, 55298, 55427, 55556, 55685, 55814, 55943, 56072, 56201, 56330, 56459, 56588, 56717, 56846, 56975, 57104, 57233, 57362, 57491, 57620, 57749, 57878, 58007, 58136, 58137, 58202, 58296, 58321, 58322, 58324, 58326, 58328, 58329, 58458, 58587, 58612, 58613, 58615, 58617, 58619, 58620, 58749, 58878, 58880, 58881, 58906, 58907, 58974, 58976, 58978, 59107, 59236, 59247, 59249, 59274, 59275, 59276, 59297, 59300, 59313, 59315, 59317, 59372, 59421, 59497, 59565, 59581, 59640, 59642, 59643, 59649, 59650, 59651, 59719, 59787, 59855, 59923, 59934, 59936, 59937, 59943, 59945, 59946, 59947, 60015, 60083, 60151, 60219, 60287, 60355, 60423, 60491, 60561, 60629, 60699, 60767, 60769, 60772, 60774, 60841, 60843, 60846, 60975, 61104, 61105, 61234, 61363, 61492, 61621, 61750, 61879, 61880, 61882, 61883, 61884, 62013, 62142, 62271, 62400, 62529, 62658, 62787, 62916, 63045, 63174, 63303, 63432, 63561, 63690, 63819, 63948, 64077, 64206, 64335, 64464, 64593, 64722, 64851, 64980, 65109, 65238, 65367, 65496, 65625, 65754, 65883, 66012, 66141, 66270, 66399, 66528, 66657, 66742, 66871, 67000, 67129, 67258, 67387, 67516, 67645, 67774, 67903, 68032, 68161, 68290, 68419, 68548, 68677, 68806, 68935, 69064, 69193, 69322, 69451, 69580, 69709, 69838, 69967, 70096, 70225, 70354, 70483, 70612, 70741, 70870, 70999, 71128, 71257, 71386, 71515, 71644, 71773, 71902, 72031, 72160, 72289, 72418, 72547, 72676, 72805, 72934, 73063, 73192, 73321, 73450, 73579, 73708, 73837, 73966, 74095, 74224, 74353, 74482, 74611, 74740, 74869, 74998, 75127, 75128, 75193, 75194, 75279, 75364, 75449, 75451, 75453, 75455, 75457, 75459, 75512, 75514, 75607, 75709, 75801]];
    $send(self, '_lex_index_offsets=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 18, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 26, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 27, 27, 27, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 19, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 19, 30, 30, 30, 19, 30, 30, 30, 30, 30, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 30, 19, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 19, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32, 30, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 33, 20, 19, 34, 34, 34, 19, 34, 34, 34, 34, 34, 35, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 36, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 37, 34, 34, 34, 34, 34, 34, 38, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39, 34, 19, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 19, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39, 34, 40, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 41, 19, 41, 19, 19, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 44, 42, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 26, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 45, 45, 45, 19, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 19, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 45, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49, 49, 47, 49, 47, 49, 49, 47, 47, 49, 49, 49, 50, 49, 49, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 49, 49, 49, 49, 49, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 49, 47, 47, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 49, 47, 48, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 49, 47, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 47, 49, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 47, 47, 47, 47, 47, 47, 53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 48, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 48, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 48, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 48, 54, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 55, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 59, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 61, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 62, 62, 62, 54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 54, 65, 65, 65, 54, 65, 65, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 65, 54, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 54, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 65, 54, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68, 55, 54, 69, 69, 69, 54, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 71, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 72, 69, 69, 69, 69, 69, 69, 73, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 74, 69, 54, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 54, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 74, 69, 75, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 76, 54, 76, 54, 54, 77, 77, 77, 54, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 54, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 79, 77, 54, 57, 57, 57, 54, 57, 57, 57, 57, 57, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 54, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 61, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60, 57, 54, 80, 80, 80, 54, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 54, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 80, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 84, 84, 82, 84, 82, 84, 84, 82, 82, 84, 84, 84, 85, 84, 84, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 84, 82, 82, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 84, 82, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 82, 82, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 84, 82, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 82, 82, 82, 82, 82, 84, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 82, 82, 82, 82, 82, 82, 88, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 83, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 83, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 83, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 91, 89, 91, 89, 91, 91, 89, 89, 91, 91, 91, 92, 91, 91, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 91, 89, 89, 90, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 91, 89, 90, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 89, 89, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 91, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 89, 89, 89, 89, 91, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 89, 89, 89, 89, 89, 89, 95, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 90, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 90, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 90, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 90, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 98, 97, 98, 97, 97, 98, 98, 97, 97, 97, 99, 97, 97, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 98, 97, 98, 98, 96, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 98, 98, 98, 97, 98, 96, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 97, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 98, 98, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 101, 98, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 98, 98, 98, 98, 98, 101, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 98, 98, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 103, 98, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 98, 98, 98, 98, 98, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 106, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 111, 108, 108, 108, 108, 110, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 108, 108, 108, 108, 109, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 108, 108, 108, 108, 108, 109, 111, 108, 108, 112, 113, 108, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 116, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 114, 114, 114, 114, 116, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 114, 114, 114, 114, 115, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 114, 114, 114, 114, 114, 115, 117, 114, 119, 118, 120, 118, 121, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 123, 118, 123, 123, 123, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 123, 118, 118, 118, 118, 124, 125, 118, 126, 118, 127, 128, 129, 130, 131, 124, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 132, 118, 133, 129, 134, 135, 118, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 136, 137, 129, 138, 122, 118, 122, 122, 122, 122, 122, 122, 122, 122, 139, 122, 122, 122, 122, 122, 122, 122, 122, 140, 122, 122, 141, 122, 142, 122, 122, 122, 143, 144, 118, 138, 118, 122, 118, 118, 118, 118, 118, 118, 118, 118, 118, 145, 118, 145, 145, 145, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 145, 118, 118, 118, 118, 146, 147, 118, 148, 118, 149, 150, 151, 152, 153, 146, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 154, 118, 155, 151, 156, 157, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 158, 159, 151, 120, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 160, 115, 115, 115, 115, 115, 115, 115, 115, 161, 115, 115, 162, 115, 163, 115, 115, 115, 164, 165, 118, 120, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 166, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 167, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 168, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 169, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 170, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 166, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 171, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 172, 115, 115, 115, 115, 115, 115, 115, 173, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 174, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 175, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 166, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 176, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 166, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 177, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 178, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 116, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 118, 118, 118, 118, 116, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 115, 118, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 170, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 118, 118, 118, 118, 118, 115, 180, 179, 181, 179, 182, 179, 151, 179, 183, 179, 179, 179, 179, 179, 179, 179, 184, 179, 185, 179, 186, 179, 151, 179, 187, 179, 151, 179, 188, 179, 182, 179, 190, 189, 191, 191, 191, 191, 191, 191, 191, 191, 191, 193, 191, 193, 193, 193, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 193, 191, 191, 191, 191, 191, 191, 191, 194, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 191, 195, 191, 191, 192, 191, 192, 192, 192, 196, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 191, 191, 191, 191, 191, 192, 197, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 199, 191, 199, 199, 199, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 199, 191, 191, 191, 191, 191, 191, 191, 200, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 191, 201, 191, 191, 198, 191, 198, 198, 198, 202, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 191, 191, 191, 191, 191, 198, 204, 203, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 204, 203, 203, 203, 203, 203, 203, 203, 205, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 206, 203, 207, 203, 208, 203, 208, 208, 208, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 208, 203, 203, 203, 203, 203, 203, 203, 209, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 210, 203, 211, 212, 214, 213, 215, 213, 216, 213, 217, 213, 218, 213, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 219, 221, 211, 222, 223, 222, 222, 222, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 222, 211, 211, 224, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 226, 211, 227, 228, 227, 227, 227, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 227, 211, 211, 229, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 231, 211, 233, 234, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 239, 240, 239, 239, 239, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 238, 238, 241, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 243, 238, 239, 244, 239, 239, 239, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 238, 238, 241, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 243, 238, 223, 211, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 247, 247, 245, 247, 245, 247, 247, 245, 245, 247, 247, 247, 248, 247, 247, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 247, 247, 247, 247, 247, 247, 247, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 245, 247, 245, 245, 246, 247, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 245, 245, 245, 247, 245, 246, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 245, 245, 245, 245, 245, 245, 245, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 245, 245, 245, 245, 247, 245, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 245, 245, 245, 245, 245, 247, 250, 247, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 247, 245, 250, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 252, 245, 245, 245, 245, 253, 245, 245, 245, 245, 245, 254, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 221, 245, 245, 245, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 245, 245, 245, 245, 251, 255, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 245, 245, 245, 254, 245, 251, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 258, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 257, 257, 257, 257, 257, 257, 257, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 257, 257, 257, 257, 256, 257, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 257, 257, 257, 257, 257, 256, 260, 259, 263, 262, 258, 257, 263, 264, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 252, 245, 245, 245, 245, 253, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 245, 245, 245, 245, 251, 255, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 245, 245, 245, 245, 245, 251, 266, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 263, 265, 263, 266, 267, 268, 268, 268, 267, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 267, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 267, 270, 270, 270, 267, 270, 270, 270, 270, 270, 271, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 267, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 272, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 273, 270, 267, 270, 270, 270, 267, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 267, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 274, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 273, 270, 267, 275, 275, 275, 267, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 267, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 277, 275, 267, 278, 278, 278, 267, 278, 278, 278, 278, 278, 279, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 267, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 278, 267, 278, 278, 278, 267, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 267, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 280, 278, 267, 268, 268, 268, 267, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 267, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 281, 268, 267, 282, 282, 282, 267, 282, 282, 282, 282, 282, 283, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 267, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 284, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 285, 282, 282, 282, 282, 282, 282, 286, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 287, 282, 267, 282, 282, 282, 267, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 267, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 287, 282, 288, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 289, 267, 289, 267, 267, 290, 290, 290, 267, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 267, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 292, 290, 267, 270, 270, 270, 267, 270, 270, 270, 270, 270, 271, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 267, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 274, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 273, 270, 267, 293, 293, 293, 267, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 267, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 293, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 296, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 211, 211, 298, 211, 296, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 211, 211, 211, 211, 295, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 211, 211, 211, 211, 211, 295, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 296, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 245, 245, 298, 245, 296, 245, 295, 295, 295, 295, 295, 295, 299, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 295, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 245, 295, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 296, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 245, 245, 298, 245, 296, 245, 295, 295, 295, 295, 295, 295, 295, 295, 300, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 295, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 245, 295, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 296, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 245, 245, 298, 245, 296, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 301, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 295, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 245, 295, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 296, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 245, 245, 298, 245, 296, 245, 295, 295, 295, 301, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 295, 245, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 245, 245, 245, 245, 245, 295, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 304, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 305, 302, 302, 302, 302, 304, 302, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 302, 302, 302, 302, 303, 302, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 302, 302, 302, 302, 302, 303, 305, 302, 302, 306, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 307, 307, 307, 307, 307, 307, 307, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 307, 307, 307, 307, 308, 307, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 307, 307, 307, 307, 307, 308, 310, 309, 310, 309, 309, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 309, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 309, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 309, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 313, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 313, 317, 316, 318, 316, 319, 316, 320, 316, 322, 321, 323, 321, 324, 321, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 307, 307, 307, 307, 307, 307, 307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 307, 307, 307, 307, 325, 307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 307, 307, 307, 307, 307, 325, 326, 313, 327, 328, 327, 327, 327, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 327, 313, 313, 329, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 330, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 331, 313, 332, 333, 332, 332, 332, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 332, 313, 313, 334, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 335, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 336, 313, 338, 339, 338, 338, 338, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 338, 337, 337, 340, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 341, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 337, 342, 337, 344, 345, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 347, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 348, 343, 344, 345, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 349, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 348, 343, 344, 350, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 347, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 348, 343, 351, 313, 328, 313, 353, 354, 353, 353, 353, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 353, 352, 352, 355, 352, 352, 356, 352, 352, 352, 352, 352, 352, 352, 357, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 352, 358, 352, 360, 354, 360, 360, 360, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 360, 359, 359, 355, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 358, 359, 363, 362, 365, 364, 366, 361, 367, 361, 368, 352, 370, 369, 369, 369, 370, 369, 369, 369, 369, 371, 372, 371, 371, 371, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 370, 369, 369, 369, 369, 369, 371, 369, 369, 373, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 374, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 369, 375, 369, 369, 376, 369, 371, 377, 371, 371, 371, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 377, 371, 377, 378, 379, 380, 381, 382, 384, 383, 386, 387, 386, 386, 386, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 386, 385, 372, 383, 388, 383, 390, 389, 389, 389, 390, 389, 389, 389, 389, 391, 392, 391, 391, 391, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 390, 389, 389, 389, 389, 389, 391, 389, 389, 393, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 389, 394, 389, 391, 395, 391, 391, 391, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 391, 395, 397, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 398, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 399, 396, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 400, 400, 400, 400, 400, 400, 400, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 400, 400, 400, 400, 13, 400, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 400, 400, 400, 400, 400, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 400, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 401, 401, 401, 401, 401, 401, 401, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 401, 401, 401, 401, 17, 401, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 401, 401, 401, 401, 401, 17, 404, 403, 403, 403, 404, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 404, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 405, 405, 405, 405, 405, 405, 405, 405, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 406, 403, 403, 403, 403, 403, 403, 403, 403, 403, 407, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 408, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 403, 409, 403, 403, 410, 403, 411, 412, 414, 414, 414, 414, 414, 414, 414, 414, 413, 415, 415, 415, 415, 415, 415, 415, 415, 413, 413, 416, 416, 42, 42, 42, 416, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 416, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 417, 42, 418, 419, 420, 420, 42, 42, 42, 420, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 420, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 421, 42, 41, 420, 422, 423, 424, 424, 27, 27, 27, 424, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 424, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 425, 27, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 424, 424, 424, 424, 424, 424, 424, 426, 426, 426, 426, 426, 426, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 426, 426, 426, 426, 426, 426, 424, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 427, 427, 427, 427, 427, 427, 427, 428, 428, 428, 428, 428, 428, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 428, 428, 428, 428, 428, 428, 427, 427, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 420, 420, 420, 420, 420, 420, 420, 429, 429, 429, 429, 429, 429, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 420, 429, 429, 429, 429, 429, 429, 420, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 430, 430, 430, 430, 430, 430, 430, 431, 431, 431, 431, 431, 431, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 430, 431, 431, 431, 431, 431, 431, 430, 430, 420, 20, 20, 20, 420, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 420, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 432, 20, 416, 27, 27, 27, 416, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 416, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 416, 433, 433, 433, 416, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 416, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 434, 433, 435, 436, 436, 433, 433, 433, 436, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 436, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 437, 433, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 436, 436, 436, 436, 436, 436, 436, 438, 438, 438, 438, 438, 438, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 438, 438, 438, 438, 438, 438, 436, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 439, 439, 439, 439, 439, 439, 439, 440, 440, 440, 440, 440, 440, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 439, 440, 440, 440, 440, 440, 440, 439, 439, 436, 20, 20, 20, 436, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 436, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 432, 20, 441, 436, 436, 27, 27, 27, 436, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 436, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 443, 443, 443, 443, 443, 443, 443, 443, 443, 443, 442, 442, 442, 442, 442, 442, 442, 443, 443, 443, 443, 443, 443, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 443, 443, 443, 443, 443, 443, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 444, 442, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 442, 442, 442, 442, 442, 442, 442, 445, 445, 445, 445, 445, 445, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 445, 445, 445, 445, 445, 445, 442, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 442, 442, 442, 442, 442, 442, 442, 446, 446, 446, 446, 446, 446, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 446, 446, 446, 446, 446, 446, 442, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 442, 442, 442, 442, 442, 442, 442, 447, 447, 447, 447, 447, 447, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 447, 447, 447, 447, 447, 447, 442, 448, 451, 450, 450, 450, 451, 450, 450, 450, 450, 452, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 451, 450, 450, 450, 450, 450, 452, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 450, 450, 450, 450, 450, 450, 450, 453, 453, 453, 453, 453, 453, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 453, 453, 453, 453, 453, 453, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 454, 450, 451, 450, 450, 450, 451, 450, 450, 450, 450, 449, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 451, 450, 450, 450, 450, 450, 449, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 450, 450, 450, 450, 450, 450, 450, 455, 455, 455, 455, 455, 455, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 455, 455, 455, 455, 455, 455, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 450, 456, 450, 449, 451, 455, 455, 455, 451, 455, 455, 455, 455, 449, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 451, 455, 455, 455, 455, 455, 449, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 449, 455, 457, 451, 458, 458, 458, 451, 458, 458, 458, 458, 452, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 452, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 449, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 449, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 449, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 458, 458, 458, 458, 458, 458, 458, 455, 455, 455, 455, 455, 455, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 455, 455, 455, 455, 455, 455, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 458, 458, 458, 458, 458, 458, 458, 460, 460, 460, 460, 460, 460, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 460, 460, 460, 460, 460, 460, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 453, 453, 453, 453, 453, 453, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 462, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 458, 458, 458, 458, 458, 458, 458, 463, 463, 463, 463, 463, 463, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 463, 463, 463, 463, 463, 463, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 458, 458, 458, 458, 458, 458, 458, 464, 464, 464, 464, 464, 464, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 464, 464, 464, 464, 464, 464, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 465, 465, 465, 465, 465, 465, 465, 465, 465, 465, 458, 458, 458, 458, 458, 458, 458, 465, 465, 465, 465, 465, 465, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 465, 465, 465, 465, 465, 465, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 458, 458, 458, 458, 458, 458, 458, 466, 466, 466, 466, 466, 466, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 466, 466, 466, 466, 466, 466, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 459, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 461, 458, 451, 458, 458, 458, 451, 458, 458, 458, 458, 449, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 451, 458, 458, 458, 458, 458, 449, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 467, 467, 467, 467, 467, 467, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 449, 458, 468, 469, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 470, 470, 470, 470, 470, 470, 470, 471, 471, 471, 471, 471, 471, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 471, 471, 471, 471, 471, 471, 470, 470, 473, 472, 472, 472, 473, 472, 472, 472, 472, 472, 474, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 473, 472, 472, 472, 472, 472, 472, 472, 472, 475, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 476, 472, 478, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 479, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 480, 477, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 481, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 481, 481, 481, 481, 481, 481, 481, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 481, 481, 481, 481, 48, 481, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 481, 481, 481, 481, 481, 48, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 481, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 482, 482, 482, 482, 482, 482, 482, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 482, 482, 482, 482, 52, 482, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 482, 482, 482, 482, 482, 52, 485, 484, 484, 484, 485, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 485, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 486, 486, 486, 486, 486, 486, 486, 486, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 487, 484, 484, 484, 484, 484, 484, 484, 484, 484, 488, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 489, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 484, 490, 484, 484, 491, 484, 492, 493, 495, 495, 495, 495, 495, 495, 495, 495, 494, 496, 496, 496, 496, 496, 496, 496, 496, 494, 494, 497, 497, 77, 77, 77, 497, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 497, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 498, 77, 499, 500, 501, 501, 77, 77, 77, 501, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 501, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 502, 77, 76, 501, 503, 504, 505, 505, 62, 62, 62, 505, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 505, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 506, 62, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 505, 505, 505, 505, 505, 505, 505, 507, 507, 507, 507, 507, 507, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 507, 507, 507, 507, 507, 507, 505, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 508, 508, 508, 508, 508, 508, 508, 509, 509, 509, 509, 509, 509, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 509, 509, 509, 509, 509, 509, 508, 508, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 501, 501, 501, 501, 501, 501, 501, 510, 510, 510, 510, 510, 510, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 510, 510, 510, 510, 510, 510, 501, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 511, 511, 511, 511, 511, 511, 511, 512, 512, 512, 512, 512, 512, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 512, 512, 512, 512, 512, 512, 511, 511, 501, 55, 55, 55, 501, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 501, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 513, 55, 497, 62, 62, 62, 497, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 497, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 497, 514, 514, 514, 497, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 497, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 515, 514, 516, 517, 517, 514, 514, 514, 517, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 517, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 518, 514, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 517, 517, 517, 517, 517, 517, 517, 519, 519, 519, 519, 519, 519, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 519, 519, 519, 519, 519, 519, 517, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 520, 520, 520, 520, 520, 520, 520, 521, 521, 521, 521, 521, 521, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 521, 521, 521, 521, 521, 521, 520, 520, 517, 55, 55, 55, 517, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 517, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 513, 55, 522, 517, 517, 62, 62, 62, 517, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 517, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 64, 62, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 523, 523, 523, 523, 523, 523, 523, 524, 524, 524, 524, 524, 524, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 524, 524, 524, 524, 524, 524, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 525, 523, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 523, 523, 523, 523, 523, 523, 523, 526, 526, 526, 526, 526, 526, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 526, 526, 526, 526, 526, 526, 523, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 523, 523, 523, 523, 523, 523, 523, 527, 527, 527, 527, 527, 527, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 527, 527, 527, 527, 527, 527, 523, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 523, 523, 523, 523, 523, 523, 523, 528, 528, 528, 528, 528, 528, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 528, 528, 528, 528, 528, 528, 523, 529, 532, 531, 531, 531, 532, 531, 531, 531, 531, 533, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 532, 531, 531, 531, 531, 531, 533, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 531, 531, 531, 531, 531, 531, 531, 534, 534, 534, 534, 534, 534, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 534, 534, 534, 534, 534, 534, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 535, 531, 532, 531, 531, 531, 532, 531, 531, 531, 531, 530, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 532, 531, 531, 531, 531, 531, 530, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 531, 531, 531, 531, 531, 531, 531, 536, 536, 536, 536, 536, 536, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 536, 536, 536, 536, 536, 536, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 537, 531, 530, 532, 536, 536, 536, 532, 536, 536, 536, 536, 530, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 532, 536, 536, 536, 536, 536, 530, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 530, 536, 538, 532, 539, 539, 539, 532, 539, 539, 539, 539, 533, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 533, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 530, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 530, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 530, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 539, 539, 539, 539, 539, 539, 539, 536, 536, 536, 536, 536, 536, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 536, 536, 536, 536, 536, 536, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 539, 539, 539, 539, 539, 539, 539, 541, 541, 541, 541, 541, 541, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 541, 541, 541, 541, 541, 541, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 534, 534, 534, 534, 534, 534, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 543, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 539, 539, 539, 539, 539, 539, 539, 544, 544, 544, 544, 544, 544, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 544, 544, 544, 544, 544, 544, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 539, 539, 539, 539, 539, 539, 539, 545, 545, 545, 545, 545, 545, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 545, 545, 545, 545, 545, 545, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 539, 539, 539, 539, 539, 539, 539, 546, 546, 546, 546, 546, 546, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 546, 546, 546, 546, 546, 546, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 539, 539, 539, 539, 539, 539, 539, 547, 547, 547, 547, 547, 547, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 547, 547, 547, 547, 547, 547, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 542, 539, 532, 539, 539, 539, 532, 539, 539, 539, 539, 530, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 532, 539, 539, 539, 539, 539, 530, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 548, 548, 548, 548, 548, 548, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 530, 539, 549, 550, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 551, 551, 551, 551, 551, 551, 551, 552, 552, 552, 552, 552, 552, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 552, 552, 552, 552, 552, 552, 551, 551, 554, 553, 553, 553, 554, 553, 553, 553, 553, 555, 556, 555, 555, 555, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 554, 553, 553, 553, 553, 553, 555, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 557, 553, 555, 558, 555, 555, 555, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 555, 558, 559, 560, 560, 560, 559, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 559, 560, 562, 561, 561, 561, 562, 561, 561, 561, 561, 561, 563, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 562, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 564, 561, 565, 566, 566, 566, 565, 566, 566, 566, 566, 566, 567, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 565, 566, 569, 568, 568, 568, 569, 568, 568, 568, 568, 568, 570, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 569, 568, 568, 568, 568, 568, 568, 568, 568, 571, 568, 573, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 574, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 575, 572, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 576, 576, 576, 576, 576, 576, 576, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 576, 576, 576, 576, 83, 576, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 576, 576, 576, 576, 576, 83, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 576, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 577, 577, 577, 577, 577, 577, 577, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 577, 577, 577, 577, 87, 577, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 577, 577, 577, 577, 577, 87, 579, 578, 578, 578, 579, 578, 578, 578, 578, 578, 580, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 579, 578, 582, 581, 581, 581, 582, 581, 581, 581, 581, 583, 584, 583, 583, 583, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 582, 581, 581, 581, 581, 581, 583, 581, 581, 585, 581, 583, 586, 583, 583, 583, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 586, 583, 586, 588, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 589, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 590, 587, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 591, 591, 591, 591, 591, 591, 591, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 591, 591, 591, 591, 90, 591, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 591, 591, 591, 591, 591, 90, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 591, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 592, 592, 592, 592, 592, 592, 592, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 592, 592, 592, 592, 94, 592, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 592, 592, 592, 592, 592, 94, 594, 593, 593, 593, 594, 593, 593, 593, 593, 595, 596, 595, 595, 595, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 593, 594, 593, 593, 593, 593, 593, 595, 593, 595, 597, 595, 595, 595, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 595, 597, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 598, 598, 598, 598, 598, 598, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 598, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 600, 600, 600, 600, 600, 600, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 600, 601, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 602, 98, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 603, 603, 603, 603, 603, 603, 603, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 603, 603, 603, 603, 96, 603, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 603, 603, 603, 603, 603, 96, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 603, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 604, 604, 604, 604, 604, 604, 604, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 604, 604, 604, 604, 101, 604, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 604, 604, 604, 604, 604, 101, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 605, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 605, 605, 605, 605, 605, 605, 605, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 605, 605, 605, 605, 103, 605, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 605, 605, 605, 605, 605, 103, 607, 608, 608, 608, 607, 608, 608, 608, 608, 609, 610, 609, 609, 609, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 607, 608, 608, 608, 608, 608, 609, 611, 608, 612, 613, 614, 615, 608, 608, 608, 616, 617, 608, 617, 608, 618, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 619, 608, 620, 621, 622, 608, 608, 623, 624, 623, 623, 625, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 626, 627, 608, 618, 628, 618, 629, 630, 631, 632, 633, 634, 606, 606, 635, 606, 606, 606, 636, 637, 638, 606, 606, 639, 640, 641, 642, 606, 643, 606, 644, 606, 608, 645, 608, 617, 608, 606, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 647, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 646, 646, 646, 647, 646, 647, 646, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 646, 646, 646, 646, 606, 646, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 646, 646, 646, 646, 646, 606, 609, 648, 609, 609, 609, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 648, 609, 648, 649, 618, 650, 650, 618, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 618, 650, 651, 652, 653, 654, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 105, 105, 655, 105, 655, 105, 105, 655, 655, 105, 105, 105, 657, 105, 105, 658, 658, 658, 658, 658, 658, 658, 658, 658, 658, 105, 105, 105, 105, 105, 105, 105, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 655, 105, 655, 655, 656, 105, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 655, 655, 655, 105, 655, 656, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 659, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 659, 659, 659, 659, 659, 659, 659, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 659, 659, 659, 659, 656, 659, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 659, 659, 659, 659, 659, 656, 658, 658, 658, 658, 658, 658, 658, 658, 658, 658, 659, 660, 650, 618, 650, 618, 650, 618, 650, 662, 661, 618, 663, 650, 618, 650, 664, 618, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 655, 618, 655, 618, 650, 618, 618, 650, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 647, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 646, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 646, 646, 646, 647, 646, 647, 646, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 646, 646, 646, 646, 623, 646, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 646, 646, 646, 646, 646, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 623, 666, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 623, 623, 623, 667, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 623, 623, 623, 623, 623, 668, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 669, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 670, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 647, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 647, 665, 647, 665, 623, 623, 623, 669, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 623, 665, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 665, 665, 665, 665, 665, 623, 664, 655, 610, 655, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 672, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 673, 674, 606, 606, 606, 606, 606, 675, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 676, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 677, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 678, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 679, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 680, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 681, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 682, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 683, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 684, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 685, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 686, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 682, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 687, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 686, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 688, 606, 689, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 690, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 691, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 692, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 693, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 694, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 695, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 696, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 697, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 698, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 699, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 700, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 701, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 691, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 702, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 703, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 647, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 704, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 704, 704, 704, 647, 704, 647, 704, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 704, 704, 704, 704, 606, 704, 606, 606, 606, 606, 606, 606, 606, 606, 705, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 704, 704, 704, 704, 704, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 706, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 707, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 708, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 709, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 710, 606, 711, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 712, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 684, 606, 606, 606, 713, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 714, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 715, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 700, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 716, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 638, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 698, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 717, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 718, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 719, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 700, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 720, 606, 606, 606, 721, 606, 606, 606, 606, 606, 722, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 722, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 723, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 724, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 725, 726, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 727, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 700, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 728, 606, 606, 729, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 684, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 695, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 730, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 731, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 713, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 732, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 638, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 733, 606, 606, 606, 606, 606, 606, 606, 606, 606, 727, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 695, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 734, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 735, 606, 606, 606, 606, 606, 606, 606, 736, 606, 606, 606, 606, 606, 606, 606, 737, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 713, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 701, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 721, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 738, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 695, 606, 606, 606, 719, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 739, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 740, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 647, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 647, 671, 647, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 606, 671, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 689, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 606, 671, 671, 671, 671, 671, 606, 618, 650, 742, 743, 743, 743, 742, 743, 743, 743, 743, 744, 743, 744, 744, 744, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 742, 743, 743, 743, 743, 743, 744, 743, 743, 745, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 746, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 743, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 743, 747, 743, 743, 741, 743, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 741, 743, 743, 743, 743, 743, 741, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 110, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 748, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 111, 748, 748, 748, 748, 110, 748, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 748, 748, 748, 748, 109, 748, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 748, 748, 748, 748, 748, 109, 744, 749, 744, 744, 744, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 749, 744, 749, 750, 751, 752, 753, 754, 748, 755, 748, 756, 758, 759, 759, 759, 758, 759, 759, 759, 759, 760, 761, 760, 760, 760, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 758, 759, 759, 759, 759, 759, 760, 762, 759, 763, 759, 764, 765, 759, 759, 759, 766, 767, 759, 767, 759, 764, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 768, 769, 770, 759, 759, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 772, 773, 759, 764, 757, 764, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 759, 774, 759, 767, 759, 757, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 776, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 775, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 775, 775, 775, 775, 775, 776, 775, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 775, 775, 775, 775, 757, 775, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 757, 775, 775, 775, 775, 775, 757, 778, 777, 779, 760, 780, 760, 760, 760, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 760, 780, 781, 764, 782, 782, 764, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 764, 782, 783, 784, 785, 786, 764, 782, 764, 782, 764, 782, 764, 787, 782, 764, 782, 789, 764, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 764, 788, 764, 782, 764, 764, 782, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 776, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 790, 790, 790, 790, 790, 776, 790, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 790, 790, 790, 790, 771, 790, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 790, 790, 790, 790, 790, 771, 789, 788, 761, 788, 764, 782, 792, 791, 791, 791, 792, 791, 791, 791, 791, 793, 794, 793, 793, 793, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 792, 791, 791, 791, 791, 791, 793, 791, 791, 795, 791, 120, 796, 791, 797, 791, 798, 120, 151, 799, 153, 120, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 800, 791, 801, 151, 802, 803, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 151, 804, 151, 120, 791, 791, 791, 791, 791, 791, 791, 791, 791, 791, 805, 791, 791, 791, 791, 791, 791, 791, 791, 806, 791, 791, 807, 791, 808, 791, 791, 791, 164, 165, 791, 120, 791, 809, 809, 809, 809, 809, 809, 809, 809, 809, 793, 809, 793, 793, 793, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 793, 809, 809, 809, 809, 146, 147, 809, 148, 809, 149, 150, 151, 152, 153, 146, 809, 809, 809, 809, 809, 809, 809, 809, 809, 809, 154, 809, 155, 151, 156, 157, 809, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 158, 159, 151, 120, 115, 809, 115, 115, 115, 115, 115, 115, 115, 115, 160, 115, 115, 115, 115, 115, 115, 115, 115, 161, 115, 115, 162, 115, 163, 115, 115, 115, 164, 165, 809, 120, 809, 115, 810, 811, 811, 811, 810, 811, 811, 811, 811, 151, 812, 151, 151, 151, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 810, 811, 811, 811, 811, 811, 151, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 811, 151, 811, 151, 812, 151, 151, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 114, 114, 114, 114, 114, 120, 114, 114, 114, 114, 114, 114, 114, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 114, 151, 812, 151, 151, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 114, 813, 151, 812, 151, 151, 151, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 151, 814, 814, 814, 814, 814, 814, 814, 814, 814, 815, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 814, 151, 814, 151, 812, 151, 151, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 151, 151, 114, 816, 810, 151, 810, 818, 817, 820, 821, 820, 820, 820, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 820, 819, 822, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 116, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 117, 810, 810, 810, 810, 116, 810, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 810, 810, 810, 810, 115, 810, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 810, 810, 810, 810, 810, 115, 823, 151, 812, 151, 151, 151, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 151, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 151, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 120, 810, 824, 825, 826, 827, 828, 829, 151, 812, 151, 151, 151, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 151, 810, 810, 810, 810, 810, 810, 810, 810, 810, 120, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 810, 151, 810, 151, 817, 120, 830, 120, 830, 831, 832, 831, 831, 831, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 819, 831, 819, 833, 830, 834, 834, 834, 834, 834, 834, 834, 834, 834, 123, 834, 123, 123, 123, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 123, 834, 834, 834, 834, 124, 125, 834, 126, 834, 127, 128, 129, 130, 131, 124, 834, 834, 834, 834, 834, 834, 834, 834, 834, 834, 132, 834, 133, 129, 134, 135, 834, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 136, 137, 129, 138, 122, 834, 122, 122, 122, 122, 122, 122, 122, 122, 139, 122, 122, 122, 122, 122, 122, 122, 122, 140, 122, 122, 141, 122, 142, 122, 122, 122, 143, 144, 834, 138, 834, 122, 151, 830, 835, 830, 836, 830, 837, 830, 838, 190, 190, 190, 838, 190, 190, 190, 190, 839, 190, 839, 839, 839, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 838, 190, 190, 190, 190, 190, 839, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 190, 840, 190, 190, 192, 190, 192, 192, 192, 196, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 190, 190, 190, 190, 190, 192, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 841, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 190, 189, 189, 189, 189, 841, 189, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 189, 189, 189, 189, 192, 189, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 189, 189, 189, 189, 189, 192, 842, 842, 842, 842, 842, 842, 842, 842, 842, 193, 842, 193, 193, 193, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 193, 842, 842, 842, 842, 842, 842, 842, 194, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 842, 195, 842, 842, 192, 842, 192, 192, 192, 196, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 842, 842, 842, 842, 842, 192, 843, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 841, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 842, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 190, 842, 842, 842, 842, 841, 842, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 842, 842, 842, 842, 192, 842, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 844, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 842, 842, 842, 842, 842, 192, 197, 842, 846, 845, 845, 845, 846, 845, 845, 845, 845, 847, 845, 847, 847, 847, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 846, 845, 845, 845, 845, 845, 847, 845, 845, 848, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 849, 845, 845, 845, 845, 845, 845, 845, 850, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 851, 845, 847, 852, 847, 847, 847, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 852, 847, 852, 853, 854, 855, 856, 858, 857, 859, 860, 857, 861, 863, 864, 864, 864, 863, 864, 864, 864, 864, 865, 866, 865, 865, 865, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 863, 864, 864, 864, 864, 864, 865, 864, 864, 867, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 864, 868, 864, 864, 862, 864, 862, 862, 862, 862, 862, 862, 862, 862, 869, 862, 862, 862, 862, 862, 862, 862, 862, 870, 862, 862, 871, 862, 872, 862, 862, 862, 864, 864, 864, 864, 864, 862, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 873, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 873, 873, 873, 873, 873, 873, 873, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 873, 873, 873, 873, 862, 873, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 873, 873, 873, 873, 873, 862, 865, 874, 865, 865, 865, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 874, 865, 874, 875, 876, 877, 878, 879, 881, 880, 882, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 884, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 885, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 886, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 887, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 888, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 884, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 889, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 890, 862, 862, 862, 862, 862, 862, 862, 891, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 892, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 893, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 884, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 894, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 884, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 895, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 896, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 883, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 862, 883, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 888, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 883, 883, 883, 883, 883, 862, 898, 221, 221, 221, 898, 221, 221, 221, 221, 899, 900, 899, 899, 899, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 898, 221, 221, 221, 221, 221, 899, 901, 221, 902, 221, 903, 904, 221, 905, 221, 906, 907, 221, 908, 909, 910, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 911, 221, 912, 913, 914, 915, 221, 916, 917, 916, 916, 918, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 916, 919, 920, 221, 921, 922, 221, 923, 924, 925, 926, 927, 928, 897, 897, 929, 897, 897, 897, 930, 931, 932, 897, 897, 933, 934, 935, 936, 897, 937, 897, 938, 897, 939, 940, 221, 921, 221, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 945, 944, 944, 946, 944, 947, 949, 950, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 951, 948, 953, 952, 954, 955, 956, 899, 957, 899, 899, 899, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 957, 899, 957, 959, 958, 961, 962, 961, 961, 961, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 961, 960, 221, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 221, 963, 964, 965, 966, 967, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 969, 969, 969, 969, 969, 969, 969, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 969, 969, 969, 969, 969, 969, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 970, 969, 969, 969, 969, 969, 968, 972, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 221, 971, 973, 975, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 221, 974, 221, 211, 222, 223, 222, 222, 222, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 222, 971, 971, 224, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 971, 971, 971, 221, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 226, 971, 239, 240, 239, 239, 239, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 238, 238, 241, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 243, 238, 222, 223, 222, 222, 222, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 222, 971, 971, 224, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 971, 971, 971, 221, 221, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 971, 226, 971, 977, 963, 979, 978, 981, 980, 963, 982, 982, 982, 963, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 982, 963, 982, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 984, 985, 963, 986, 247, 987, 985, 963, 963, 988, 989, 963, 989, 963, 247, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 990, 963, 991, 992, 993, 963, 994, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 995, 963, 963, 247, 983, 247, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 963, 996, 963, 997, 963, 983, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 999, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 998, 998, 998, 1000, 998, 999, 998, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 998, 998, 998, 998, 983, 998, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 983, 998, 998, 998, 998, 998, 983, 1002, 1001, 1003, 1005, 1006, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1007, 1004, 1009, 1010, 1008, 1011, 1012, 1013, 1014, 247, 998, 998, 1015, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 247, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 998, 998, 998, 998, 998, 998, 998, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 998, 998, 998, 998, 246, 998, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 998, 998, 998, 998, 998, 246, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 998, 1016, 998, 247, 998, 247, 998, 247, 1017, 998, 247, 998, 247, 998, 247, 247, 998, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1018, 1018, 1018, 1018, 1018, 1018, 1021, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1018, 1018, 1018, 1019, 1018, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1018, 1018, 1018, 1018, 1018, 1019, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024, 1024, 1025, 1024, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024, 1024, 1024, 1025, 1016, 998, 1015, 998, 1027, 1028, 963, 1029, 262, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 263, 252, 264, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 263, 253, 263, 266, 221, 963, 921, 221, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 221, 963, 221, 972, 963, 1033, 1032, 1032, 1032, 1033, 1032, 1032, 1032, 1032, 1034, 1035, 1034, 1034, 1034, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1033, 1032, 1032, 1032, 1032, 1032, 1034, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1032, 1037, 1032, 1032, 1036, 1032, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1032, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1038, 1038, 1038, 1038, 1039, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1038, 1038, 1038, 1038, 1038, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1040, 1040, 1040, 1040, 1041, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1040, 1040, 1040, 1040, 1040, 1041, 1044, 1043, 1043, 1043, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1046, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1048, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1049, 1043, 1043, 1050, 1043, 1051, 1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1053, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1053, 1053, 1056, 1056, 290, 290, 290, 1056, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1056, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1057, 290, 1058, 1059, 1060, 1060, 290, 290, 290, 1060, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1060, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 291, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 1061, 290, 289, 1060, 1062, 1063, 1064, 1064, 275, 275, 275, 1064, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 1064, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 1065, 275, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1066, 1066, 1066, 1066, 1066, 1066, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1066, 1066, 1066, 1066, 1066, 1066, 1064, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068, 1068, 1068, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068, 1068, 1068, 1067, 1067, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1069, 1069, 1069, 1069, 1069, 1069, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1069, 1069, 1069, 1069, 1069, 1069, 1060, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1070, 1070, 1060, 268, 268, 268, 1060, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1060, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1072, 268, 1056, 275, 275, 275, 1056, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 1056, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 277, 275, 1056, 1073, 1073, 1073, 1056, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1056, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074, 1073, 1075, 1076, 1076, 1073, 1073, 1073, 1076, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1076, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1077, 1073, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078, 1078, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078, 1078, 1076, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080, 1080, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080, 1080, 1079, 1079, 1076, 268, 268, 268, 1076, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1076, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1072, 268, 1081, 1076, 1076, 275, 275, 275, 1076, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 1076, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 276, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 277, 275, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083, 1083, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083, 1083, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1084, 1082, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1085, 1085, 1085, 1085, 1085, 1085, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1085, 1085, 1085, 1085, 1085, 1085, 1082, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1086, 1086, 1086, 1086, 1086, 1086, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1086, 1086, 1086, 1086, 1086, 1086, 1082, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1087, 1087, 1087, 1087, 1087, 1087, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1087, 1087, 1087, 1087, 1087, 1087, 1082, 1088, 1091, 1090, 1090, 1090, 1091, 1090, 1090, 1090, 1090, 1092, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1091, 1090, 1090, 1090, 1090, 1090, 1092, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1094, 1090, 1091, 1090, 1090, 1090, 1091, 1090, 1090, 1090, 1090, 1089, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1091, 1090, 1090, 1090, 1090, 1090, 1089, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1095, 1095, 1095, 1095, 1095, 1095, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1095, 1095, 1095, 1095, 1095, 1095, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1096, 1090, 1089, 1091, 1095, 1095, 1095, 1091, 1095, 1095, 1095, 1095, 1089, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1091, 1095, 1095, 1095, 1095, 1095, 1089, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1089, 1095, 1097, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1092, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1092, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1089, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1095, 1095, 1095, 1095, 1095, 1095, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1095, 1095, 1095, 1095, 1095, 1095, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1101, 1101, 1101, 1101, 1101, 1101, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1101, 1101, 1101, 1101, 1101, 1101, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1099, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1103, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1104, 1104, 1104, 1104, 1104, 1104, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1104, 1104, 1104, 1104, 1104, 1104, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1105, 1105, 1105, 1105, 1105, 1105, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1105, 1105, 1105, 1105, 1105, 1105, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1106, 1106, 1106, 1106, 1106, 1106, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1106, 1106, 1106, 1106, 1106, 1106, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1107, 1107, 1107, 1107, 1107, 1107, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1107, 1107, 1107, 1107, 1107, 1107, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1100, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1089, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1110, 1110, 1110, 1110, 1110, 1110, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1110, 1110, 1110, 1110, 1110, 1110, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1111, 1111, 1111, 1111, 1111, 1111, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1111, 1111, 1111, 1111, 1111, 1111, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1112, 1112, 1112, 1112, 1112, 1112, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1112, 1112, 1112, 1112, 1112, 1112, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1113, 1113, 1113, 1113, 1113, 1113, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1113, 1113, 1113, 1113, 1113, 1113, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1114, 1114, 1114, 1114, 1114, 1114, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1114, 1114, 1114, 1114, 1114, 1114, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1115, 1115, 1115, 1115, 1115, 1115, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1115, 1115, 1115, 1115, 1115, 1115, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1116, 1116, 1116, 1116, 1116, 1116, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1116, 1116, 1116, 1116, 1116, 1116, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1089, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1117, 1117, 1117, 1117, 1117, 1117, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1117, 1117, 1117, 1117, 1117, 1117, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1118, 1118, 1118, 1118, 1118, 1118, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1118, 1118, 1118, 1118, 1118, 1118, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1119, 1119, 1119, 1119, 1119, 1119, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1119, 1119, 1119, 1119, 1119, 1119, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1120, 1120, 1120, 1120, 1120, 1120, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1120, 1120, 1120, 1120, 1120, 1120, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1091, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1091, 1098, 1098, 1098, 1098, 1098, 1109, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1108, 1108, 1108, 1108, 1108, 1108, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1102, 1098, 1121, 1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124, 1124, 1124, 1124, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124, 1124, 1124, 1124, 1123, 1123, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 296, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 211, 211, 298, 211, 296, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 211, 211, 211, 211, 295, 211, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 211, 211, 211, 211, 211, 295, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 296, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 963, 963, 298, 963, 296, 963, 295, 295, 295, 295, 1125, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 963, 963, 963, 963, 295, 963, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 963, 963, 963, 963, 963, 295, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 296, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 297, 963, 963, 298, 963, 296, 963, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 1126, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 963, 963, 963, 963, 295, 963, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 963, 963, 963, 963, 963, 295, 1127, 1128, 963, 958, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 1129, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 1130, 1131, 897, 897, 897, 897, 897, 1132, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1133, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 1134, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1135, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 1136, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1137, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1138, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 1139, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 1140, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 1141, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 296, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 211, 211, 298, 211, 296, 211, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 211, 211, 211, 211, 897, 211, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 211, 211, 211, 211, 211, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1142, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1143, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 1139, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1144, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1143, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1145, 897, 1146, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1147, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 1148, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1149, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1150, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 1151, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1152, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1153, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 1154, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 1155, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1156, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1157, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 1158, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1148, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1159, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1160, 897, 1161, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1162, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1141, 897, 897, 897, 1159, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1163, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1164, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1157, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 1165, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 932, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1155, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 1166, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1167, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 1168, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1169, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1157, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1170, 897, 897, 897, 1171, 897, 897, 897, 897, 897, 1172, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1172, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1173, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 1174, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1175, 1176, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 1177, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1178, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1179, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1182, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1183, 1180, 1180, 1184, 1180, 1182, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1180, 1180, 1180, 1180, 1181, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1180, 1180, 1180, 1180, 1180, 1181, 949, 1185, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 948, 951, 948, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1186, 897, 897, 1187, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1141, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1152, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1188, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1189, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1159, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1190, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 932, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 1191, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1192, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1152, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1157, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1193, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 1194, 897, 897, 897, 897, 897, 897, 897, 1195, 897, 897, 897, 897, 897, 897, 897, 1196, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1159, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1197, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1198, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1166, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1199, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1166, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 1200, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1152, 897, 897, 897, 1201, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1202, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1166, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 1203, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 1204, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 941, 942, 942, 942, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 942, 296, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 297, 941, 941, 298, 941, 296, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 943, 941, 941, 897, 941, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 1146, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 897, 941, 941, 941, 941, 941, 897, 1205, 221, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 963, 1206, 963, 1208, 1207, 1207, 1207, 1208, 1207, 1207, 1207, 1207, 1209, 1210, 1209, 1209, 1209, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208, 1207, 1207, 1207, 1207, 1207, 1209, 1207, 1207, 1211, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1212, 1207, 1209, 1213, 1209, 1209, 1209, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1219, 1221, 1223, 1224, 1224, 1224, 1223, 1224, 1224, 1224, 1224, 1225, 1226, 1225, 1225, 1225, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1223, 1224, 1224, 1224, 1224, 1224, 1225, 1224, 1227, 1228, 1224, 1224, 1224, 1227, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1224, 1229, 1224, 1224, 1222, 1224, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1224, 1224, 1224, 1224, 1224, 1222, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 304, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 305, 1230, 1230, 1230, 1230, 304, 1230, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1230, 1230, 1230, 1230, 303, 1230, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1230, 1230, 1230, 1230, 1230, 303, 1225, 1231, 1225, 1225, 1225, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1225, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1230, 1238, 1240, 1241, 1241, 1241, 1240, 1241, 1241, 1241, 1241, 1242, 1243, 1242, 1242, 1242, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1240, 1241, 1241, 1241, 1241, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1245, 1250, 1251, 1252, 1248, 1253, 1254, 1255, 1248, 1256, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1265, 1265, 1267, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1268, 1269, 1270, 1248, 1271, 1245, 1272, 1273, 1274, 1275, 1276, 1277, 1239, 1239, 1278, 1239, 1239, 1239, 1279, 1280, 1281, 1239, 1239, 1282, 1283, 1284, 1285, 1239, 1286, 1239, 1287, 1239, 1288, 1289, 1290, 1291, 1241, 1239, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1292, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 313, 313, 313, 313, 313, 1292, 313, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 313, 313, 313, 313, 1239, 313, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 313, 313, 313, 313, 313, 1239, 1294, 1293, 1295, 1242, 1296, 1242, 1242, 1242, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1242, 1296, 1297, 1299, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1299, 1298, 1300, 1301, 1302, 1303, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 308, 308, 1304, 308, 1304, 308, 308, 1304, 1304, 308, 308, 308, 1305, 308, 308, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 308, 308, 308, 308, 308, 308, 308, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1304, 308, 1304, 1304, 325, 308, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1304, 1304, 1304, 308, 1304, 325, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1307, 1307, 1307, 1307, 325, 1307, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1307, 1307, 1307, 1307, 1307, 325, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1307, 1308, 313, 1248, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1308, 1309, 1311, 1312, 1248, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1308, 1313, 1308, 1314, 1309, 1316, 1315, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 1315, 1318, 1317, 1319, 1317, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1322, 1320, 1320, 1320, 1320, 1320, 1321, 1320, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 310, 1320, 1324, 1323, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1326, 1323, 1327, 1328, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1329, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1330, 1323, 1323, 1323, 1323, 1323, 1323, 1331, 1323, 1323, 1326, 1323, 1327, 1328, 1323, 1323, 1323, 1332, 1323, 1323, 1323, 1323, 1323, 1329, 1323, 1323, 1333, 1323, 1323, 1323, 1323, 1323, 1330, 1323, 314, 314, 314, 314, 314, 314, 314, 314, 314, 314, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1336, 1334, 1334, 1334, 1334, 1334, 1335, 1334, 1334, 1334, 1337, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1338, 1334, 1339, 313, 1339, 313, 313, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 313, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1339, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1340, 1343, 1342, 1344, 1346, 1345, 1345, 1345, 1347, 1345, 1348, 1349, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1331, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1332, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1333, 1323, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1351, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1332, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1333, 1323, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1354, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1357, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1359, 1358, 1360, 1362, 1361, 1361, 1361, 1363, 1361, 1365, 1364, 1366, 1367, 1369, 1369, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1370, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1371, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1372, 1368, 1373, 1373, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1374, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1373, 1373, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1357, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1377, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1378, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1379, 1375, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1382, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1383, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1384, 1380, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1387, 1385, 1386, 1386, 1386, 1386, 1386, 1386, 1385, 1385, 1388, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1389, 1385, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1391, 1352, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1357, 1352, 1390, 1390, 1390, 1390, 1390, 1390, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1393, 1392, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1395, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1396, 1392, 1392, 1392, 1392, 1392, 1395, 1392, 1392, 1392, 1397, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1398, 1392, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1400, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1397, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1398, 1392, 1401, 1352, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1403, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1404, 1352, 1352, 1352, 1352, 1352, 1403, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1357, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1355, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1356, 1352, 1310, 1317, 1248, 1405, 1309, 1299, 1309, 1406, 1407, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1299, 1317, 1299, 1309, 1299, 1248, 1309, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1304, 1304, 1304, 1304, 1304, 1304, 1408, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1304, 1304, 1304, 1304, 325, 1304, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 325, 1304, 1304, 1304, 1304, 1304, 325, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1292, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 313, 313, 313, 313, 1292, 313, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 313, 313, 313, 313, 1265, 313, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 313, 313, 313, 313, 313, 1265, 1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1265, 1412, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1413, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1414, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1415, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1416, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1292, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1409, 1411, 1411, 1411, 1411, 1292, 1411, 1265, 1265, 1265, 1415, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1265, 1411, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1411, 1411, 1411, 1411, 1411, 1265, 1417, 1419, 1418, 1420, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1423, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1424, 1425, 1239, 1239, 1239, 1239, 1239, 1426, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1427, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1428, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1429, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1430, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1431, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1432, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1433, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1434, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1435, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1436, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1437, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1438, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1439, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1440, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1441, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1437, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1442, 1239, 1443, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1444, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1445, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1446, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1448, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1449, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1450, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1451, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1452, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1453, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1454, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1455, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1456, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1457, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1458, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1459, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1460, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 327, 328, 327, 327, 327, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 327, 1292, 1461, 329, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1461, 1461, 330, 1461, 1461, 1292, 1461, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1461, 331, 1461, 1461, 1239, 1461, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1461, 1461, 1461, 1461, 1461, 1239, 344, 345, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 349, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 348, 343, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1463, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1464, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1465, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1292, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1466, 1466, 1466, 1466, 1466, 1292, 1466, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1466, 1466, 1466, 1466, 1239, 1466, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1467, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1466, 1466, 1466, 1466, 1466, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1468, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1469, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1470, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1471, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1472, 1239, 1473, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1474, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1475, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1440, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1476, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1477, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1457, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1478, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1281, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1479, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1480, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1440, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1481, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1447, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1482, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1483, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1484, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1457, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1485, 1239, 1239, 1239, 1486, 1239, 1239, 1239, 1239, 1239, 1487, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1488, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1454, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1440, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1489, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1490, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1491, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1492, 1493, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1440, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1494, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1495, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1481, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1496, 1239, 1239, 1497, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1440, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1498, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1454, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1499, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1500, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1501, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1440, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1502, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1503, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1489, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1504, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1505, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1451, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1480, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1506, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1507, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1508, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1509, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1510, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1446, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1511, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1512, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1481, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1513, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1481, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1514, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1451, 1239, 1239, 1239, 1515, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1516, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1481, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1517, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1518, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1519, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1292, 1422, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1239, 1422, 1239, 1239, 1239, 1489, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1422, 1422, 1422, 1422, 1422, 1239, 1520, 1308, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1248, 1298, 1521, 1523, 1522, 1523, 1523, 1523, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1522, 1522, 1524, 1522, 1522, 1525, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 357, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1526, 1522, 353, 354, 353, 353, 353, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 353, 1527, 1527, 355, 1527, 1527, 356, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 357, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 358, 1527, 360, 1528, 360, 360, 360, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 360, 1528, 1528, 355, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 358, 1528, 1530, 1529, 1532, 1531, 363, 362, 368, 1527, 366, 1527, 1534, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1535, 1533, 1534, 1533, 1534, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1537, 1533, 1534, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1538, 1533, 1534, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1539, 1533, 1541, 1539, 0]];
    $send(self, '_lex_indicies=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[186, 2, 3, 4, 192, 6, 7, 8, 9, 10, 186, 186, 195, 198, 195, 12, 199, 200, 14, 195, 207, 208, 211, 212, 224, 221, 213, 214, 215, 19, 216, 217, 218, 226, 228, 229, 233, 234, 235, 230, 25, 18, 209, 210, 27, 258, 259, 261, 263, 261, 30, 264, 265, 32, 261, 272, 273, 276, 277, 289, 286, 278, 279, 280, 37, 281, 282, 283, 291, 293, 294, 298, 299, 300, 295, 43, 36, 274, 275, 45, 323, 324, 331, 333, 331, 48, 334, 335, 50, 337, 340, 337, 52, 341, 342, 54, 348, 347, 0, 56, 349, 350, 58, 351, 352, 352, 352, 352, 465, 61, 62, 63, 465, 465, 494, 65, 66, 494, 494, 498, 498, 70, 65, 71, 496, 497, 499, 500, 498, 494, 501, 502, 504, 67, 68, 505, 506, 69, 498, 72, 73, 78, 85, 508, 509, 71, 496, 497, 499, 500, 498, 494, 501, 502, 504, 67, 68, 505, 506, 69, 72, 73, 78, 85, 508, 509, 507, 74, 75, 76, 77, 79, 80, 83, 81, 82, 84, 86, 87, 494, 89, 90, 91, 93, 96, 94, 95, 97, 99, 525, 525, 525, 526, 101, 528, 102, 529, 103, 526, 101, 528, 102, 529, 563, 104, 563, 105, 106, 104, 563, 105, 563, 563, 563, 109, 110, 111, 112, 574, 563, 563, 563, 115, 116, 117, 563, 120, 115, 116, 117, 563, 120, 118, 118, 116, 117, 584, 119, 118, 118, 116, 117, 584, 119, 116, 563, 601, 563, 122, 602, 608, 126, 617, 618, 131, 132, 126, 127, 616, 127, 616, 563, 128, 129, 130, 619, 133, 563, 633, 634, 637, 638, 650, 647, 639, 640, 641, 138, 642, 643, 644, 652, 654, 655, 659, 660, 661, 656, 144, 137, 635, 636, 146, 697, 698, 148, 565, 107, 567, 150, 151, 700, 802, 153, 154, 155, 802, 810, 810, 810, 158, 832, 831, 810, 834, 836, 810, 163, 164, 165, 840, 810, 167, 168, 851, 820, 873, 171, 172, 173, 177, 178, 171, 172, 173, 177, 178, 174, 174, 172, 173, 175, 176, 174, 174, 172, 173, 175, 176, 921, 172, 810, 990, 179, 992, 181, 185, 993, 183, 990, 180, 990, 182, 992, 182, 992, 184, 992, 990, 186, 186, 187, 188, 189, 191, 193, 194, 186, 186, 186, 190, 186, 190, 186, 1, 186, 186, 186, 5, 195, 195, 196, 195, 197, 201, 195, 195, 11, 13, 195, 195, 195, 195, 202, 203, 204, 15, 21, 26, 236, 28, 195, 195, 195, 205, 206, 195, 16, 195, 195, 195, 17, 195, 195, 195, 20, 219, 195, 220, 222, 195, 223, 225, 227, 22, 195, 195, 23, 231, 195, 232, 24, 195, 237, 241, 238, 239, 240, 195, 195, 242, 243, 246, 248, 257, 244, 245, 195, 247, 249, 251, 250, 195, 252, 253, 254, 255, 256, 195, 195, 195, 260, 261, 261, 261, 262, 266, 261, 29, 31, 261, 261, 261, 261, 267, 268, 269, 33, 39, 44, 301, 46, 261, 261, 261, 270, 271, 261, 34, 261, 261, 261, 35, 261, 261, 261, 38, 284, 261, 285, 287, 261, 288, 290, 292, 40, 261, 261, 41, 296, 261, 297, 42, 261, 302, 306, 303, 304, 305, 261, 261, 307, 308, 311, 313, 322, 309, 310, 261, 312, 314, 316, 315, 261, 317, 318, 319, 320, 321, 261, 261, 261, 325, 326, 326, 327, 326, 328, 326, 326, 326, 329, 329, 329, 330, 329, 329, 329, 331, 331, 331, 332, 331, 47, 49, 331, 331, 331, 336, 336, 336, 337, 337, 338, 337, 339, 337, 337, 51, 53, 337, 337, 337, 343, 343, 344, 343, 343, 345, 346, 345, 55, 57, 347, 347, 347, 353, 352, 352, 354, 355, 356, 357, 359, 362, 363, 364, 365, 352, 366, 367, 369, 371, 372, 373, 377, 379, 380, 381, 397, 402, 409, 414, 421, 428, 431, 432, 436, 430, 440, 448, 452, 454, 459, 461, 464, 352, 352, 352, 352, 352, 352, 358, 352, 358, 352, 360, 59, 361, 352, 60, 352, 352, 368, 370, 352, 374, 375, 376, 372, 378, 352, 382, 383, 392, 395, 384, 385, 386, 387, 388, 389, 390, 391, 353, 393, 394, 396, 398, 401, 399, 400, 403, 406, 404, 405, 407, 408, 410, 412, 411, 413, 415, 416, 352, 417, 418, 419, 420, 352, 422, 425, 423, 424, 426, 427, 429, 433, 434, 435, 437, 439, 438, 441, 442, 443, 445, 444, 446, 447, 449, 450, 451, 453, 455, 456, 457, 458, 460, 462, 463, 466, 465, 465, 467, 468, 470, 471, 465, 465, 465, 469, 465, 469, 64, 472, 465, 474, 473, 473, 477, 478, 479, 480, 473, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 473, 475, 473, 476, 473, 473, 473, 473, 473, 481, 473, 481, 486, 473, 488, 473, 494, 494, 495, 510, 511, 497, 513, 514, 501, 515, 516, 517, 518, 519, 521, 522, 523, 524, 494, 494, 494, 494, 494, 494, 498, 503, 494, 494, 494, 494, 494, 494, 494, 494, 494, 512, 494, 512, 494, 494, 494, 494, 520, 494, 88, 92, 98, 525, 527, 530, 100, 525, 525, 526, 531, 531, 532, 533, 535, 537, 538, 531, 531, 534, 531, 534, 531, 536, 531, 531, 531, 540, 539, 539, 541, 542, 543, 545, 547, 548, 553, 560, 539, 539, 539, 539, 544, 539, 544, 539, 546, 539, 539, 540, 549, 550, 551, 552, 554, 555, 558, 556, 557, 559, 561, 562, 564, 563, 572, 573, 575, 576, 578, 579, 580, 581, 583, 585, 586, 589, 590, 615, 621, 622, 623, 700, 701, 702, 703, 704, 582, 706, 723, 728, 735, 740, 742, 748, 751, 752, 756, 750, 760, 771, 775, 778, 786, 790, 793, 794, 563, 104, 105, 563, 107, 566, 563, 563, 568, 570, 571, 563, 569, 563, 563, 563, 563, 563, 108, 563, 563, 563, 563, 563, 577, 563, 577, 563, 563, 113, 563, 114, 563, 563, 582, 563, 587, 563, 588, 563, 563, 563, 591, 600, 563, 121, 603, 604, 605, 563, 606, 123, 609, 610, 124, 613, 614, 563, 592, 594, 563, 593, 563, 563, 595, 598, 599, 563, 596, 597, 563, 563, 563, 563, 563, 563, 607, 563, 601, 611, 612, 563, 611, 563, 601, 611, 125, 620, 563, 563, 563, 624, 563, 563, 563, 625, 627, 563, 626, 563, 626, 563, 628, 629, 630, 134, 140, 145, 662, 147, 563, 563, 563, 631, 632, 563, 135, 563, 563, 563, 136, 563, 563, 563, 139, 645, 563, 646, 648, 563, 649, 651, 653, 141, 563, 563, 142, 657, 563, 658, 143, 563, 663, 667, 664, 665, 666, 563, 563, 668, 669, 672, 683, 696, 670, 671, 563, 673, 674, 675, 677, 676, 563, 678, 679, 680, 681, 682, 684, 691, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 563, 563, 563, 699, 149, 152, 563, 705, 707, 708, 718, 721, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 724, 727, 725, 726, 729, 732, 730, 731, 733, 734, 736, 738, 737, 739, 741, 743, 745, 744, 746, 747, 749, 717, 753, 754, 755, 757, 759, 758, 761, 762, 763, 768, 764, 765, 766, 563, 564, 565, 107, 767, 570, 769, 770, 772, 773, 774, 776, 777, 779, 780, 781, 784, 782, 783, 785, 787, 788, 789, 791, 792, 563, 582, 795, 795, 796, 797, 798, 800, 795, 795, 795, 799, 795, 799, 795, 801, 795, 803, 802, 802, 804, 805, 802, 806, 808, 802, 802, 802, 802, 807, 802, 807, 809, 802, 811, 810, 810, 814, 815, 816, 810, 817, 819, 822, 823, 824, 825, 826, 810, 827, 828, 833, 861, 865, 810, 866, 868, 870, 810, 871, 872, 874, 878, 880, 881, 883, 884, 902, 907, 914, 922, 929, 936, 941, 942, 946, 940, 951, 961, 967, 970, 979, 983, 987, 988, 989, 822, 812, 810, 813, 810, 810, 810, 810, 810, 810, 818, 810, 818, 810, 156, 821, 810, 810, 810, 810, 810, 810, 810, 810, 810, 829, 810, 830, 810, 810, 157, 159, 810, 160, 842, 853, 856, 835, 857, 858, 843, 847, 849, 810, 835, 160, 837, 839, 161, 810, 837, 810, 838, 810, 810, 162, 841, 810, 810, 844, 846, 810, 844, 845, 847, 849, 846, 810, 848, 810, 810, 850, 852, 810, 166, 810, 810, 810, 854, 846, 847, 849, 854, 855, 810, 844, 846, 847, 849, 810, 844, 846, 847, 849, 810, 859, 846, 847, 849, 859, 860, 810, 160, 861, 835, 862, 847, 849, 863, 846, 160, 863, 835, 864, 867, 869, 810, 169, 170, 810, 810, 875, 876, 877, 872, 879, 810, 810, 882, 810, 810, 810, 885, 886, 895, 900, 887, 888, 889, 890, 891, 892, 893, 894, 811, 896, 897, 898, 899, 811, 901, 903, 906, 904, 905, 811, 811, 908, 911, 909, 910, 912, 913, 811, 915, 917, 916, 918, 919, 920, 810, 810, 923, 811, 924, 810, 925, 926, 927, 928, 812, 930, 933, 931, 932, 934, 935, 937, 938, 939, 811, 943, 944, 945, 947, 949, 950, 948, 811, 952, 953, 954, 957, 955, 956, 958, 959, 960, 962, 964, 963, 965, 966, 968, 969, 971, 972, 974, 977, 973, 975, 976, 978, 980, 981, 982, 984, 985, 986, 810, 810, 990, 991, 995, 996, 997, 990, 990, 990, 994, 990, 990, 999, 998, 1000, 998, 1001, 1002, 1003, 998, 998]];
    $send(self, '_lex_trans_targs=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 0, 6, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 0, 11, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21, 0, 0, 0, 22, 23, 24, 0, 0, 25, 26, 27, 28, 29, 30, 30, 31, 32, 30, 33, 32, 34, 32, 30, 30, 31, 30, 35, 30, 30, 36, 30, 30, 30, 30, 30, 30, 0, 37, 38, 0, 39, 38, 40, 38, 0, 0, 37, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 44, 45, 46, 0, 0, 0, 46, 29, 47, 30, 30, 30, 47, 48, 0, 49, 0, 29, 30, 50, 30, 51, 52, 53, 0, 0, 0, 0, 0, 54, 55, 56, 0, 29, 0, 57, 0, 30, 58, 30, 59, 30, 60, 61, 62, 61, 63, 61, 0, 64, 65, 64, 66, 64, 67, 68, 0, 69, 0, 0, 0, 0, 70, 70, 0, 0, 71, 71, 72, 0, 29, 73, 0, 0, 0, 70, 0, 74, 0, 7, 0, 8, 0, 0, 7, 0, 0, 0, 0, 8, 0, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 75, 76, 0, 0, 0, 77, 78, 79, 80, 0, 7, 7, 81, 82, 82, 83, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 30, 58, 30, 30, 30, 60, 61, 62, 61, 61, 61, 0, 64, 65, 64, 64, 64, 85, 67, 86, 87, 0, 88, 0, 89, 89, 0, 90, 0, 91, 60, 92, 0, 93, 29, 94, 95, 98, 99, 0, 29, 0, 7, 0, 7, 100, 101, 102, 60, 103, 0, 104, 0, 105, 106, 107, 0, 108, 109, 0, 110, 7, 7, 111, 112, 0, 0, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 120, 0, 0, 121, 0, 122, 123, 124, 0, 125, 126, 127, 0, 0, 128, 0, 0, 129, 0, 7, 0, 0, 130, 131, 0, 0, 132, 0, 29, 133, 0, 0, 0, 0, 0, 134, 135, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 138, 139, 140, 0, 141, 142, 143, 7, 7, 144, 0, 0, 145, 146, 147, 148, 117, 117, 117, 117, 117, 117, 117, 117, 149, 150, 151, 0, 0, 152, 0, 153, 154, 155, 0, 156, 157, 158, 0, 0, 159, 0, 0, 160, 0, 7, 0, 0, 161, 162, 0, 0, 163, 0, 29, 164, 0, 0, 0, 0, 0, 165, 166, 0, 0, 0, 0, 0, 0, 0, 167, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 169, 170, 171, 0, 172, 173, 0, 174, 0, 175, 176, 177, 178, 179, 180, 0, 181, 182, 183, 184, 185, 186, 7, 187, 0, 0, 188, 189, 190, 191, 192, 193, 194, 195, 0, 196, 7, 197, 198, 0, 0, 199, 200, 201, 202, 203, 0, 204, 205, 206, 0, 207, 0, 0, 208, 209, 210, 211, 212, 213, 0, 29, 0, 0, 7, 7, 0, 0, 0, 214, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 217, 218, 219, 220, 221, 60, 222, 0, 223, 0, 0, 0, 224, 0, 225, 226, 0, 0, 227, 0, 0, 0, 228, 0, 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 232, 233, 0, 0, 7, 0, 234, 235, 236, 60, 237, 0, 0, 29, 238, 0, 239, 240, 0, 29, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 243, 0, 244, 245, 246, 247, 248, 60, 249, 0, 0, 250, 0, 251, 252, 253, 254, 29, 0, 28, 0, 0, 28, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 256, 257, 258, 259, 260, 261, 0, 262, 263, 264, 265, 266, 267, 268, 269, 270, 60, 271, 0, 272, 273, 274, 275, 276, 277, 0, 0, 0, 278, 7, 7, 0, 279, 280, 281, 282, 283, 0, 0, 0, 0, 0, 284, 285, 60, 286, 0, 287, 29, 288, 289, 290, 291, 292, 293, 0, 29, 0, 0, 0, 0, 0, 0, 294, 295, 296, 297, 60, 298, 0, 299, 29, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 304, 0, 8, 0, 0, 7, 305, 0, 0, 305, 305, 0, 0, 7, 306, 0, 306, 0, 306, 306, 306, 0, 0, 306, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 0, 0, 307, 308, 308, 309, 310, 0, 311, 312, 0, 75, 0, 313, 0, 314, 315, 316, 317, 318, 30, 319, 320, 321, 322, 323, 60, 324, 0, 325, 326, 0, 327, 0, 328, 329, 305, 330, 0, 331, 0, 332, 333, 334, 0, 0, 335, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 338, 0, 339, 340, 0, 0, 0, 341, 0, 0, 342, 343, 344, 345, 346, 347, 0, 348, 349, 349, 0, 350, 0, 351, 352, 352, 0, 0, 353, 354, 355, 0, 356, 357, 358, 0, 7, 359, 360, 361, 0, 362, 117, 117, 117, 117, 117, 117, 117, 117, 363, 364, 365, 0, 0, 366, 0, 367, 368, 369, 0, 370, 371, 372, 0, 0, 373, 0, 0, 374, 0, 7, 0, 0, 375, 376, 0, 0, 377, 0, 29, 378, 0, 0, 0, 0, 0, 379, 380, 0, 0, 0, 0, 0, 0, 0, 381, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 383, 384, 385, 0, 0, 0, 386, 29, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 75, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 387, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 388, 389, 390, 391, 392, 392, 388, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 393, 394, 395, 396, 0, 29, 0, 0, 397, 398, 399, 60, 400, 0, 401, 29, 402, 7, 403, 404, 0, 29, 405, 0, 0, 406, 407, 408, 409, 60, 410, 0, 29, 411, 412, 413, 414, 0, 29, 0, 415, 0, 7, 416, 0, 0, 0, 0, 417, 0, 0, 418, 418, 0, 419, 0, 0, 0, 420, 7, 421, 421, 421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 422, 423, 424, 0, 425, 426, 427, 428, 429, 430, 60, 431, 0, 432, 0, 0, 433, 434, 435, 436, 437, 438, 439, 440, 441, 0, 442, 0, 443, 444, 0, 0, 445, 446, 447, 0, 0, 448, 0, 0, 447, 449, 449, 450, 451, 0, 452, 453, 0, 454, 455, 456, 0, 457, 458, 0, 0, 459, 460, 447, 447, 461, 0, 0, 462, 462, 0, 463, 0, 464, 465, 7, 0, 466, 0, 467, 468, 469, 470, 470, 471, 471, 0, 0, 472, 473, 473, 474, 474, 475, 476, 476, 477, 477, 478, 479, 479, 480, 480, 0, 0, 481, 482, 483, 484, 485, 486, 486, 483, 485, 487, 418, 488, 0, 0, 0, 489, 0, 0, 490, 491, 421, 421, 421, 492, 421, 493, 494, 29, 495, 496, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 499, 500, 0, 0, 0, 0, 0, 0, 501, 0, 0, 0, 0, 0, 500, 502, 503, 0, 504, 0, 505, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507, 0, 0, 0, 0, 0, 0, 0, 506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 508, 509, 510, 511, 511, 89, 511, 512, 513, 514, 0, 515, 516, 0, 517, 0, 518, 0, 0, 0, 519, 520]];
    $send(self, '_lex_trans_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_to_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_from_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 48, 48, 48, 48, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 83, 83, 83, 83, 90, 90, 90, 90, 0, 0, 0, 0, 105, 107, 109, 109, 109, 109, 115, 115, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 190, 192, 192, 192, 204, 204, 204, 212, 214, 214, 214, 214, 214, 220, 212, 212, 212, 212, 212, 212, 212, 246, 246, 246, 246, 246, 246, 212, 262, 212, 262, 246, 246, 212, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 212, 246, 246, 246, 246, 303, 303, 303, 308, 310, 310, 310, 314, 314, 317, 317, 317, 317, 322, 322, 322, 308, 314, 314, 314, 314, 314, 314, 314, 314, 314, 353, 360, 362, 362, 362, 362, 353, 0, 378, 379, 380, 382, 384, 386, 384, 384, 0, 396, 397, 401, 401, 402, 403, 412, 413, 414, 414, 414, 417, 417, 419, 420, 421, 421, 421, 423, 424, 425, 425, 425, 428, 428, 421, 431, 431, 421, 417, 417, 436, 437, 437, 437, 440, 440, 437, 437, 437, 443, 443, 443, 443, 449, 450, 450, 450, 450, 458, 450, 450, 450, 450, 463, 450, 450, 450, 450, 450, 450, 469, 470, 471, 471, 0, 478, 482, 482, 483, 484, 493, 494, 495, 495, 495, 498, 498, 500, 501, 502, 502, 502, 504, 505, 506, 506, 506, 509, 509, 502, 512, 512, 502, 498, 498, 517, 518, 518, 518, 521, 521, 518, 518, 518, 524, 524, 524, 524, 530, 531, 531, 531, 531, 539, 531, 531, 531, 531, 544, 531, 531, 531, 531, 531, 531, 550, 551, 552, 552, 0, 559, 560, 0, 566, 0, 573, 577, 577, 578, 0, 0, 587, 588, 592, 592, 593, 0, 598, 0, 601, 0, 604, 604, 605, 606, 0, 647, 649, 650, 651, 652, 654, 656, 660, 660, 651, 651, 651, 651, 662, 651, 651, 656, 651, 651, 647, 666, 666, 666, 666, 666, 666, 656, 656, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 705, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 651, 0, 749, 750, 751, 753, 749, 749, 757, 0, 776, 778, 780, 781, 782, 783, 784, 786, 783, 783, 783, 783, 783, 789, 783, 783, 791, 789, 789, 783, 0, 810, 811, 115, 115, 814, 815, 115, 811, 811, 818, 820, 823, 811, 824, 811, 825, 826, 828, 830, 811, 818, 831, 831, 820, 831, 835, 831, 831, 831, 831, 0, 190, 843, 844, 843, 843, 0, 853, 854, 856, 858, 860, 858, 862, 0, 874, 875, 876, 877, 879, 881, 883, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 884, 0, 942, 945, 948, 949, 953, 955, 956, 957, 958, 959, 961, 964, 965, 967, 969, 972, 974, 975, 212, 972, 977, 972, 964, 979, 981, 964, 964, 999, 1002, 1004, 1005, 1009, 1012, 1013, 1014, 1015, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 1019, 1023, 1025, 999, 999, 964, 1030, 1031, 1031, 1031, 964, 964, 964, 1032, 1039, 1039, 1041, 1043, 1052, 1053, 1054, 1054, 1054, 1057, 1057, 1059, 1060, 1061, 1061, 1061, 1063, 1064, 1065, 1065, 1065, 1068, 1068, 1061, 1071, 1071, 1061, 1057, 1057, 1076, 1077, 1077, 1077, 1080, 1080, 1077, 1077, 1077, 1083, 1083, 1083, 1083, 1089, 1090, 1090, 1090, 1090, 1098, 1090, 1090, 1090, 1090, 1104, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1122, 1123, 1124, 1124, 212, 964, 964, 1128, 964, 959, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 212, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 1181, 949, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 942, 1206, 964, 0, 1214, 1215, 1216, 1218, 1220, 1222, 0, 1231, 1232, 1233, 1234, 1236, 1231, 1239, 0, 314, 1294, 1296, 1297, 1298, 1299, 1301, 1303, 1305, 1308, 1308, 314, 1310, 1312, 1313, 1314, 1310, 1316, 1318, 1318, 1321, 1321, 1324, 1335, 314, 1341, 1343, 1345, 1346, 1349, 1350, 1324, 1324, 1353, 1353, 1353, 1359, 1361, 1362, 1365, 1367, 1368, 1369, 1353, 1353, 1376, 1381, 1386, 1353, 1353, 1393, 1393, 1353, 1353, 1318, 1310, 1310, 1318, 1310, 1310, 1305, 314, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1418, 1305, 1421, 1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1462, 1463, 1423, 1423, 1467, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1521, 1299, 1522, 0, 1528, 1529, 1530, 1532, 1528, 1528, 1528, 0, 1537, 1537, 1537, 1537, 1541]];
    $send(self, '_lex_eof_trans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_start")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [186];
    $send(self, 'lex_start=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_error")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [0];
    $send(self, 'lex_error=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [195];
    $send(self, 'lex_en_interp_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [261];
    $send(self, 'lex_en_interp_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [326];
    $send(self, 'lex_en_plain_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [329];
    $send(self, 'lex_en_plain_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [331];
    $send(self, 'lex_en_interp_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [336];
    $send(self, 'lex_en_plain_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [337];
    $send(self, 'lex_en_interp_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [343];
    $send(self, 'lex_en_plain_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [345];
    $send(self, 'lex_en_regexp_modifiers=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_variable")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [347];
    $send(self, 'lex_en_expr_variable=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_fname")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [352];
    $send(self, 'lex_en_expr_fname=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endfn")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [465];
    $send(self, 'lex_en_expr_endfn=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [473];
    $send(self, 'lex_en_expr_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_arg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [494];
    $send(self, 'lex_en_expr_arg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [525];
    $send(self, 'lex_en_expr_cmdarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [531];
    $send(self, 'lex_en_expr_endarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_mid")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [539];
    $send(self, 'lex_en_expr_mid=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_beg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [563];
    $send(self, 'lex_en_expr_beg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_labelarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [795];
    $send(self, 'lex_en_expr_labelarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_value")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [802];
    $send(self, 'lex_en_expr_value=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_end")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [810];
    $send(self, 'lex_en_expr_end=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_leading_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [990];
    $send(self, 'lex_en_leading_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_comment")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [998];
    $send(self, 'lex_en_line_comment=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_begin")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [186];
    $send(self, 'lex_en_line_begin=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.const_set($nesting[0], 'ESCAPES', $hash("a".$ord(), "\u0007", "b".$ord(), "\b", "e".$ord(), "\u001b", "f".$ord(), "\f", "n".$ord(), "\n", "r".$ord(), "\r", "s".$ord(), " ", "t".$ord(), "\t", "v".$ord(), "\v", "\\".$ord(), "\\").$freeze());
    Opal.const_set($nesting[0], 'REGEXP_META_CHARACTERS', $send($$($nesting, 'Regexp'), 'union', Opal.to_a("\\$()*+.<>?[]^{|}".$chars())).$freeze());
    self.$attr_reader("source_buffer");
    self.$attr_accessor("diagnostics");
    self.$attr_accessor("static_env");
    self.$attr_accessor("force_utf32");
    self.$attr_accessor("cond", "cmdarg", "context", "command_start");
    self.$attr_accessor("tokens", "comments");
    self.$attr_reader("paren_nest", "cmdarg_stack", "cond_stack", "lambda_stack");
    
    Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(version) {
      var self = this;

      
      self.version = version;
      self.static_env = nil;
      self.context = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    }, $Lexer_initialize$1.$$arity = 1);
    
    Opal.def(self, '$reset', $Lexer_reset$2 = function $$reset(reset_state) {
      var self = this;

      
      
      if (reset_state == null) {
        reset_state = true;
      };
      if ($truthy(reset_state)) {
        
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = $$($nesting, 'StackState').$new("cond");
        self.cmdarg = $$($nesting, 'StackState').$new("cmdarg");
        self.cond_stack = [];
        self.cmdarg_stack = [];};
      self.force_utf32 = false;
      self.source_pts = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      self.dedent_level = nil;
      self.command_start = true;
      return (self.cs_before_block_comment = self.$class().$lex_en_line_begin());
    }, $Lexer_reset$2.$$arity = -1);
    
    Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$3 = function(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        if (source.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_8'))) {
          self.source_pts = source.$unpack("U*")
        } else {
          self.source_pts = source.$unpack("C*")
        };
        if (self.source_pts['$[]'](0)['$=='](65279)) {
          return (self.p = 1)
        } else {
          return nil
        };
      } else {
        return (self.source_pts = nil)
      };
    }, $Lexer_source_buffer$eq$3.$$arity = 1);
    
    Opal.def(self, '$encoding', $Lexer_encoding$4 = function $$encoding() {
      var self = this;

      return self.source_buffer.$source().$encoding()
    }, $Lexer_encoding$4.$$arity = 0);
    Opal.const_set($nesting[0], 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "expr_labelarg", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "expr_labelarg": self.$lex_en_expr_labelarg(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));
    
    Opal.def(self, '$state', $Lexer_state$5 = function $$state() {
      var self = this;

      return $$($nesting, 'LEX_STATES').$invert().$fetch(self.cs, self.cs)
    }, $Lexer_state$5.$$arity = 0);
    
    Opal.def(self, '$state=', $Lexer_state$eq$6 = function(state) {
      var self = this;

      return (self.cs = $$($nesting, 'LEX_STATES').$fetch(state))
    }, $Lexer_state$eq$6.$$arity = 1);
    
    Opal.def(self, '$push_cmdarg', $Lexer_push_cmdarg$7 = function $$push_cmdarg() {
      var self = this;

      
      self.cmdarg_stack.$push(self.cmdarg);
      return (self.cmdarg = $$($nesting, 'StackState').$new("" + "cmdarg." + (self.cmdarg_stack.$count())));
    }, $Lexer_push_cmdarg$7.$$arity = 0);
    
    Opal.def(self, '$pop_cmdarg', $Lexer_pop_cmdarg$8 = function $$pop_cmdarg() {
      var self = this;

      return (self.cmdarg = self.cmdarg_stack.$pop())
    }, $Lexer_pop_cmdarg$8.$$arity = 0);
    
    Opal.def(self, '$push_cond', $Lexer_push_cond$9 = function $$push_cond() {
      var self = this;

      
      self.cond_stack.$push(self.cond);
      return (self.cond = $$($nesting, 'StackState').$new("" + "cond." + (self.cond_stack.$count())));
    }, $Lexer_push_cond$9.$$arity = 0);
    
    Opal.def(self, '$pop_cond', $Lexer_pop_cond$10 = function $$pop_cond() {
      var self = this;

      return (self.cond = self.cond_stack.$pop())
    }, $Lexer_pop_cond$10.$$arity = 0);
    
    Opal.def(self, '$dedent_level', $Lexer_dedent_level$11 = function $$dedent_level() {
      var $a, self = this, dedent_level = nil;

      
      $a = [self.dedent_level, nil], (dedent_level = $a[0]), (self.dedent_level = $a[1]), $a;
      return dedent_level;
    }, $Lexer_dedent_level$11.$$arity = 0);
    
    Opal.def(self, '$advance', $Lexer_advance$12 = function $$advance() {
      var $a, $b, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$22, $$23, $$24, $$25, $$26, $$27, $$28, $$29, $$30, $$31, $$32, $$33, $$34, $$35, $$36, $$37, $$38, $$39, $$40, $$41, self = this, klass = nil, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, pe = nil, p = nil, eof = nil, cmd_state = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $case = nil, _wide = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, tm = nil, heredoc_e = nil, diag_msg = nil, ident_tok = nil, ident_ts = nil, ident_te = nil, current_literal = nil, $writer = nil, line = nil, $ret_or_4 = nil, string = nil, $ret_or_5 = nil, lookahead = nil, $ret_or_6 = nil, token = nil, message = nil, $ret_or_7 = nil, $ret_or_8 = nil, escaped_char = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil, $ret_or_14 = nil, $ret_or_15 = nil, $ret_or_16 = nil, $ret_or_17 = nil, $ret_or_18 = nil, $ret_or_19 = nil, $ret_or_20 = nil, $ret_or_21 = nil, $ret_or_22 = nil, $ret_or_23 = nil, $ret_or_24 = nil, $ret_or_25 = nil, $ret_or_26 = nil, $ret_or_27 = nil, $ret_or_28 = nil, $ret_or_29 = nil, $ret_or_30 = nil, $ret_or_31 = nil, $ret_or_32 = nil, $ret_or_33 = nil, $ret_or_34 = nil, $ret_or_35 = nil, $ret_or_36 = nil, $ret_or_37 = nil, $ret_or_38 = nil, $ret_or_39 = nil, $ret_or_40 = nil, $ret_or_41 = nil, $ret_or_42 = nil, $ret_or_43 = nil, $ret_or_44 = nil, $ret_or_45 = nil, $ret_or_46 = nil, $ret_or_47 = nil, $ret_or_48 = nil, $ret_or_49 = nil, $ret_or_50 = nil, $ret_or_51 = nil, $ret_or_52 = nil, $ret_or_53 = nil, $ret_or_54 = nil, $ret_or_55 = nil, $ret_or_56 = nil, $ret_or_57 = nil, $ret_or_58 = nil, $ret_or_59 = nil, unknown_options = nil, type = nil, delimiter = nil, $ret_or_60 = nil, escape = nil, ident = nil, $ret_or_61 = nil, $ret_or_62 = nil, $ret_or_63 = nil, followed_by_nl = nil, nl_emitted = nil, dots_te = nil, $ret_or_64 = nil, $ret_or_65 = nil, $ret_or_66 = nil, $ret_or_67 = nil, $ret_or_68 = nil, value = nil, $ret_or_69 = nil, $ret_or_70 = nil, $ret_or_71 = nil, $ret_or_72 = nil, digits = nil, $ret_or_73 = nil, $ret_or_74 = nil, $ret_or_75 = nil, invalid_idx = nil, invalid_s = nil, $ret_or_76 = nil, $ret_or_77 = nil, $ret_or_78 = nil, $ret_or_79 = nil, $ret_or_80 = nil, $ret_or_81 = nil, $ret_or_82 = nil, $ret_or_83 = nil, $ret_or_84 = nil, $ret_or_85 = nil, $ret_or_86 = nil, $ret_or_87 = nil, $ret_or_88 = nil, $ret_or_89 = nil, $ret_or_90 = nil, $ret_or_91 = nil, $ret_or_92 = nil, $ret_or_93 = nil, $ret_or_94 = nil, $ret_or_95 = nil, $ret_or_96 = nil, $ret_or_97 = nil, $ret_or_98 = nil, $ret_or_99 = nil, $ret_or_100 = nil, $ret_or_101 = nil, $ret_or_102 = nil, $ret_or_103 = nil, $ret_or_104 = nil, $ret_or_105 = nil, $ret_or_106 = nil, $ret_or_107 = nil, $ret_or_108 = nil, $ret_or_109 = nil, $ret_or_110 = nil, $ret_or_111 = nil, codepoints = nil, codepoint_s = nil, $ret_or_112 = nil, spaces_p = nil, $ret_or_113 = nil, $ret_or_114 = nil, $ret_or_115 = nil, $ret_or_116 = nil, $ret_or_117 = nil, $ret_or_118 = nil, $ret_or_119 = nil, $ret_or_120 = nil, $ret_or_121 = nil, $ret_or_122 = nil, $ret_or_123 = nil, $ret_or_124 = nil, $ret_or_125 = nil, $ret_or_126 = nil, $ret_or_127 = nil, $ret_or_128 = nil, $ret_or_129 = nil, $ret_or_130 = nil, codepoint = nil, $ret_or_131 = nil, $ret_or_132 = nil, $ret_or_133 = nil, $ret_or_134 = nil, $ret_or_135 = nil, $ret_or_136 = nil, $ret_or_137 = nil, $ret_or_138 = nil, $ret_or_139 = nil, $ret_or_140 = nil, $ret_or_141 = nil, $ret_or_142 = nil, $ret_or_143 = nil, $ret_or_144 = nil, $ret_or_145 = nil, $ret_or_146 = nil, $ret_or_147 = nil, $ret_or_148 = nil, $ret_or_149 = nil, $ret_or_150 = nil, $ret_or_151 = nil, $ret_or_152 = nil, $ret_or_153 = nil, $ret_or_154 = nil, $ret_or_155 = nil, $ret_or_156 = nil, $ret_or_157 = nil, $ret_or_158 = nil, $ret_or_159 = nil, $ret_or_160 = nil, $ret_or_161 = nil, $ret_or_162 = nil, $ret_or_163 = nil, $ret_or_164 = nil, $ret_or_165 = nil, $ret_or_166 = nil, $ret_or_167 = nil, $ret_or_168 = nil, $ret_or_169 = nil, $ret_or_170 = nil, $ret_or_171 = nil, $ret_or_172 = nil, $ret_or_173 = nil, $ret_or_174 = nil, $ret_or_175 = nil, $ret_or_176 = nil, $ret_or_177 = nil, $ret_or_178 = nil, $ret_or_179 = nil, $ret_or_180 = nil, $ret_or_181 = nil, $ret_or_182 = nil, $ret_or_183 = nil, $ret_or_184 = nil, $ret_or_185 = nil, $ret_or_186 = nil, $ret_or_187 = nil, $ret_or_188 = nil, $ret_or_189 = nil, $ret_or_190 = nil, $ret_or_191 = nil, $ret_or_192 = nil, $ret_or_193 = nil, $ret_or_194 = nil, $ret_or_195 = nil, $ret_or_196 = nil, $ret_or_197 = nil, $ret_or_198 = nil, $ret_or_199 = nil, $ret_or_200 = nil, $ret_or_201 = nil, $ret_or_202 = nil, $ret_or_203 = nil, $ret_or_204 = nil, $ret_or_205 = nil, $ret_or_206 = nil, $ret_or_207 = nil, $ret_or_208 = nil, $ret_or_209 = nil, $ret_or_210 = nil, $ret_or_211 = nil, $ret_or_212 = nil, $ret_or_213 = nil, $ret_or_214 = nil, $ret_or_215 = nil, $ret_or_216 = nil, $ret_or_217 = nil, $ret_or_218 = nil, $ret_or_219 = nil, $ret_or_220 = nil, $ret_or_221 = nil, $ret_or_222 = nil, $ret_or_223 = nil, $ret_or_224 = nil, $ret_or_225 = nil, $ret_or_226 = nil, $ret_or_227 = nil, $ret_or_228 = nil, $ret_or_229 = nil, $ret_or_230 = nil, $ret_or_231 = nil, $ret_or_232 = nil, $ret_or_233 = nil, $ret_or_234 = nil, $ret_or_235 = nil, $ret_or_236 = nil, $ret_or_237 = nil, $ret_or_238 = nil, $ret_or_239 = nil, $ret_or_240 = nil, $ret_or_241 = nil, $ret_or_242 = nil, $ret_or_243 = nil, $ret_or_244 = nil, $ret_or_245 = nil, $ret_or_246 = nil, $ret_or_247 = nil, $ret_or_248 = nil, $ret_or_249 = nil, $ret_or_250 = nil, $ret_or_251 = nil, $ret_or_252 = nil, $ret_or_253 = nil, $ret_or_254 = nil, $ret_or_255 = nil, $ret_or_256 = nil, $ret_or_257 = nil, $ret_or_258 = nil, $ret_or_259 = nil, $ret_or_260 = nil, $ret_or_261 = nil, $ret_or_262 = nil, $ret_or_263 = nil, $ret_or_264 = nil, $ret_or_265 = nil, $ret_or_266 = nil, $ret_or_267 = nil, $ret_or_268 = nil, $ret_or_269 = nil, $ret_or_270 = nil, $ret_or_271 = nil, $ret_or_272 = nil, $ret_or_273 = nil, $ret_or_274 = nil, $ret_or_275 = nil, $ret_or_276 = nil, $ret_or_277 = nil, $ret_or_278 = nil, $ret_or_279 = nil, $ret_or_280 = nil, $ret_or_281 = nil, $ret_or_282 = nil, $ret_or_283 = nil, $ret_or_284 = nil, $ret_or_285 = nil, $ret_or_286 = nil, $ret_or_287 = nil, $ret_or_288 = nil, $ret_or_289 = nil, $ret_or_290 = nil, $ret_or_291 = nil, $ret_or_292 = nil, $ret_or_293 = nil, $ret_or_294 = nil, $ret_or_295 = nil, $ret_or_296 = nil, $ret_or_297 = nil, $ret_or_298 = nil, $ret_or_299 = nil, $ret_or_300 = nil, $ret_or_301 = nil, $ret_or_302 = nil, $ret_or_303 = nil, new_herebody_s = nil, indent = nil, $ret_or_304 = nil, dedent_body = nil, $ret_or_305 = nil, $ret_or_306 = nil, $ret_or_307 = nil, $ret_or_308 = nil, $ret_or_309 = nil, $ret_or_310 = nil, $ret_or_311 = nil, $ret_or_312 = nil, $ret_or_313 = nil, $ret_or_314 = nil, $ret_or_315 = nil, $ret_or_316 = nil, $ret_or_317 = nil, $ret_or_318 = nil, $ret_or_319 = nil, $ret_or_320 = nil, $ret_or_321 = nil, $ret_or_322 = nil, $ret_or_323 = nil, $ret_or_324 = nil, $ret_or_325 = nil, $ret_or_326 = nil, $ret_or_327 = nil, $ret_or_328 = nil, $ret_or_329 = nil, $ret_or_330 = nil, $ret_or_331 = nil, $ret_or_332 = nil, $ret_or_333 = nil, $ret_or_334 = nil, $ret_or_335 = nil, $ret_or_336 = nil, $ret_or_337 = nil, $ret_or_338 = nil, $ret_or_339 = nil, $ret_or_340 = nil, $ret_or_341 = nil, $ret_or_342 = nil, $ret_or_343 = nil, $ret_or_344 = nil, $ret_or_345 = nil, $ret_or_346 = nil, $ret_or_347 = nil, $ret_or_348 = nil, $ret_or_349 = nil, $ret_or_350 = nil, $ret_or_351 = nil, $ret_or_352 = nil, $ret_or_353 = nil, $ret_or_354 = nil, $ret_or_355 = nil, $ret_or_356 = nil, $ret_or_357 = nil, $ret_or_358 = nil, $ret_or_359 = nil, $ret_or_360 = nil, $ret_or_361 = nil, $ret_or_362 = nil, $ret_or_363 = nil, $ret_or_364 = nil, $ret_or_365 = nil, $ret_or_366 = nil, $ret_or_367 = nil, $ret_or_368 = nil, $ret_or_369 = nil, $ret_or_370 = nil, $ret_or_371 = nil, $ret_or_372 = nil, $ret_or_373 = nil, $ret_or_374 = nil, $ret_or_375 = nil, $ret_or_376 = nil, $ret_or_377 = nil, $ret_or_378 = nil, $ret_or_379 = nil, $ret_or_380 = nil, $ret_or_381 = nil, $ret_or_382 = nil, $ret_or_383 = nil, $ret_or_384 = nil, $ret_or_385 = nil, $ret_or_386 = nil, $ret_or_387 = nil, $ret_or_388 = nil, $ret_or_389 = nil, $ret_or_390 = nil, $ret_or_391 = nil, $ret_or_392 = nil, $ret_or_393 = nil, $ret_or_394 = nil, $ret_or_395 = nil, $ret_or_396 = nil, $ret_or_397 = nil, $ret_or_398 = nil, $ret_or_399 = nil, $ret_or_400 = nil, $ret_or_401 = nil, $ret_or_402 = nil, $ret_or_403 = nil, $ret_or_404 = nil, $ret_or_405 = nil, $ret_or_406 = nil, $ret_or_407 = nil, $ret_or_408 = nil, $ret_or_409 = nil, $ret_or_410 = nil, $ret_or_411 = nil, $ret_or_412 = nil, $ret_or_413 = nil, $ret_or_414 = nil, $ret_or_415 = nil, $ret_or_416 = nil, $ret_or_417 = nil, $ret_or_418 = nil, $ret_or_419 = nil, $ret_or_420 = nil, $ret_or_421 = nil, $ret_or_422 = nil, $ret_or_423 = nil, $ret_or_424 = nil, $ret_or_425 = nil, $ret_or_426 = nil, $ret_or_427 = nil, $ret_or_428 = nil, $ret_or_429 = nil, $ret_or_430 = nil, $ret_or_431 = nil, $ret_or_432 = nil, $ret_or_433 = nil, $ret_or_434 = nil, $ret_or_435 = nil, $ret_or_436 = nil, $ret_or_437 = nil, $ret_or_438 = nil, $ret_or_439 = nil, $ret_or_440 = nil, $ret_or_441 = nil, $ret_or_442 = nil, $ret_or_443 = nil, $ret_or_444 = nil, $ret_or_445 = nil, $ret_or_446 = nil, $ret_or_447 = nil, $ret_or_448 = nil, $ret_or_449 = nil, $ret_or_450 = nil, $ret_or_451 = nil, $ret_or_452 = nil, $ret_or_453 = nil, $ret_or_454 = nil, $ret_or_455 = nil, $ret_or_456 = nil, $ret_or_457 = nil, $ret_or_458 = nil, $ret_or_459 = nil, $ret_or_460 = nil, $ret_or_461 = nil, $ret_or_462 = nil, $ret_or_463 = nil, $ret_or_464 = nil, $ret_or_465 = nil, $ret_or_466 = nil, $ret_or_467 = nil, $ret_or_468 = nil, $ret_or_469 = nil, $ret_or_470 = nil, $ret_or_471 = nil, $ret_or_472 = nil, $ret_or_473 = nil, $ret_or_474 = nil, $ret_or_475 = nil, $ret_or_476 = nil, $ret_or_477 = nil, $ret_or_478 = nil, $ret_or_479 = nil, $ret_or_480 = nil, $ret_or_481 = nil, $ret_or_482 = nil, $ret_or_483 = nil, $ret_or_484 = nil, $ret_or_485 = nil, $ret_or_486 = nil, $ret_or_487 = nil, $ret_or_488 = nil, $ret_or_489 = nil, $ret_or_490 = nil, $ret_or_491 = nil, $ret_or_492 = nil, $ret_or_493 = nil, $ret_or_494 = nil, $ret_or_495 = nil, $ret_or_496 = nil, $ret_or_497 = nil, $ret_or_498 = nil, $ret_or_499 = nil, $ret_or_500 = nil, $ret_or_501 = nil, $ret_or_502 = nil, $ret_or_503 = nil, $ret_or_504 = nil, $ret_or_505 = nil, $ret_or_506 = nil, $ret_or_507 = nil, $ret_or_508 = nil, $ret_or_509 = nil, $ret_or_510 = nil, $ret_or_511 = nil, $ret_or_512 = nil, $ret_or_513 = nil, $ret_or_514 = nil, $ret_or_515 = nil, $ret_or_516 = nil, $ret_or_517 = nil, $ret_or_518 = nil, $ret_or_519 = nil, $ret_or_520 = nil, $ret_or_521 = nil, $ret_or_522 = nil;

      
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()};
      klass = self.$class();
      _lex_trans_keys = klass.$send("_lex_trans_keys");
      _lex_key_spans = klass.$send("_lex_key_spans");
      _lex_index_offsets = klass.$send("_lex_index_offsets");
      _lex_indicies = klass.$send("_lex_indicies");
      _lex_trans_targs = klass.$send("_lex_trans_targs");
      _lex_trans_actions = klass.$send("_lex_trans_actions");
      _lex_to_state_actions = klass.$send("_lex_to_state_actions");
      _lex_from_state_actions = klass.$send("_lex_from_state_actions");
      _lex_eof_trans = klass.$send("_lex_eof_trans");
      pe = $rb_plus(self.source_pts.$size(), 2);
      $a = [self.p, pe], (p = $a[0]), (eof = $a[1]), $a;
      cmd_state = self.command_start;
      self.command_start = false;
      
      testEof = false;
      $b = nil, $a = Opal.to_ary($b), (_slen = ($a[0] == null ? nil : $a[0])), (_trans = ($a[1] == null ? nil : $a[1])), (_keys = ($a[2] == null ? nil : $a[2])), (_inds = ($a[3] == null ? nil : $a[3])), (_acts = ($a[4] == null ? nil : $a[4])), (_nacts = ($a[5] == null ? nil : $a[5])), $b;
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ($truthy(true)) {
        
        if ($truthy($rb_le(_goto_level, 0))) {
          
          if (p['$=='](pe)) {
            
            _goto_level = _test_eof;
            continue;;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _resume))) {
          
          $case = _lex_from_state_actions['$[]'](self.cs);
          if ((97)['$===']($case)) {
          self.ts = p;};
          _keys = self.cs['$<<'](1);
          _inds = _lex_index_offsets['$[]'](self.cs);
          _slen = _lex_key_spans['$[]'](self.cs);
          _wide = (function() {if ($truthy(($ret_or_1 = self.source_pts['$[]'](p)))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          _trans = (function() {if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = $rb_gt(_slen, 0)))) {
            return $rb_le(_lex_trans_keys['$[]'](_keys), _wide)
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return $rb_le(_wide, _lex_trans_keys['$[]']($rb_plus(_keys, 1)))
          } else {
            return $ret_or_2
          }; return nil; })())) {
            return _lex_indicies['$[]']($rb_minus($rb_plus(_inds, _wide), _lex_trans_keys['$[]'](_keys)))
          } else {
            return _lex_indicies['$[]']($rb_plus(_inds, _slen))
          }; return nil; })();};
        if ($truthy($rb_le(_goto_level, _eof_trans))) {
          
          self.cs = _lex_trans_targs['$[]'](_trans);
          if ($truthy(_lex_trans_actions['$[]'](_trans)['$!='](0))) {
            $case = _lex_trans_actions['$[]'](_trans);
            if ((29)['$===']($case)) {
            self.newline_s = p;}
            else if ((117)['$===']($case)) {
            self.escape_s = p;
            self.escape = nil;}
            else if ((30)['$===']($case)) {
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};}
            else if ((60)['$===']($case)) {
            self.sharp_s = $rb_minus(p, 1);}
            else if ((64)['$===']($case)) {
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());}
            else if ((310)['$===']($case)) {
            tm = p;}
            else if ((37)['$===']($case)) {
            tm = p;}
            else if ((39)['$===']($case)) {
            tm = p;}
            else if ((41)['$===']($case)) {
            tm = p;}
            else if ((71)['$===']($case)) {
            heredoc_e = p;}
            else if ((349)['$===']($case)) {
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";}
            else if ((352)['$===']($case)) {
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";}
            else if ((360)['$===']($case)) {
            self.escape = nil;}
            else if ((392)['$===']($case)) {
            tm = p;}
            else if ((308)['$===']($case)) {
            ident_tok = self.$tok();
            ident_ts = self.ts;
            ident_te = self.te;}
            else if ((479)['$===']($case)) {
            self.num_base = 16;
            self.num_digits_s = p;}
            else if ((473)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = p;}
            else if ((476)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = p;}
            else if ((470)['$===']($case)) {
            self.num_base = 2;
            self.num_digits_s = p;}
            else if ((485)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = self.ts;}
            else if ((447)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = self.ts;}
            else if ((462)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((455)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((452)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((89)['$===']($case)) {
            tm = p;}
            else if ((7)['$===']($case)) {
            self.te = $rb_plus(p, 1);}
            else if ((113)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((5)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((109)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_4 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_4
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((108)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_5 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_5
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_6 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_6
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((115)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((114)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((111)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((112)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_7 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_7
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_8 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_8
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((6)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_9 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_9
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_10 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_10
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_11 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_11
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_13
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_12
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_14 = self.escape))) {
                return $ret_or_14
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;}
            else if ((4)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_15 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_15
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_16 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_16
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((145)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((10)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((142)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_17 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_17
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((141)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_18 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_18
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_19 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_19
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((147)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((146)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((144)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_20 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_20
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_21 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_21
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((11)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_22 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_22
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_23 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_23
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_24 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_24
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_25 = (function() {if ($truthy(($ret_or_26 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_26
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_25
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_27 = self.escape))) {
                return $ret_or_27
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;}
            else if ((9)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_28 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_28
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_29 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_29
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((173)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_30 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_30
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((172)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_31 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_31
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_32 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_32
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((175)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((176)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_33 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_33
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_34 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_34
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((179)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_35 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_35
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((178)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_36 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_36
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_37 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_37
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((181)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_38 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_38
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_39 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_39
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((188)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((13)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((185)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_40 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_40
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((184)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_41 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_41
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_42 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_42
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((190)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((189)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((187)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_43 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_43
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_44 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_44
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((12)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_45 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_45
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_46 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_46
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((192)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_47 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_47
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((191)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_48 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_48
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_49 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_49
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((199)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((15)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((195)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_50 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_50
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((194)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_51 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_51
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_52 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_52
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((201)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((200)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((197)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((198)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_53 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_53
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_54 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_54
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((14)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_55 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_55
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_56 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_56
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((203)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_57 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_57
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((202)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_58 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_58
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_59 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_59
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 795;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((205)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((206)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tREGEXP_OPT", self.$tok(self.ts, $rb_minus(self.te, 1)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((207)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            unknown_options = self.$tok().$scan(/[^imxouesn]/);
            if ($truthy(unknown_options['$any?']())) {
              self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))};
            self.$emit("tREGEXP_OPT");
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((16)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((208)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((210)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@@[0-9]/))) {
              self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tCVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((209)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@[0-9]/))) {
              self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tIVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((231)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((217)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((18)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 810;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((214)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((226)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((20)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self['$version?'](23))) {
              
              $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;
            } else {
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 810;
              _goto_level = _again;
              continue;;;
            };;}
            else if ((213)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((212)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((230)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((227)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((229)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((224)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 810;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((220)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((225)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((218)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((223)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((19)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((17)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((216)['$===']($case)) {
            $case = self.act;
            if ((43)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((45)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((22)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 795;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((23)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy((function() {if ($truthy(($ret_or_60 = $rb_ge(self.version, 31)))) {
              return self.context.$in_argdef()
            } else {
              return $ret_or_60
            }; return nil; })())) {
              
              self.$emit("tBDOT3", "...".$freeze());
              self.cs = 810;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 3);
              
              self.cs = 810;
              _goto_level = _again;
              continue;;;
            };;}
            else if ((233)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((232)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((235)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((234)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((21)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((241)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 494;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((240)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((239)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((251)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((242)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((247)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 494;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((245)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((250)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((274)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((257)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              if ($truthy($rb_lt(self.version, 30))) {
                self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
              } else {
                self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
              }};
            p = $rb_minus(tm, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((263)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((25)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((265)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((40)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((252)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((253)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((264)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((260)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((262)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((256)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((255)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((273)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((26)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((42)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((24)['$===']($case)) {
            $case = self.act;
            if ((72)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              if ($truthy($rb_lt(self.version, 30))) {
                self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
              } else {
                self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
              }};
            p = $rb_minus(tm, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;}
            else if ((78)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;}
            else {
            
            p = $rb_minus(self.te, 1);;};}
            else if ((44)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 494;
            _goto_level = _again;
            continue;;;;}
            else if ((278)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((279)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 494;
            _goto_level = _again;
            continue;;;;}
            else if ((45)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 494;
            _goto_level = _again;
            continue;;;;}
            else if ((43)['$===']($case)) {
            $case = self.act;
            if ((85)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self.cond['$active?']())) {
              self.$emit("kDO_COND", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            } else {
              self.$emit("kDO", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            };
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((86)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 494;
            _goto_level = _again;
            continue;;;};}
            else if ((289)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_do(true);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((282)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((283)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((284)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((287)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((293)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((292)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((301)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((295)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((299)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((294)['$===']($case)) {
            $case = self.act;
            if ((93)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((94)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;};}
            else if ((57)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((334)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            type = (delimiter = self.$tok()['$[]'](0).$chr());
            p = $rb_minus(p, 1);
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((326)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.source_buffer.$slice(self.ts).$chr(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((55)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((347)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            self.$emit("tSYMBEG", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            
            self.cs = 352;
            _goto_level = _again;
            continue;;;;}
            else if ((335)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((346)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), $rb_plus(self.ts, 2)));
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((69)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((357)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((356)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((336)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((52)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            if ($truthy(self['$version?'](18))) {
              
              ident = self.$tok(self.ts, $rb_minus(self.te, 2));
              self.$emit((function() {if ($truthy(self.source_buffer.$slice(self.ts)['$=~'](/[A-Z]/))) {
                return "tCONSTANT"
              } else {
                return "tIDENTIFIER"
              }; return nil; })(), ident, self.ts, $rb_minus(self.te, 2));
              p = $rb_minus(p, 1);
              if ($truthy((function() {if ($truthy(($ret_or_61 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](ident)
              } else {
                return $ret_or_61
              }; return nil; })())) {
                self.cs = 810
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              
              self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
              self.cs = 795;
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((49)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy((function() {if ($truthy(($ret_or_62 = (function() {if ($truthy(($ret_or_63 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](ident_tok)
            } else {
              return $ret_or_63
            }; return nil; })()))) {
              return $rb_lt(self.version, 25)
            } else {
              return $ret_or_62
            }; return nil; })())) {
              self.cs = 465
            } else {
              self.cs = 525
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((320)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 186;
            _goto_level = _again;
            continue;;;;}
            else if ((56)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((304)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((330)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((329)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSTAR", "*".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((325)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((354)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((337)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((350)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((355)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((361)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((327)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((331)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT2")
            } else {
              self.$emit("tDOT2")
            };
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((332)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            followed_by_nl = $rb_minus(self.te, 1)['$=='](self.newline_s);
            nl_emitted = false;
            dots_te = (function() {if ($truthy(followed_by_nl)) {
              return $rb_minus(self.te, 1)
            } else {
              return self.te
            }; return nil; })();
            if ($truthy($rb_ge(self.version, 30))) {
              if ($truthy((function() {if ($truthy(($ret_or_64 = self.lambda_stack['$any?']()))) {
                return $rb_plus(self.lambda_stack.$last(), 1)['$=='](self.paren_nest)
              } else {
                return $ret_or_64
              }; return nil; })())) {
                self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
              } else {
                
                self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te);
                if ($truthy((function() {if ($truthy(($ret_or_65 = (function() {if ($truthy(($ret_or_66 = $rb_ge(self.version, 31)))) {
                  return followed_by_nl
                } else {
                  return $ret_or_66
                }; return nil; })()))) {
                  return self.context.$in_argdef()
                } else {
                  return $ret_or_65
                }; return nil; })())) {
                  
                  self.$emit("tNL", $rb_minus(self.te, 1), self.te);
                  nl_emitted = true;};
              }
            } else if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te)
            } else {
              self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
            };
            if ($truthy((function() {if ($truthy(($ret_or_67 = followed_by_nl))) {
              return nl_emitted['$!']()
            } else {
              return $ret_or_67
            }; return nil; })())) {
              p = $rb_minus(p, 1)};
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((307)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_68 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_68
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((317)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((319)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 186;
            _goto_level = _again;
            continue;;;;}
            else if ((322)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((54)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((74)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            value = (function() {if ($truthy(($ret_or_69 = self.escape))) {
              return $ret_or_69
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((48)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_70 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_70
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((53)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((68)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((51)['$===']($case)) {
            $case = self.act;
            if ((99)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((106)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((117)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 810;
              _goto_level = _again;
              continue;;;
            };}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 539;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((123)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;}
            else if ((128)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_71 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_71
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((132)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;};}
            else if ((395)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((396)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((397)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((401)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((77)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((405)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            
            self.cs = self.$push_literal(self.$tok(), self.$tok(), self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((404)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((403)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((407)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((406)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((76)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 563;
            _goto_level = _again;
            continue;;;;}
            else if ((440)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLAMBDA", "->".$freeze(), self.ts, $rb_plus(self.ts, 2));
            self.lambda_stack.$push(self.paren_nest);
            self.cs = 465;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((86)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((415)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts, nil, false, false, true);
            _goto_level = _again;
            continue;;;;}
            else if ((79)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((436)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 473;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((489)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((429)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((434)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tOP_ASGN", self.$tok(self.ts, $rb_minus(self.te, 1)));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((420)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tEH", "?".$freeze());
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((417)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((419)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSEMI", ";".$freeze());
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((494)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
            p = $rb_minus(p, 1);;}
            else if ((414)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((413)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((505)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 352;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((503)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((502)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((444)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((491)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((433)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 347;
            _goto_level = _again;
            continue;;;;}
            else if ((441)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 473;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((497)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_72 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_72
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((439)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((435)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((428)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((442)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((426)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((432)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((84)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_73 = (function() {if ($truthy(($ret_or_74 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_74
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_73
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_75 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_75
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((80)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((83)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((78)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((81)['$===']($case)) {
            $case = self.act;
            if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 352;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 539;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy((function() {if ($truthy(($ret_or_76 = self['$version?'](18)))) {
              return self.$tok()['$==']("not".$freeze())
            } else {
              return $ret_or_76
            }; return nil; })())) {
              
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 494;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy((function() {if ($truthy(($ret_or_77 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](self.$tok())
              } else {
                return $ret_or_77
              }; return nil; })())) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((154)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_78 = (function() {if ($truthy(($ret_or_79 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_79
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_78
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_80 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_80
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((158)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((160)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_81 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_81
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((165)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 494;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((168)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((516)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            if ($truthy($rb_lt(self.version, 27))) {
              
              p = $rb_minus(p, 1);
              self.cs = 186;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tBDOT3");
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((95)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((510)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 186;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((513)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 186;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((515)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            if ($truthy($rb_lt(self.version, 27))) {
              
              p = $rb_minus(p, 1);
              self.cs = 186;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tBDOT2");
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((514)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;}
            else if ((512)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 186;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((90)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 186;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((87)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 186;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((91)['$===']($case)) {
            $case = self.act;
            if ((181)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 186;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};}
            else if ((185)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 186;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((519)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;}
            else if ((518)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, $rb_plus(self.eq_begin_s, "=begin".$length())));;}
            else if ((106)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 998;
            _goto_level = _again;
            continue;;;;}
            else if ((2)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;}
            else if ((98)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 802;
            _goto_level = _again;
            continue;;;;}
            else if ((99)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((100)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((105)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 998;
            _goto_level = _again;
            continue;;;;}
            else if ((104)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 802;
            _goto_level = _again;
            continue;;;;}
            else if ((1)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 802;
            _goto_level = _again;
            continue;;;;}
            else if ((67)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((110)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_82 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_82
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((143)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_83 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_83
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((174)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_84 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_84
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((180)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_85 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_85
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((186)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_86 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_86
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((193)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_87 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_87
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((196)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_88 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_88
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((204)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_89 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_89
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((275)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((266)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((258)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((358)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((333)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            followed_by_nl = $rb_minus(self.te, 1)['$=='](self.newline_s);
            nl_emitted = false;
            dots_te = (function() {if ($truthy(followed_by_nl)) {
              return $rb_minus(self.te, 1)
            } else {
              return self.te
            }; return nil; })();
            if ($truthy($rb_ge(self.version, 30))) {
              if ($truthy((function() {if ($truthy(($ret_or_90 = self.lambda_stack['$any?']()))) {
                return $rb_plus(self.lambda_stack.$last(), 1)['$=='](self.paren_nest)
              } else {
                return $ret_or_90
              }; return nil; })())) {
                self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
              } else {
                
                self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te);
                if ($truthy((function() {if ($truthy(($ret_or_91 = (function() {if ($truthy(($ret_or_92 = $rb_ge(self.version, 31)))) {
                  return followed_by_nl
                } else {
                  return $ret_or_92
                }; return nil; })()))) {
                  return self.context.$in_argdef()
                } else {
                  return $ret_or_91
                }; return nil; })())) {
                  
                  self.$emit("tNL", $rb_minus(self.te, 1), self.te);
                  nl_emitted = true;};
              }
            } else if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT3", "...".$freeze(), self.ts, dots_te)
            } else {
              self.$emit("tDOT3", "...".$freeze(), self.ts, dots_te)
            };
            if ($truthy((function() {if ($truthy(($ret_or_93 = followed_by_nl))) {
              return nl_emitted['$!']()
            } else {
              return $ret_or_93
            }; return nil; })())) {
              p = $rb_minus(p, 1)};
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((321)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 186;
            _goto_level = _again;
            continue;;;;;}
            else if ((443)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            if (self.paren_nest['$=='](0)) {
              self.$diagnostic("warning", "triple_dot_at_eol", nil, self.$range(self.ts, $rb_minus(self.te, 1)))};
            self.$emit("tDOT3", "...".$freeze(), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((520)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;;}
            else if ((517)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);;}
            else if ((107)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 998;
            _goto_level = _again;
            continue;;;;;}
            else if ((3)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;;}
            else if ((465)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$13 = function(chars){var self = $$13.$$s == null ? this : $$13.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$13.$$s = self, $$13.$$arity = 1, $$13));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_94 = (function() {if ($truthy(($ret_or_95 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_95
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_94
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_96 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_96
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((463)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$14 = function(chars){var self = $$14.$$s == null ? this : $$14.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, chars));}, $$14.$$s = self, $$14.$$arity = 1, $$14));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_97 = (function() {if ($truthy(($ret_or_98 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_98
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_97
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_99 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_99
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((468)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$15 = function(chars){var self = $$15.$$s == null ? this : $$15.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$15.$$s = self, $$15.$$arity = 1, $$15));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_100 = (function() {if ($truthy(($ret_or_101 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_101
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_100
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_102 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_102
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((466)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$16 = function(chars){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

              
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$16.$$s = self, $$16.$$arity = 1, $$16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_103 = (function() {if ($truthy(($ret_or_104 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_104
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_103
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_105 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_105
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((464)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$17 = function(chars){var self = $$17.$$s == null ? this : $$17.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

              
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$17.$$s = self, $$17.$$arity = 1, $$17));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_106 = (function() {if ($truthy(($ret_or_107 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_107
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_106
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_108 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_108
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((467)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$18 = function(chars){var self = $$18.$$s == null ? this : $$18.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

              
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$18.$$s = self, $$18.$$arity = 1, $$18));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_109 = (function() {if ($truthy(($ret_or_110 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_110
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_109
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_111 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_111
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((456)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$19 = function(chars){var self = $$19.$$s == null ? this : $$19.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)));}, $$19.$$s = self, $$19.$$arity = 1, $$19));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((457)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$20 = function(chars){var self = $$20.$$s == null ? this : $$20.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

              
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$20.$$s = self, $$20.$$arity = 1, $$20));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((458)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$21 = function(chars){var self = $$21.$$s == null ? this : $$21.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$21.$$s = self, $$21.$$arity = 1, $$21));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((460)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$22 = function(chars){var self = $$22.$$s == null ? this : $$22.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$22.$$s = self, $$22.$$arity = 1, $$22));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((459)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$23 = function(chars){var self = $$23.$$s == null ? this : $$23.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

              
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$23.$$s = self, $$23.$$arity = 1, $$23));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((137)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_112 = codepoints['$start_with?'](" ")))) {
                return $ret_or_112
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_113 = codepoints['$end_with?'](" ")))) {
                return $ret_or_113
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$24 = function($mlhs_tmp1){var self = $$24.$$s == null ? this : $$24.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

              
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$24.$$s = self, $$24.$$brk = $brk, $$24.$$arity = 1, $$24.$$has_top_level_mlhs_arg = true, $$24))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_114 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_114
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_115 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_115
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_116 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_116
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_117 = (function() {if ($truthy(($ret_or_118 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_118
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_117
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_119 = self.escape))) {
                return $ret_or_119
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((168)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_120 = codepoints['$start_with?'](" ")))) {
                return $ret_or_120
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_121 = codepoints['$end_with?'](" ")))) {
                return $ret_or_121
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$25 = function($mlhs_tmp1){var self = $$25.$$s == null ? this : $$25.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

              
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$25.$$s = self, $$25.$$brk = $brk, $$25.$$arity = 1, $$25.$$has_top_level_mlhs_arg = true, $$25))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_122 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_122
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_123 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_123
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_124 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_124
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_125 = (function() {if ($truthy(($ret_or_126 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_126
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_125
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_127 = self.escape))) {
                return $ret_or_127
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((382)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_128 = codepoints['$start_with?'](" ")))) {
                return $ret_or_128
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_129 = codepoints['$end_with?'](" ")))) {
                return $ret_or_129
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$26 = function($mlhs_tmp1){var self = $$26.$$s == null ? this : $$26.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

              
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$26.$$s = self, $$26.$$brk = $brk, $$26.$$arity = 1, $$26.$$has_top_level_mlhs_arg = true, $$26))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_130 = self.escape))) {
              return $ret_or_130
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((118)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_131 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_132 = codepoint['$=='](117)))) {
                return $ret_or_132
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_131
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_133 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_133
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_134 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_134
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_135 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_135
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_136 = (function() {if ($truthy(($ret_or_137 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_137
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_136
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_138 = self.escape))) {
                return $ret_or_138
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((149)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_139 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_140 = codepoint['$=='](117)))) {
                return $ret_or_140
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_139
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_141 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_141
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_142 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_142
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_143 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_143
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_144 = (function() {if ($truthy(($ret_or_145 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_145
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_144
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_146 = self.escape))) {
                return $ret_or_146
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((363)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_147 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_148 = codepoint['$=='](117)))) {
                return $ret_or_148
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_147
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_149 = self.escape))) {
              return $ret_or_149
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((121)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_150 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_150
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_151 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_151
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_152 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_152
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_153 = (function() {if ($truthy(($ret_or_154 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_154
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_153
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_155 = self.escape))) {
                return $ret_or_155
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((152)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_156 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_156
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_157 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_157
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_158 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_158
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_159 = (function() {if ($truthy(($ret_or_160 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_160
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_159
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_161 = self.escape))) {
                return $ret_or_161
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((366)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_162 = self.escape))) {
              return $ret_or_162
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((123)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_163 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_163
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_164 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_164
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_165 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_165
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_166 = (function() {if ($truthy(($ret_or_167 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_167
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_166
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_168 = self.escape))) {
                return $ret_or_168
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((154)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_169 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_169
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_170 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_170
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_171 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_171
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_172 = (function() {if ($truthy(($ret_or_173 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_173
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_172
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_174 = self.escape))) {
                return $ret_or_174
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((368)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_175 = self.escape))) {
              return $ret_or_175
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((120)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_176 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_176
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_177 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_177
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_178 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_178
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_179 = (function() {if ($truthy(($ret_or_180 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_180
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_179
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_181 = self.escape))) {
                return $ret_or_181
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((151)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_182 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_182
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_183 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_183
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_184 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_184
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_185 = (function() {if ($truthy(($ret_or_186 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_186
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_185
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_187 = self.escape))) {
                return $ret_or_187
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((365)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_188 = self.escape))) {
              return $ret_or_188
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((140)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_189 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_189
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_190 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_190
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_191 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_191
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_192 = (function() {if ($truthy(($ret_or_193 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_193
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_192
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_194 = self.escape))) {
                return $ret_or_194
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((171)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_195 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_195
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_196 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_196
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_197 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_197
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_198 = (function() {if ($truthy(($ret_or_199 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_199
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_198
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_200 = self.escape))) {
                return $ret_or_200
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((385)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_201 = self.escape))) {
              return $ret_or_201
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((139)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_202 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_202
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_203 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_203
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_204 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_204
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_205 = (function() {if ($truthy(($ret_or_206 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_206
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_205
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_207 = self.escape))) {
                return $ret_or_207
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((170)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_208 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_208
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_209 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_209
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_210 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_210
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_211 = (function() {if ($truthy(($ret_or_212 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_212
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_211
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_213 = self.escape))) {
                return $ret_or_213
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((384)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_214 = self.escape))) {
              return $ret_or_214
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((134)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_215 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_215
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_216 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_216
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_217 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_217
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_218 = (function() {if ($truthy(($ret_or_219 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_219
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_218
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_220 = self.escape))) {
                return $ret_or_220
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((165)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_221 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_221
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_222 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_222
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_223 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_223
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_224 = (function() {if ($truthy(($ret_or_225 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_225
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_224
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_226 = self.escape))) {
                return $ret_or_226
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((379)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_227 = self.escape))) {
              return $ret_or_227
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((133)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_228 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_228
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_229 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_229
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_230 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_230
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_231 = (function() {if ($truthy(($ret_or_232 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_232
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_231
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_233 = self.escape))) {
                return $ret_or_233
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((164)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_234 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_234
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_235 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_235
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_236 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_236
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_237 = (function() {if ($truthy(($ret_or_238 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_238
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_237
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_239 = self.escape))) {
                return $ret_or_239
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((378)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_240 = self.escape))) {
              return $ret_or_240
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((138)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_241 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_241
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_242 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_242
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_243 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_243
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_244 = (function() {if ($truthy(($ret_or_245 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_245
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_244
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_246 = self.escape))) {
                return $ret_or_246
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((169)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_247 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_247
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_248 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_248
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_249 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_249
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_250 = (function() {if ($truthy(($ret_or_251 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_251
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_250
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_252 = self.escape))) {
                return $ret_or_252
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((383)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_253 = self.escape))) {
              return $ret_or_253
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((135)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_254 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_254
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_255 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_255
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_256 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_256
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_257 = (function() {if ($truthy(($ret_or_258 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_258
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_257
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_259 = self.escape))) {
                return $ret_or_259
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((166)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_260 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_260
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_261 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_261
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_262 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_262
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_263 = (function() {if ($truthy(($ret_or_264 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_264
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_263
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_265 = self.escape))) {
                return $ret_or_265
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((380)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_266 = self.escape))) {
              return $ret_or_266
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((119)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_267 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_267
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_268 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_268
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_269 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_269
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_270 = (function() {if ($truthy(($ret_or_271 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_271
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_270
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_272 = self.escape))) {
                return $ret_or_272
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((150)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_273 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_273
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_274 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_274
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_275 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_275
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_276 = (function() {if ($truthy(($ret_or_277 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_277
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_276
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_278 = self.escape))) {
                return $ret_or_278
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((364)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_279 = self.escape))) {
              return $ret_or_279
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((177)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_280 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_280
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_281 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_281
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_282 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_282
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_283 = (function() {if ($truthy(($ret_or_284 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_284
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_283
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_285 = self.escape))) {
                return $ret_or_285
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((182)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_286 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_286
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_287 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_287
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_288 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_288
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_289 = (function() {if ($truthy(($ret_or_290 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_290
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_289
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_291 = self.escape))) {
                return $ret_or_291
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((58)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.newline_s = p;;}
            else if ((31)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((33)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((35)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((219)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((238)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((246)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((34)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((277)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((269)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((288)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((300)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((296)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((59)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((50)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy((function() {if ($truthy(($ret_or_292 = (function() {if ($truthy(($ret_or_293 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](ident_tok)
            } else {
              return $ret_or_293
            }; return nil; })()))) {
              return $rb_lt(self.version, 25)
            } else {
              return $ret_or_292
            }; return nil; })())) {
              self.cs = 465
            } else {
              self.cs = 525
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((318)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((402)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((398)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.context.$in_kwarg())) {
              
              p = $rb_minus(p, 1);
              
              self.cs = 810;
              _goto_level = _again;
              continue;;;
            } else {
              
              self.cs = 186;
              _goto_level = _again;
              continue;;
            };;;}
            else if ((411)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((408)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 186;
            _goto_level = _again;
            continue;;;;;}
            else if ((495)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((427)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 990;
            _goto_level = _again;
            continue;;;;;}
            else if ((101)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((268)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze(), $rb_minus(self.te, 1), self.te);
            } else {
              self.$emit("tLCURLY", "{".$freeze(), $rb_minus(self.te, 1), self.te)
            };
            self.command_start = true;
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((290)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE_ARG", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((393)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.command_start = true;
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((508)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((509)['$===']($case)) {
            
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              if ($truthy(current_literal.$end_interp_brace_and_try_closing())) {
                
                if ($truthy(self['$version?'](18, 19))) {
                  
                  self.$emit("tRCURLY", "}".$freeze(), $rb_minus(p, 1), p);
                  self.cond.$lexpop();
                  self.cmdarg.$lexpop();
                } else {
                  self.$emit("tSTRING_DEND", "}".$freeze(), $rb_minus(p, 1), p)
                };
                if ($truthy(current_literal.$saved_herebody_s())) {
                  self.herebody_s = current_literal.$saved_herebody_s()};
                p = $rb_minus(p, 1);
                self.cs = self.$next_state_for_literal(current_literal);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;}};
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_294 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_294
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 810
              } else {
                self.cs = 531
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((61)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((65)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((222)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((237)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((249)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((271)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((286)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((298)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((324)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((400)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((410)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((431)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((103)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((243)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((338)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((309)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((424)['$===']($case)) {
            
            tm = p;;
            
            $case = self.act;
            if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 352;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 539;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy((function() {if ($truthy(($ret_or_295 = self['$version?'](18)))) {
              return self.$tok()['$==']("not".$freeze())
            } else {
              return $ret_or_295
            }; return nil; })())) {
              
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 494;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy((function() {if ($truthy(($ret_or_296 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](self.$tok())
              } else {
                return $ret_or_296
              }; return nil; })())) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((154)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_297 = (function() {if ($truthy(($ret_or_298 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_298
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_297
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_299 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_299
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((158)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((160)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_300 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_300
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((165)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 494;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((168)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};;}
            else if ((244)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((339)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((311)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((425)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 494;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((340)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((312)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((341)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((313)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((345)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((316)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((344)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((315)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            $case = self.act;
            if ((99)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((106)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((117)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 810;
              _goto_level = _again;
              continue;;;
            };}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 539;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((123)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 802;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;}
            else if ((128)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_301 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_301
            }; return nil; })())) {
              
              self.cs = 465;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((132)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;};;}
            else if ((342)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((314)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((343)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((490)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((267)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze(), $rb_minus(self.te, 1), self.te);
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((386)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((493)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK2", "[".$freeze());
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((496)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_302 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_302
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 810
              } else {
                self.cs = 531
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((259)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tLPAREN2", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 802;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((272)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN2", "(".$freeze());
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((280)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
            if ($truthy(self['$version?'](18))) {
              
              self.cs = 802;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((328)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN", "(".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((437)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 563;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((438)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_303 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_303
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 810
              } else {
                self.cs = 531
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((72)['$===']($case)) {
            
            heredoc_e = p;;
            
            self.newline_s = p;;}
            else if ((353)['$===']($case)) {
            
            new_herebody_s = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$tok(self.ts, heredoc_e)['$=~'](/^<<(-?)(~?)(["'`]?)(.*)\3$/m);
            indent = (function() {if ($truthy(($ret_or_304 = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$empty?']()['$!']()))) {
              return $ret_or_304
            } else {
              return (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']()
            }; return nil; })();
            dedent_body = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']();
            type = (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$empty?']())) {
              return "<<\"".$freeze()
            } else {
              
              return $rb_plus("<<".$freeze(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3)));
            }; return nil; })();
            delimiter = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4));
            if ($truthy($rb_ge(self.version, 27))) {
              if ($truthy((function() {if ($truthy(($ret_or_305 = $rb_gt(delimiter.$count("\n"), 0)))) {
                return $ret_or_305
              } else {
                return $rb_gt(delimiter.$count("\r"), 0)
              }; return nil; })())) {
                self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))}
            } else if ($truthy($rb_ge(self.version, 24))) {
              if ($truthy($rb_gt(delimiter.$count("\n"), 0))) {
                if ($truthy(delimiter['$end_with?']("\n"))) {
                  
                  self.$diagnostic("warning", "heredoc_id_ends_with_nl", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
                  delimiter = delimiter.$rstrip();
                } else {
                  self.$diagnostic("fatal", "heredoc_id_has_newline", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                }}};
            if ($truthy((function() {if ($truthy(($ret_or_306 = dedent_body))) {
              return self['$version?'](18, 19, 20, 21, 22)
            } else {
              return $ret_or_306
            }; return nil; })())) {
              
              self.$emit("tLSHFT", "<<".$freeze(), self.ts, $rb_plus(self.ts, 2));
              p = $rb_plus(self.ts, 1);
              self.cs = 563;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$push_literal(type, delimiter, self.ts, heredoc_e, indent, dedent_body);
              self.herebody_s = (function() {if ($truthy(($ret_or_307 = self.herebody_s))) {
                return $ret_or_307
              } else {
                return new_herebody_s
              }; return nil; })();
              p = $rb_minus(self.herebody_s, 1);
            };;;}
            else if ((348)['$===']($case)) {
            
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((351)['$===']($case)) {
            
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((359)['$===']($case)) {
            
            self.escape = nil;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_308 = self.escape))) {
              return $ret_or_308
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((389)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 539;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((480)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((474)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((477)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((471)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((486)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((449)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((487)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$27 = function(chars){var self = $$27.$$s == null ? this : $$27.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$27.$$s = self, $$27.$$arity = 1, $$27));;}
            else if ((8)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;}
            else if ((453)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;}
            else if ((228)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 43;;}
            else if ((215)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 44;;}
            else if ((211)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 45;;}
            else if ((27)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 72;;}
            else if ((261)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 73;;}
            else if ((28)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 78;;}
            else if ((254)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 79;;}
            else if ((281)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 85;;}
            else if ((46)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 86;;}
            else if ((302)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 93;;}
            else if ((291)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 94;;}
            else if ((70)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 106;;}
            else if ((394)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 117;;}
            else if ((305)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 121;;}
            else if ((388)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 122;;}
            else if ((387)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 123;;}
            else if ((75)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 127;;}
            else if ((303)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 128;;}
            else if ((306)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 132;;}
            else if ((504)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 145;;}
            else if ((499)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 146;;}
            else if ((507)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 148;;}
            else if ((500)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 149;;}
            else if ((501)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 150;;}
            else if ((506)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 151;;}
            else if ((498)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 152;;}
            else if ((492)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 153;;}
            else if ((418)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 154;;}
            else if ((451)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 157;;}
            else if ((82)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 158;;}
            else if ((421)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 160;;}
            else if ((412)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 164;;}
            else if ((423)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 165;;}
            else if ((416)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 167;;}
            else if ((422)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 168;;}
            else if ((88)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 181;;}
            else if ((511)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 185;;}
            else if ((183)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_309 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_309
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;
            
            self.escape_s = p;
            self.escape = nil;;}
            else if ((124)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_310 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_311 = codepoint['$=='](117)))) {
                return $ret_or_311
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_310
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_312 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_312
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_313 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_313
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_314 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_314
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_315 = (function() {if ($truthy(($ret_or_316 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_316
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_315
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_317 = self.escape))) {
                return $ret_or_317
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((155)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_318 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_319 = codepoint['$=='](117)))) {
                return $ret_or_319
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_318
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_320 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_320
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_321 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_321
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_322 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_322
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_323 = (function() {if ($truthy(($ret_or_324 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_324
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_323
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_325 = self.escape))) {
                return $ret_or_325
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((369)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_326 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_327 = codepoint['$=='](117)))) {
                return $ret_or_327
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_326
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_328 = self.escape))) {
              return $ret_or_328
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((131)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_329 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_330 = codepoint['$=='](117)))) {
                return $ret_or_330
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_329
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_331 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_331
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_332 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_332
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_333 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_333
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_334 = (function() {if ($truthy(($ret_or_335 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_335
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_334
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_336 = self.escape))) {
                return $ret_or_336
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((162)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_337 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_338 = codepoint['$=='](117)))) {
                return $ret_or_338
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_337
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_339 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_339
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_340 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_340
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_341 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_341
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_342 = (function() {if ($truthy(($ret_or_343 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_343
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_342
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_344 = self.escape))) {
                return $ret_or_344
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((376)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_345 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_346 = codepoint['$=='](117)))) {
                return $ret_or_346
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_345
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_347 = self.escape))) {
              return $ret_or_347
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((122)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_348 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_349 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_349
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_348
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_350 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_350
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_351 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_351
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_352 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_352
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_353 = (function() {if ($truthy(($ret_or_354 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_354
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_353
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_355 = self.escape))) {
                return $ret_or_355
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((153)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_356 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_357 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_357
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_356
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_358 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_358
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_359 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_359
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_360 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_360
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_361 = (function() {if ($truthy(($ret_or_362 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_362
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_361
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_363 = self.escape))) {
                return $ret_or_363
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((367)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_364 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_365 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_365
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_364
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_366 = self.escape))) {
              return $ret_or_366
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((130)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_367 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_368 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_368
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_367
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_369 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_369
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_370 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_370
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_371 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_371
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_372 = (function() {if ($truthy(($ret_or_373 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_373
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_372
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_374 = self.escape))) {
                return $ret_or_374
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((161)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_375 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_376 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_376
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_375
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_377 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_377
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_378 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_378
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_379 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_379
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_380 = (function() {if ($truthy(($ret_or_381 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_381
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_380
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_382 = self.escape))) {
                return $ret_or_382
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((375)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_383 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_384 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_384
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_383
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_385 = self.escape))) {
              return $ret_or_385
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((126)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_386 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_386
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_387 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_387
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_388 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_388
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_389 = (function() {if ($truthy(($ret_or_390 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_390
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_389
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_391 = self.escape))) {
                return $ret_or_391
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((157)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_392 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_392
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_393 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_393
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_394 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_394
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_395 = (function() {if ($truthy(($ret_or_396 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_396
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_395
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_397 = self.escape))) {
                return $ret_or_397
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((371)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_398 = self.escape))) {
              return $ret_or_398
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((129)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_399 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_399
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_400 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_400
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_401 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_401
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_402 = (function() {if ($truthy(($ret_or_403 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_403
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_402
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_404 = self.escape))) {
                return $ret_or_404
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((160)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_405 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_405
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_406 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_406
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_407 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_407
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_408 = (function() {if ($truthy(($ret_or_409 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_409
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_408
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_410 = self.escape))) {
                return $ret_or_410
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((374)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_411 = self.escape))) {
              return $ret_or_411
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((136)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_412 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_412
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_413 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_413
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_414 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_414
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_415 = (function() {if ($truthy(($ret_or_416 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_416
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_415
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_417 = self.escape))) {
                return $ret_or_417
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((167)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_418 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_418
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_419 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_419
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_420 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_420
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_421 = (function() {if ($truthy(($ret_or_422 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_422
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_421
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_423 = self.escape))) {
                return $ret_or_423
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((381)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_424 = self.escape))) {
              return $ret_or_424
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((116)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_425 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_425
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_426 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_426
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_427 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_427
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_428 = (function() {if ($truthy(($ret_or_429 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_429
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_428
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_430 = self.escape))) {
                return $ret_or_430
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((148)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_431 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_431
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_432 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_432
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_433 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_433
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_434 = (function() {if ($truthy(($ret_or_435 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_435
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_434
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_436 = self.escape))) {
                return $ret_or_436
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((362)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_437 = self.escape))) {
              return $ret_or_437
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((62)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((221)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((236)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((248)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((270)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 810;
            _goto_level = _again;
            continue;;;;;}
            else if ((285)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((297)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((323)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((399)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((409)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((430)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((102)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((482)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$28 = function(chars){var self = $$28.$$s == null ? this : $$28.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$28.$$s = self, $$28.$$arity = 1, $$28));;}
            else if ((446)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$29 = function(chars){var self = $$29.$$s == null ? this : $$29.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$29.$$s = self, $$29.$$arity = 1, $$29));;}
            else if ((461)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$30 = function(chars){var self = $$30.$$s == null ? this : $$30.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$30.$$s = self, $$30.$$arity = 1, $$30));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_438 = (function() {if ($truthy(($ret_or_439 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_439
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_438
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_440 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_440
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((454)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$31 = function(chars){var self = $$31.$$s == null ? this : $$31.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$31.$$s = self, $$31.$$arity = 1, $$31));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((450)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$32 = function(chars){var self = $$32.$$s == null ? this : $$32.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$32.$$s = self, $$32.$$arity = 1, $$32));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((276)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;
            
            self.act = 79;;}
            else if ((36)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 78;;}
            else if ((47)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 86;;}
            else if ((94)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 181;;}
            else if ((66)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 99;;}
            else if ((85)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 147;;}
            else if ((93)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 181;;}
            else if ((38)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 73;;}
            else if ((391)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 127;;}
            else if ((390)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 128;;}
            else if ((483)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.act = 154;;}
            else if ((127)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_441 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_442 = codepoint['$=='](117)))) {
                return $ret_or_442
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_441
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_443 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_443
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_444 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_444
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_445 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_445
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_446 = (function() {if ($truthy(($ret_or_447 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_447
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_446
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_448 = self.escape))) {
                return $ret_or_448
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((158)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_449 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_450 = codepoint['$=='](117)))) {
                return $ret_or_450
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_449
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_451 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_451
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_452 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_452
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_453 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_453
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_454 = (function() {if ($truthy(($ret_or_455 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_455
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_454
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_456 = self.escape))) {
                return $ret_or_456
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((372)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((function() {if ($truthy(($ret_or_457 = $rb_ge(self.version, 30)))) {
              
              if ($truthy(($ret_or_458 = codepoint['$=='](117)))) {
                return $ret_or_458
              } else {
                return codepoint['$=='](85)
              };
            } else {
              return $ret_or_457
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_459 = self.escape))) {
              return $ret_or_459
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((125)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_460 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_461 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_461
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_460
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_462 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_462
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_463 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_463
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_464 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_464
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_465 = (function() {if ($truthy(($ret_or_466 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_466
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_465
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_467 = self.escape))) {
                return $ret_or_467
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((156)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_468 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_469 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_469
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_468
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_470 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_470
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_471 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_471
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_472 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_472
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_473 = (function() {if ($truthy(($ret_or_474 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_474
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_473
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_475 = self.escape))) {
                return $ret_or_475
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((370)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_476 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_477 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_477
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_476
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_478 = self.escape))) {
              return $ret_or_478
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((132)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_479 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_479
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_480 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_480
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_481 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_481
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_482 = (function() {if ($truthy(($ret_or_483 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_483
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_482
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_484 = self.escape))) {
                return $ret_or_484
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((163)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_485 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_485
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_486 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_486
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_487 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_487
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_488 = (function() {if ($truthy(($ret_or_489 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_489
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_488
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_490 = self.escape))) {
                return $ret_or_490
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((377)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_491 = self.escape))) {
              return $ret_or_491
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((128)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_492 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_492
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_493 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_493
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_494 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_494
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_495 = (function() {if ($truthy(($ret_or_496 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_496
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_495
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_497 = self.escape))) {
                return $ret_or_497
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((159)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_498 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_498
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_499 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_499
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_500 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_500
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_501 = (function() {if ($truthy(($ret_or_502 = current_literal['$regexp?']()))) {
              return $rb_ge(self.version, 31)
            } else {
              return $ret_or_502
            }; return nil; })()))) {
              return ["c", "C", "m", "M"]['$include?'](escaped_char)
            } else {
              return $ret_or_501
            }; return nil; })())) {
              current_literal.$extend_string(self.escape, self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_503 = self.escape))) {
                return $ret_or_503
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((373)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_minus(p, 2), p).$to_i(16));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_504 = self.escape))) {
              return $ret_or_504
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 810;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((478)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$33 = function(chars){var self = $$33.$$s == null ? this : $$33.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$33.$$s = self, $$33.$$arity = 1, $$33));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_505 = (function() {if ($truthy(($ret_or_506 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_506
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_505
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_507 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_507
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((472)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$34 = function(chars){var self = $$34.$$s == null ? this : $$34.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$34.$$s = self, $$34.$$arity = 1, $$34));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_508 = (function() {if ($truthy(($ret_or_509 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_509
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_508
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_510 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_510
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((475)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$35 = function(chars){var self = $$35.$$s == null ? this : $$35.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$35.$$s = self, $$35.$$arity = 1, $$35));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_511 = (function() {if ($truthy(($ret_or_512 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_512
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_511
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_513 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_513
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((469)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$36 = function(chars){var self = $$36.$$s == null ? this : $$36.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$36.$$s = self, $$36.$$arity = 1, $$36));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_514 = (function() {if ($truthy(($ret_or_515 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_515
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_514
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_516 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_516
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((481)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$37 = function(chars){var self = $$37.$$s == null ? this : $$37.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$37.$$s = self, $$37.$$arity = 1, $$37));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_517 = (function() {if ($truthy(($ret_or_518 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_518
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_517
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_519 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_519
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((445)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$38 = function(chars){var self = $$38.$$s == null ? this : $$38.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$38.$$s = self, $$38.$$arity = 1, $$38));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_520 = (function() {if ($truthy(($ret_or_521 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_521
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_520
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_522 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_522
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((32)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;
            
            self.act = 73;;}
            else if ((63)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 99;;}
            else if ((92)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 181;;}
            else if ((488)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$39 = function(chars){var self = $$39.$$s == null ? this : $$39.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$39.$$s = self, $$39.$$arity = 1, $$39));;
            
            self.act = 156;;}
            else if ((484)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$40 = function(chars){var self = $$40.$$s == null ? this : $$40.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$40.$$s = self, $$40.$$arity = 1, $$40));;
            
            self.act = 156;;}
            else if ((448)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$41 = function(chars){var self = $$41.$$s == null ? this : $$41.$$s;

              
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$41.$$s = self, $$41.$$arity = 1, $$41));;
            
            self.act = 156;;}};};
        if ($truthy($rb_le(_goto_level, _again))) {
          
          $case = _lex_to_state_actions['$[]'](self.cs);
          if ((96)['$===']($case)) {
          self.ts = nil;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};
          p = $rb_plus(p, 1);
          if ($truthy(p['$!='](pe))) {
            
            _goto_level = _resume;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _test_eof))) {
          if (p['$=='](eof)) {
            if ($truthy($rb_gt(_lex_eof_trans['$[]'](self.cs), 0))) {
              
              _trans = $rb_minus(_lex_eof_trans['$[]'](self.cs), 1);
              _goto_level = _eof_trans;
              continue;;}}};
        if ($truthy($rb_le(_goto_level, _out))) {
          break;};
      };;
      if ($truthy(false)) {
        testEof};
      self.p = p;
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      } else if (self.cs['$=='](klass.$lex_error())) {
        return [false, ["$error".$freeze(), self.$range($rb_minus(p, 1), p)]]
      } else {
        
        eof = self.source_pts.$size();
        return [false, ["$eof".$freeze(), self.$range(eof, eof)]];
      };
    }, $Lexer_advance$12.$$arity = 0);
    self.$protected();
    
    Opal.def(self, '$eof_codepoint?', $Lexer_eof_codepoint$ques$42 = function(point) {
      var self = this;

      return [4, 26, 0]['$include?'](point)
    }, $Lexer_eof_codepoint$ques$42.$$arity = 1);
    
    Opal.def(self, '$version?', $Lexer_version$ques$43 = function($a) {
      var $post_args, versions, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      versions = $post_args;;
      return versions['$include?'](self.version);
    }, $Lexer_version$ques$43.$$arity = -1);
    
    Opal.def(self, '$stack_pop', $Lexer_stack_pop$44 = function $$stack_pop() {
      var self = this;

      
      self.top = $rb_minus(self.top, 1);
      return self.stack['$[]'](self.top);
    }, $Lexer_stack_pop$44.$$arity = 0);
    
    Opal.def(self, '$encode_escape', $Lexer_encode_escape$45 = function $$encode_escape(ord) {
      var self = this;

      return ord.$chr().$force_encoding(self.source_buffer.$source().$encoding())
    }, $Lexer_encode_escape$45.$$arity = 1);
    
    Opal.def(self, '$tok', $Lexer_tok$46 = function $$tok(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return self.source_buffer.$slice(Opal.Range.$new(s,e, true));
    }, $Lexer_tok$46.$$arity = -1);
    
    Opal.def(self, '$range', $Lexer_range$47 = function $$range(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return $$$($$$($$($nesting, 'Parser'), 'Source'), 'Range').$new(self.source_buffer, s, e);
    }, $Lexer_range$47.$$arity = -1);
    
    Opal.def(self, '$emit', $Lexer_emit$48 = function $$emit(type, value, s, e) {
      var self = this, token = nil;

      
      
      if (value == null) {
        value = self.$tok();
      };
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ($truthy(self.tokens)) {
        self.tokens.$push(token)};
      return token;
    }, $Lexer_emit$48.$$arity = -2);
    
    Opal.def(self, '$emit_table', $Lexer_emit_table$49 = function $$emit_table(table, s, e) {
      var self = this, value = nil;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    }, $Lexer_emit_table$49.$$arity = -2);
    
    Opal.def(self, '$emit_do', $Lexer_emit_do$50 = function $$emit_do(do_block) {
      var self = this, $ret_or_523 = nil;

      
      
      if (do_block == null) {
        do_block = false;
      };
      if ($truthy(self.cond['$active?']())) {
        return self.$emit("kDO_COND", "do".$freeze())
      } else if ($truthy((function() {if ($truthy(($ret_or_523 = self.cmdarg['$active?']()))) {
        return $ret_or_523
      } else {
        return do_block
      }; return nil; })())) {
        return self.$emit("kDO_BLOCK", "do".$freeze())
      } else {
        return self.$emit("kDO", "do".$freeze())
      };
    }, $Lexer_emit_do$50.$$arity = -1);
    
    Opal.def(self, '$arg_or_cmdarg', $Lexer_arg_or_cmdarg$51 = function $$arg_or_cmdarg(cmd_state) {
      var self = this;

      if ($truthy(cmd_state)) {
        return self.$class().$lex_en_expr_cmdarg()
      } else {
        return self.$class().$lex_en_expr_arg()
      }
    }, $Lexer_arg_or_cmdarg$51.$$arity = 1);
    
    Opal.def(self, '$emit_comment', $Lexer_emit_comment$52 = function $$emit_comment(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      if ($truthy(self.comments)) {
        self.comments.$push($$$($$$($$($nesting, 'Parser'), 'Source'), 'Comment').$new(self.$range(s, e)))};
      if ($truthy(self.tokens)) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])};
      return nil;
    }, $Lexer_emit_comment$52.$$arity = -1);
    
    Opal.def(self, '$diagnostic', $Lexer_diagnostic$53 = function $$diagnostic(type, reason, arguments$, location, highlights) {
      var self = this;

      
      
      if (arguments$ == null) {
        arguments$ = nil;
      };
      
      if (location == null) {
        location = self.$range();
      };
      
      if (highlights == null) {
        highlights = [];
      };
      return self.diagnostics.$process($$$($$($nesting, 'Parser'), 'Diagnostic').$new(type, reason, arguments$, location, highlights));
    }, $Lexer_diagnostic$53.$$arity = -3);
    
    Opal.def(self, '$push_literal', $Lexer_push_literal$54 = function $$push_literal($a) {
      var $post_args, args, self = this, new_literal = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      new_literal = $send($$($nesting, 'Literal'), 'new', [self].concat(Opal.to_a(args)));
      self.literal_stack.$push(new_literal);
      return self.$next_state_for_literal(new_literal);
    }, $Lexer_push_literal$54.$$arity = -1);
    
    Opal.def(self, '$next_state_for_literal', $Lexer_next_state_for_literal$55 = function $$next_state_for_literal(literal) {
      var self = this, $ret_or_524 = nil, $ret_or_525 = nil, $ret_or_526 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_524 = literal['$words?']()))) {
        return literal['$backslash_delimited?']()
      } else {
        return $ret_or_524
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited_words()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited_words()
        }
      } else if ($truthy((function() {if ($truthy(($ret_or_525 = literal['$words?']()))) {
        return literal['$backslash_delimited?']()['$!']()
      } else {
        return $ret_or_525
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_words()
        } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if ($truthy((function() {if ($truthy(($ret_or_526 = literal['$words?']()['$!']()))) {
        return literal['$backslash_delimited?']()
      } else {
        return $ret_or_526
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited()
        }
      } else if ($truthy(literal['$interpolate?']())) {
        return self.$class().$lex_en_interp_string()
      } else {
        return self.$class().$lex_en_plain_string()
      }
    }, $Lexer_next_state_for_literal$55.$$arity = 1);
    
    Opal.def(self, '$literal', $Lexer_literal$56 = function $$literal() {
      var self = this;

      return self.literal_stack.$last()
    }, $Lexer_literal$56.$$arity = 0);
    
    Opal.def(self, '$pop_literal', $Lexer_pop_literal$57 = function $$pop_literal() {
      var self = this, old_literal = nil;

      
      old_literal = self.literal_stack.$pop();
      self.dedent_level = old_literal.$dedent_level();
      if (old_literal.$type()['$==']("tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
      } else {
        return self.$class().$lex_en_expr_end()
      };
    }, $Lexer_pop_literal$57.$$arity = 0);
    Opal.const_set($nesting[0], 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@", "&."], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG", "&.": "tANDDOT"}));
    Opal.const_set($nesting[0], 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));
    Opal.const_set($nesting[0], 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    Opal.const_set($nesting[0], 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    return $send(["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"], 'each', [], ($Lexer$58 = function(keyword){var self = $Lexer$58.$$s == null ? this : $Lexer$58.$$s;

      
      
      if (keyword == null) {
        keyword = nil;
      };
      $writer = [keyword, (($writer = [keyword, "" + "k" + (keyword.$upcase())]), $send($$($nesting, 'KEYWORDS'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
      $send($$($nesting, 'KEYWORDS_BEGIN'), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, $Lexer$58.$$s = self, $Lexer$58.$$arity = 1, $Lexer$58));
  })($$($nesting, 'Parser'), null, $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/lexer/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $enc = Opal.enc, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$coerce_encoding', '$include?', '$send', '$+', '$[]', '$fetch', '$==', '$!', '$heredoc?', '$start_with?', '$freeze', '$clear_buffer', '$emit_start_tok', '$type', '$words?', '$=~', '$delimiter?', '$-', '$extend_space', '$!=', '$flush_string', '$emit', '$each_char', '$===', '$%', '$nil?', '$>', '$<<', '$empty?', '$extend_content', '$protected', '$lstrip', '$b', '$dup', '$force_encoding', '$encoding', '$source', '$source_buffer', '$length']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_initialize$1, $Literal_interpolate$ques$2, $Literal_words$ques$3, $Literal_regexp$ques$4, $Literal_heredoc$ques$5, $Literal_plain_heredoc$ques$6, $Literal_squiggly_heredoc$ques$7, $Literal_backslash_delimited$ques$8, $Literal_type$9, $Literal_munge_escape$ques$10, $Literal_nest_and_try_closing$11, $Literal_infer_indent_level$12, $Literal_start_interp_brace$14, $Literal_end_interp_brace_and_try_closing$15, $Literal_extend_string$16, $Literal_flush_string$17, $Literal_extend_content$18, $Literal_extend_space$19, $Literal_supports_line_continuation_via_slash$ques$20, $Literal_delimiter$ques$21, $Literal_coerce_encoding$22, $Literal_clear_buffer$23, $Literal_emit_start_tok$24, $Literal_emit$25;

      self.$$prototype.lexer = self.$$prototype.start_tok = self.$$prototype.str_type = self.$$prototype.monolithic = self.$$prototype.interpolate = self.$$prototype.heredoc_e = self.$$prototype.dedent_body = self.$$prototype.end_delim = self.$$prototype.start_delim = self.$$prototype.nesting = self.$$prototype.label_allowed = self.$$prototype.buffer = self.$$prototype.str_s = self.$$prototype.interp_braces = self.$$prototype.buffer_s = self.$$prototype.buffer_e = self.$$prototype.space_emitted = self.$$prototype.indent = nil;
      
      Opal.const_set($nesting[0], 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": $enc(")", "ASCII-8BIT"), "[": $enc("]", "ASCII-8BIT"), "{": $enc("}", "ASCII-8BIT"), "<": $enc(">", "ASCII-8BIT")}));
      Opal.const_set($nesting[0], 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));
      self.$attr_reader("heredoc_e", "str_s", "dedent_level");
      self.$attr_accessor("saved_herebody_s");
      
      Opal.def(self, '$initialize', $Literal_initialize$1 = function $$initialize(lexer, str_type, delimiter, str_s, heredoc_e, indent, dedent_body, label_allowed) {
        var $a, $b, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        
        
        if (heredoc_e == null) {
          heredoc_e = nil;
        };
        
        if (indent == null) {
          indent = false;
        };
        
        if (dedent_body == null) {
          dedent_body = false;
        };
        
        if (label_allowed == null) {
          label_allowed = false;
        };
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy($$($nesting, 'TYPES')['$include?'](str_type))) {
        } else {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, $rb_plus(str_s, 2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $b = $$($nesting, 'TYPES')['$[]'](str_type), $a = Opal.to_ary($b), (self.start_tok = ($a[0] == null ? nil : $a[0])), (self.interpolate = ($a[1] == null ? nil : $a[1])), $b;
        self.start_delim = (function() {if ($truthy($$($nesting, 'DELIMITERS')['$include?'](delimiter))) {
          return delimiter
        } else {
          return nil
        }; return nil; })();
        self.end_delim = $$($nesting, 'DELIMITERS').$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.label_allowed = label_allowed;
        self.dedent_body = dedent_body;
        self.dedent_level = nil;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = (function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.start_tok['$==']("tSTRING_BEG")))) {
          return [$enc("'", "ASCII-8BIT"), $enc("\"", "ASCII-8BIT")]['$include?'](str_type)
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return self['$heredoc?']()['$!']()
        } else {
          return $ret_or_1
        }; return nil; })();
        if ($truthy(self.str_type['$start_with?']($enc("%", "ASCII-8BIT").$freeze()))) {
          self.str_type = $rb_plus(self.str_type, delimiter)};
        self.$clear_buffer();
        if ($truthy(self.monolithic)) {
          return nil
        } else {
          return self.$emit_start_tok()
        };
      }, $Literal_initialize$1.$$arity = -5);
      
      Opal.def(self, '$interpolate?', $Literal_interpolate$ques$2 = function() {
        var self = this;

        return self.interpolate
      }, $Literal_interpolate$ques$2.$$arity = 0);
      
      Opal.def(self, '$words?', $Literal_words$ques$3 = function() {
        var self = this, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

        if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.$type()['$==']("tWORDS_BEG")))) {
          return $ret_or_5
        } else {
          return self.$type()['$==']("tQWORDS_BEG")
        }; return nil; })()))) {
          return $ret_or_4
        } else {
          return self.$type()['$==']("tSYMBOLS_BEG")
        }; return nil; })()))) {
          return $ret_or_3
        } else {
          return self.$type()['$==']("tQSYMBOLS_BEG")
        }
      }, $Literal_words$ques$3.$$arity = 0);
      
      Opal.def(self, '$regexp?', $Literal_regexp$ques$4 = function() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG")
      }, $Literal_regexp$ques$4.$$arity = 0);
      
      Opal.def(self, '$heredoc?', $Literal_heredoc$ques$5 = function() {
        var self = this;

        return self.heredoc_e['$!']()['$!']()
      }, $Literal_heredoc$ques$5.$$arity = 0);
      
      Opal.def(self, '$plain_heredoc?', $Literal_plain_heredoc$ques$6 = function() {
        var self = this, $ret_or_6 = nil;

        if ($truthy(($ret_or_6 = self['$heredoc?']()))) {
          return self.dedent_body['$!']()
        } else {
          return $ret_or_6
        }
      }, $Literal_plain_heredoc$ques$6.$$arity = 0);
      
      Opal.def(self, '$squiggly_heredoc?', $Literal_squiggly_heredoc$ques$7 = function() {
        var self = this, $ret_or_7 = nil;

        if ($truthy(($ret_or_7 = self['$heredoc?']()))) {
          return self.dedent_body
        } else {
          return $ret_or_7
        }
      }, $Literal_squiggly_heredoc$ques$7.$$arity = 0);
      
      Opal.def(self, '$backslash_delimited?', $Literal_backslash_delimited$ques$8 = function() {
        var self = this;

        return self.end_delim['$==']($enc("\\", "ASCII-8BIT").$freeze())
      }, $Literal_backslash_delimited$ques$8.$$arity = 0);
      
      Opal.def(self, '$type', $Literal_type$9 = function $$type() {
        var self = this;

        return self.start_tok
      }, $Literal_type$9.$$arity = 0);
      
      Opal.def(self, '$munge_escape?', $Literal_munge_escape$ques$10 = function(character) {
        var self = this, $ret_or_8 = nil;

        
        character = self.$coerce_encoding(character);
        if ($truthy((function() {if ($truthy(($ret_or_8 = self['$words?']()))) {
          return character['$=~'](/[ \t\v\r\f\n]/)
        } else {
          return $ret_or_8
        }; return nil; })())) {
          return true
        } else {
          return [$enc("\\", "ASCII-8BIT").$freeze(), self.start_delim, self.end_delim]['$include?'](character)
        };
      }, $Literal_munge_escape$ques$10.$$arity = 1);
      
      Opal.def(self, '$nest_and_try_closing', $Literal_nest_and_try_closing$11 = function $$nest_and_try_closing(delimiter, ts, te, lookahead) {
        var self = this, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil;

        
        
        if (lookahead == null) {
          lookahead = nil;
        };
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy((function() {if ($truthy(($ret_or_9 = self.start_delim))) {
          return self.start_delim['$=='](delimiter)
        } else {
          return $ret_or_9
        }; return nil; })())) {
          self.nesting = $rb_plus(self.nesting, 1)
        } else if ($truthy(self['$delimiter?'](delimiter))) {
          self.nesting = $rb_minus(self.nesting, 1)};
        if (self.nesting['$=='](0)) {
          
          if ($truthy(self['$words?']())) {
            self.$extend_space(ts, ts)};
          if ($truthy((function() {if ($truthy(($ret_or_10 = (function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = lookahead))) {
            return self.label_allowed
          } else {
            return $ret_or_13
          }; return nil; })()))) {
            return lookahead['$[]'](0)['$==']($enc(":", "ASCII-8BIT"))
          } else {
            return $ret_or_12
          }; return nil; })()))) {
            return lookahead['$[]'](1)['$!=']($enc(":", "ASCII-8BIT"))
          } else {
            return $ret_or_11
          }; return nil; })()))) {
            return self.start_tok['$==']("tSTRING_BEG")
          } else {
            return $ret_or_10
          }; return nil; })())) {
            
            self.$flush_string();
            return self.$emit("tLABEL_END", self.end_delim, ts, $rb_plus(te, 1));
          } else if ($truthy(self.monolithic)) {
            return self.$emit("tSTRING", self.buffer, self.str_s, te)
          } else {
            
            if ($truthy(self['$heredoc?']())) {
            } else {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
        } else {
          return nil
        };
      }, $Literal_nest_and_try_closing$11.$$arity = -4);
      
      Opal.def(self, '$infer_indent_level', $Literal_infer_indent_level$12 = function $$infer_indent_level(line) {
        var $$13, self = this, indent_level = nil;

        
        if ($truthy(self.dedent_body['$!']())) {
          return nil};
        indent_level = 0;
        return (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$13 = function(char$){var self = $$13.$$s == null ? this : $$13.$$s, $case = nil, $ret_or_14 = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

          
          
          if (char$ == null) {
            char$ = nil;
          };
          return (function() {$case = char$;
          if (" "['$===']($case)) {return (indent_level = $rb_plus(indent_level, 1))}
          else if ("\t"['$===']($case)) {return (indent_level = $rb_plus(indent_level, $rb_minus(8, indent_level['$%'](8))))}
          else {
          if ($truthy((function() {if ($truthy(($ret_or_14 = self.dedent_level['$nil?']()))) {
            return $ret_or_14
          } else {
            return $rb_gt(self.dedent_level, indent_level)
          }; return nil; })())) {
            self.dedent_level = indent_level};
          
          Opal.brk(nil, $brk);}})();}, $$13.$$s = self, $$13.$$brk = $brk, $$13.$$arity = 1, $$13))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Literal_infer_indent_level$12.$$arity = 1);
      
      Opal.def(self, '$start_interp_brace', $Literal_start_interp_brace$14 = function $$start_interp_brace() {
        var self = this;

        return (self.interp_braces = $rb_plus(self.interp_braces, 1))
      }, $Literal_start_interp_brace$14.$$arity = 0);
      
      Opal.def(self, '$end_interp_brace_and_try_closing', $Literal_end_interp_brace_and_try_closing$15 = function $$end_interp_brace_and_try_closing() {
        var self = this;

        
        self.interp_braces = $rb_minus(self.interp_braces, 1);
        
        return self.interp_braces['$=='](0);;
      }, $Literal_end_interp_brace_and_try_closing$15.$$arity = 0);
      
      Opal.def(self, '$extend_string', $Literal_extend_string$16 = function $$extend_string(string, ts, te) {
        var self = this, $ret_or_15 = nil;

        
        self.buffer_s = (function() {if ($truthy(($ret_or_15 = self.buffer_s))) {
          return $ret_or_15
        } else {
          return ts
        }; return nil; })();
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      }, $Literal_extend_string$16.$$arity = 3);
      
      Opal.def(self, '$flush_string', $Literal_flush_string$17 = function $$flush_string() {
        var self = this;

        
        if ($truthy(self.monolithic)) {
          
          self.$emit_start_tok();
          self.monolithic = false;};
        if ($truthy(self.buffer['$empty?']())) {
          return nil
        } else {
          
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      }, $Literal_flush_string$17.$$arity = 0);
      
      Opal.def(self, '$extend_content', $Literal_extend_content$18 = function $$extend_content() {
        var self = this;

        return (self.space_emitted = false)
      }, $Literal_extend_content$18.$$arity = 0);
      
      Opal.def(self, '$extend_space', $Literal_extend_space$19 = function $$extend_space(ts, te) {
        var self = this;

        
        self.$flush_string();
        if ($truthy(self.space_emitted)) {
          return nil
        } else {
          
          self.$emit("tSPACE", nil, ts, te);
          return (self.space_emitted = true);
        };
      }, $Literal_extend_space$19.$$arity = 2);
      
      Opal.def(self, '$supports_line_continuation_via_slash?', $Literal_supports_line_continuation_via_slash$ques$20 = function() {
        var self = this, $ret_or_16 = nil;

        if ($truthy(($ret_or_16 = self['$words?']()['$!']()))) {
          return self.interpolate
        } else {
          return $ret_or_16
        }
      }, $Literal_supports_line_continuation_via_slash$ques$20.$$arity = 0);
      self.$protected();
      
      Opal.def(self, '$delimiter?', $Literal_delimiter$ques$21 = function(delimiter) {
        var self = this;

        if ($truthy(self.indent)) {
          return self.end_delim['$=='](delimiter.$lstrip())
        } else {
          return self.end_delim['$=='](delimiter)
        }
      }, $Literal_delimiter$ques$21.$$arity = 1);
      
      Opal.def(self, '$coerce_encoding', $Literal_coerce_encoding$22 = function $$coerce_encoding(string) {
        var self = this;

        return string.$b()
      }, $Literal_coerce_encoding$22.$$arity = 1);
      
      Opal.def(self, '$clear_buffer', $Literal_clear_buffer$23 = function $$clear_buffer() {
        var self = this;

        
        self.buffer = $enc("", "ASCII-8BIT").$dup();
        self.buffer.$force_encoding(self.lexer.$source_buffer().$source().$encoding());
        self.buffer_s = nil;
        return (self.buffer_e = nil);
      }, $Literal_clear_buffer$23.$$arity = 0);
      
      Opal.def(self, '$emit_start_tok', $Literal_emit_start_tok$24 = function $$emit_start_tok() {
        var self = this, str_e = nil, $ret_or_17 = nil;

        
        str_e = (function() {if ($truthy(($ret_or_17 = self.heredoc_e))) {
          return $ret_or_17
        } else {
          return $rb_plus(self.str_s, self.str_type.$length())
        }; return nil; })();
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      }, $Literal_emit_start_tok$24.$$arity = 0);
      return (Opal.def(self, '$emit', $Literal_emit$25 = function $$emit(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e)
      }, $Literal_emit$25.$$arity = 4), nil) && 'emit';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/lexer/stack_state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$freeze', '$clear', '$|', '$<<', '$&', '$>>', '$==', '$[]', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StackState');

      var $nesting = [self].concat($parent_nesting), $StackState_initialize$1, $StackState_clear$2, $StackState_push$3, $StackState_pop$4, $StackState_lexpop$5, $StackState_active$ques$6, $StackState_empty$ques$7, $StackState_to_s$8;

      self.$$prototype.stack = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $StackState_initialize$1 = function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      }, $StackState_initialize$1.$$arity = 1);
      
      Opal.def(self, '$clear', $StackState_clear$2 = function $$clear() {
        var self = this;

        return (self.stack = 0)
      }, $StackState_clear$2.$$arity = 0);
      
      Opal.def(self, '$push', $StackState_push$3 = function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = (function() {if ($truthy(bit)) {
          return 1
        } else {
          return 0
        }; return nil; })();
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      }, $StackState_push$3.$$arity = 1);
      
      Opal.def(self, '$pop', $StackState_pop$4 = function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      }, $StackState_pop$4.$$arity = 0);
      
      Opal.def(self, '$lexpop', $StackState_lexpop$5 = function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      }, $StackState_lexpop$5.$$arity = 0);
      
      Opal.def(self, '$active?', $StackState_active$ques$6 = function() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      }, $StackState_active$ques$6.$$arity = 0);
      
      Opal.def(self, '$empty?', $StackState_empty$ques$7 = function() {
        var self = this;

        return self.stack['$=='](0)
      }, $StackState_empty$ques$7.$$arity = 0);
      
      Opal.def(self, '$to_s', $StackState_to_s$8 = function $$to_s() {
        var self = this;

        return "" + "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      }, $StackState_to_s$8.$$arity = 0);
      return $alias(self, "inspect", "to_s");
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/lexer/dedenter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$encoding', '$split', '$force_encoding', '$==', '$length', '$map!', '$each', '$each_char', '$<=', '$===', '$+', '$-', '$>', '$*', '$/', '$slice!', '$replace', '$join', '$end_with?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Dedenter');

      var $nesting = [self].concat($parent_nesting), $Dedenter_initialize$1, $Dedenter_dedent$2, $Dedenter_interrupt$6;

      self.$$prototype.at_line_begin = nil;
      
      Opal.const_set($nesting[0], 'TAB_WIDTH', 8);
      
      Opal.def(self, '$initialize', $Dedenter_initialize$1 = function $$initialize(dedent_level) {
        var self = this;

        
        self.dedent_level = dedent_level;
        self.at_line_begin = true;
        return (self.indent_level = 0);
      }, $Dedenter_initialize$1.$$arity = 1);
      
      Opal.def(self, '$dedent', $Dedenter_dedent$2 = function $$dedent(string) {
        var $$3, $a, $b, $$4, self = this, original_encoding = nil, lines = nil, lines_to_dedent = nil, _first = nil;

        
        original_encoding = string.$encoding();
        lines = string.$force_encoding($$$($$($nesting, 'Encoding'), 'BINARY')).$split("\\\n");
        if (lines.$length()['$=='](1)) {
          lines = [string.$force_encoding(original_encoding)]
        } else {
          $send(lines, 'map!', [], ($$3 = function(s){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (s == null) {
              s = nil;
            };
            return s.$force_encoding(original_encoding);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        };
        if ($truthy(self.at_line_begin)) {
          lines_to_dedent = lines
        } else {
          $b = lines, $a = Opal.to_ary($b), (_first = ($a[0] == null ? nil : $a[0])), (lines_to_dedent = $slice.call($a, 1)), $b
        };
        (function(){var $brk = Opal.new_brk(); try {return $send(lines_to_dedent, 'each', [], ($$4 = function(line){var self = $$4.$$s == null ? this : $$4.$$s, $$5, left_to_remove = nil, remove = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

          
          
          if (line == null) {
            line = nil;
          };
          left_to_remove = self.dedent_level;
          remove = 0;
          (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$5 = function(char$){var self = $$5.$$s == null ? this : $$5.$$s, $case = nil;
            if (self.dedent_level == null) self.dedent_level = nil;

            
            
            if (char$ == null) {
              char$ = nil;
            };
            if ($truthy($rb_le(left_to_remove, 0))) {
              
              Opal.brk(nil, $brk)};
            return (function() {$case = char$;
            if (" "['$===']($case)) {
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, 1));}
            else if ("\t"['$===']($case)) {
            if ($truthy($rb_gt($rb_times($$($nesting, 'TAB_WIDTH'), $rb_plus($rb_divide(remove, $$($nesting, 'TAB_WIDTH')), 1)), self.dedent_level))) {
              
              Opal.brk(nil, $brk)};
            remove = $rb_plus(remove, 1);
            return (left_to_remove = $rb_minus(left_to_remove, $$($nesting, 'TAB_WIDTH')));}
            else {
            Opal.brk(nil, $brk)}})();}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 1, $$5))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return line['$slice!'](0, remove);}, $$4.$$s = self, $$4.$$brk = $brk, $$4.$$arity = 1, $$4))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        string.$replace(lines.$join());
        return (self.at_line_begin = string['$end_with?']("\n"));
      }, $Dedenter_dedent$2.$$arity = 1);
      return (Opal.def(self, '$interrupt', $Dedenter_interrupt$6 = function $$interrupt() {
        var self = this;

        return (self.at_line_begin = false)
      }, $Dedenter_interrupt$6.$$arity = 0), nil) && 'interrupt';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/builders/default"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $slice = Opal.slice;

  Opal.add_stubs(['$attr_accessor', '$n0', '$token_map', '$numeric', '$n', '$value', '$new', '$loc', '$private', '$===', '$+@', '$-@', '$updated', '$join', '$expression', '$string_value', '$delimited_string_map', '$unquoted_map', '$collapse_string_parts?', '$nil?', '$first', '$children', '$string_map', '$prefix_string_map', '$to_sym', '$collection_map', '$==', '$version', '$empty?', '$diagnostic', '$!', '$type', '$dedent', '$map', '$interrupt', '$compact', '$uniq', '$sort', '$each_char', '$to_proc', '$static_regexp', '$message', '$<<', '$regexp_map', '$unary_op_map', '$binary_op_map', '$!=', '$%', '$size', '$last', '$each_slice', '$pair_keyword_map', '$pair_quoted_map', '$symbol_compose', '$adjust', '$=~', '$pair_keyword', '$accessible', '$upto', '$-', '$length', '$+', '$[]', '$>=', '$range_map', '$variable_map', '$name', '$source_buffer', '$dup', '$line', '$emit_encoding', '$class', '$any?', '$end_with?', '$to_s', '$try_declare_numparam', '$declared?', '$static_env', '$var_send_map', '$top', '$current_arg_stack', '$parser', '$constant_map', '$in_def', '$context', '$check_assignment_to_numparam', '$check_reserved_for_numparam', '$declare', '$with_expression', '$with_operator', '$join_exprs', '$module_definition_map', '$definition_map', '$endless_definition_map', '$validate_definee', '$keyword_map', '$check_duplicate_args', '$validate_no_forward_arg_after_restarg', '$emit_forward_arg', '$forward_arg', '$arg_prefix_map', '$kwarg_map', '$emit_procarg0', '$emit_arg_inside_procarg0', '$location', '$resize', '$end', '$call_type_for_dot', '$emit_kwargs', '$rewrite_hash_args_to_kwargs', '$send_map', '$emit_lambda', '$expr_map', '$keyword', '$include?', '$block_map', '$array', '$emit_index', '$index_map', '$send_index_map', '$send_binary_op_map', '$static_regexp_node', '$each', '$names', '$send_unary_op_map', '$check_condition', '$condition_map', '$keyword_mod_map', '$ternary_map', '$for_map', '$>', '$count', '$rescue_body_map', '$eh_keyword_map', '$push', '$none?', '$one?', '$begin', '$guard_map', '$check_lvar_name', '$check_duplicate_pattern_variable', '$match_hash_var_from_str', '$match_var', '$check_duplicate_pattern_key', '$static_string', '$pair_quoted', '$match_hash_var', '$<=', '$check_duplicate_arg', '$is_a?', '$[]=', '$arg_name_collides?', '$<', '$in_dynamic_block?', '$has_numparams?', '$max_numparam_stack', '$start_with?', '$pattern_variables', '$pattern_hash_keys', '$with', '$begin_pos', '$end_pos', '$encode', '$valid_encoding?', '$process', '$diagnostics', '$send', '$kwargs?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Default');

      var $nesting = [self].concat($parent_nesting), $Default_initialize$2, $Default_nil$3, $Default_true$4, $Default_false$5, $Default_integer$6, $Default_float$7, $Default_rational$8, $Default_complex$9, $Default_numeric$10, $Default_unary_num$11, $Default___LINE__$12, $Default_string$13, $Default_string_internal$14, $Default_string_compose$15, $Default_character$16, $Default___FILE__$17, $Default_symbol$18, $Default_symbol_internal$19, $Default_symbol_compose$20, $Default_xstring_compose$21, $Default_dedent_string$22, $Default_regexp_options$24, $Default_regexp_compose$25, $Default_array$26, $Default_splat$27, $Default_word$28, $Default_words_compose$29, $Default_symbols_compose$30, $Default_pair$32, $Default_pair_list_18$33, $Default_pair_keyword$35, $Default_pair_quoted$36, $Default_pair_label$37, $Default_kwsplat$38, $Default_associate$39, $Default_range_inclusive$42, $Default_range_exclusive$43, $Default_self$44, $Default_ident$45, $Default_ivar$46, $Default_gvar$47, $Default_cvar$48, $Default_back_ref$49, $Default_nth_ref$50, $Default_accessible$51, $Default_const$53, $Default_const_global$54, $Default_const_fetch$55, $Default___ENCODING__$56, $Default_assignable$57, $Default_const_op_assignable$58, $Default_assign$59, $Default_op_assign$60, $Default_multi_lhs$61, $Default_multi_assign$62, $Default_def_class$63, $Default_def_sclass$64, $Default_def_module$65, $Default_def_method$66, $Default_def_endless_method$67, $Default_def_singleton$68, $Default_def_endless_singleton$69, $Default_undef_method$70, $Default_alias$71, $Default_args$72, $Default_numargs$73, $Default_forward_only_args$74, $Default_forward_arg$75, $Default_arg$76, $Default_optarg$77, $Default_restarg$78, $Default_kwarg$79, $Default_kwoptarg$80, $Default_kwrestarg$81, $Default_kwnilarg$82, $Default_shadowarg$83, $Default_blockarg$84, $Default_procarg0$85, $Default_arg_expr$86, $Default_restarg_expr$87, $Default_blockarg_expr$88, $Default_objc_kwarg$89, $Default_objc_restarg$90, $Default_call_type_for_dot$91, $Default_forwarded_args$92, $Default_call_method$93, $Default_call_lambda$94, $Default_block$95, $Default_block_pass$96, $Default_objc_varargs$97, $Default_attr_asgn$98, $Default_index$99, $Default_index_asgn$100, $Default_binary_op$101, $Default_match_op$102, $Default_unary_op$104, $Default_not_op$105, $Default_logical_op$106, $Default_condition$107, $Default_condition_mod$108, $Default_ternary$109, $Default_when$110, $Default_case$111, $Default_loop$112, $Default_loop_mod$113, $Default_for$114, $Default_keyword_cmd$115, $Default_preexe$116, $Default_postexe$117, $Default_rescue_body$118, $Default_begin_body$119, $Default_compstmt$120, $Default_begin$121, $Default_begin_keyword$122, $Default_case_match$123, $Default_in_match$124, $Default_match_pattern$125, $Default_match_pattern_p$126, $Default_in_pattern$127, $Default_if_guard$128, $Default_unless_guard$129, $Default_match_var$130, $Default_match_hash_var$131, $Default_match_hash_var_from_str$132, $Default_match_rest$133, $Default_hash_pattern$134, $Default_array_pattern$135, $Default_find_pattern$137, $Default_match_with_trailing_comma$138, $Default_const_pattern$139, $Default_pin$140, $Default_match_alt$141, $Default_match_as$142, $Default_match_nil_pattern$143, $Default_match_pair$144, $Default_match_label$145, $Default_check_condition$146, $Default_check_duplicate_args$147, $Default_check_duplicate_arg$149, $Default_validate_no_forward_arg_after_restarg$150, $Default_check_assignment_to_numparam$152, $Default_check_reserved_for_numparam$153, $Default_arg_name_collides$ques$154, $Default_check_lvar_name$155, $Default_check_duplicate_pattern_variable$156, $Default_check_duplicate_pattern_key$157, $Default_n$158, $Default_n0$159, $Default_join_exprs$160, $Default_token_map$161, $Default_delimited_string_map$162, $Default_prefix_string_map$163, $Default_unquoted_map$164, $Default_pair_keyword_map$165, $Default_pair_quoted_map$166, $Default_expr_map$167, $Default_collection_map$168, $Default_string_map$169, $Default_regexp_map$170, $Default_constant_map$171, $Default_variable_map$172, $Default_binary_op_map$173, $Default_unary_op_map$174, $Default_range_map$175, $Default_arg_prefix_map$176, $Default_kwarg_map$177, $Default_module_definition_map$178, $Default_definition_map$179, $Default_endless_definition_map$180, $Default_send_map$181, $Default_var_send_map$182, $Default_send_binary_op_map$183, $Default_send_unary_op_map$184, $Default_index_map$185, $Default_send_index_map$186, $Default_block_map$187, $Default_keyword_map$188, $Default_keyword_mod_map$189, $Default_condition_map$190, $Default_ternary_map$191, $Default_for_map$192, $Default_rescue_body_map$193, $Default_eh_keyword_map$194, $Default_guard_map$195, $Default_static_string$196, $Default_static_regexp$198, $Default_static_regexp_node$199, $Default_collapse_string_parts$ques$200, $Default_value$201, $Default_string_value$202, $Default_loc$203, $Default_diagnostic$204, $Default_validate_definee$205, $Default_rewrite_hash_args_to_kwargs$206, $Default_kwargs$ques$207;

      self.$$prototype.parser = self.$$prototype.emit_file_line_as_literals = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_lambda")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_lambda = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_encoding")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_encoding = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_index")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_index = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_arg_inside_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_arg_inside_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_forward_arg")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_forward_arg = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_kwargs")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_kwargs = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_match_pattern")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_match_pattern = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $modernize$1;

        return (Opal.def(self, '$modernize', $modernize$1 = function $$modernize() {
          var self = this;

          
          self.emit_lambda = true;
          self.emit_procarg0 = true;
          self.emit_encoding = true;
          self.emit_index = true;
          self.emit_arg_inside_procarg0 = true;
          self.emit_forward_arg = true;
          self.emit_kwargs = true;
          return (self.emit_match_pattern = true);
        }, $modernize$1.$$arity = 0), nil) && 'modernize'
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("parser");
      self.$attr_accessor("emit_file_line_as_literals");
      
      Opal.def(self, '$initialize', $Default_initialize$2 = function $$initialize() {
        var self = this;

        return (self.emit_file_line_as_literals = true)
      }, $Default_initialize$2.$$arity = 0);
      
      Opal.def(self, '$nil', $Default_nil$3 = function $$nil(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t))
      }, $Default_nil$3.$$arity = 1);
      
      Opal.def(self, '$true', $Default_true$4 = function(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t))
      }, $Default_true$4.$$arity = 1);
      
      Opal.def(self, '$false', $Default_false$5 = function(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t))
      }, $Default_false$5.$$arity = 1);
      
      Opal.def(self, '$integer', $Default_integer$6 = function $$integer(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t)
      }, $Default_integer$6.$$arity = 1);
      
      Opal.def(self, '$float', $Default_float$7 = function(float_t) {
        var self = this;

        return self.$numeric("float", float_t)
      }, $Default_float$7.$$arity = 1);
      
      Opal.def(self, '$rational', $Default_rational$8 = function $$rational(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t)
      }, $Default_rational$8.$$arity = 1);
      
      Opal.def(self, '$complex', $Default_complex$9 = function $$complex(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t)
      }, $Default_complex$9.$$arity = 1);
      
      Opal.def(self, '$numeric', $Default_numeric$10 = function $$numeric(kind, token) {
        var self = this;

        return self.$n(kind, [self.$value(token)], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(nil, self.$loc(token)))
      }, $Default_numeric$10.$$arity = 2);
      self.$private("numeric");
      
      Opal.def(self, '$unary_num', $Default_unary_num$11 = function $$unary_num(unary_t, numeric) {
        var $a, self = this, value = nil, operator_loc = nil, $case = nil;

        
        $a = [].concat(Opal.to_a(numeric)), (value = ($a[0] == null ? nil : $a[0])), $a;
        operator_loc = self.$loc(unary_t);
        $case = self.$value(unary_t);
        if ("+"['$===']($case)) {value = value['$+@']()}
        else if ("-"['$===']($case)) {value = value['$-@']()};
        return numeric.$updated(nil, [value], $hash2(["location"], {"location": $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      }, $Default_unary_num$11.$$arity = 2);
      
      Opal.def(self, '$__LINE__', $Default___LINE__$12 = function $$__LINE__(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t))
      }, $Default___LINE__$12.$$arity = 1);
      
      Opal.def(self, '$string', $Default_string$13 = function $$string(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$delimited_string_map(string_t))
      }, $Default_string$13.$$arity = 1);
      
      Opal.def(self, '$string_internal', $Default_string_internal$14 = function $$string_internal(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$unquoted_map(string_t))
      }, $Default_string_internal$14.$$arity = 1);
      
      Opal.def(self, '$string_compose', $Default_string_compose$15 = function $$string_compose(begin_t, parts, end_t) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          if ($truthy((function() {if ($truthy(($ret_or_1 = begin_t['$nil?']()))) {
            return end_t['$nil?']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return parts.$first()
          } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
        }
      }, $Default_string_compose$15.$$arity = 3);
      
      Opal.def(self, '$character', $Default_character$16 = function $$character(char_t) {
        var self = this;

        return self.$n("str", [self.$string_value(char_t)], self.$prefix_string_map(char_t))
      }, $Default_character$16.$$arity = 1);
      
      Opal.def(self, '$__FILE__', $Default___FILE__$17 = function $$__FILE__(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t))
      }, $Default___FILE__$17.$$arity = 1);
      
      Opal.def(self, '$symbol', $Default_symbol$18 = function $$symbol(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t))
      }, $Default_symbol$18.$$arity = 1);
      
      Opal.def(self, '$symbol_internal', $Default_symbol_internal$19 = function $$symbol_internal(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t))
      }, $Default_symbol_internal$19.$$arity = 1);
      
      Opal.def(self, '$symbol_compose', $Default_symbol_compose$20 = function $$symbol_compose(begin_t, parts, end_t) {
        var self = this, str = nil, $ret_or_2 = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if ($truthy((function() {if ($truthy(($ret_or_2 = self.parser.$version()['$=='](18)))) {
          return parts['$empty?']()
        } else {
          return $ret_or_2
        }; return nil; })())) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        } else {
          return self.$n("dsym", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
        }
      }, $Default_symbol_compose$20.$$arity = 3);
      
      Opal.def(self, '$xstring_compose', $Default_xstring_compose$21 = function $$xstring_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
      }, $Default_xstring_compose$21.$$arity = 3);
      
      Opal.def(self, '$dedent_string', $Default_dedent_string$22 = function $$dedent_string(node, dedent_level) {
        var $$23, self = this, dedenter = nil, $case = nil, str = nil, children = nil;

        
        if ($truthy(dedent_level['$nil?']()['$!']())) {
          
          dedenter = $$$($$($nesting, 'Lexer'), 'Dedenter').$new(dedent_level);
          $case = node.$type();
          if ("str"['$===']($case)) {
          str = node.$children().$first();
          dedenter.$dedent(str);}
          else if ("dstr"['$===']($case) || "xstr"['$===']($case)) {
          children = $send(node.$children(), 'map', [], ($$23 = function(str_node){var self = $$23.$$s == null ? this : $$23.$$s;

            
            
            if (str_node == null) {
              str_node = nil;
            };
            if (str_node.$type()['$==']("str")) {
              
              str = str_node.$children().$first();
              dedenter.$dedent(str);
              if ($truthy(str['$empty?']())) {
                return nil;};
            } else {
              dedenter.$interrupt()
            };
            return str_node;}, $$23.$$s = self, $$23.$$arity = 1, $$23));
          node = node.$updated(nil, children.$compact());};};
        return node;
      }, $Default_dedent_string$22.$$arity = 2);
      
      Opal.def(self, '$regexp_options', $Default_regexp_options$24 = function $$regexp_options(regopt_t) {
        var self = this, options = nil;

        
        options = $send(self.$value(regopt_t).$each_char().$sort().$uniq(), 'map', [], "to_sym".$to_proc());
        return self.$n("regopt", options, self.$token_map(regopt_t));
      }, $Default_regexp_options$24.$$arity = 1);
      
      Opal.def(self, '$regexp_compose', $Default_regexp_compose$25 = function $$regexp_compose(begin_t, parts, end_t, options) {
        var self = this, e = nil;

        
        
        try {
          self.$static_regexp(parts, options)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'RegexpError')])) {(e = $err)
            try {
              self.$diagnostic("error", "invalid_regexp", $hash2(["message"], {"message": e.$message()}), self.$loc(begin_t).$join(self.$loc(end_t)))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        return self.$n("regexp", parts['$<<'](options), self.$regexp_map(begin_t, end_t, options));
      }, $Default_regexp_compose$25.$$arity = 4);
      
      Opal.def(self, '$array', $Default_array$26 = function $$array(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t))
      }, $Default_array$26.$$arity = 3);
      
      Opal.def(self, '$splat', $Default_splat$27 = function $$splat(star_t, arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy(arg['$nil?']())) {
          return self.$n0("splat", self.$unary_op_map(star_t))
        } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      }, $Default_splat$27.$$arity = -2);
      
      Opal.def(self, '$word', $Default_word$28 = function $$word(parts) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          return parts.$first()
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$collection_map(nil, parts, nil))
        }
      }, $Default_word$28.$$arity = 1);
      
      Opal.def(self, '$words_compose', $Default_words_compose$29 = function $$words_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
      }, $Default_words_compose$29.$$arity = 3);
      
      Opal.def(self, '$symbols_compose', $Default_symbols_compose$30 = function $$symbols_compose(begin_t, parts, end_t) {
        var $$31, self = this;

        
        parts = $send(parts, 'map', [], ($$31 = function(part){var self = $$31.$$s == null ? this : $$31.$$s, $a, $case = nil, value = nil;

          
          
          if (part == null) {
            part = nil;
          };
          return (function() {$case = part.$type();
          if ("str"['$===']($case)) {
          $a = [].concat(Opal.to_a(part)), (value = ($a[0] == null ? nil : $a[0])), $a;
          return part.$updated("sym", [value.$to_sym()]);}
          else if ("dstr"['$===']($case)) {return part.$updated("dsym")}
          else {return part}})();}, $$31.$$s = self, $$31.$$arity = 1, $$31));
        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t));
      }, $Default_symbols_compose$30.$$arity = 3);
      
      Opal.def(self, '$pair', $Default_pair$32 = function $$pair(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value))
      }, $Default_pair$32.$$arity = 3);
      
      Opal.def(self, '$pair_list_18', $Default_pair_list_18$33 = function $$pair_list_18(list) {
        var $$34, self = this;

        if ($truthy(list.$size()['$%'](2)['$!='](0))) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
        } else {
          return $send(list.$each_slice(2), 'map', [], ($$34 = function(key, value){var self = $$34.$$s == null ? this : $$34.$$s;

            
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value));}, $$34.$$s = self, $$34.$$arity = 2, $$34))
        }
      }, $Default_pair_list_18$33.$$arity = 1);
      
      Opal.def(self, '$pair_keyword', $Default_pair_keyword$35 = function $$pair_keyword(key_t, value) {
        var $a, $b, self = this, key_map = nil, pair_map = nil, key = nil;

        
        $b = self.$pair_keyword_map(key_t, value), $a = Opal.to_ary($b), (key_map = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_keyword$35.$$arity = 2);
      
      Opal.def(self, '$pair_quoted', $Default_pair_quoted$36 = function $$pair_quoted(begin_t, parts, end_t, value) {
        var $a, $b, self = this, pair_map = nil, key = nil;

        
        $b = self.$pair_quoted_map(begin_t, end_t, value), $a = Opal.to_ary($b), (end_t = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$symbol_compose(begin_t, parts, end_t);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_quoted$36.$$arity = 4);
      
      Opal.def(self, '$pair_label', $Default_pair_label$37 = function $$pair_label(key_t) {
        var self = this, key_l = nil, value_l = nil, label = nil, value = nil;

        
        key_l = self.$loc(key_t);
        value_l = key_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        label = self.$value(key_t);
        value = (function() {if ($truthy(label['$=~'](/^[[:lower:]]/))) {
          return self.$n("ident", [label.$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(value_l))
        } else {
          return self.$n("const", [nil, label.$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'Constant').$new(nil, value_l, value_l))
        }; return nil; })();
        return self.$pair_keyword(key_t, self.$accessible(value));
      }, $Default_pair_label$37.$$arity = 1);
      
      Opal.def(self, '$kwsplat', $Default_kwsplat$38 = function $$kwsplat(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg))
      }, $Default_kwsplat$38.$$arity = 2);
      
      Opal.def(self, '$associate', $Default_associate$39 = function $$associate(begin_t, pairs, end_t) {
        var $$40, self = this;

        
        $send((0), 'upto', [$rb_minus(pairs.$length(), 1)], ($$40 = function(i){var self = $$40.$$s == null ? this : $$40.$$s, $$41;

          
          
          if (i == null) {
            i = nil;
          };
          return $send($rb_plus(i, 1), 'upto', [$rb_minus(pairs.$length(), 1)], ($$41 = function(j){var self = $$41.$$s == null ? this : $$41.$$s, $a, key1 = nil, key2 = nil, do_warn = nil, $case = nil, $ret_or_3 = nil;
            if (self.parser == null) self.parser = nil;

            
            
            if (j == null) {
              j = nil;
            };
            $a = [].concat(Opal.to_a(pairs['$[]'](i))), (key1 = ($a[0] == null ? nil : $a[0])), $a;
            $a = [].concat(Opal.to_a(pairs['$[]'](j))), (key2 = ($a[0] == null ? nil : $a[0])), $a;
            do_warn = false;
            $case = key1.$type();
            if ("sym"['$===']($case) || "str"['$===']($case) || "int"['$===']($case) || "float"['$===']($case)) {if (key1['$=='](key2)) {
              do_warn = true}}
            else if ("rational"['$===']($case) || "complex"['$===']($case) || "regexp"['$===']($case)) {if ($truthy((function() {if ($truthy(($ret_or_3 = $rb_ge(self.parser.$version(), 31)))) {
              return key1['$=='](key2)
            } else {
              return $ret_or_3
            }; return nil; })())) {
              do_warn = true}};
            if ($truthy(do_warn)) {
              return self.$diagnostic("warning", "duplicate_hash_key", nil, key2.$loc().$expression())
            } else {
              return nil
            };}, $$41.$$s = self, $$41.$$arity = 1, $$41));}, $$40.$$s = self, $$40.$$arity = 1, $$40));
        return self.$n("hash", [].concat(Opal.to_a(pairs)), self.$collection_map(begin_t, pairs, end_t));
      }, $Default_associate$39.$$arity = 3);
      
      Opal.def(self, '$range_inclusive', $Default_range_inclusive$42 = function $$range_inclusive(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$range_map(lhs, dot2_t, rhs))
      }, $Default_range_inclusive$42.$$arity = 3);
      
      Opal.def(self, '$range_exclusive', $Default_range_exclusive$43 = function $$range_exclusive(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$range_map(lhs, dot3_t, rhs))
      }, $Default_range_exclusive$43.$$arity = 3);
      
      Opal.def(self, '$self', $Default_self$44 = function $$self(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token))
      }, $Default_self$44.$$arity = 1);
      
      Opal.def(self, '$ident', $Default_ident$45 = function $$ident(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ident$45.$$arity = 1);
      
      Opal.def(self, '$ivar', $Default_ivar$46 = function $$ivar(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ivar$46.$$arity = 1);
      
      Opal.def(self, '$gvar', $Default_gvar$47 = function $$gvar(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_gvar$47.$$arity = 1);
      
      Opal.def(self, '$cvar', $Default_cvar$48 = function $$cvar(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_cvar$48.$$arity = 1);
      
      Opal.def(self, '$back_ref', $Default_back_ref$49 = function $$back_ref(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token))
      }, $Default_back_ref$49.$$arity = 1);
      
      Opal.def(self, '$nth_ref', $Default_nth_ref$50 = function $$nth_ref(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token))
      }, $Default_nth_ref$50.$$arity = 1);
      
      Opal.def(self, '$accessible', $Default_accessible$51 = function $$accessible(node) {
        var $a, $$52, self = this, $case = nil, name = nil, $ret_or_4 = nil;

        return (function() {$case = node.$type();
        if ("__FILE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__LINE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("int", [node.$loc().$expression().$line()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__ENCODING__"['$===']($case)) {if ($truthy(self.$class().$emit_encoding()['$!']())) {
          return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy($send(["?", "!"], 'any?', [], ($$52 = function(c){var self = $$52.$$s == null ? this : $$52.$$s;

          
          
          if (c == null) {
            c = nil;
          };
          return name.$to_s()['$end_with?'](c);}, $$52.$$s = self, $$52.$$arity = 1, $$52)))) {
          self.$diagnostic("error", "invalid_id_to_get", $hash2(["identifier"], {"identifier": name.$to_s()}), node.$loc().$expression())};
        if ($truthy((function() {if ($truthy(($ret_or_4 = $rb_ge(self.parser.$version(), 27)))) {
          return self.parser.$try_declare_numparam(node)
        } else {
          return $ret_or_4
        }; return nil; })())) {
          return node.$updated("lvar")};
        if ($truthy(self.parser.$static_env()['$declared?'](name))) {
        } else {
          return self.$n("send", [nil, name], self.$var_send_map(node))
        };
        if (name.$to_s()['$=='](self.$parser().$current_arg_stack().$top())) {
          self.$diagnostic("error", "circular_argument_reference", $hash2(["var_name"], {"var_name": name.$to_s()}), node.$loc().$expression())};
        return node.$updated("lvar");}
        else {return node}})()
      }, $Default_accessible$51.$$arity = 1);
      
      Opal.def(self, '$const', $Default_const$53 = function(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t))
      }, $Default_const$53.$$arity = 1);
      
      Opal.def(self, '$const_global', $Default_const_global$54 = function $$const_global(t_colon3, name_t) {
        var self = this, cbase = nil;

        
        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      }, $Default_const_global$54.$$arity = 2);
      
      Opal.def(self, '$const_fetch', $Default_const_fetch$55 = function $$const_fetch(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t))
      }, $Default_const_fetch$55.$$arity = 3);
      
      Opal.def(self, '$__ENCODING__', $Default___ENCODING__$56 = function $$__ENCODING__(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t))
      }, $Default___ENCODING__$56.$$arity = 1);
      
      Opal.def(self, '$assignable', $Default_assignable$57 = function $$assignable(node) {
        var $a, self = this, $case = nil, name = nil, var_name = nil, name_loc = nil;

        return (function() {$case = node.$type();
        if ("cvar"['$===']($case)) {return node.$updated("cvasgn")}
        else if ("ivar"['$===']($case)) {return node.$updated("ivasgn")}
        else if ("gvar"['$===']($case)) {return node.$updated("gvasgn")}
        else if ("const"['$===']($case)) {
        if ($truthy(self.parser.$context().$in_def())) {
          self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())};
        return node.$updated("casgn");}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        var_name = node.$children()['$[]'](0).$to_s();
        name_loc = node.$loc().$expression();
        self.$check_assignment_to_numparam(var_name, name_loc);
        self.$check_reserved_for_numparam(var_name, name_loc);
        self.parser.$static_env().$declare(name);
        return node.$updated("lvasgn");}
        else if ("match_var"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        var_name = node.$children()['$[]'](0).$to_s();
        name_loc = node.$loc().$expression();
        self.$check_assignment_to_numparam(var_name, name_loc);
        self.$check_reserved_for_numparam(var_name, name_loc);
        return node;}
        else if ("nil"['$===']($case) || "self"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "__FILE__"['$===']($case) || "__LINE__"['$===']($case) || "__ENCODING__"['$===']($case)) {return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())}
        else { return nil }})()
      }, $Default_assignable$57.$$arity = 1);
      
      Opal.def(self, '$const_op_assignable', $Default_const_op_assignable$58 = function $$const_op_assignable(node) {
        var self = this;

        return node.$updated("casgn")
      }, $Default_const_op_assignable$58.$$arity = 1);
      
      Opal.def(self, '$assign', $Default_assign$59 = function $$assign(lhs, eql_t, rhs) {
        var self = this;

        return lhs['$<<'](rhs).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}))
      }, $Default_assign$59.$$arity = 3);
      
      Opal.def(self, '$op_assign', $Default_op_assign$60 = function $$op_assign(lhs, op_t, rhs) {
        var self = this, $case = nil, operator = nil, source_map = nil;

        return (function() {$case = lhs.$type();
        if ("gvasgn"['$===']($case) || "ivasgn"['$===']($case) || "lvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "send"['$===']($case) || "csend"['$===']($case) || "index"['$===']($case)) {
        operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
        source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
        if (lhs.$type()['$==']("index")) {
          lhs = lhs.$updated("indexasgn")};
        return (function() {$case = operator;
        if ("&&"['$===']($case)) {return self.$n("and_asgn", [lhs, rhs], source_map)}
        else if ("||"['$===']($case)) {return self.$n("or_asgn", [lhs, rhs], source_map)}
        else {return self.$n("op_asgn", [lhs, operator, rhs], source_map)}})();}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())}
        else { return nil }})()
      }, $Default_op_assign$60.$$arity = 3);
      
      Opal.def(self, '$multi_lhs', $Default_multi_lhs$61 = function $$multi_lhs(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat(Opal.to_a(items)), self.$collection_map(begin_t, items, end_t))
      }, $Default_multi_lhs$61.$$arity = 3);
      
      Opal.def(self, '$multi_assign', $Default_multi_assign$62 = function $$multi_assign(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs))
      }, $Default_multi_assign$62.$$arity = 3);
      
      Opal.def(self, '$def_class', $Default_def_class$63 = function $$def_class(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t))
      }, $Default_def_class$63.$$arity = 6);
      
      Opal.def(self, '$def_sclass', $Default_def_sclass$64 = function $$def_sclass(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t))
      }, $Default_def_sclass$64.$$arity = 5);
      
      Opal.def(self, '$def_module', $Default_def_module$65 = function $$def_module(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t))
      }, $Default_def_module$65.$$arity = 4);
      
      Opal.def(self, '$def_method', $Default_def_method$66 = function $$def_method(def_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t));
      }, $Default_def_method$66.$$arity = 5);
      
      Opal.def(self, '$def_endless_method', $Default_def_endless_method$67 = function $$def_endless_method(def_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, nil, name_t, assignment_t, body));
      }, $Default_def_endless_method$67.$$arity = 5);
      
      Opal.def(self, '$def_singleton', $Default_def_singleton$68 = function $$def_singleton(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t));
      }, $Default_def_singleton$68.$$arity = 7);
      
      Opal.def(self, '$def_endless_singleton', $Default_def_endless_singleton$69 = function $$def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, dot_t, name_t, assignment_t, body));
      }, $Default_def_endless_singleton$69.$$arity = 7);
      
      Opal.def(self, '$undef_method', $Default_undef_method$70 = function $$undef_method(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat(Opal.to_a(names)), self.$keyword_map(undef_t, nil, names, nil))
      }, $Default_undef_method$70.$$arity = 2);
      
      Opal.def(self, '$alias', $Default_alias$71 = function $$alias(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil))
      }, $Default_alias$71.$$arity = 3);
      
      Opal.def(self, '$args', $Default_args$72 = function $$args(begin_t, args, end_t, check_args) {
        var self = this, map = nil, $ret_or_5 = nil, $ret_or_6 = nil;

        
        
        if (check_args == null) {
          check_args = true;
        };
        if ($truthy(check_args)) {
          args = self.$check_duplicate_args(args)};
        self.$validate_no_forward_arg_after_restarg(args);
        map = self.$collection_map(begin_t, args, end_t);
        if ($truthy((function() {if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self.$class().$emit_forward_arg()['$!']()))) {
          return args.$length()['$=='](1)
        } else {
          return $ret_or_6
        }; return nil; })()))) {
          return args['$[]'](0).$type()['$==']("forward_arg")
        } else {
          return $ret_or_5
        }; return nil; })())) {
          return self.$n("forward_args", [], map)
        } else {
          return self.$n("args", args, map)
        };
      }, $Default_args$72.$$arity = -4);
      
      Opal.def(self, '$numargs', $Default_numargs$73 = function $$numargs(max_numparam) {
        var self = this;

        return self.$n("numargs", [max_numparam], nil)
      }, $Default_numargs$73.$$arity = 1);
      
      Opal.def(self, '$forward_only_args', $Default_forward_only_args$74 = function $$forward_only_args(begin_t, dots_t, end_t) {
        var self = this, arg = nil;

        if ($truthy(self.$class().$emit_forward_arg())) {
          
          arg = self.$forward_arg(dots_t);
          return self.$n("args", [arg], self.$collection_map(begin_t, [arg], end_t));
        } else {
          return self.$n("forward_args", [], self.$collection_map(begin_t, self.$token_map(dots_t), end_t))
        }
      }, $Default_forward_only_args$74.$$arity = 3);
      
      Opal.def(self, '$forward_arg', $Default_forward_arg$75 = function $$forward_arg(dots_t) {
        var self = this;

        return self.$n("forward_arg", [], self.$token_map(dots_t))
      }, $Default_forward_arg$75.$$arity = 1);
      
      Opal.def(self, '$arg', $Default_arg$76 = function $$arg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, $Default_arg$76.$$arity = 1);
      
      Opal.def(self, '$optarg', $Default_optarg$77 = function $$optarg(name_t, eql_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())));
      }, $Default_optarg$77.$$arity = 3);
      
      Opal.def(self, '$restarg', $Default_restarg$78 = function $$restarg(star_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t));
        } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      }, $Default_restarg$78.$$arity = -2);
      
      Opal.def(self, '$kwarg', $Default_kwarg$79 = function $$kwarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t));
      }, $Default_kwarg$79.$$arity = 1);
      
      Opal.def(self, '$kwoptarg', $Default_kwoptarg$80 = function $$kwoptarg(name_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value));
      }, $Default_kwoptarg$80.$$arity = 2);
      
      Opal.def(self, '$kwrestarg', $Default_kwrestarg$81 = function $$kwrestarg(dstar_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t));
        } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      }, $Default_kwrestarg$81.$$arity = -2);
      
      Opal.def(self, '$kwnilarg', $Default_kwnilarg$82 = function $$kwnilarg(dstar_t, nil_t) {
        var self = this;

        return self.$n0("kwnilarg", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_kwnilarg$82.$$arity = 2);
      
      Opal.def(self, '$shadowarg', $Default_shadowarg$83 = function $$shadowarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, $Default_shadowarg$83.$$arity = 1);
      
      Opal.def(self, '$blockarg', $Default_blockarg$84 = function $$blockarg(amper_t, name_t) {
        var self = this, arg_name = nil;

        
        if ($truthy(name_t['$nil?']()['$!']())) {
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t))};
        arg_name = (function() {if ($truthy(name_t)) {
          return self.$value(name_t).$to_sym()
        } else {
          return nil
        }; return nil; })();
        return self.$n("blockarg", [arg_name], self.$arg_prefix_map(amper_t, name_t));
      }, $Default_blockarg$84.$$arity = 2);
      
      Opal.def(self, '$procarg0', $Default_procarg0$85 = function $$procarg0(arg) {
        var self = this, $ret_or_7 = nil;

        if ($truthy(self.$class().$emit_procarg0())) {
          if ($truthy((function() {if ($truthy(($ret_or_7 = arg.$type()['$==']("arg")))) {
            return self.$class().$emit_arg_inside_procarg0()
          } else {
            return $ret_or_7
          }; return nil; })())) {
            return self.$n("procarg0", [arg], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, arg.$location().$expression()))
          } else {
            return arg.$updated("procarg0")
          }
        } else {
          return arg
        }
      }, $Default_procarg0$85.$$arity = 1);
      
      Opal.def(self, '$arg_expr', $Default_arg_expr$86 = function $$arg_expr(expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("arg")
        } else {
          return self.$n("arg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_arg_expr$86.$$arity = 1);
      
      Opal.def(self, '$restarg_expr', $Default_restarg_expr$87 = function $$restarg_expr(star_t, expr) {
        var self = this;

        
        
        if (expr == null) {
          expr = nil;
        };
        if ($truthy(expr['$nil?']())) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("restarg")
        } else {
          return self.$n("restarg_expr", [expr], expr.$loc().$dup())
        };
      }, $Default_restarg_expr$87.$$arity = -2);
      
      Opal.def(self, '$blockarg_expr', $Default_blockarg_expr$88 = function $$blockarg_expr(amper_t, expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("blockarg")
        } else {
          return self.$n("blockarg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_blockarg_expr$88.$$arity = 2);
      
      Opal.def(self, '$objc_kwarg', $Default_objc_kwarg$89 = function $$objc_kwarg(kwname_t, assoc_t, name_t) {
        var self = this, kwname_l = nil, operator_l = nil;

        
        kwname_l = self.$loc(kwname_t);
        if ($truthy(assoc_t['$nil?']())) {
          
          kwname_l = kwname_l.$resize($rb_minus(kwname_l.$size(), 1));
          operator_l = kwname_l.$end().$resize(1);
        } else {
          operator_l = self.$loc(assoc_t)
        };
        return self.$n("objc_kwarg", [self.$value(kwname_t).$to_sym(), self.$value(name_t).$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'ObjcKwarg').$new(kwname_l, operator_l, self.$loc(name_t), kwname_l.$join(self.$loc(name_t))));
      }, $Default_objc_kwarg$89.$$arity = 3);
      
      Opal.def(self, '$objc_restarg', $Default_objc_restarg$90 = function $$objc_restarg(star_t, name) {
        var self = this;

        
        
        if (name == null) {
          name = nil;
        };
        if ($truthy(name['$nil?']())) {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        } else if (name.$type()['$==']("arg")) {
          return name.$updated("restarg", nil, $hash2(["location"], {"location": name.$loc().$with_operator(self.$loc(star_t))}))
        } else {
          return self.$n("objc_restarg", [name], self.$unary_op_map(star_t, name))
        };
      }, $Default_objc_restarg$90.$$arity = -2);
      
      Opal.def(self, '$call_type_for_dot', $Default_call_type_for_dot$91 = function $$call_type_for_dot(dot_t) {
        var self = this, $ret_or_8 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_8 = dot_t['$nil?']()['$!']()))) {
          return self.$value(dot_t)['$==']("anddot")
        } else {
          return $ret_or_8
        }; return nil; })())) {
          return "csend"
        } else {
          return "send"
        }
      }, $Default_call_type_for_dot$91.$$arity = 1);
      
      Opal.def(self, '$forwarded_args', $Default_forwarded_args$92 = function $$forwarded_args(dots_t) {
        var self = this;

        return self.$n("forwarded_args", [], self.$token_map(dots_t))
      }, $Default_forwarded_args$92.$$arity = 1);
      
      Opal.def(self, '$call_method', $Default_call_method$93 = function $$call_method(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var self = this, type = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        type = self.$call_type_for_dot(dot_t);
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(args)};
        if ($truthy(selector_t['$nil?']())) {
          return self.$n(type, [receiver, "call"].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
        } else {
          return self.$n(type, [receiver, self.$value(selector_t).$to_sym()].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      }, $Default_call_method$93.$$arity = -4);
      
      Opal.def(self, '$call_lambda', $Default_call_lambda$94 = function $$call_lambda(lambda_t) {
        var self = this;

        if ($truthy(self.$class().$emit_lambda())) {
          return self.$n0("lambda", self.$expr_map(self.$loc(lambda_t)))
        } else {
          return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t))
        }
      }, $Default_call_lambda$94.$$arity = 1);
      
      Opal.def(self, '$block', $Default_block$95 = function $$block(method_call, begin_t, args, body, end_t) {
        var $a, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, $ret_or_9 = nil, $ret_or_10 = nil, block_type = nil, actual_send = nil, block = nil;

        
        $a = [].concat(Opal.to_a(method_call)), (_receiver = ($a[0] == null ? nil : $a[0])), (_selector = ($a[1] == null ? nil : $a[1])), (call_args = $slice.call($a, 2)), $a;
        if (method_call.$type()['$==']("yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])};
        last_arg = call_args.$last();
        if ($truthy((function() {if ($truthy(($ret_or_9 = last_arg))) {
          
          if ($truthy(($ret_or_10 = last_arg.$type()['$==']("block_pass")))) {
            return $ret_or_10
          } else {
            return last_arg.$type()['$==']("forwarded_args")
          };
        } else {
          return $ret_or_9
        }; return nil; })())) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])};
        if (args.$type()['$==']("numargs")) {
          
          block_type = "numblock";
          args = args.$children()['$[]'](0);
        } else {
          block_type = "block"
        };
        if ($truthy(["send", "csend", "index", "super", "zsuper", "lambda"]['$include?'](method_call.$type()))) {
          return self.$n(block_type, [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
        } else {
          
          $a = [].concat(Opal.to_a(method_call)), (actual_send = ($a[0] == null ? nil : $a[0])), $a;
          block = self.$n(block_type, [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      }, $Default_block$95.$$arity = 5);
      
      Opal.def(self, '$block_pass', $Default_block_pass$96 = function $$block_pass(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg))
      }, $Default_block_pass$96.$$arity = 2);
      
      Opal.def(self, '$objc_varargs', $Default_objc_varargs$97 = function $$objc_varargs(pair, rest_of_varargs) {
        var $a, self = this, value = nil, first_vararg = nil, vararg_array = nil;

        
        $a = [].concat(Opal.to_a(pair)), (value = ($a[0] == null ? nil : $a[0])), (first_vararg = ($a[1] == null ? nil : $a[1])), $a;
        vararg_array = self.$array(nil, [first_vararg].concat(Opal.to_a(rest_of_varargs)), nil).$updated("objc_varargs");
        return pair.$updated(nil, [value, vararg_array], $hash2(["location"], {"location": pair.$loc().$with_expression(pair.$loc().$expression().$join(vararg_array.$loc().$expression()))}));
      }, $Default_objc_varargs$97.$$arity = 2);
      
      Opal.def(self, '$attr_asgn', $Default_attr_asgn$98 = function $$attr_asgn(receiver, dot_t, selector_t) {
        var self = this, method_name = nil, type = nil;

        
        method_name = $rb_plus(self.$value(selector_t), "=").$to_sym();
        type = self.$call_type_for_dot(dot_t);
        return self.$n(type, [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      }, $Default_attr_asgn$98.$$arity = 3);
      
      Opal.def(self, '$index', $Default_index$99 = function $$index(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(indexes)};
        if ($truthy(self.$class().$emit_index())) {
          return self.$n("index", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]"].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        };
      }, $Default_index$99.$$arity = 4);
      
      Opal.def(self, '$index_asgn', $Default_index_asgn$100 = function $$index_asgn(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("indexasgn", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]="].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index_asgn$100.$$arity = 4);
      
      Opal.def(self, '$binary_op', $Default_binary_op$101 = function $$binary_op(receiver, operator_t, arg) {
        var self = this, source_map = nil, operator = nil, method_call = nil;

        
        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if (self.parser.$version()['$=='](18)) {
          
          operator = self.$value(operator_t);
          if (operator['$==']("!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if (operator['$==']("!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)};
          if ($truthy(["!=", "!~"]['$include?'](operator))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))};};
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      }, $Default_binary_op$101.$$arity = 3);
      
      Opal.def(self, '$match_op', $Default_match_op$102 = function $$match_op(receiver, match_t, arg) {
        var $$103, self = this, source_map = nil, regexp = nil;

        
        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ($truthy((regexp = self.$static_regexp_node(receiver)))) {
          
          $send(regexp.$names(), 'each', [], ($$103 = function(name){var self = $$103.$$s == null ? this : $$103.$$s;
            if (self.parser == null) self.parser = nil;

            
            
            if (name == null) {
              name = nil;
            };
            return self.parser.$static_env().$declare(name);}, $$103.$$s = self, $$103.$$arity = 1, $$103));
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
        } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      }, $Default_match_op$102.$$arity = 3);
      
      Opal.def(self, '$unary_op', $Default_unary_op$104 = function $$unary_op(op_t, receiver) {
        var self = this, $case = nil, method = nil;

        
        $case = self.$value(op_t);
        if ("+"['$===']($case) || "-"['$===']($case)) {method = $rb_plus(self.$value(op_t), "@")}
        else {method = self.$value(op_t)};
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      }, $Default_unary_op$104.$$arity = 2);
      
      Opal.def(self, '$not_op', $Default_not_op$105 = function $$not_op(not_t, begin_t, receiver, end_t) {
        var self = this, nil_node = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (receiver == null) {
          receiver = nil;
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if (self.parser.$version()['$=='](18)) {
          return self.$n("not", [self.$check_condition(receiver)], self.$unary_op_map(not_t, receiver))
        } else if ($truthy(receiver['$nil?']())) {
          
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
        } else {
          return self.$n("send", [self.$check_condition(receiver), "!"], self.$send_map(nil, nil, not_t, begin_t, [receiver], end_t))
        };
      }, $Default_not_op$105.$$arity = -2);
      
      Opal.def(self, '$logical_op', $Default_logical_op$106 = function $$logical_op(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs))
      }, $Default_logical_op$106.$$arity = 4);
      
      Opal.def(self, '$condition', $Default_condition$107 = function $$condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t))
      }, $Default_condition$107.$$arity = 7);
      
      Opal.def(self, '$condition_mod', $Default_condition_mod$108 = function $$condition_mod(if_true, if_false, cond_t, cond) {
        var self = this, $ret_or_11 = nil;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map((function() {if ($truthy(($ret_or_11 = if_true))) {
          return $ret_or_11
        } else {
          return if_false
        }; return nil; })(), cond_t, cond))
      }, $Default_condition_mod$108.$$arity = 4);
      
      Opal.def(self, '$ternary', $Default_ternary$109 = function $$ternary(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false))
      }, $Default_ternary$109.$$arity = 5);
      
      Opal.def(self, '$when', $Default_when$110 = function $$when(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        
        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      }, $Default_when$110.$$arity = 4);
      
      Opal.def(self, '$case', $Default_case$111 = function(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat(Opal.to_a(when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t))
      }, $Default_case$111.$$arity = 6);
      
      Opal.def(self, '$loop', $Default_loop$112 = function $$loop(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t))
      }, $Default_loop$112.$$arity = 6);
      
      Opal.def(self, '$loop_mod', $Default_loop_mod$113 = function $$loop_mod(type, body, keyword_t, cond) {
        var self = this;

        
        if (body.$type()['$==']("kwbegin")) {
          type = "" + (type) + "_post"};
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      }, $Default_loop_mod$113.$$arity = 4);
      
      Opal.def(self, '$for', $Default_for$114 = function(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t))
      }, $Default_for$114.$$arity = 7);
      
      Opal.def(self, '$keyword_cmd', $Default_keyword_cmd$115 = function $$keyword_cmd(type, keyword_t, lparen_t, args, rparen_t) {
        var self = this, $ret_or_12 = nil, last_arg = nil, $ret_or_13 = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_12 = type['$==']("yield")))) {
          return $rb_gt(args.$count(), 0)
        } else {
          return $ret_or_12
        }; return nil; })())) {
          
          last_arg = args.$last();
          if (last_arg.$type()['$==']("block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])};};
        if ($truthy((function() {if ($truthy(($ret_or_13 = ["yield", "super"]['$include?'](type)))) {
          return self.$class().$emit_kwargs()
        } else {
          return $ret_or_13
        }; return nil; })())) {
          self.$rewrite_hash_args_to_kwargs(args)};
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      }, $Default_keyword_cmd$115.$$arity = -3);
      
      Opal.def(self, '$preexe', $Default_preexe$116 = function $$preexe(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t))
      }, $Default_preexe$116.$$arity = 4);
      
      Opal.def(self, '$postexe', $Default_postexe$117 = function $$postexe(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t))
      }, $Default_postexe$117.$$arity = 4);
      
      Opal.def(self, '$rescue_body', $Default_rescue_body$118 = function $$rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt))
      }, $Default_rescue_body$118.$$arity = 6);
      
      Opal.def(self, '$begin_body', $Default_begin_body$119 = function $$begin_body(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var self = this, statements = nil;

        
        
        if (rescue_bodies == null) {
          rescue_bodies = [];
        };
        
        if (else_t == null) {
          else_t = nil;
        };
        
        if (else_ == null) {
          else_ = nil;
        };
        
        if (ensure_t == null) {
          ensure_t = nil;
        };
        
        if (ensure_ == null) {
          ensure_ = nil;
        };
        if ($truthy(rescue_bodies['$any?']())) {
          if ($truthy(else_t)) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
          } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }
        } else if ($truthy(else_t)) {
          
          statements = [];
          if ($truthy(compound_stmt['$nil?']()['$!']())) {
            if (compound_stmt.$type()['$==']("begin")) {
              statements = $rb_plus(statements, compound_stmt.$children())
            } else {
              statements.$push(compound_stmt)
            }};
          statements.$push(self.$n("begin", [else_], self.$collection_map(else_t, [else_], nil)));
          compound_stmt = self.$n("begin", statements, self.$collection_map(nil, statements, nil));};
        if ($truthy(ensure_t)) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))};
        return compound_stmt;
      }, $Default_begin_body$119.$$arity = -2);
      
      Opal.def(self, '$compstmt', $Default_compstmt$120 = function $$compstmt(statements) {
        var self = this;

        return (function() {
        if ($truthy(statements['$none?']())) {return nil}
        else if ($truthy(statements['$one?']())) {return statements.$first()}
        else {return self.$n("begin", statements, self.$collection_map(nil, statements, nil))}})()
      }, $Default_compstmt$120.$$arity = 1);
      
      Opal.def(self, '$begin', $Default_begin$121 = function $$begin(begin_t, body, end_t) {
        var self = this, $ret_or_14 = nil, $ret_or_15 = nil, $ret_or_16 = nil;

        if ($truthy(body['$nil?']())) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy((function() {if ($truthy(($ret_or_14 = body.$type()['$==']("mlhs")))) {
          return $ret_or_14
        } else {
          
          if ($truthy(($ret_or_15 = (function() {if ($truthy(($ret_or_16 = body.$type()['$==']("begin")))) {
            return body.$loc().$begin()['$nil?']()
          } else {
            return $ret_or_16
          }; return nil; })()))) {
            return body.$loc().$end()['$nil?']()
          } else {
            return $ret_or_15
          };
        }; return nil; })())) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin$121.$$arity = 3);
      
      Opal.def(self, '$begin_keyword', $Default_begin_keyword$122 = function $$begin_keyword(begin_t, body, end_t) {
        var self = this, $ret_or_17 = nil, $ret_or_18 = nil;

        if ($truthy(body['$nil?']())) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy((function() {if ($truthy(($ret_or_17 = (function() {if ($truthy(($ret_or_18 = body.$type()['$==']("begin")))) {
          return body.$loc().$begin()['$nil?']()
        } else {
          return $ret_or_18
        }; return nil; })()))) {
          return body.$loc().$end()['$nil?']()
        } else {
          return $ret_or_17
        }; return nil; })())) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin_keyword$122.$$arity = 3);
      
      Opal.def(self, '$case_match', $Default_case_match$123 = function $$case_match(case_t, expr, in_bodies, else_t, else_body, end_t) {
        var self = this, $ret_or_19 = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_19 = else_t))) {
          return else_body['$!']()
        } else {
          return $ret_or_19
        }; return nil; })())) {
          else_body = self.$n("empty_else", nil, self.$token_map(else_t))};
        return self.$n("case_match", [expr].concat(Opal.to_a(in_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t));
      }, $Default_case_match$123.$$arity = 6);
      
      Opal.def(self, '$in_match', $Default_in_match$124 = function $$in_match(lhs, in_t, rhs) {
        var self = this;

        return self.$n("in_match", [lhs, rhs], self.$binary_op_map(lhs, in_t, rhs))
      }, $Default_in_match$124.$$arity = 3);
      
      Opal.def(self, '$match_pattern', $Default_match_pattern$125 = function $$match_pattern(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, $Default_match_pattern$125.$$arity = 3);
      
      Opal.def(self, '$match_pattern_p', $Default_match_pattern_p$126 = function $$match_pattern_p(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern_p", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, $Default_match_pattern_p$126.$$arity = 3);
      
      Opal.def(self, '$in_pattern', $Default_in_pattern$127 = function $$in_pattern(in_t, pattern, guard, then_t, body) {
        var self = this, children = nil;

        
        children = [pattern, guard, body];
        return self.$n("in_pattern", children, self.$keyword_map(in_t, then_t, children.$compact(), nil));
      }, $Default_in_pattern$127.$$arity = 5);
      
      Opal.def(self, '$if_guard', $Default_if_guard$128 = function $$if_guard(if_t, if_body) {
        var self = this;

        return self.$n("if_guard", [if_body], self.$guard_map(if_t, if_body))
      }, $Default_if_guard$128.$$arity = 2);
      
      Opal.def(self, '$unless_guard', $Default_unless_guard$129 = function $$unless_guard(unless_t, unless_body) {
        var self = this;

        return self.$n("unless_guard", [unless_body], self.$guard_map(unless_t, unless_body))
      }, $Default_unless_guard$129.$$arity = 2);
      
      Opal.def(self, '$match_var', $Default_match_var$130 = function $$match_var(name_t) {
        var self = this, name = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        name_l = self.$loc(name_t);
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], self.$variable_map(name_t));
      }, $Default_match_var$130.$$arity = 1);
      
      Opal.def(self, '$match_hash_var', $Default_match_hash_var$131 = function $$match_hash_var(name_t) {
        var self = this, name = nil, expr_l = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        expr_l = self.$loc(name_t);
        name_l = expr_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));
      }, $Default_match_hash_var$131.$$arity = 1);
      
      Opal.def(self, '$match_hash_var_from_str', $Default_match_hash_var_from_str$132 = function $$match_hash_var_from_str(begin_t, strings, end_t) {
        var $a, self = this, string = nil, $case = nil, name = nil, name_l = nil, begin_l = nil, end_l = nil, expr_l = nil;

        
        if ($truthy($rb_gt(strings.$length(), 1))) {
          self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))};
        string = strings['$[]'](0);
        return (function() {$case = string.$type();
        if ("str"['$===']($case)) {
        $a = [].concat(Opal.to_a(string)), (name = ($a[0] == null ? nil : $a[0])), $a;
        name_l = string.$loc().$expression();
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        if ($truthy((begin_l = string.$loc().$begin()))) {
          name_l = name_l.$adjust($hash2(["begin_pos"], {"begin_pos": begin_l.$length()}))};
        if ($truthy((end_l = string.$loc().$end()))) {
          name_l = name_l.$adjust($hash2(["end_pos"], {"end_pos": end_l.$length()['$-@']()}))};
        expr_l = self.$loc(begin_t).$join(string.$loc().$expression()).$join(self.$loc(end_t));
        return self.$n("match_var", [name.$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));}
        else if ("begin"['$===']($case)) {return self.$match_hash_var_from_str(begin_t, string.$children(), end_t)}
        else {return self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))}})();
      }, $Default_match_hash_var_from_str$132.$$arity = 3);
      
      Opal.def(self, '$match_rest', $Default_match_rest$133 = function $$match_rest(star_t, name_t) {
        var self = this, name = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          return self.$n0("match_rest", self.$unary_op_map(star_t))
        } else {
          
          name = self.$match_var(name_t);
          return self.$n("match_rest", [name], self.$unary_op_map(star_t, name));
        };
      }, $Default_match_rest$133.$$arity = -2);
      
      Opal.def(self, '$hash_pattern', $Default_hash_pattern$134 = function $$hash_pattern(lbrace_t, kwargs, rbrace_t) {
        var self = this, args = nil;

        
        args = self.$check_duplicate_args(kwargs);
        return self.$n("hash_pattern", args, self.$collection_map(lbrace_t, args, rbrace_t));
      }, $Default_hash_pattern$134.$$arity = 3);
      
      Opal.def(self, '$array_pattern', $Default_array_pattern$135 = function $$array_pattern(lbrack_t, elements, rbrack_t) {
        var $$136, self = this, trailing_comma = nil, node_elements = nil, node_type = nil;

        
        if ($truthy(elements['$nil?']())) {
          return self.$n("array_pattern", nil, self.$collection_map(lbrack_t, [], rbrack_t))};
        trailing_comma = false;
        node_elements = $send(elements, 'map', [], ($$136 = function(element){var self = $$136.$$s == null ? this : $$136.$$s;

          
          
          if (element == null) {
            element = nil;
          };
          if (element.$type()['$==']("match_with_trailing_comma")) {
            
            trailing_comma = true;
            return element.$children().$first();
          } else {
            
            trailing_comma = false;
            return element;
          };}, $$136.$$s = self, $$136.$$arity = 1, $$136));
        node_type = (function() {if ($truthy(trailing_comma)) {
          return "array_pattern_with_tail"
        } else {
          return "array_pattern"
        }; return nil; })();
        return self.$n(node_type, node_elements, self.$collection_map(lbrack_t, elements, rbrack_t));
      }, $Default_array_pattern$135.$$arity = 3);
      
      Opal.def(self, '$find_pattern', $Default_find_pattern$137 = function $$find_pattern(lbrack_t, elements, rbrack_t) {
        var self = this;

        return self.$n("find_pattern", elements, self.$collection_map(lbrack_t, elements, rbrack_t))
      }, $Default_find_pattern$137.$$arity = 3);
      
      Opal.def(self, '$match_with_trailing_comma', $Default_match_with_trailing_comma$138 = function $$match_with_trailing_comma(match, comma_t) {
        var self = this;

        return self.$n("match_with_trailing_comma", [match], self.$expr_map(match.$loc().$expression().$join(self.$loc(comma_t))))
      }, $Default_match_with_trailing_comma$138.$$arity = 2);
      
      Opal.def(self, '$const_pattern', $Default_const_pattern$139 = function $$const_pattern(const$, ldelim_t, pattern, rdelim_t) {
        var self = this;

        return self.$n("const_pattern", [const$, pattern], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(ldelim_t), self.$loc(rdelim_t), const$.$loc().$expression().$join(self.$loc(rdelim_t))))
      }, $Default_const_pattern$139.$$arity = 4);
      
      Opal.def(self, '$pin', $Default_pin$140 = function $$pin(pin_t, var$) {
        var self = this;

        return self.$n("pin", [var$], self.$send_unary_op_map(pin_t, var$))
      }, $Default_pin$140.$$arity = 2);
      
      Opal.def(self, '$match_alt', $Default_match_alt$141 = function $$match_alt(left, pipe_t, right) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(left, pipe_t, right);
        return self.$n("match_alt", [left, right], source_map);
      }, $Default_match_alt$141.$$arity = 3);
      
      Opal.def(self, '$match_as', $Default_match_as$142 = function $$match_as(value, assoc_t, as) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(value, assoc_t, as);
        return self.$n("match_as", [value, as], source_map);
      }, $Default_match_as$142.$$arity = 3);
      
      Opal.def(self, '$match_nil_pattern', $Default_match_nil_pattern$143 = function $$match_nil_pattern(dstar_t, nil_t) {
        var self = this;

        return self.$n0("match_nil_pattern", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_match_nil_pattern$143.$$arity = 2);
      
      Opal.def(self, '$match_pair', $Default_match_pair$144 = function $$match_pair(label_type, label, value) {
        var $a, $b, self = this, begin_t = nil, parts = nil, end_t = nil, label_loc = nil, var_name = nil;

        if (label_type['$==']("label")) {
          
          self.$check_duplicate_pattern_key(label['$[]'](0), label['$[]'](1));
          return self.$pair_keyword(label, value);
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (parts = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          label_loc = self.$loc(begin_t).$join(self.$loc(end_t));
          if ($truthy((var_name = self.$static_string(parts)))) {
            self.$check_duplicate_pattern_key(var_name, label_loc)
          } else {
            self.$diagnostic("error", "pm_interp_in_var_name", nil, label_loc)
          };
          return self.$pair_quoted(begin_t, parts, end_t, value);
        }
      }, $Default_match_pair$144.$$arity = 3);
      
      Opal.def(self, '$match_label', $Default_match_label$145 = function $$match_label(label_type, label) {
        var $a, $b, self = this, begin_t = nil, strings = nil, end_t = nil;

        if (label_type['$==']("label")) {
          return self.$match_hash_var(label)
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (strings = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          return self.$match_hash_var_from_str(begin_t, strings, end_t);
        }
      }, $Default_match_label$145.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$check_condition', $Default_check_condition$146 = function $$check_condition(cond) {
        var $a, self = this, $case = nil, lhs = nil, rhs = nil, type = nil, $ret_or_20 = nil;

        return (function() {$case = cond.$type();
        if ("masgn"['$===']($case)) {if ($truthy($rb_le(self.parser.$version(), 23))) {
          return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())
        } else {
          return cond
        }}
        else if ("begin"['$===']($case)) {if (cond.$children().$count()['$=='](1)) {
          return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
        } else {
          return cond
        }}
        else if ("and"['$===']($case) || "or"['$===']($case) || "irange"['$===']($case) || "erange"['$===']($case)) {
        $a = [].concat(Opal.to_a(cond)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
        type = (function() {$case = cond.$type();
        if ("irange"['$===']($case)) {return "iflipflop"}
        else if ("erange"['$===']($case)) {return "eflipflop"}
        else { return nil }})();
        if ($truthy((function() {if ($truthy(($ret_or_20 = ["and", "or"]['$include?'](cond.$type())))) {
          return self.parser.$version()['$=='](18)
        } else {
          return $ret_or_20
        }; return nil; })())) {
          return cond
        } else {
          return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
        };}
        else if ("regexp"['$===']($case)) {return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))}
        else {return cond}})()
      }, $Default_check_condition$146.$$arity = 1);
      
      Opal.def(self, '$check_duplicate_args', $Default_check_duplicate_args$147 = function $$check_duplicate_args(args, map) {
        var $$148, self = this;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        return $send(args, 'each', [], ($$148 = function(this_arg){var self = $$148.$$s == null ? this : $$148.$$s, $case = nil;

          
          
          if (this_arg == null) {
            this_arg = nil;
          };
          return (function() {$case = this_arg.$type();
          if ("arg"['$===']($case) || "optarg"['$===']($case) || "restarg"['$===']($case) || "blockarg"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case) || "shadowarg"['$===']($case)) {return self.$check_duplicate_arg(this_arg, map)}
          else if ("procarg0"['$===']($case)) {if ($truthy(this_arg.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$check_duplicate_arg(this_arg, map)
          } else {
            return self.$check_duplicate_args(this_arg.$children(), map)
          }}
          else if ("mlhs"['$===']($case)) {return self.$check_duplicate_args(this_arg.$children(), map)}
          else { return nil }})();}, $$148.$$s = self, $$148.$$arity = 1, $$148));
      }, $Default_check_duplicate_args$147.$$arity = -2);
      
      Opal.def(self, '$check_duplicate_arg', $Default_check_duplicate_arg$149 = function $$check_duplicate_arg(this_arg, map) {
        var $a, self = this, this_name = nil, that_arg = nil, that_name = nil, $writer = nil;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        $a = [].concat(Opal.to_a(this_arg)), (this_name = ($a[0] == null ? nil : $a[0])), $a;
        that_arg = map['$[]'](this_name);
        $a = [].concat(Opal.to_a(that_arg)), (that_name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(that_arg['$nil?']())) {
          
          $writer = [this_name, this_arg];
          $send(map, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(self['$arg_name_collides?'](this_name, that_name))) {
          return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
        } else {
          return nil
        };
      }, $Default_check_duplicate_arg$149.$$arity = -2);
      
      Opal.def(self, '$validate_no_forward_arg_after_restarg', $Default_validate_no_forward_arg_after_restarg$150 = function $$validate_no_forward_arg_after_restarg(args) {
        var $$151, self = this, restarg = nil, forward_arg = nil, $ret_or_21 = nil;

        
        restarg = nil;
        forward_arg = nil;
        $send(args, 'each', [], ($$151 = function(arg){var self = $$151.$$s == null ? this : $$151.$$s, $case = nil;

          
          
          if (arg == null) {
            arg = nil;
          };
          return (function() {$case = arg.$type();
          if ("restarg"['$===']($case)) {return (restarg = arg)}
          else if ("forward_arg"['$===']($case)) {return (forward_arg = arg)}
          else { return nil }})();}, $$151.$$s = self, $$151.$$arity = 1, $$151));
        if ($truthy((function() {if ($truthy(($ret_or_21 = forward_arg['$nil?']()['$!']()))) {
          return restarg['$nil?']()['$!']()
        } else {
          return $ret_or_21
        }; return nil; })())) {
          return self.$diagnostic("error", "forward_arg_after_restarg", nil, forward_arg.$loc().$expression(), [restarg.$loc().$expression()])
        } else {
          return nil
        };
      }, $Default_validate_no_forward_arg_after_restarg$150.$$arity = 1);
      
      Opal.def(self, '$check_assignment_to_numparam', $Default_check_assignment_to_numparam$152 = function $$check_assignment_to_numparam(name, loc) {
        var self = this, assigning_to_numparam = nil, $ret_or_22 = nil, $ret_or_23 = nil;

        
        if ($truthy($rb_lt(self.parser.$version(), 27))) {
          return nil};
        assigning_to_numparam = (function() {if ($truthy(($ret_or_22 = (function() {if ($truthy(($ret_or_23 = self.parser.$context()['$in_dynamic_block?']()))) {
          return name['$=~'](/^_([1-9])$/)
        } else {
          return $ret_or_23
        }; return nil; })()))) {
          return self.parser.$max_numparam_stack()['$has_numparams?']()
        } else {
          return $ret_or_22
        }; return nil; })();
        if ($truthy(assigning_to_numparam)) {
          return self.$diagnostic("error", "cant_assign_to_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, $Default_check_assignment_to_numparam$152.$$arity = 2);
      
      Opal.def(self, '$check_reserved_for_numparam', $Default_check_reserved_for_numparam$153 = function $$check_reserved_for_numparam(name, loc) {
        var self = this;

        
        if ($truthy($rb_lt(self.parser.$version(), 30))) {
          return nil};
        if ($truthy(name['$=~'](/^_([1-9])$/))) {
          return self.$diagnostic("error", "reserved_for_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, $Default_check_reserved_for_numparam$153.$$arity = 2);
      
      Opal.def(self, '$arg_name_collides?', $Default_arg_name_collides$ques$154 = function(this_name, that_name) {
        var self = this, $case = nil, $ret_or_24 = nil, $ret_or_25 = nil, $ret_or_26 = nil;

        return (function() {$case = self.parser.$version();
        if ((18)['$===']($case)) {return this_name['$=='](that_name)}
        else if ((19)['$===']($case)) {if ($truthy(($ret_or_24 = this_name['$!=']("_")))) {
          return this_name['$=='](that_name)
        } else {
          return $ret_or_24
        }}
        else {if ($truthy(($ret_or_25 = (function() {if ($truthy(($ret_or_26 = this_name))) {
          return this_name['$[]'](0)['$!=']("_")
        } else {
          return $ret_or_26
        }; return nil; })()))) {
          return this_name['$=='](that_name)
        } else {
          return $ret_or_25
        }}})()
      }, $Default_arg_name_collides$ques$154.$$arity = 2);
      
      Opal.def(self, '$check_lvar_name', $Default_check_lvar_name$155 = function $$check_lvar_name(name, loc) {
        var self = this;

        if ($truthy(name['$=~'](/^[[[:lower:]]_][[[:alnum:]]_]*$/))) {
          return nil
        } else {
          return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
        }
      }, $Default_check_lvar_name$155.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_variable', $Default_check_duplicate_pattern_variable$156 = function $$check_duplicate_pattern_variable(name, loc) {
        var self = this;

        
        if ($truthy(name.$to_s()['$start_with?']("_"))) {
          return nil};
        if ($truthy(self.parser.$pattern_variables()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_variable_name", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_variables().$declare(name);
      }, $Default_check_duplicate_pattern_variable$156.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_key', $Default_check_duplicate_pattern_key$157 = function $$check_duplicate_pattern_key(name, loc) {
        var self = this;

        
        if ($truthy(self.parser.$pattern_hash_keys()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_pattern_key", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_hash_keys().$declare(name);
      }, $Default_check_duplicate_pattern_key$157.$$arity = 2);
      
      Opal.def(self, '$n', $Default_n$158 = function $$n(type, children, source_map) {
        var self = this;

        return $$$($$($nesting, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": source_map}))
      }, $Default_n$158.$$arity = 3);
      
      Opal.def(self, '$n0', $Default_n0$159 = function $$n0(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map)
      }, $Default_n0$159.$$arity = 2);
      
      Opal.def(self, '$join_exprs', $Default_join_exprs$160 = function $$join_exprs(left_expr, right_expr) {
        var self = this;

        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression())
      }, $Default_join_exprs$160.$$arity = 2);
      
      Opal.def(self, '$token_map', $Default_token_map$161 = function $$token_map(token) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(self.$loc(token))
      }, $Default_token_map$161.$$arity = 1);
      
      Opal.def(self, '$delimited_string_map', $Default_delimited_string_map$162 = function $$delimited_string_map(string_t) {
        var self = this, str_range = nil, begin_l = nil, end_l = nil;

        
        str_range = self.$loc(string_t);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        end_l = str_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(str_range.$end_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, end_l, self.$loc(string_t));
      }, $Default_delimited_string_map$162.$$arity = 1);
      
      Opal.def(self, '$prefix_string_map', $Default_prefix_string_map$163 = function $$prefix_string_map(symbol) {
        var self = this, str_range = nil, begin_l = nil;

        
        str_range = self.$loc(symbol);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, nil, self.$loc(symbol));
      }, $Default_prefix_string_map$163.$$arity = 1);
      
      Opal.def(self, '$unquoted_map', $Default_unquoted_map$164 = function $$unquoted_map(token) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, self.$loc(token))
      }, $Default_unquoted_map$164.$$arity = 1);
      
      Opal.def(self, '$pair_keyword_map', $Default_pair_keyword_map$165 = function $$pair_keyword_map(key_t, value_e) {
        var self = this, key_range = nil, key_l = nil, colon_l = nil;

        
        key_range = self.$loc(key_t);
        key_l = key_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        colon_l = key_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(key_range.$end_pos(), 1)}));
        return [$$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, key_l), $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      }, $Default_pair_keyword_map$165.$$arity = 2);
      
      Opal.def(self, '$pair_quoted_map', $Default_pair_quoted_map$166 = function $$pair_quoted_map(begin_t, end_t, value_e) {
        var self = this, end_l = nil, quote_l = nil, colon_l = nil;

        
        end_l = self.$loc(end_t);
        quote_l = end_l.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 2), "end_pos": $rb_minus(end_l.$end_pos(), 1)}));
        colon_l = end_l.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 1)}));
        return [[self.$value(end_t), quote_l], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, self.$loc(begin_t).$join(value_e.$loc().$expression()))];
      }, $Default_pair_quoted_map$166.$$arity = 3);
      
      Opal.def(self, '$expr_map', $Default_expr_map$167 = function $$expr_map(loc) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(loc)
      }, $Default_expr_map$167.$$arity = 1);
      
      Opal.def(self, '$collection_map', $Default_collection_map$168 = function $$collection_map(begin_t, parts, end_t) {
        var self = this, $ret_or_27 = nil, expr_l = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_27 = begin_t['$nil?']()))) {
          return $ret_or_27
        } else {
          return end_t['$nil?']()
        }; return nil; })())) {
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else if ($truthy(begin_t['$nil?']()['$!']())) {
            expr_l = self.$loc(begin_t)
          } else if ($truthy(end_t['$nil?']()['$!']())) {
            expr_l = self.$loc(end_t)}
        } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      }, $Default_collection_map$168.$$arity = 3);
      
      Opal.def(self, '$string_map', $Default_string_map$169 = function $$string_map(begin_t, parts, end_t) {
        var self = this, $ret_or_28 = nil, expr_l = nil;

        if ($truthy((function() {if ($truthy(($ret_or_28 = begin_t))) {
          return self.$value(begin_t)['$start_with?']("<<")
        } else {
          return $ret_or_28
        }; return nil; })())) {
          
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return $$$($$$($$($nesting, 'Source'), 'Map'), 'Heredoc').$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
        } else {
          return self.$collection_map(begin_t, parts, end_t)
        }
      }, $Default_string_map$169.$$arity = 3);
      
      Opal.def(self, '$regexp_map', $Default_regexp_map$170 = function $$regexp_map(begin_t, end_t, options_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()))
      }, $Default_regexp_map$170.$$arity = 3);
      
      Opal.def(self, '$constant_map', $Default_constant_map$171 = function $$constant_map(scope, colon2_t, name_t) {
        var self = this, expr_l = nil;

        
        if ($truthy(scope['$nil?']())) {
          expr_l = self.$loc(name_t)
        } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Constant').$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      }, $Default_constant_map$171.$$arity = 3);
      
      Opal.def(self, '$variable_map', $Default_variable_map$172 = function $$variable_map(name_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t))
      }, $Default_variable_map$172.$$arity = 1);
      
      Opal.def(self, '$binary_op_map', $Default_binary_op_map$173 = function $$binary_op_map(left_e, op_t, right_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), self.$join_exprs(left_e, right_e))
      }, $Default_binary_op_map$173.$$arity = 3);
      
      Opal.def(self, '$unary_op_map', $Default_unary_op_map$174 = function $$unary_op_map(op_t, arg_e) {
        var self = this, expr_l = nil;

        
        
        if (arg_e == null) {
          arg_e = nil;
        };
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_unary_op_map$174.$$arity = -2);
      
      Opal.def(self, '$range_map', $Default_range_map$175 = function $$range_map(start_e, op_t, end_e) {
        var self = this, $ret_or_29 = nil, expr_l = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_29 = start_e))) {
          return end_e
        } else {
          return $ret_or_29
        }; return nil; })())) {
          expr_l = self.$join_exprs(start_e, end_e)
        } else if ($truthy(start_e)) {
          expr_l = start_e.$loc().$expression().$join(self.$loc(op_t))
        } else if ($truthy(end_e)) {
          expr_l = self.$loc(op_t).$join(end_e.$loc().$expression())};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_range_map$175.$$arity = 3);
      
      Opal.def(self, '$arg_prefix_map', $Default_arg_prefix_map$176 = function $$arg_prefix_map(op_t, name_t) {
        var self = this, expr_l = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t), expr_l);
      }, $Default_arg_prefix_map$176.$$arity = -2);
      
      Opal.def(self, '$kwarg_map', $Default_kwarg_map$177 = function $$kwarg_map(name_t, value_e) {
        var self = this, label_range = nil, name_range = nil, expr_l = nil;

        
        
        if (value_e == null) {
          value_e = nil;
        };
        label_range = self.$loc(name_t);
        name_range = label_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        if ($truthy(value_e)) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
        } else {
          expr_l = self.$loc(name_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_range, expr_l);
      }, $Default_kwarg_map$177.$$arity = -2);
      
      Opal.def(self, '$module_definition_map', $Default_module_definition_map$178 = function $$module_definition_map(keyword_t, name_e, operator_t, end_t) {
        var self = this, name_l = nil;

        
        if ($truthy(name_e)) {
          name_l = name_e.$loc().$expression()};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      }, $Default_module_definition_map$178.$$arity = 4);
      
      Opal.def(self, '$definition_map', $Default_definition_map$179 = function $$definition_map(keyword_t, operator_t, name_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t), nil, nil)
      }, $Default_definition_map$179.$$arity = 4);
      
      Opal.def(self, '$endless_definition_map', $Default_endless_definition_map$180 = function $$endless_definition_map(keyword_t, operator_t, name_t, assignment_t, body_e) {
        var self = this, body_l = nil;

        
        body_l = body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), nil, self.$loc(assignment_t), body_l);
      }, $Default_endless_definition_map$180.$$arity = 5);
      
      Opal.def(self, '$send_map', $Default_send_map$181 = function $$send_map(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var self = this, begin_l = nil, end_l = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if ($truthy(receiver_e)) {
          begin_l = receiver_e.$loc().$expression()
        } else if ($truthy(selector_t)) {
          begin_l = self.$loc(selector_t)};
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(args['$any?']())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(selector_t)) {
          end_l = self.$loc(selector_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      }, $Default_send_map$181.$$arity = -4);
      
      Opal.def(self, '$var_send_map', $Default_var_send_map$182 = function $$var_send_map(variable_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression())
      }, $Default_var_send_map$182.$$arity = 1);
      
      Opal.def(self, '$send_binary_op_map', $Default_send_binary_op_map$183 = function $$send_binary_op_map(lhs_e, selector_t, rhs_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e))
      }, $Default_send_binary_op_map$183.$$arity = 3);
      
      Opal.def(self, '$send_unary_op_map', $Default_send_unary_op_map$184 = function $$send_unary_op_map(selector_t, arg_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(selector_t)
        } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      }, $Default_send_unary_op_map$184.$$arity = 2);
      
      Opal.def(self, '$index_map', $Default_index_map$185 = function $$index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Index').$new(self.$loc(lbrack_t), self.$loc(rbrack_t), receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_index_map$185.$$arity = 3);
      
      Opal.def(self, '$send_index_map', $Default_send_index_map$186 = function $$send_index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_send_index_map$186.$$arity = 3);
      
      Opal.def(self, '$block_map', $Default_block_map$187 = function $$block_map(receiver_l, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)))
      }, $Default_block_map$187.$$arity = 3);
      
      Opal.def(self, '$keyword_map', $Default_keyword_map$188 = function $$keyword_map(keyword_t, begin_t, args, end_t) {
        var self = this, $ret_or_30 = nil, end_l = nil, $ret_or_31 = nil, $ret_or_32 = nil;

        
        args = (function() {if ($truthy(($ret_or_30 = args))) {
          return $ret_or_30
        } else {
          return []
        }; return nil; })();
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_31 = args['$any?']()))) {
          return args.$last()['$nil?']()['$!']()
        } else {
          return $ret_or_31
        }; return nil; })())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy((function() {if ($truthy(($ret_or_32 = args['$any?']()))) {
          return $rb_gt(args.$count(), 1)
        } else {
          return $ret_or_32
        }; return nil; })())) {
          end_l = args['$[]'](-2).$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_keyword_map$188.$$arity = 4);
      
      Opal.def(self, '$keyword_mod_map', $Default_keyword_mod_map$189 = function $$keyword_mod_map(pre_e, keyword_t, post_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e))
      }, $Default_keyword_mod_map$189.$$arity = 3);
      
      Opal.def(self, '$condition_map', $Default_condition_map$190 = function $$condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var self = this, end_l = nil, $ret_or_33 = nil, $ret_or_34 = nil;

        
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_33 = else_e))) {
          return else_e.$loc().$expression()
        } else {
          return $ret_or_33
        }; return nil; })())) {
          end_l = else_e.$loc().$expression()
        } else if ($truthy(self.$loc(else_t))) {
          end_l = self.$loc(else_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_34 = body_e))) {
          return body_e.$loc().$expression()
        } else {
          return $ret_or_34
        }; return nil; })())) {
          end_l = body_e.$loc().$expression()
        } else if ($truthy(self.$loc(begin_t))) {
          end_l = self.$loc(begin_t)
        } else {
          end_l = cond_e.$loc().$expression()
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_condition_map$190.$$arity = 7);
      
      Opal.def(self, '$ternary_map', $Default_ternary_map$191 = function $$ternary_map(begin_e, question_t, mid_e, colon_t, end_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Ternary').$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e))
      }, $Default_ternary_map$191.$$arity = 5);
      
      Opal.def(self, '$for_map', $Default_for_map$192 = function $$for_map(keyword_t, in_t, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'For').$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)))
      }, $Default_for_map$192.$$arity = 4);
      
      Opal.def(self, '$rescue_body_map', $Default_rescue_body_map$193 = function $$rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var self = this, end_l = nil, $ret_or_35 = nil, $ret_or_36 = nil, $ret_or_37 = nil;

        
        if ($truthy(compstmt_e)) {
          end_l = compstmt_e.$loc().$expression()};
        if ($truthy((function() {if ($truthy(($ret_or_35 = end_l['$nil?']()))) {
          return then_t
        } else {
          return $ret_or_35
        }; return nil; })())) {
          end_l = self.$loc(then_t)};
        if ($truthy((function() {if ($truthy(($ret_or_36 = end_l['$nil?']()))) {
          return exc_var_e
        } else {
          return $ret_or_36
        }; return nil; })())) {
          end_l = exc_var_e.$loc().$expression()};
        if ($truthy((function() {if ($truthy(($ret_or_37 = end_l['$nil?']()))) {
          return exc_list_e
        } else {
          return $ret_or_37
        }; return nil; })())) {
          end_l = exc_list_e.$loc().$expression()};
        if ($truthy(end_l['$nil?']())) {
          end_l = self.$loc(keyword_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'RescueBody').$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_rescue_body_map$193.$$arity = 6);
      
      Opal.def(self, '$eh_keyword_map', $Default_eh_keyword_map$194 = function $$eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var self = this, begin_l = nil, end_l = nil;

        
        if ($truthy(compstmt_e['$nil?']())) {
          if ($truthy(keyword_t['$nil?']())) {
            begin_l = body_es.$first().$loc().$expression()
          } else {
            begin_l = self.$loc(keyword_t)
          }
        } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if ($truthy(else_t)) {
          if ($truthy(else_e['$nil?']())) {
            end_l = self.$loc(else_t)
          } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ($truthy(body_es.$last()['$nil?']()['$!']())) {
          end_l = body_es.$last().$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      }, $Default_eh_keyword_map$194.$$arity = 5);
      
      Opal.def(self, '$guard_map', $Default_guard_map$195 = function $$guard_map(keyword_t, guard_body_e) {
        var self = this, keyword_l = nil, guard_body_l = nil;

        
        keyword_l = self.$loc(keyword_t);
        guard_body_l = guard_body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(keyword_l, nil, nil, keyword_l.$join(guard_body_l));
      }, $Default_guard_map$195.$$arity = 2);
      
      Opal.def(self, '$static_string', $Default_static_string$196 = function $$static_string(nodes) {try {

        var $$197, self = this;

        return $send(nodes, 'map', [], ($$197 = function(node){var self = $$197.$$s == null ? this : $$197.$$s, $case = nil, string = nil;

          
          
          if (node == null) {
            node = nil;
          };
          return (function() {$case = node.$type();
          if ("str"['$===']($case)) {return node.$children()['$[]'](0)}
          else if ("begin"['$===']($case)) {if ($truthy((string = self.$static_string(node.$children())))) {
            return string
          } else {
            Opal.ret(nil)
          }}
          else {Opal.ret(nil)}})();}, $$197.$$s = self, $$197.$$arity = 1, $$197)).$join()
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $Default_static_string$196.$$arity = 1);
      
      Opal.def(self, '$static_regexp', $Default_static_regexp$198 = function $$static_regexp(parts, options) {
        var self = this, source = nil;

        
        source = self.$static_string(parts);
        if ($truthy(source['$nil?']())) {
          return nil};
        source = (function() {
        if ($truthy(options.$children()['$include?']("u"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))}
        else if ($truthy(options.$children()['$include?']("e"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'EUC_JP'))}
        else if ($truthy(options.$children()['$include?']("s"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'WINDOWS_31J'))}
        else if ($truthy(options.$children()['$include?']("n"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'BINARY'))}
        else {return source}})();
        return $$($nesting, 'Regexp').$new(source, (function() {if ($truthy(options.$children()['$include?']("x"))) {
          return $$$($$($nesting, 'Regexp'), 'EXTENDED')
        } else {
          return nil
        }; return nil; })());
      }, $Default_static_regexp$198.$$arity = 2);
      
      Opal.def(self, '$static_regexp_node', $Default_static_regexp_node$199 = function $$static_regexp_node(node) {
        var $a, self = this, parts = nil, options = nil;

        if (node.$type()['$==']("regexp")) {
          
          $a = [node.$children()['$[]']($range(0, -2, false)), node.$children()['$[]'](-1)], (parts = $a[0]), (options = $a[1]), $a;
          return self.$static_regexp(parts, options);
        } else {
          return nil
        }
      }, $Default_static_regexp_node$199.$$arity = 1);
      
      Opal.def(self, '$collapse_string_parts?', $Default_collapse_string_parts$ques$200 = function(parts) {
        var self = this, $ret_or_38 = nil;

        if ($truthy(($ret_or_38 = parts['$one?']()))) {
          return ["str", "dstr"]['$include?'](parts.$first().$type())
        } else {
          return $ret_or_38
        }
      }, $Default_collapse_string_parts$ques$200.$$arity = 1);
      
      Opal.def(self, '$value', $Default_value$201 = function $$value(token) {
        var self = this;

        return token['$[]'](0)
      }, $Default_value$201.$$arity = 1);
      
      Opal.def(self, '$string_value', $Default_string_value$202 = function $$string_value(token) {
        var self = this;

        
        if ($truthy(token['$[]'](0)['$valid_encoding?']())) {
        } else {
          self.$diagnostic("error", "invalid_encoding", nil, token['$[]'](1))
        };
        return token['$[]'](0);
      }, $Default_string_value$202.$$arity = 1);
      
      Opal.def(self, '$loc', $Default_loc$203 = function $$loc(token) {
        var self = this, $ret_or_39 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_39 = token))) {
          return token['$[]'](0)
        } else {
          return $ret_or_39
        }; return nil; })())) {
          return token['$[]'](1)
        } else {
          return nil
        }
      }, $Default_loc$203.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Default_diagnostic$204 = function $$diagnostic(type, reason, arguments$, location, highlights) {
        var self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        self.parser.$diagnostics().$process($$($nesting, 'Diagnostic').$new(type, reason, arguments$, location, highlights));
        if (type['$==']("error")) {
          return self.parser.$send("yyerror")
        } else {
          return nil
        };
      }, $Default_diagnostic$204.$$arity = -5);
      
      Opal.def(self, '$validate_definee', $Default_validate_definee$205 = function $$validate_definee(definee) {
        var self = this, $case = nil;

        return (function() {$case = definee.$type();
        if ("int"['$===']($case) || "str"['$===']($case) || "dstr"['$===']($case) || "sym"['$===']($case) || "dsym"['$===']($case) || "regexp"['$===']($case) || "array"['$===']($case) || "hash"['$===']($case)) {
        self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression());
        return false;}
        else {return true}})()
      }, $Default_validate_definee$205.$$arity = 1);
      
      Opal.def(self, '$rewrite_hash_args_to_kwargs', $Default_rewrite_hash_args_to_kwargs$206 = function $$rewrite_hash_args_to_kwargs(args) {
        var self = this, $ret_or_40 = nil, $writer = nil, $ret_or_41 = nil, $ret_or_42 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_40 = args['$any?']()))) {
          return self['$kwargs?'](args.$last())
        } else {
          return $ret_or_40
        }; return nil; })())) {
          
          $writer = [$rb_minus(args.$length(), 1), args['$[]']($rb_minus(args.$length(), 1)).$updated("kwargs")];
          $send(args, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy((function() {if ($truthy(($ret_or_41 = (function() {if ($truthy(($ret_or_42 = $rb_gt(args.$length(), 1)))) {
          return args.$last().$type()['$==']("block_pass")
        } else {
          return $ret_or_42
        }; return nil; })()))) {
          return self['$kwargs?'](args['$[]']($rb_minus(args.$length(), 2)))
        } else {
          return $ret_or_41
        }; return nil; })())) {
          
          $writer = [$rb_minus(args.$length(), 2), args['$[]']($rb_minus(args.$length(), 2)).$updated("kwargs")];
          $send(args, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        }
      }, $Default_rewrite_hash_args_to_kwargs$206.$$arity = 1);
      return (Opal.def(self, '$kwargs?', $Default_kwargs$ques$207 = function(node) {
        var self = this, $ret_or_43 = nil, $ret_or_44 = nil;

        if ($truthy(($ret_or_43 = (function() {if ($truthy(($ret_or_44 = node.$type()['$==']("hash")))) {
          return node.$loc().$begin()['$nil?']()
        } else {
          return $ret_or_44
        }; return nil; })()))) {
          return node.$loc().$end()['$nil?']()
        } else {
          return $ret_or_43
        }
      }, $Default_kwargs$ques$207.$$arity = 1), nil) && 'kwargs?';
    })($$($nesting, 'Builders'), null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/context"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$reset', '$attr_accessor', '$in_block', '$in_lambda']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_initialize$1, $Context_reset$2, $Context_in_dynamic_block$ques$3;

      
      Opal.const_set($nesting[0], 'FLAGS', ["in_defined", "in_kwarg", "in_argdef", "in_def", "in_class", "in_block", "in_lambda"]);
      
      Opal.def(self, '$initialize', $Context_initialize$1 = function $$initialize() {
        var self = this;

        return self.$reset()
      }, $Context_initialize$1.$$arity = 0);
      
      Opal.def(self, '$reset', $Context_reset$2 = function $$reset() {
        var self = this;

        
        self.in_defined = false;
        self.in_kwarg = false;
        self.in_argdef = false;
        self.in_def = false;
        self.in_class = false;
        self.in_block = false;
        return (self.in_lambda = false);
      }, $Context_reset$2.$$arity = 0);
      $send(self, 'attr_accessor', Opal.to_a($$($nesting, 'FLAGS')));
      return (Opal.def(self, '$in_dynamic_block?', $Context_in_dynamic_block$ques$3 = function() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$in_block()))) {
          return $ret_or_1
        } else {
          return self.$in_lambda()
        }
      }, $Context_in_dynamic_block$ques$3.$$arity = 0), nil) && 'in_dynamic_block?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/max_numparam_stack"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$==', '$size', '$set', '$top', '$>', '$max', '$[]', '$last', '$push', '$pop', '$private', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'MaxNumparamStack');

      var $nesting = [self].concat($parent_nesting), $MaxNumparamStack_initialize$1, $MaxNumparamStack_empty$ques$2, $MaxNumparamStack_has_ordinary_params$excl$3, $MaxNumparamStack_has_ordinary_params$ques$4, $MaxNumparamStack_has_numparams$ques$5, $MaxNumparamStack_register$6, $MaxNumparamStack_top$7, $MaxNumparamStack_push$8, $MaxNumparamStack_pop$9, $MaxNumparamStack_set$10;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      Opal.const_set($nesting[0], 'ORDINARY_PARAMS', -1);
      
      Opal.def(self, '$initialize', $MaxNumparamStack_initialize$1 = function $$initialize() {
        var self = this;

        return (self.stack = [])
      }, $MaxNumparamStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$empty?', $MaxNumparamStack_empty$ques$2 = function() {
        var self = this;

        return self.stack.$size()['$=='](0)
      }, $MaxNumparamStack_empty$ques$2.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params!', $MaxNumparamStack_has_ordinary_params$excl$3 = function() {
        var self = this;

        return self.$set($$($nesting, 'ORDINARY_PARAMS'))
      }, $MaxNumparamStack_has_ordinary_params$excl$3.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params?', $MaxNumparamStack_has_ordinary_params$ques$4 = function() {
        var self = this;

        return self.$top()['$==']($$($nesting, 'ORDINARY_PARAMS'))
      }, $MaxNumparamStack_has_ordinary_params$ques$4.$$arity = 0);
      
      Opal.def(self, '$has_numparams?', $MaxNumparamStack_has_numparams$ques$5 = function() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$top()))) {
          return $rb_gt(self.$top(), 0)
        } else {
          return $ret_or_1
        }
      }, $MaxNumparamStack_has_numparams$ques$5.$$arity = 0);
      
      Opal.def(self, '$register', $MaxNumparamStack_register$6 = function $$register(numparam) {
        var self = this;

        return self.$set([self.$top(), numparam].$max())
      }, $MaxNumparamStack_register$6.$$arity = 1);
      
      Opal.def(self, '$top', $MaxNumparamStack_top$7 = function $$top() {
        var self = this;

        return self.stack.$last()['$[]']("value")
      }, $MaxNumparamStack_top$7.$$arity = 0);
      
      Opal.def(self, '$push', $MaxNumparamStack_push$8 = function $$push($kwargs) {
        var static$, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'static')) {
          throw Opal.ArgumentError.$new('missing keyword: static');
        }
        static$ = $kwargs.$$smap["static"];;
        return self.stack.$push($hash2(["value", "static"], {"value": 0, "static": static$}));
      }, $MaxNumparamStack_push$8.$$arity = 1);
      
      Opal.def(self, '$pop', $MaxNumparamStack_pop$9 = function $$pop() {
        var self = this;

        return self.stack.$pop()['$[]']("value")
      }, $MaxNumparamStack_pop$9.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$set', $MaxNumparamStack_set$10 = function $$set(value) {
        var self = this, $writer = nil;

        
        $writer = ["value", value];
        $send(self.stack.$last(), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $MaxNumparamStack_set$10.$$arity = 1), nil) && 'set';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/current_arg_stack"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$==', '$size', '$<<', '$-', '$length', '$[]=', '$pop', '$clear', '$last']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CurrentArgStack');

      var $nesting = [self].concat($parent_nesting), $CurrentArgStack_initialize$1, $CurrentArgStack_empty$ques$2, $CurrentArgStack_push$3, $CurrentArgStack_set$4, $CurrentArgStack_pop$5, $CurrentArgStack_reset$6, $CurrentArgStack_top$7;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $CurrentArgStack_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, $CurrentArgStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$empty?', $CurrentArgStack_empty$ques$2 = function() {
        var self = this;

        return self.stack.$size()['$=='](0)
      }, $CurrentArgStack_empty$ques$2.$$arity = 0);
      
      Opal.def(self, '$push', $CurrentArgStack_push$3 = function $$push(value) {
        var self = this;

        return self.stack['$<<'](value)
      }, $CurrentArgStack_push$3.$$arity = 1);
      
      Opal.def(self, '$set', $CurrentArgStack_set$4 = function $$set(value) {
        var self = this, $writer = nil;

        
        $writer = [$rb_minus(self.stack.$length(), 1), value];
        $send(self.stack, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $CurrentArgStack_set$4.$$arity = 1);
      
      Opal.def(self, '$pop', $CurrentArgStack_pop$5 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $CurrentArgStack_pop$5.$$arity = 0);
      
      Opal.def(self, '$reset', $CurrentArgStack_reset$6 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $CurrentArgStack_reset$6.$$arity = 0);
      return (Opal.def(self, '$top', $CurrentArgStack_top$7 = function $$top() {
        var self = this;

        return self.stack.$last()
      }, $CurrentArgStack_top$7.$$arity = 0), nil) && 'top';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/variables_stack"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$push', '$empty?', '$<<', '$new', '$pop', '$clear', '$last', '$to_sym', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'VariablesStack');

      var $nesting = [self].concat($parent_nesting), $VariablesStack_initialize$1, $VariablesStack_empty$ques$2, $VariablesStack_push$3, $VariablesStack_pop$4, $VariablesStack_reset$5, $VariablesStack_declare$6, $VariablesStack_declared$ques$7;

      self.$$prototype.stack = nil;
      
      
      Opal.def(self, '$initialize', $VariablesStack_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$push();
      }, $VariablesStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$empty?', $VariablesStack_empty$ques$2 = function() {
        var self = this;

        return self.stack['$empty?']()
      }, $VariablesStack_empty$ques$2.$$arity = 0);
      
      Opal.def(self, '$push', $VariablesStack_push$3 = function $$push() {
        var self = this;

        return self.stack['$<<']($$($nesting, 'Set').$new())
      }, $VariablesStack_push$3.$$arity = 0);
      
      Opal.def(self, '$pop', $VariablesStack_pop$4 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $VariablesStack_pop$4.$$arity = 0);
      
      Opal.def(self, '$reset', $VariablesStack_reset$5 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $VariablesStack_reset$5.$$arity = 0);
      
      Opal.def(self, '$declare', $VariablesStack_declare$6 = function $$declare(name) {
        var self = this;

        return self.stack.$last()['$<<'](name.$to_sym())
      }, $VariablesStack_declare$6.$$arity = 1);
      return (Opal.def(self, '$declared?', $VariablesStack_declared$ques$7 = function(name) {
        var self = this;

        return self.stack.$last()['$include?'](name.$to_sym())
      }, $VariablesStack_declared$ques$7.$$arity = 1), nil) && 'declared?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$default_parser', '$setup_source_buffer', '$default_encoding', '$parse', '$parse_with_comments', '$read', '$new', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$lambda', '$puts', '$render', '$consumer=', '$force_encoding', '$dup', '$==', '$name', '$raw_source=', '$source=', '$private_class_method', '$attr_reader', '$version', '$diagnostics=', '$static_env=', '$context=', '$parser=', '$class', '$[]', '$reset', '$source_buffer=', '$do_parse', '$comments=', '$comments', '$tokens=', '$!', '$raise', '$tokens', '$private', '$advance', '$===', '$diagnostic', '$map', '$process', '$yyerror', '$token_to_str']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Base');

      var $nesting = [self].concat($parent_nesting), $Base_parse$1, $Base_parse_with_comments$2, $Base_parse_file$3, $Base_parse_file_with_comments$4, $Base_default_parser$5, $Base_setup_source_buffer$7, $Base_initialize$8, $Base_reset$9, $Base_parse$10, $Base_parse_with_comments$11, $Base_tokenize$12, $Base_next_token$13, $Base_check_kwarg_name$14, $Base_diagnostic$15, $Base_on_error$17;

      self.$$prototype.diagnostics = self.$$prototype.lexer = self.$$prototype.static_env = self.$$prototype.context = self.$$prototype.builder = self.$$prototype.current_arg_stack = self.$$prototype.pattern_variables = self.$$prototype.pattern_hash_keys = nil;
      
      Opal.defs(self, '$parse', $Base_parse$1 = function $$parse(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse(source_buffer);
      }, $Base_parse$1.$$arity = -2);
      Opal.defs(self, '$parse_with_comments', $Base_parse_with_comments$2 = function $$parse_with_comments(string, file, line) {
        var self = this, parser = nil, source_buffer = nil;

        
        
        if (file == null) {
          file = "(string)";
        };
        
        if (line == null) {
          line = 1;
        };
        parser = self.$default_parser();
        source_buffer = self.$setup_source_buffer(file, line, string, parser.$default_encoding());
        return parser.$parse_with_comments(source_buffer);
      }, $Base_parse_with_comments$2.$$arity = -2);
      Opal.defs(self, '$parse_file', $Base_parse_file$3 = function $$parse_file(filename) {
        var self = this;

        return self.$parse($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file$3.$$arity = 1);
      Opal.defs(self, '$parse_file_with_comments', $Base_parse_file_with_comments$4 = function $$parse_file_with_comments(filename) {
        var self = this;

        return self.$parse_with_comments($$($nesting, 'File').$read(filename), filename)
      }, $Base_parse_file_with_comments$4.$$arity = 1);
      Opal.defs(self, '$default_parser', $Base_default_parser$5 = function $$default_parser() {
        var $$6, self = this, parser = nil, $writer = nil;

        
        parser = self.$new();
        
        $writer = [true];
        $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [true];
        $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$send(self, 'lambda', [], ($$6 = function(diagnostic){var self = $$6.$$s == null ? this : $$6.$$s;
          if ($gvars.stderr == null) $gvars.stderr = nil;

          
          
          if (diagnostic == null) {
            diagnostic = nil;
          };
          return $gvars.stderr.$puts(diagnostic.$render());}, $$6.$$s = self, $$6.$$arity = 1, $$6))];
        $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return parser;
      }, $Base_default_parser$5.$$arity = 0);
      Opal.defs(self, '$setup_source_buffer', $Base_setup_source_buffer$7 = function $$setup_source_buffer(file, line, string, encoding) {
        var self = this, source_buffer = nil, $writer = nil;

        
        string = string.$dup().$force_encoding(encoding);
        source_buffer = $$$($$($nesting, 'Source'), 'Buffer').$new(file, line);
        if (self.$name()['$==']("Parser::Ruby18")) {
          
          $writer = [string];
          $send(source_buffer, 'raw_source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [string];
          $send(source_buffer, 'source=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return source_buffer;
      }, $Base_setup_source_buffer$7.$$arity = 4);
      self.$private_class_method("setup_source_buffer");
      self.$attr_reader("lexer");
      self.$attr_reader("diagnostics");
      self.$attr_reader("builder");
      self.$attr_reader("static_env");
      self.$attr_reader("source_buffer");
      self.$attr_reader("context");
      self.$attr_reader("max_numparam_stack");
      self.$attr_reader("current_arg_stack");
      self.$attr_reader("pattern_variables");
      self.$attr_reader("pattern_hash_keys");
      
      Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(builder) {
        var self = this, $writer = nil, $ret_or_1 = nil;

        
        
        if (builder == null) {
          builder = $$$($$$($$($nesting, 'Parser'), 'Builders'), 'Default').$new();
        };
        self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
        self.static_env = $$($nesting, 'StaticEnvironment').$new();
        self.context = $$($nesting, 'Context').$new();
        self.max_numparam_stack = $$($nesting, 'MaxNumparamStack').$new();
        self.current_arg_stack = $$($nesting, 'CurrentArgStack').$new();
        self.pattern_variables = $$($nesting, 'VariablesStack').$new();
        self.pattern_hash_keys = $$($nesting, 'VariablesStack').$new();
        self.lexer = $$($nesting, 'Lexer').$new(self.$version());
        
        $writer = [self.diagnostics];
        $send(self.lexer, 'diagnostics=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.static_env];
        $send(self.lexer, 'static_env=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [self.context];
        $send(self.lexer, 'context=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.builder = builder;
        
        $writer = [self];
        $send(self.builder, 'parser=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.last_token = nil;
        if ($truthy((function() {if ($truthy(($ret_or_1 = $$$(self.$class(), 'Racc_debug_parser')))) {
          return $$($nesting, 'ENV')['$[]']("RACC_DEBUG")
        } else {
          return $ret_or_1
        }; return nil; })())) {
          self.yydebug = true};
        return self.$reset();
      }, $Base_initialize$8.$$arity = -1);
      
      Opal.def(self, '$reset', $Base_reset$9 = function $$reset() {
        var self = this;

        
        self.source_buffer = nil;
        self.lexer.$reset();
        self.static_env.$reset();
        self.context.$reset();
        self.current_arg_stack.$reset();
        self.pattern_variables.$reset();
        self.pattern_hash_keys.$reset();
        return self;
      }, $Base_reset$9.$$arity = 0);
      
      Opal.def(self, '$parse', $Base_parse$10 = function $$parse(source_buffer) {
        var self = this, $writer = nil, $ret_or_2 = nil;

        return (function() { try {
        
        
        $writer = [source_buffer];
        $send(self.lexer, 'source_buffer=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.source_buffer = source_buffer;
        if ($truthy(($ret_or_2 = self.$do_parse()))) {
          return $ret_or_2
        } else {
          return nil
        };
        } finally {
          ((self.source_buffer = nil), (($writer = [nil]), $send(self.lexer, 'source_buffer=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })()
      }, $Base_parse$10.$$arity = 1);
      
      Opal.def(self, '$parse_with_comments', $Base_parse_with_comments$11 = function $$parse_with_comments(source_buffer) {
        var self = this, $writer = nil;

        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return [self.$parse(source_buffer), self.lexer.$comments()];
        } finally {
          (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        }; })()
      }, $Base_parse_with_comments$11.$$arity = 1);
      
      Opal.def(self, '$tokenize', $Base_tokenize$12 = function $$tokenize(source_buffer, recover) {
        var self = this, $writer = nil, ast = nil;

        
        
        if (recover == null) {
          recover = false;
        };
        return (function() { try {
        
        
        $writer = [[]];
        $send(self.lexer, 'tokens=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[]];
        $send(self.lexer, 'comments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        try {
          ast = self.$parse(source_buffer)
        } catch ($err) {
          if (Opal.rescue($err, [$$$($$($nesting, 'Parser'), 'SyntaxError')])) {
            try {
              if ($truthy(recover['$!']())) {
                self.$raise()}
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        return [ast, self.lexer.$comments(), self.lexer.$tokens()];
        } finally {
          ((($writer = [nil]), $send(self.lexer, 'tokens=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (($writer = [nil]), $send(self.lexer, 'comments=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }; })();
      }, $Base_tokenize$12.$$arity = -2);
      self.$private();
      
      Opal.def(self, '$next_token', $Base_next_token$13 = function $$next_token() {
        var self = this, token = nil;

        
        token = self.lexer.$advance();
        self.last_token = token;
        return token;
      }, $Base_next_token$13.$$arity = 0);
      
      Opal.def(self, '$check_kwarg_name', $Base_check_kwarg_name$14 = function $$check_kwarg_name(name_t) {
        var self = this, $case = nil;

        return (function() {$case = name_t['$[]'](0);
        if (/^[a-z_]/['$===']($case)) {return nil}
        else if (/^[A-Z]/['$===']($case)) {return self.$diagnostic("error", "argument_const", nil, name_t)}
        else { return nil }})()
      }, $Base_check_kwarg_name$14.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Base_diagnostic$15 = function $$diagnostic(level, reason, arguments$, location_t, highlights_ts) {
        var $a, $b, $$16, self = this, _ = nil, location = nil, highlights = nil;

        
        
        if (highlights_ts == null) {
          highlights_ts = [];
        };
        $b = location_t, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        highlights = $send(highlights_ts, 'map', [], ($$16 = function(token){var self = $$16.$$s == null ? this : $$16.$$s, $c, $d, range = nil;

          
          
          if (token == null) {
            token = nil;
          };
          $d = token, $c = Opal.to_ary($d), (_ = ($c[0] == null ? nil : $c[0])), (range = ($c[1] == null ? nil : $c[1])), $d;
          return range;}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        self.diagnostics.$process($$($nesting, 'Diagnostic').$new(level, reason, arguments$, location, highlights));
        if (level['$==']("error")) {
          return self.$yyerror()
        } else {
          return nil
        };
      }, $Base_diagnostic$15.$$arity = -5);
      return (Opal.def(self, '$on_error', $Base_on_error$17 = function $$on_error(error_token_id, error_value, value_stack) {
        var $a, $b, self = this, token_name = nil, _ = nil, location = nil;

        
        token_name = self.$token_to_str(error_token_id);
        $b = error_value, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (location = ($a[1] == null ? nil : $a[1])), $b;
        return self.diagnostics.$process($$($nesting, 'Diagnostic').$new("error", "unexpected_token", $hash2(["token"], {"token": token_name}), location));
      }, $Base_on_error$17.$$arity = 3), nil) && 'on_error';
    })($nesting[0], $$$($$($nesting, 'Racc'), 'Parser'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/rewriter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace', '$freeze', '$join', '$extend', '$warn_of_deprecation', '$class', '$warned_of_deprecation=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_rewrite$1, $Rewriter_assignment$ques$2, $Rewriter_remove$3, $Rewriter_wrap$4, $Rewriter_insert_before$5, $Rewriter_insert_after$6, $Rewriter_replace$7, $Rewriter_initialize$8;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $Rewriter_rewrite$1 = function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$($nesting, 'Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $Rewriter_rewrite$1.$$arity = 2);
      
      Opal.def(self, '$assignment?', $Rewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $Rewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $Rewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $Rewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $Rewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $Rewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $Rewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $Rewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $Rewriter_insert_after$6.$$arity = 2);
      
      Opal.def(self, '$replace', $Rewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $Rewriter_replace$7.$$arity = 2);
      Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$($nesting, 'Deprecation'));
      return (Opal.def(self, '$initialize', $Rewriter_initialize$8 = function $$initialize($a) {
        var $post_args, $iter = $Rewriter_initialize$8.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Rewriter_initialize$8.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        ;
        self.$class().$warn_of_deprecation();
        
        $writer = [true];
        $send($$$($$($nesting, 'Source'), 'Rewriter'), 'warned_of_deprecation=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send2(self, $find_super(self, 'initialize', $Rewriter_initialize$8, false, true), 'initialize', $zuper, $iter);
      }, $Rewriter_initialize$8.$$arity = -1), nil) && 'initialize';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/tree_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $TreeRewriter_rewrite$1, $TreeRewriter_assignment$ques$2, $TreeRewriter_remove$3, $TreeRewriter_wrap$4, $TreeRewriter_insert_before$5, $TreeRewriter_insert_after$6, $TreeRewriter_replace$7;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $TreeRewriter_rewrite$1 = function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        policy = Opal.kwrestargs($kwargs, {});;
        self.source_rewriter = $$$($$$($$($nesting, 'Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $TreeRewriter_rewrite$1.$$arity = -3);
      
      Opal.def(self, '$assignment?', $TreeRewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $TreeRewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $TreeRewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $TreeRewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $TreeRewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $TreeRewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $TreeRewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $TreeRewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $TreeRewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $TreeRewriter_insert_after$6.$$arity = 2);
      return (Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $TreeRewriter_replace$7.$$arity = 2), nil) && 'replace';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$=~', '$require', '$raise']);
  
  if ($truthy($$($nesting, 'RUBY_VERSION')['$=~'](/^1\.[89]\./))) {
    
    self.$require("parser/version");
    self.$raise($$($nesting, 'LoadError'), "" + "parser v" + ($$$($$($nesting, 'Parser'), 'VERSION')) + " cannot run on Ruby " + ($$($nesting, 'RUBY_VERSION')) + ".\n" + "Please upgrade to Ruby 2.0.0 or higher, or use an older version of the parser gem.\n");};
  self.$require("set");
  self.$require("racc/parser");
  self.$require("ast");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    
    self.$require("parser/version");
    self.$require("parser/messages");
    self.$require("parser/deprecation");
    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/ast/node");
      self.$require("parser/ast/processor");
      return self.$require("parser/meta");
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      
      self.$require("parser/source/buffer");
      self.$require("parser/source/range");
      self.$require("parser/source/comment");
      self.$require("parser/source/comment/associator");
      self.$require("parser/source/rewriter");
      self.$require("parser/source/rewriter/action");
      self.$require("parser/source/tree_rewriter");
      self.$require("parser/source/tree_rewriter/action");
      self.$require("parser/source/map");
      self.$require("parser/source/map/operator");
      self.$require("parser/source/map/collection");
      self.$require("parser/source/map/constant");
      self.$require("parser/source/map/variable");
      self.$require("parser/source/map/keyword");
      self.$require("parser/source/map/definition");
      self.$require("parser/source/map/method_definition");
      self.$require("parser/source/map/send");
      self.$require("parser/source/map/index");
      self.$require("parser/source/map/condition");
      self.$require("parser/source/map/ternary");
      self.$require("parser/source/map/for");
      self.$require("parser/source/map/rescue_body");
      self.$require("parser/source/map/heredoc");
      return self.$require("parser/source/map/objc_kwarg");
    })($nesting[0], $nesting);
    self.$require("parser/syntax_error");
    self.$require("parser/clobbering_error");
    self.$require("parser/diagnostic");
    self.$require("parser/diagnostic/engine");
    self.$require("parser/static_environment");
    self.$require("parser/lexer");
    self.$require("parser/lexer/literal");
    self.$require("parser/lexer/stack_state");
    self.$require("parser/lexer/dedenter");
    (function($base, $parent_nesting) {
      var self = $module($base, 'Builders');

      var $nesting = [self].concat($parent_nesting);

      return self.$require("parser/builders/default")
    })($nesting[0], $nesting);
    self.$require("parser/context");
    self.$require("parser/max_numparam_stack");
    self.$require("parser/current_arg_stack");
    self.$require("parser/variables_stack");
    self.$require("parser/base");
    self.$require("parser/rewriter");
    return self.$require("parser/tree_rewriter");
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["parser/ruby30"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$!', '$include?', '$[]', '$end_with?', '$diagnostic', '$extend_static', '$push', '$cmdarg', '$cond', '$unextend', '$pop', '$children', '$=~', '$declared?', '$static_env', '$in_dynamic_block?', '$expression', '$loc', '$has_ordinary_params?', '$max_numparam_stack', '$dup', '$stack', '$reverse_each', '$>', '$declare', '$register', '$to_i', '$new', '$each', '$split', '$empty?', '$[]=', '$-', '$+', '$compstmt', '$<<', '$preexe', '$nil?', '$begin_body', '$state=', '$alias', '$gvar', '$back_ref', '$undef_method', '$condition_mod', '$loop_mod', '$rescue_body', '$postexe', '$multi_assign', '$assign', '$array', '$op_assign', '$index', '$call_method', '$const_op_assignable', '$const_fetch', '$logical_op', '$not_op', '$command_start=', '$in_kwarg', '$in_kwarg=', '$match_pattern', '$match_pattern_p', '$local_push', '$in_def=', '$in_block=', '$in_block', '$block', '$keyword_cmd', '$multi_lhs', '$begin', '$splat', '$concat', '$assignable', '$index_asgn', '$==', '$attr_asgn', '$const_global', '$const', '$symbol_internal', '$range_inclusive', '$range_exclusive', '$binary_op', '$unary_op', '$match_op', '$ternary', '$endless_method_name', '$def_endless_method', '$local_pop', '$in_def', '$def_endless_singleton', '$associate', '$declared_forward_args?', '$forwarded_args', '$block_pass', '$begin_keyword', '$condition', '$loop', '$case', '$case_match', '$for', '$in_class=', '$def_class', '$in_class', '$def_sclass', '$def_module', '$def_method', '$def_singleton', '$context', '$in_lambda', '$arg', '$restarg', '$size', '$procarg0', '$args', '$has_ordinary_params!', '$set', '$shadowarg', '$extend_dynamic', '$in_lambda=', '$call_lambda', '$has_numparams?', '$numargs', '$top', '$any?', '$when', '$in_pattern', '$if_guard', '$unless_guard', '$match_with_trailing_comma', '$array_pattern', '$find_pattern', '$hash_pattern', '$match_as', '$match_alt', '$const_pattern', '$match_rest', '$match_pair', '$match_label', '$match_nil_pattern', '$accessible', '$match_var', '$ident', '$pin', '$string_compose', '$dedent_string', '$dedent_level', '$string', '$character', '$xstring_compose', '$regexp_options', '$regexp_compose', '$words_compose', '$word', '$symbols_compose', '$string_internal', '$ivar', '$cvar', '$symbol', '$symbol_compose', '$respond_to?', '$negate', '$unary_num', '$integer', '$float', '$rational', '$complex', '$nil', '$self', '$true', '$false', '$__FILE__', '$__LINE__', '$__ENCODING__', '$nth_ref', '$forward_arg', '$declare_forward_args', '$forward_only_args', '$check_kwarg_name', '$kwoptarg', '$kwarg', '$kwnilarg', '$kwrestarg', '$optarg', '$blockarg', '$pair', '$pair_keyword', '$pair_quoted', '$kwsplat', '$yyerrok']);
  
  self.$require("racc/parser.rb");
  self.$require("parser");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Ruby30');

      var $nesting = [self].concat($parent_nesting), $Ruby30_version$1, $Ruby30_default_encoding$2, $Ruby30_endless_method_name$3, $Ruby30_local_push$4, $Ruby30_local_pop$5, $Ruby30_try_declare_numparam$6, $Ruby30$8, $Ruby30$10, $Ruby30$12, $Ruby30$14, $Ruby30__reduce_1$16, $Ruby30__reduce_2$17, $Ruby30__reduce_3$18, $Ruby30__reduce_4$19, $Ruby30__reduce_5$20, $Ruby30__reduce_6$21, $Ruby30__reduce_7$22, $Ruby30__reduce_9$23, $Ruby30__reduce_10$24, $Ruby30__reduce_11$25, $Ruby30__reduce_12$26, $Ruby30__reduce_13$27, $Ruby30__reduce_14$28, $Ruby30__reduce_15$29, $Ruby30__reduce_16$30, $Ruby30__reduce_18$31, $Ruby30__reduce_19$32, $Ruby30__reduce_20$33, $Ruby30__reduce_21$34, $Ruby30__reduce_22$35, $Ruby30__reduce_23$36, $Ruby30__reduce_24$37, $Ruby30__reduce_25$38, $Ruby30__reduce_26$39, $Ruby30__reduce_27$40, $Ruby30__reduce_28$41, $Ruby30__reduce_29$42, $Ruby30__reduce_30$43, $Ruby30__reduce_32$44, $Ruby30__reduce_33$45, $Ruby30__reduce_34$46, $Ruby30__reduce_35$47, $Ruby30__reduce_37$48, $Ruby30__reduce_38$49, $Ruby30__reduce_39$50, $Ruby30__reduce_40$51, $Ruby30__reduce_41$52, $Ruby30__reduce_42$53, $Ruby30__reduce_43$54, $Ruby30__reduce_44$55, $Ruby30__reduce_46$56, $Ruby30__reduce_49$57, $Ruby30__reduce_50$58, $Ruby30__reduce_51$59, $Ruby30__reduce_52$60, $Ruby30__reduce_53$61, $Ruby30__reduce_54$62, $Ruby30__reduce_55$63, $Ruby30__reduce_56$64, $Ruby30__reduce_59$65, $Ruby30__reduce_60$66, $Ruby30__reduce_61$67, $Ruby30__reduce_62$68, $Ruby30__reduce_63$69, $Ruby30__reduce_64$70, $Ruby30__reduce_68$71, $Ruby30__reduce_69$72, $Ruby30__reduce_70$73, $Ruby30__reduce_72$74, $Ruby30__reduce_73$75, $Ruby30__reduce_74$76, $Ruby30__reduce_75$77, $Ruby30__reduce_76$78, $Ruby30__reduce_77$79, $Ruby30__reduce_78$80, $Ruby30__reduce_79$81, $Ruby30__reduce_80$82, $Ruby30__reduce_81$83, $Ruby30__reduce_82$84, $Ruby30__reduce_83$85, $Ruby30__reduce_84$86, $Ruby30__reduce_85$87, $Ruby30__reduce_86$88, $Ruby30__reduce_88$89, $Ruby30__reduce_89$90, $Ruby30__reduce_90$91, $Ruby30__reduce_91$92, $Ruby30__reduce_92$93, $Ruby30__reduce_93$94, $Ruby30__reduce_94$95, $Ruby30__reduce_95$96, $Ruby30__reduce_96$97, $Ruby30__reduce_98$98, $Ruby30__reduce_99$99, $Ruby30__reduce_100$100, $Ruby30__reduce_101$101, $Ruby30__reduce_102$102, $Ruby30__reduce_103$103, $Ruby30__reduce_104$104, $Ruby30__reduce_105$105, $Ruby30__reduce_106$106, $Ruby30__reduce_107$107, $Ruby30__reduce_108$108, $Ruby30__reduce_109$109, $Ruby30__reduce_110$110, $Ruby30__reduce_111$111, $Ruby30__reduce_112$112, $Ruby30__reduce_113$113, $Ruby30__reduce_114$114, $Ruby30__reduce_115$115, $Ruby30__reduce_116$116, $Ruby30__reduce_117$117, $Ruby30__reduce_118$118, $Ruby30__reduce_119$119, $Ruby30__reduce_120$120, $Ruby30__reduce_121$121, $Ruby30__reduce_123$122, $Ruby30__reduce_124$123, $Ruby30__reduce_125$124, $Ruby30__reduce_131$125, $Ruby30__reduce_133$126, $Ruby30__reduce_134$127, $Ruby30__reduce_135$128, $Ruby30__reduce_207$129, $Ruby30__reduce_208$130, $Ruby30__reduce_209$131, $Ruby30__reduce_210$132, $Ruby30__reduce_211$133, $Ruby30__reduce_212$134, $Ruby30__reduce_213$135, $Ruby30__reduce_214$136, $Ruby30__reduce_215$137, $Ruby30__reduce_216$138, $Ruby30__reduce_217$139, $Ruby30__reduce_218$140, $Ruby30__reduce_219$141, $Ruby30__reduce_220$142, $Ruby30__reduce_221$143, $Ruby30__reduce_222$144, $Ruby30__reduce_223$145, $Ruby30__reduce_224$146, $Ruby30__reduce_225$147, $Ruby30__reduce_226$148, $Ruby30__reduce_227$149, $Ruby30__reduce_228$150, $Ruby30__reduce_229$151, $Ruby30__reduce_230$152, $Ruby30__reduce_231$153, $Ruby30__reduce_232$154, $Ruby30__reduce_233$155, $Ruby30__reduce_234$156, $Ruby30__reduce_236$157, $Ruby30__reduce_237$158, $Ruby30__reduce_238$159, $Ruby30__reduce_239$160, $Ruby30__reduce_240$161, $Ruby30__reduce_241$162, $Ruby30__reduce_242$163, $Ruby30__reduce_243$164, $Ruby30__reduce_244$165, $Ruby30__reduce_245$166, $Ruby30__reduce_246$167, $Ruby30__reduce_247$168, $Ruby30__reduce_248$169, $Ruby30__reduce_249$170, $Ruby30__reduce_250$171, $Ruby30__reduce_251$172, $Ruby30__reduce_252$173, $Ruby30__reduce_258$174, $Ruby30__reduce_259$175, $Ruby30__reduce_263$176, $Ruby30__reduce_264$177, $Ruby30__reduce_266$178, $Ruby30__reduce_267$179, $Ruby30__reduce_268$180, $Ruby30__reduce_269$181, $Ruby30__reduce_270$182, $Ruby30__reduce_272$183, $Ruby30__reduce_275$184, $Ruby30__reduce_276$185, $Ruby30__reduce_277$186, $Ruby30__reduce_278$187, $Ruby30__reduce_279$188, $Ruby30__reduce_280$189, $Ruby30__reduce_281$190, $Ruby30__reduce_282$191, $Ruby30__reduce_283$192, $Ruby30__reduce_284$193, $Ruby30__reduce_285$194, $Ruby30__reduce_286$195, $Ruby30__reduce_287$196, $Ruby30__reduce_288$197, $Ruby30__reduce_289$198, $Ruby30__reduce_290$199, $Ruby30__reduce_291$200, $Ruby30__reduce_293$201, $Ruby30__reduce_294$202, $Ruby30__reduce_295$203, $Ruby30__reduce_306$204, $Ruby30__reduce_307$205, $Ruby30__reduce_308$206, $Ruby30__reduce_309$207, $Ruby30__reduce_310$208, $Ruby30__reduce_311$209, $Ruby30__reduce_312$210, $Ruby30__reduce_313$211, $Ruby30__reduce_314$212, $Ruby30__reduce_315$213, $Ruby30__reduce_316$214, $Ruby30__reduce_317$215, $Ruby30__reduce_318$216, $Ruby30__reduce_319$217, $Ruby30__reduce_320$218, $Ruby30__reduce_321$219, $Ruby30__reduce_322$220, $Ruby30__reduce_323$221, $Ruby30__reduce_324$222, $Ruby30__reduce_325$223, $Ruby30__reduce_327$224, $Ruby30__reduce_329$225, $Ruby30__reduce_330$226, $Ruby30__reduce_331$227, $Ruby30__reduce_332$228, $Ruby30__reduce_333$229, $Ruby30__reduce_334$230, $Ruby30__reduce_335$231, $Ruby30__reduce_336$232, $Ruby30__reduce_337$233, $Ruby30__reduce_338$234, $Ruby30__reduce_339$235, $Ruby30__reduce_340$236, $Ruby30__reduce_341$237, $Ruby30__reduce_342$238, $Ruby30__reduce_343$239, $Ruby30__reduce_344$240, $Ruby30__reduce_345$241, $Ruby30__reduce_346$242, $Ruby30__reduce_347$243, $Ruby30__reduce_348$244, $Ruby30__reduce_350$245, $Ruby30__reduce_351$246, $Ruby30__reduce_352$247, $Ruby30__reduce_353$248, $Ruby30__reduce_356$249, $Ruby30__reduce_360$250, $Ruby30__reduce_362$251, $Ruby30__reduce_365$252, $Ruby30__reduce_366$253, $Ruby30__reduce_367$254, $Ruby30__reduce_368$255, $Ruby30__reduce_370$256, $Ruby30__reduce_371$257, $Ruby30__reduce_372$258, $Ruby30__reduce_373$259, $Ruby30__reduce_374$260, $Ruby30__reduce_375$261, $Ruby30__reduce_378$262, $Ruby30__reduce_379$263, $Ruby30__reduce_380$264, $Ruby30__reduce_381$265, $Ruby30__reduce_382$266, $Ruby30__reduce_383$267, $Ruby30__reduce_385$268, $Ruby30__reduce_386$269, $Ruby30__reduce_387$270, $Ruby30__reduce_388$271, $Ruby30__reduce_389$272, $Ruby30__reduce_391$273, $Ruby30__reduce_392$274, $Ruby30__reduce_393$275, $Ruby30__reduce_394$276, $Ruby30__reduce_395$277, $Ruby30__reduce_396$278, $Ruby30__reduce_397$279, $Ruby30__reduce_398$280, $Ruby30__reduce_400$281, $Ruby30__reduce_401$282, $Ruby30__reduce_402$283, $Ruby30__reduce_403$284, $Ruby30__reduce_404$285, $Ruby30__reduce_405$286, $Ruby30__reduce_406$287, $Ruby30__reduce_407$288, $Ruby30__reduce_408$289, $Ruby30__reduce_410$290, $Ruby30__reduce_411$291, $Ruby30__reduce_412$292, $Ruby30__reduce_413$293, $Ruby30__reduce_414$294, $Ruby30__reduce_415$295, $Ruby30__reduce_416$296, $Ruby30__reduce_417$297, $Ruby30__reduce_418$298, $Ruby30__reduce_419$299, $Ruby30__reduce_420$300, $Ruby30__reduce_421$301, $Ruby30__reduce_422$302, $Ruby30__reduce_423$303, $Ruby30__reduce_424$304, $Ruby30__reduce_425$305, $Ruby30__reduce_426$306, $Ruby30__reduce_427$307, $Ruby30__reduce_428$308, $Ruby30__reduce_429$309, $Ruby30__reduce_430$310, $Ruby30__reduce_431$311, $Ruby30__reduce_432$312, $Ruby30__reduce_433$313, $Ruby30__reduce_434$314, $Ruby30__reduce_435$315, $Ruby30__reduce_436$316, $Ruby30__reduce_437$317, $Ruby30__reduce_438$318, $Ruby30__reduce_439$319, $Ruby30__reduce_440$320, $Ruby30__reduce_441$321, $Ruby30__reduce_442$322, $Ruby30__reduce_443$323, $Ruby30__reduce_444$324, $Ruby30__reduce_446$325, $Ruby30__reduce_447$326, $Ruby30__reduce_448$327, $Ruby30__reduce_449$328, $Ruby30__reduce_451$329, $Ruby30__reduce_452$330, $Ruby30__reduce_453$331, $Ruby30__reduce_455$332, $Ruby30__reduce_456$333, $Ruby30__reduce_457$334, $Ruby30__reduce_458$335, $Ruby30__reduce_459$336, $Ruby30__reduce_461$337, $Ruby30__reduce_463$338, $Ruby30__reduce_465$339, $Ruby30__reduce_466$340, $Ruby30__reduce_468$341, $Ruby30__reduce_469$342, $Ruby30__reduce_470$343, $Ruby30__reduce_471$344, $Ruby30__reduce_472$345, $Ruby30__reduce_473$346, $Ruby30__reduce_474$347, $Ruby30__reduce_475$348, $Ruby30__reduce_476$349, $Ruby30__reduce_477$350, $Ruby30__reduce_478$351, $Ruby30__reduce_479$352, $Ruby30__reduce_480$353, $Ruby30__reduce_481$354, $Ruby30__reduce_482$355, $Ruby30__reduce_483$356, $Ruby30__reduce_484$357, $Ruby30__reduce_485$358, $Ruby30__reduce_486$359, $Ruby30__reduce_487$360, $Ruby30__reduce_488$361, $Ruby30__reduce_489$362, $Ruby30__reduce_490$363, $Ruby30__reduce_492$364, $Ruby30__reduce_493$365, $Ruby30__reduce_494$366, $Ruby30__reduce_495$367, $Ruby30__reduce_496$368, $Ruby30__reduce_497$369, $Ruby30__reduce_498$370, $Ruby30__reduce_499$371, $Ruby30__reduce_500$372, $Ruby30__reduce_502$373, $Ruby30__reduce_503$374, $Ruby30__reduce_504$375, $Ruby30__reduce_505$376, $Ruby30__reduce_506$377, $Ruby30__reduce_507$378, $Ruby30__reduce_508$379, $Ruby30__reduce_509$380, $Ruby30__reduce_510$381, $Ruby30__reduce_511$382, $Ruby30__reduce_512$383, $Ruby30__reduce_513$384, $Ruby30__reduce_514$385, $Ruby30__reduce_518$386, $Ruby30__reduce_519$387, $Ruby30__reduce_520$388, $Ruby30__reduce_521$389, $Ruby30__reduce_525$390, $Ruby30__reduce_526$391, $Ruby30__reduce_535$392, $Ruby30__reduce_537$393, $Ruby30__reduce_538$394, $Ruby30__reduce_539$395, $Ruby30__reduce_540$396, $Ruby30__reduce_541$397, $Ruby30__reduce_542$398, $Ruby30__reduce_543$399, $Ruby30__reduce_544$400, $Ruby30__reduce_547$401, $Ruby30__reduce_549$402, $Ruby30__reduce_553$403, $Ruby30__reduce_554$404, $Ruby30__reduce_555$405, $Ruby30__reduce_556$406, $Ruby30__reduce_557$407, $Ruby30__reduce_558$408, $Ruby30__reduce_559$409, $Ruby30__reduce_560$410, $Ruby30__reduce_561$411, $Ruby30__reduce_562$412, $Ruby30__reduce_563$413, $Ruby30__reduce_564$414, $Ruby30__reduce_565$415, $Ruby30__reduce_566$416, $Ruby30__reduce_567$417, $Ruby30__reduce_568$418, $Ruby30__reduce_569$419, $Ruby30__reduce_570$420, $Ruby30__reduce_571$421, $Ruby30__reduce_572$422, $Ruby30__reduce_573$423, $Ruby30__reduce_574$424, $Ruby30__reduce_575$425, $Ruby30__reduce_576$426, $Ruby30__reduce_577$427, $Ruby30__reduce_578$428, $Ruby30__reduce_579$429, $Ruby30__reduce_580$430, $Ruby30__reduce_581$431, $Ruby30__reduce_582$432, $Ruby30__reduce_583$433, $Ruby30__reduce_584$434, $Ruby30__reduce_585$435, $Ruby30__reduce_586$436, $Ruby30__reduce_587$437, $Ruby30__reduce_591$438, $Ruby30__reduce_592$439, $Ruby30__reduce_593$440, $Ruby30__reduce_594$441, $Ruby30__reduce_595$442, $Ruby30__reduce_596$443, $Ruby30__reduce_597$444, $Ruby30__reduce_598$445, $Ruby30__reduce_599$446, $Ruby30__reduce_600$447, $Ruby30__reduce_601$448, $Ruby30__reduce_602$449, $Ruby30__reduce_603$450, $Ruby30__reduce_604$451, $Ruby30__reduce_605$452, $Ruby30__reduce_606$453, $Ruby30__reduce_607$454, $Ruby30__reduce_608$455, $Ruby30__reduce_609$456, $Ruby30__reduce_610$457, $Ruby30__reduce_611$458, $Ruby30__reduce_612$459, $Ruby30__reduce_613$460, $Ruby30__reduce_614$461, $Ruby30__reduce_615$462, $Ruby30__reduce_616$463, $Ruby30__reduce_617$464, $Ruby30__reduce_618$465, $Ruby30__reduce_619$466, $Ruby30__reduce_621$467, $Ruby30__reduce_622$468, $Ruby30__reduce_623$469, $Ruby30__reduce_624$470, $Ruby30__reduce_626$471, $Ruby30__reduce_627$472, $Ruby30__reduce_628$473, $Ruby30__reduce_629$474, $Ruby30__reduce_630$475, $Ruby30__reduce_631$476, $Ruby30__reduce_632$477, $Ruby30__reduce_633$478, $Ruby30__reduce_634$479, $Ruby30__reduce_635$480, $Ruby30__reduce_636$481, $Ruby30__reduce_637$482, $Ruby30__reduce_638$483, $Ruby30__reduce_639$484, $Ruby30__reduce_640$485, $Ruby30__reduce_641$486, $Ruby30__reduce_642$487, $Ruby30__reduce_643$488, $Ruby30__reduce_644$489, $Ruby30__reduce_645$490, $Ruby30__reduce_646$491, $Ruby30__reduce_647$492, $Ruby30__reduce_648$493, $Ruby30__reduce_649$494, $Ruby30__reduce_650$495, $Ruby30__reduce_651$496, $Ruby30__reduce_652$497, $Ruby30__reduce_653$498, $Ruby30__reduce_655$499, $Ruby30__reduce_656$500, $Ruby30__reduce_657$501, $Ruby30__reduce_658$502, $Ruby30__reduce_659$503, $Ruby30__reduce_660$504, $Ruby30__reduce_661$505, $Ruby30__reduce_662$506, $Ruby30__reduce_663$507, $Ruby30__reduce_664$508, $Ruby30__reduce_665$509, $Ruby30__reduce_666$510, $Ruby30__reduce_667$511, $Ruby30__reduce_668$512, $Ruby30__reduce_669$513, $Ruby30__reduce_672$514, $Ruby30__reduce_673$515, $Ruby30__reduce_674$516, $Ruby30__reduce_675$517, $Ruby30__reduce_676$518, $Ruby30__reduce_677$519, $Ruby30__reduce_678$520, $Ruby30__reduce_679$521, $Ruby30__reduce_680$522, $Ruby30__reduce_683$523, $Ruby30__reduce_684$524, $Ruby30__reduce_687$525, $Ruby30__reduce_688$526, $Ruby30__reduce_689$527, $Ruby30__reduce_691$528, $Ruby30__reduce_692$529, $Ruby30__reduce_694$530, $Ruby30__reduce_695$531, $Ruby30__reduce_696$532, $Ruby30__reduce_697$533, $Ruby30__reduce_698$534, $Ruby30__reduce_699$535, $Ruby30__reduce_712$536, $Ruby30__reduce_713$537, $Ruby30__reduce_718$538, $Ruby30__reduce_719$539, $Ruby30__reduce_720$540, $Ruby30__reduce_724$541, $Ruby30__reduce_728$542, $Ruby30__reduce_none$543, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      self.$$prototype.static_env = self.$$prototype.lexer = self.$$prototype.max_numparam_stack = self.$$prototype.context = self.$$prototype.current_arg_stack = self.$$prototype.builder = self.$$prototype.pattern_variables = self.$$prototype.last_token = self.$$prototype.pattern_hash_keys = nil;
      
      
      Opal.def(self, '$version', $Ruby30_version$1 = function $$version() {
        var self = this;

        return 30
      }, $Ruby30_version$1.$$arity = 0);
      
      Opal.def(self, '$default_encoding', $Ruby30_default_encoding$2 = function $$default_encoding() {
        var self = this;

        return $$$($$($nesting, 'Encoding'), 'UTF_8')
      }, $Ruby30_default_encoding$2.$$arity = 0);
      
      Opal.def(self, '$endless_method_name', $Ruby30_endless_method_name$3 = function $$endless_method_name(name_t) {
        var self = this, $ret_or_1 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_1 = ["===", "==", "!=", "<=", ">="]['$include?'](name_t['$[]'](0))['$!']()))) {
          return name_t['$[]'](0)['$end_with?']("=")
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return self.$diagnostic("error", "endless_setter", nil, name_t)
        } else {
          return nil
        }
      }, $Ruby30_endless_method_name$3.$$arity = 1);
      
      Opal.def(self, '$local_push', $Ruby30_local_push$4 = function $$local_push() {
        var self = this;

        
        self.static_env.$extend_static();
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        return self.max_numparam_stack.$push($hash2(["static"], {"static": true}));
      }, $Ruby30_local_push$4.$$arity = 0);
      
      Opal.def(self, '$local_pop', $Ruby30_local_pop$5 = function $$local_pop() {
        var self = this;

        
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        return self.max_numparam_stack.$pop();
      }, $Ruby30_local_pop$5.$$arity = 0);
      
      Opal.def(self, '$try_declare_numparam', $Ruby30_try_declare_numparam$6 = function $$try_declare_numparam(node) {
        var $$7, self = this, name = nil, $ret_or_2 = nil, $ret_or_3 = nil, location = nil, raw_max_numparam_stack = nil;

        
        name = node.$children()['$[]'](0);
        if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = name['$=~'](/^_[1-9]$/)))) {
          return self.$static_env()['$declared?'](name)['$!']()
        } else {
          return $ret_or_3
        }; return nil; })()))) {
          return self.context['$in_dynamic_block?']()
        } else {
          return $ret_or_2
        }; return nil; })())) {
          
          location = node.$loc().$expression();
          if ($truthy(self.$max_numparam_stack()['$has_ordinary_params?']())) {
            self.$diagnostic("error", "ordinary_param_defined", nil, [nil, location])};
          raw_max_numparam_stack = self.$max_numparam_stack().$stack().$dup();
          raw_max_numparam_stack.$pop();
          (function(){var $brk = Opal.new_brk(); try {return $send(raw_max_numparam_stack, 'reverse_each', [], ($$7 = function(outer_scope){var self = $$7.$$s == null ? this : $$7.$$s, outer_scope_has_numparams = nil;

            
            
            if (outer_scope == null) {
              outer_scope = nil;
            };
            if ($truthy(outer_scope['$[]']("static"))) {
              
              Opal.brk(nil, $brk)
            } else {
              
              outer_scope_has_numparams = $rb_gt(outer_scope['$[]']("value"), 0);
              if ($truthy(outer_scope_has_numparams)) {
                return self.$diagnostic("error", "numparam_used_in_outer_scope", nil, [nil, location])
              } else {
                return nil
              };
            };}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 1, $$7))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          self.$static_env().$declare(name);
          self.$max_numparam_stack().$register(name['$[]'](1).$to_i());
          return true;
        } else {
          return false
        };
      }, $Ruby30_try_declare_numparam$6.$$arity = 1);
      clist = ["-707,680,617,1083,870,965,-120,-707,-707,-707,221,222,805,-707,-707", "-606,-707,104,105,870,231,-113,-606,-116,-707,-707,660,1150,658,-716", "866,-119,-118,1153,-114,1078,-707,-707,617,-707,-707,-707,-707,-707", "-112,-119,232,617,617,920,1124,-118,426,1077,624,-117,870,428,427,810", "-117,232,810,-115,-113,-501,-707,-707,-707,-707,-707,-707,-707,-707", "-707,-707,-707,-707,-707,-707,-606,-112,-707,-707,-707,1084,685,-707", "-703,-117,-707,-120,659,-707,657,106,107,-704,-707,232,-707,229,-707", "-707,232,-707,-707,-707,-707,-707,-602,-707,-707,-707,964,-111,126,-602", "-602,-602,126,125,-602,-602,-602,125,-602,-707,-704,-106,-707,-707,-107", "-707,-602,-707,-602,-602,-602,-113,-110,-109,-707,-105,-113,-116,-602", "-602,617,-602,-602,-602,-602,-602,-116,-114,126,-115,-117,954,-120,125", "-112,-119,-108,126,126,-112,-119,-118,125,125,-106,-104,-118,232,-602", "-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602,-103", "617,-602,-602,-602,-106,-602,-602,301,852,-602,352,126,-602,-602,479", "-602,125,-602,-120,-602,-716,-602,-602,-120,-602,-602,-602,-602,-602", "-314,-602,1158,-602,301,221,222,-314,-314,-314,920,-703,624,-314,-314", "-106,-314,-602,-106,1159,-602,-602,-602,-602,-314,-602,-716,-602,221", "222,-106,232,-602,949,920,-602,-314,-314,-114,-314,-314,-314,-314,-314", "-120,788,126,221,222,1043,-107,125,-116,-114,366,-115,-117,-116,-114", "301,-115,-117,232,789,1043,300,-314,-314,-314,-314,-314,-314,-314,-314", "-314,-314,-314,-314,-314,-314,301,1043,-314,-314,-314,-611,684,-314", "351,126,-314,300,-611,-314,125,-105,104,105,-314,126,-314,-611,-314", "-314,125,-314,-314,-314,-314,-314,-728,-314,-707,-314,290,-703,-107", "865,679,-707,-707,-707,232,296,-707,-707,-707,-314,-707,126,-314,-314", "1171,-314,125,-314,-707,-707,-707,-707,-707,232,-314,1172,296,-118,300", "-108,-707,-707,-611,-707,-707,-707,-707,-707,-107,-612,1176,-107,-98", "-105,645,-605,-612,645,774,300,1180,645,-605,-107,-84,-612,106,107,-115", "-115,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707,-707", "-707,366,555,-707,-707,-707,645,867,-707,1182,-105,-707,630,-105,-707", "-707,631,-707,1184,-707,555,-707,-108,-707,-707,-105,-707,-707,-707", "-707,-707,-612,-707,-707,-707,647,646,-605,647,646,643,645,647,646,645", "836,1186,645,-707,-110,645,-707,-707,-707,-707,1137,-707,-728,-707,1137", "-314,-119,-108,-707,-614,-108,-116,-314,-314,-314,647,646,-314,-314", "-314,227,-314,-108,1186,-119,838,630,547,-604,-314,895,-314,-314,-314", "876,-604,545,974,-701,872,765,-314,-314,873,-314,-314,-314,-314,-314", "223,647,646,643,647,646,643,647,646,648,647,646,656,852,-613,126,126", "1119,745,-113,125,125,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314", "-314,-314,-314,-314,228,-613,-314,-314,-314,-602,868,-314,-604,1200", "-314,-114,-602,-314,-314,645,-314,-701,-314,1176,-314,-602,-314,-314", "-105,-314,-314,-314,-314,-314,126,-314,220,-314,630,125,-114,-112,895", "582,-701,579,578,577,587,580,680,-314,-103,-607,-314,-314,-314,-314", "590,-314,-607,-314,-704,-707,-112,679,-314,1122,1123,-118,-707,-707", "-707,-703,-602,609,-707,-707,611,-707,585,221,222,647,646,652,-610,-707", "-707,595,594,598,597,-610,949,920,591,-108,90,-707,-707,232,-707,-707", "-707,-707,-707,219,-614,-117,91,582,-106,579,578,577,587,580,-607,645", "92,218,232,135,-115,232,590,1043,1174,-707,-707,-707,-707,-707,-707", "-707,-707,-707,-707,-707,-707,-707,-707,1212,229,-707,-707,-707,585", "685,-707,-610,1186,-707,645,-104,-707,595,594,598,597,-707,1186,-707", "591,-707,-707,-113,-707,-707,-707,-707,-707,-314,-707,-707,-707,890", "891,1186,-314,-314,-314,647,646,661,-314,-314,-608,-314,-707,-111,122", "-707,-707,-608,-107,-314,-707,-609,-602,598,597,-120,576,-707,-609,-602", "-116,-314,-314,1176,-314,-314,-314,-314,-314,1186,647,646,650,582,227", "579,578,577,587,580,-599,627,129,130,131,132,133,-599,590,232,625,-314", "-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-314,-608", "733,-314,-314,-314,585,684,-314,221,222,-314,-609,-602,-314,595,594", "598,597,-314,232,-314,591,-314,-314,232,-314,-314,-314,-314,-314,-599", "-314,609,-314,228,611,254,-599,-599,-599,-599,254,-599,-599,-599,227", "-599,-314,254,254,-314,-314,294,-109,-599,-314,-599,-599,-599,232,609", "576,-314,611,-98,-118,-599,-599,748,-599,-599,-599,-599,-599,232,-315", "561,227,609,-305,227,608,-315,759,226,765,-305,294,766,232,768,-315", "232,224,771,-305,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599,-599", "-599,-599,-599,228,774,-599,-599,-599,775,-599,-599,227,254,-599,777", "779,-599,-599,1152,-599,689,-599,790,-599,791,-599,-599,635,-599,-599", "-599,-599,-599,-315,-599,228,-599,-305,228,129,130,131,132,133,251,-314", "793,296,253,252,-599,795,-314,-599,-599,-599,-599,-704,-599,227,-599", "-314,796,232,798,-599,672,678,-599,323,81,82,83,11,65,670,228,801,71", "72,677,232,806,75,-700,73,74,76,33,34,79,80,129,130,131,132,133,84,31", "30,114,113,115,116,807,582,21,579,578,577,-314,580,10,51,325,12,118", "117,119,108,64,110,109,111,228,112,120,121,-315,104,105,47,48,46,-314", "-315,-599,811,227,271,272,-314,781,-599,-315,557,-704,673,-700,669,-314", "785,-599,43,477,668,36,-287,835,66,67,227,839,68,840,38,666,665,1157", "50,-288,-700,662,254,853,270,269,1155,22,513,637,513,232,102,90,93,94", "870,95,97,96,98,986,-315,871,629,91,101,628,-314,894,-599,590,228,85", "251,92,106,107,253,252,44,45,323,81,82,83,11,65,870,897,418,71,72,899", "290,228,75,-707,73,74,76,33,34,79,80,624,905,907,909,591,84,31,30,114", "113,115,116,527,529,21,529,1004,759,232,613,10,51,325,12,118,117,119", "108,64,110,109,111,612,112,120,121,227,104,105,47,48,46,227,1152,-707", "296,-349,296,759,633,254,-707,635,-349,232,920,-703,602,635,-620,-707", "43,-349,941,36,942,232,66,67,227,562,68,920,38,951,952,476,50,582,-707", "579,578,577,254,580,477,22,232,558,552,232,102,90,93,94,296,95,97,96", "98,986,228,366,962,91,101,366,228,232,-707,590,-349,85,232,92,106,107", "-289,305,44,45,323,81,82,83,11,65,232,548,973,71,72,541,540,228,75,719", "73,74,76,33,34,79,80,246,232,-83,135,591,84,31,30,114,113,115,116,232", "232,21,1000,1004,1001,1002,1005,10,51,325,12,118,117,119,108,64,110", "109,111,529,112,120,121,527,104,105,47,48,46,254,258,259,260,261,271", "272,266,267,262,263,525,247,248,907,1011,264,265,232,43,3,245,36,587", "759,66,67,513,1029,68,-287,38,251,590,257,50,253,252,1033,249,250,270", "269,255,22,256,232,1036,1038,102,90,93,94,774,95,97,96,98,789,1041,1043", "1043,91,101,232,268,598,597,1051,1053,85,591,92,106,107,1062,1063,44", "45,323,81,82,83,11,65,1068,830,831,71,72,832,120,121,75,1069,73,74,76", "33,34,79,80,129,130,131,132,133,84,31,30,114,113,115,116,1070,-290,21", "232,232,232,1074,674,10,51,325,12,118,117,119,108,64,110,109,111,231", "112,120,121,232,104,105,47,48,46,254,258,259,260,261,271,272,266,267", "262,263,232,247,248,232,870,264,265,1082,43,481,480,36,232,1091,66,67", "774,1094,68,1097,38,251,1099,257,50,253,252,1101,249,250,270,269,255", "22,256,232,1103,478,102,90,93,94,1118,95,97,96,98,1119,1128,429,870", "91,101,1138,268,1140,-260,,,85,,92,106,107,,,44,45,323,81,82,83,11,65", ",,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,", ",21,,,,,945,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121", ",104,105,47,48,46,254,258,259,260,261,271,272,266,267,262,263,,247,248", ",,264,265,,43,,,36,587,,66,67,,,68,,38,251,590,257,50,253,252,,249,250", "270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,268,598", "597,,,85,591,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,674,10,51,325", "12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254", "258,259,260,261,271,272,266,267,262,263,,247,248,,,264,265,,43,,,36", ",,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,268,,,,,85,,92,106,107,,,44,45", "323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,21,,,,,917,10,51,325,12,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,254,258,259,260,261,271,272,266,267", "262,263,,247,248,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253", "252,,249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,268,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75", ",73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,1133,21,579,578", "577,,580,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,254,258,259,260,261,271,272,266,267,262,263,,247,248,,", "264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269", "255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,232,268,,,,,85,,92", "106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79", "80,,,,,,84,31,30,114,113,115,116,,1133,21,579,578,577,,580,10,51,325", "12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254", "258,259,260,261,271,272,266,267,262,263,,247,248,,,264,265,,43,,,36", ",,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,268,,,,,85,,92,106,107,,,44,45", "323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,254,258,259,260,261,271,272,266,267,262", "263,,247,248,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252", ",249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",268,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325", "12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254", "258,259,260,261,271,272,266,267,262,263,,247,248,,,264,265,,43,,,36", ",,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,268,,,,,85,,92,106,107,,,44,45", "323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,254,258,259,260,261,271,272,266,267,262", "263,,247,248,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252", ",249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",268,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325", "12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254", "258,259,260,261,271,272,266,267,262,263,,247,248,,,264,265,,43,,,327", ",,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,268,,,,,85,,92,106,107,,,44,45", "7,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,21,,,,,,10,51,9,12,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,254,258,259,260,261,271,272,266,267,262", "263,,247,248,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252", ",249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",268,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,582,21,579,578,577", ",580,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,582,,579,578,577,,580,,781,,582,,579,578,577,,580,785,,43,", ",327,,,66,67,,254,68,,38,,,,50,,781,,582,,579,578,577,22,580,785,781", ",102,90,93,94,,95,97,96,98,,,251,,91,101,253,252,,249,250,,85,,92,106", "107,,781,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79", "80,,,,,,84,31,30,114,113,115,116,,,21,,,254,,,10,51,325,12,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,254,258,259,260,261", "271,272,251,,262,263,253,252,,249,250,264,265,,43,,,36,,,66,67,,,68", ",38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,582,,579,578,577,85,580,92,106,107,,,44,45", "323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,781,,,,,84,31", "30,114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,254,-729,-729,-729,-729,271,272,", ",-729,-729,,,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252", ",249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74", "76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325,12", "118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254,-729", "-729,-729,-729,271,272,,,-729,-729,,,,,,264,265,,43,,,327,,,66,67,,", "68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,323,81,82,83", "11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115", "116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121", ",104,105,47,48,46,254,-729,-729,-729,-729,271,272,,,-729,-729,,,,,,264", "265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255", "22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107", ",,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,", ",84,31,30,114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64", "110,109,111,,112,120,121,,104,105,47,48,46,254,-729,-729,-729,-729,271", "272,,,-729,-729,,,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253", "252,,249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,,,,85,,92,106,107,,,44,45,7,81,82,83,11,65,,,,71,72,,,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,9,12", "118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254,258", "259,260,261,271,272,266,267,262,263,,-729,-729,,,264,265,,43,,,36,,", "66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,323,81", "82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113", "115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,254,258,259,260,261,271,272,266,267,262,263,,-729", "-729,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250", "270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85", ",92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34", "79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,254,258,259,260,261", "271,272,266,,262,263,,,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257", "50,253,252,,249,250,270,269,255,22,256,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72", ",,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,", "10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47", "48,46,254,,,,,,,,,,,,,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257", "50,253,252,,249,250,,,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,,,,85,,92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,", "73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325", "12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,254", "258,259,260,261,271,272,266,267,262,263,,-729,-729,,,264,265,,43,,,36", ",,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,323", "81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114", "113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,254,-729,-729,-729,-729,271,272,,,-729,-729", ",,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250", "270,269,255,22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85", ",92,106,107,,,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34", "79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,254,258,259,260,261", "271,272,266,267,262,263,,-729,-729,,,264,265,,43,,,36,,,66,67,,,68,", "38,251,,257,50,253,252,,249,250,270,269,255,22,256,,,,102,90,93,94,", "95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,323,81,82,83,11", "65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,21,,,,,,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121,", "104,105,47,48,46,254,-729,-729,-729,-729,271,272,,,-729,-729,,,,,,264", "265,,43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250,270,269,255", "22,256,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107", ",,44,45,323,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,", ",84,31,30,114,113,115,116,,,21,,,,,,10,51,325,12,118,117,119,108,64", "110,109,111,,112,120,121,,104,105,47,48,46,254,,,,,,,,,,,,,,,,264,265", ",43,,,36,,,66,67,,,68,,38,251,,257,50,253,252,,249,250,,,255,22,256", ",,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,254,,,,,,,,,,,,,,,,264,265,,237,,,243,,,66,67,,,68,,,251,,257", "50,253,252,,249,250,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,", ",,,,,85,,92,106,107,-270,,44,45,,,,-270,-270,-270,,,-270,-270,-270,", "-270,254,,,,,,,-270,-270,-270,,,,,,,264,265,,-270,-270,,-270,-270,-270", "-270,-270,,,,,,251,,511,460,253,252,512,249,250,,,,,,169,170,,166,148", "149,150,157,154,156,,,151,152,-270,,,171,172,158,159,-270,,,,,296,-270", ",,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,-270", "-270,174,,,,,,,,,,,,,-270,,,-270,,,,,-270,81,82,83,11,65,,-270,,71,72", ",,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,", "10,51,9,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,254,,,,,,,,,,,,,,,,264,265,,43,,,36,,,66,67,,,68,,38,251,,257,50", "253,252,,249,250,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81", "82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84", "31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", "317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,314,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33", "34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117", "119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,", ",,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95", "97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-432,,44,45,,,,-432,-432,-432", ",,-432,-432,-432,,-432,,,,,,,,-432,-432,-432,-432,,,,,,,,,-432,-432", ",-432,-432,-432,-432,-432,,,,,,,,,,,,,,,,,,,,,,,-432,-432,-432,-432", "-432,-432,-432,-432,-432,-432,-432,-432,-432,-432,,,-432,-432,-432,", ",-432,,296,-432,,,-432,-432,,-432,,-432,,-432,,-432,-432,,-432,-432", "-432,-432,-432,-321,-432,-432,-432,,,,-321,-321,-321,,,-321,-321,-321", ",-321,-432,,,-432,-432,,-432,-321,-432,-321,-321,,,,,-432,,,,-321,-321", ",-321,-321,-321,-321,-321,,,,,,,,,,,,,,,,,,,,,,,-321,-321,-321,-321", "-321,-321,-321,-321,-321,-321,-321,-321,-321,-321,,,-321,-321,-321,", ",-321,,305,-321,,,-321,-321,,-321,,-321,,-321,,-321,-321,,-321,-321", "-321,-321,-321,,-321,,-321,,,,,,,,,,,,,,-321,,,-321,-321,,-321,,-321", "81,82,83,,65,,-321,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,317", "112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,", ",68,,314,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,,,", "91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34", "79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,", "237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,,102,315,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,", ",118,117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,", ",,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242", ",,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79", "80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,,,,85,,92,106,107,-306,,44,45,,,,-306,-306,-306,,,-306", "-306,-306,,-306,,,,,,,,-306,,-306,-306,-306,,,,114,113,115,116,-306", "-306,,-306,-306,-306,-306,-306,,,,,118,117,119,,,,,,,,,,,104,105,,,348", "-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306,-306", ",,-306,-306,-306,,,-306,,,-306,,,-306,-306,,-306,,-306,,-306,,-306,-306", ",-306,-306,-306,-306,-306,,-306,,-306,,102,90,93,94,,95,97,96,98,,,", "-306,91,101,-306,-306,-306,-306,,-306,85,-306,92,106,107,,-306,81,82", "83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113", "115,116,,,21,,,,,,10,51,,12,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,", ",50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", "317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,314,,,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,,", ",91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345", "79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,", "237,,,243,,,66,67,,,68,,,,,,50,,,318,,,,,,242,,,,,102,315,93,94,,95", "97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,", "118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,", ",,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45", ",75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51", ",,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,", ",,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,126,,,,,125,85,,92,106,107,,,44,45,81", "82,83,11,65,,,,71,72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113", "115,116,,,21,,,,,,10,51,9,12,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,", ",50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,418,85", ",92,106,107,,,44,45,81,82,83,,65,,,,71,72,,,,75,,73,74,76,33,34,79,80", ",,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79", "80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108,64", "110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,", "243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,", ",,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34", "79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,81,82,83,11,65,,,,71,72", ",,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,", "10,51,,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21", ",,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,232,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79", "80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,", "51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,", ",,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72", "44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,", "244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79", "80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,", "51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,", ",,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72", "44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,", "244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79", "80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,", "51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48,46", ",,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,312,,50,,,318,,,,,,242", ",,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,742,,,,50,,", ",,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65", "92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113", "115,116,,,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121", ",104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50", ",,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65", "92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68", ",,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84", "339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,", ",,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96", "98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,515,,75,,73,74,76", "33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,", ",,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,,102,315", "93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44", "45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,", ",,,51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,", ",,242,,,,,102,315,93,94,,95,97,96,98,,,,,91,101,232,,,81,82,83,85,65", "92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79", "80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,81,82,83,11,65,,,,71,72", ",,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,", "10,51,,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,", ",,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80", ",,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64", "110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,", "243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,", ",,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33", "34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,561,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45", ",75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,", ",,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,", ",102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,434,,,,50,,,,,,", ",,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,", ",,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80", ",,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64", "110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,742,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95", "97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,515,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,", ",,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75", ",73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,", "118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,", ",,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45", ",75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,", "51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,", ",,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72", "44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244", ",,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,", ",102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244", ",,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,", ",102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,312,,50,,", "318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85", "65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347", "114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,317", "112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,", ",68,,742,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,,,", "91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345", "79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,,,,85,,92,106,107,,,44,45,81,82,83,11,65,,,,71,72,,,,75", ",73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51", ",12,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,", ",,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44", "45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,", ",,,51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,", ",,242,,,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113", "115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121", ",104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50", ",,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85", "65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347", "114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68", ",844,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,", ",,85,,92,106,107,,,44,45,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,33", "34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,10,51,,12,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96", "98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76", "344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117", "119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,", ",,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95", "97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,", ",,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,", "102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244", ",,,,,,51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104,105,47", "48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318", ",,,,,242,,,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65", "92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314", ",,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84", "339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109", "111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,", ",66,67,,,68,,,,,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,", ",,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,", ",,,,237,,,243,,,66,67,,,68,,742,,,,50,,,318,,,,,,242,,,,,102,315,93", "94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-270,,44,45,,,,-270", "-270,-270,,,-270,-270,-270,,-270,,,,,,,,-270,-270,-270,-270,,,,,,,,", "-270,-270,,-270,-270,-270,-270,-270,,,,,,,,,,,,,,,,,,,,,,,-270,-270", "-270,-270,-270,-270,-270,-270,-270,-270,-270,-270,-270,-270,,,-270,-270", "-270,,,-270,,296,-270,,,-270,-270,,-270,,-270,,-270,,-270,-270,,-270", "-270,-270,-270,-270,,-270,-270,-270,,,,,,,,,,,,,,-270,,,-270,-270,,-270", ",-270,81,82,83,,65,,-270,,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84", "339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66", "67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101", ",,,,,,85,,92,106,107,-708,,44,45,,,,-708,-708,-708,,,-708,-708,-708", ",-708,,,,,,,,-708,-708,-708,-708,-708,,,,,,,,-708,-708,,-708,-708,-708", "-708,-708,,,,,,,,,,,,,,,,,,,,,,,-708,-708,-708,-708,-708,-708,-708,-708", "-708,-708,-708,-708,-708,-708,,,-708,-708,-708,,,-708,,,-708,,,-708", "-708,,-708,,-708,,-708,,-708,-708,,-708,-708,-708,-708,-708,,-708,-708", "-708,,,,,,,,,,,,,,-708,,,-708,-708,-708,-708,,-708,-709,-708,,,,,-708", "-709,-709,-709,,,-709,-709,-709,,-709,,,,,,,,-709,-709,-709,-709,-709", ",,,,,,,-709,-709,,-709,-709,-709,-709,-709,,,,,,,,,,,,,,,,,,,,,,,-709", "-709,-709,-709,-709,-709,-709,-709,-709,-709,-709,-709,-709,-709,,,-709", "-709,-709,,,-709,,,-709,,,-709,-709,,-709,,-709,,-709,,-709,-709,,-709", "-709,-709,-709,-709,,-709,-709,-709,,,,,,,,,,,,,,-709,,,-709,-709,-709", "-709,,-709,,-709,,81,82,83,-709,65,,,,71,72,,,,75,,73,74,76,344,345", "79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108", "64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,", ",237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97", "96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74", "76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,,,,,,51,,,118,117", "119,108,64,110,109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,", ",,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95", "97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73", "74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118", "117,119,108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,", ",,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,", "102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,", ",,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,", ",50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67", ",,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,", ",81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,", ",,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110", "109,111,,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243", ",,66,67,,,68,,,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91", "101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79", "80,,,,,,84,31,30,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64", "110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237", ",,243,,,66,67,,,68,,314,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95", "97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,44,45,81,82,83,11,65,,,,71", "72,,,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,21,,", ",,,10,51,325,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,43,,,36,,,66,67,,,68,,38,,,,50,,,,,,,,,22", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,418,85,,92,106,107,,,44", "45,81,82,83,,65,,,,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347", "114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68", ",,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84", "339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109", "111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,", ",66,67,,,68,,,,312,,50,,,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98", ",,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344", "345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,,,,,51,,,118,117,119", "108,64,110,109,111,317,112,120,121,,104,105,47,48,46,,,,,,,,,,,,,,,", ",,,,237,,,243,,,66,67,,,68,,742,,312,,50,,,318,,,,,,242,,,,,102,315", "93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,44", "45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244,,,", ",,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48,46", ",,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,434,,,,50,,,,,,,,,242,,,", ",102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116,,,244", ",,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,47,48", "46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,434,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,22", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", "47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,,,,,50,,,,,,,,,242", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30,114,113,115,116", ",,244,,,,,,,51,,,118,117,119,108,64,110,109,111,317,112,120,121,,104", "105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68,,314,,312,,50", ",,318,,,,,,242,,,,,102,315,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31,30", "114,113,115,116,,,244,,,,,,,51,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68", ",,,,,50,,,,,,,,,242,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,33,34,79,80,,,,,,84,31", "30,114,113,115,116,,,21,,,,,,,51,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,47,48,46,,,,,,,,,,,,,,,,,,,,237,,,243,,,66,67,,,68", ",,,,,50,,,,,,,,,22,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,44,45,,75,,73,74,76,344,345,79,80,,,,,,84", "339,347,114,113,115,116,,,244,,,,,,,340,,,118,117,119,108,64,110,109", "111,,112,120,121,,104,105,,,348,,,,,,,,,,,,,,,,,,,,1105,,,243,,,66,67", ",,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82", "83,85,65,92,106,107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339", "347,114,113,115,116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111", ",112,120,121,,104,105,,,348,,,,,,,,,,,,,,,,,,,,393,,,36,,,66,67,,,68", ",38,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83", "85,65,92,106,107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347", "114,113,115,116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112", "120,121,,104,105,,,348,,,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,,", ",,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85", "65,92,106,107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114", "113,115,116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120", "121,,104,105,,,348,,,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,,,,,,", ",,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92", "106,107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113", "115,116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121", ",104,105,,,348,,,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,,,,,,,,,,", ",,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106", "107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,,,348,,,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,331,,,,,,,,,,,", ",,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106", "107,71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,,,348,,,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,,,,,,,,,,,,,,,", ",,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107", "71,72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116", ",,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105", ",,348,,,,,,,,,,,,,,,,,,,,1105,,,243,,,66,67,,,68,,,,,,,,,,,,,,,,,,,", "102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71", "72,,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244", ",,,,,,340,,,118,117,119,398,64,110,109,399,,112,120,121,,104,105,,,348", ",,,,,,,,,,,,,,,,405,,,400,,,243,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72", ",,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244", ",,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,348", ",,,,,,,,,,,,,,,,,,,336,,,332,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,", "75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,", ",,,340,,,118,117,119,398,64,110,109,399,,112,120,121,,104,105,,,348", ",,,,,,,,,,,,,,,,,,,400,,,243,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,,,", "75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115,116,,,244,,,", ",,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,348", ",,,,,,,,,,,,,,,,,,,336,,,243,,,66,67,,,68,,,582,,579,578,577,587,580", ",,,,,,,,590,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,350,,585,85,,92", "106,107,81,82,83,,65,598,597,,71,72,591,,,75,,73,74,76,344,345,79,80", ",,,,,84,339,347,114,113,115,116,,,244,,,,,,,340,,,118,117,119,108,64", "110,109,111,,112,120,121,,104,105,,,348,,,,,,,,,,,,,,,,,,,,336,,,243", ",,66,67,,,68,,,582,,579,578,577,587,580,,,,,,,,,590,,102,90,93,94,,95", "97,96,98,,,,,91,101,,,,543,,585,85,,92,106,107,81,82,83,,65,598,597", ",71,72,591,,,75,,73,74,76,344,345,79,80,,,,,,84,339,347,114,113,115", "116,,,244,,,,,,,340,,,118,117,119,108,64,110,109,111,,112,120,121,,104", "105,,,348,,,,,,,,,,,,,,,,,,,,1111,,,243,,,66,67,,,68,,,,,,,,,,,,,,,", ",,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,185,196", "186,209,182,202,192,191,212,213,207,190,189,184,210,214,215,194,183", "197,201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,", "180,187,178,179,175,176,177,138,140,,,139,,,,,,,,169,170,,166,148,149", "150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147", "168,165,164,173,160,161,155,153,145,167,146,,,174,102,,,,,,,,,,,,,,101", "185,196,186,209,182,202,192,191,212,213,207,190,189,184,210,214,215", "194,183,197,201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199", ",,,,,180,187,178,179,175,176,177,138,140,137,,139,,,,,,,,169,170,,166", "148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163", "162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174,102,,,,,", ",,,,,,,,101,185,196,186,209,182,202,192,191,212,213,207,190,189,184", "210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198,208,193", "181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,,,,,,,,169", "170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,", ",,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174", "102,,,,,,,,,,,,,,101,185,196,186,209,182,202,192,191,212,213,207,190", "189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198", "208,193,181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,", ",,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158", "159,,,,,,,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167", "146,,,174,102,,,,,,,,,,,,,,101,185,196,186,209,182,202,192,191,212,213", "207,190,189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206", "284,283,285,282,181,200,199,,,,,,180,187,178,179,279,280,281,277,140", "110,109,278,,112,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152", ",,,171,172,158,159,,,,,,289,,,,,,,,163,162,,147,168,165,164,173,160", "161,155,153,145,167,146,,,174,114,113,115,116,,,,,,,,,,,,,118,117,119", "719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590,,,,,,,,,,,,,", ",,721,,,703,,,585,701,,,702,,,,,595,594,598,597,,,,591,,,,720,,,,102", "90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,", "707,708,,118,117,119,719,,,582,722,579,578,577,587,580,104,105,,,348", ",,,590,,,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,,,,595,594,598,597", ",,,591,,,,720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116", ",,85,,92,106,107,,,707,708,,118,117,119,719,,,582,722,579,578,577,587", "580,104,105,,,348,,,,590,,,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,", ",,,,598,597,,,,591,,,,720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114", "113,115,116,,,85,,92,106,107,,,707,708,,118,117,119,719,,,582,722,579", "578,577,587,580,104,105,,,348,,,,590,,,,,,,,,,,,,,,,721,,,703,,,585", "701,,,702,,,,,595,594,598,597,,,,591,,,,720,,,,102,90,93,94,,95,97,96", "98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708,,118,117,119", "719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590,,,,,,,,,,,,,", ",,721,,,703,,,585,701,,,702,,,,,,,598,597,,,,591,,,,720,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708", ",118,117,119,719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590", ",,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,885,,,,,598,597,,,,591,,,", "720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92", "106,107,,,707,708,,118,117,119,719,,,582,722,579,578,577,587,580,104", "105,,,348,,,,590,,,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,,,,,,598", "597,,,,591,,,,720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,", "92,106,107,,,707,708,185,196,186,209,182,202,192,191,212,213,207,190", "189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198", "208,193,181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,", ",,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158", "159,,,,,,,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167", "146,,,174,114,113,115,116,,,582,,579,578,577,587,580,,,,118,117,119", "719,,590,,722,986,,,,,104,105,,,348,590,,,,,,,,,585,,,,,,,,,,721,598", "597,703,,,591,701,,,702,,885,,,,,,,591,,,,,,,720,,,,102,987,93,94,,95", "97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708,,118", "117,119,719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590,,,,,", ",,,,,,,,,,721,,,703,,,585,701,,,702,,885,,,595,594,598,597,,,,591,,", ",720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,232,114,113,115,116,,85", ",92,106,107,,,707,708,,,118,117,119,719,,,582,722,579,578,577,587,580", "104,105,,,348,,,,590,,,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,,,,595", "594,598,597,,,,591,,,,720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114", "113,115,116,,,85,,92,106,107,,,707,708,,118,117,119,719,,,582,722,579", "578,577,587,580,104,105,,,348,,,,590,,,,,,,,,,,,,,,,721,,,703,,,585", "701,,,702,,,,,595,594,598,597,,,,591,,,,720,,,,102,90,93,94,,95,97,96", "98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708,,118,117,119", "719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590,,,,,,,,,,,,,", ",,721,,,703,,,585,701,,,702,,999,,,,,598,597,,,,591,,,,720,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707", "708,,118,117,119,719,,,,722,986,,,,,104,105,,,348,590,,,,,,,,,,,,,,", ",,,,721,,,703,,,,701,,,702,,885,,,,,,,591,,,,,,,720,,,,102,987,93,94", ",95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708,", "118,117,119,719,,,,722,986,,,,,104,105,,,348,590,,,,,,,,,,,,,,,,,,,721", ",,703,,,,701,,,702,,885,,,,,,,591,,,,,,,720,,,,102,987,93,94,,95,97", "96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707,708,,118,117", "119,719,,,582,722,579,578,577,587,580,104,105,,,348,,,,590,,,,,,,,,", ",,,,,,721,,,703,,,585,701,,,702,,,,,,,598,597,,,,591,,,,720,,,,102,90", "93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,707", "708,,118,117,119,719,,,582,722,579,578,577,587,580,104,105,,,348,,,", "590,,,,,,,,,,,,,,,,721,,,703,,,585,701,,,702,,,,,,,598,597,,,,591,,", ",720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92", "106,107,,,707,708,,118,117,119,719,,,,722,,,,,,104,105,,,348,,,,,,,", "114,113,115,116,,,,,,,,,721,,,703,118,117,119,701,,,702,,885,,,,,104", "105,,,348,,,,,720,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,", "92,106,107,,,707,708,582,,579,578,577,587,580,,,,,102,90,93,94,590,95", "97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,585,641,,,,118", "117,119,,595,594,598,597,,,,591,,104,105,,,348,114,113,115,116,,,,,", ",,,,,,,118,117,119,,,,,,,,,,,104,105,,,348,,,,,,,,,,,,,,,,102,90,93", "94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,,,,,,,102,90,93,94", ",95,97,96,98,,,,,91,101,846,460,,,847,,85,,92,106,107,,169,170,,166", "148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,", ",163,162,,147,168,165,164,173,160,161,155,153,145,167,146,814,460,174", ",815,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172", "158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153", "145,167,146,456,460,174,,457,,,,,,,,169,170,,166,148,149,150,157,154", "156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165", "164,173,160,161,155,153,145,167,146,463,467,174,,462,,,,,,,,169,170", ",166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296,", ",,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,816,467", "174,,817,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171", "172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173,160,161,155", "153,145,167,146,755,467,174,,756,,,,,,,,169,170,,166,148,149,150,157", "154,156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168", "165,164,173,160,161,155,153,145,167,146,690,460,174,,691,,,,,,,,169", "170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296", ",,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,1190", "467,174,,1189,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152", ",,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173,160", "161,155,153,145,167,146,819,467,174,,820,,,,,,,,169,170,,166,148,149", "150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162", ",147,168,165,164,173,160,161,155,153,145,167,146,690,460,174,,691,,", ",,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159", ",,,,,296,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167", "146,692,467,174,,693,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151", "152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173", "160,161,155,153,145,167,146,752,460,174,,753,,,,,,,,169,170,,166,148", "149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163", "162,,147,168,165,164,173,160,161,155,153,145,167,146,511,460,174,,512", ",,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158", "159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145", "167,146,1193,460,174,,1194,,,,,,,,169,170,,166,148,149,150,157,154,156", ",,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164", "173,160,161,155,153,145,167,146,692,467,174,,693,,,,,,,,169,170,,166", "148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,", ",163,162,,147,168,165,164,173,160,161,155,153,145,167,146,1195,467,174", ",1196,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172", "158,159,,,,,,296,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153", "145,167,146,849,467,174,,848,,,,,,,,169,170,,166,148,149,150,157,154", "156,,,151,152,,,,171,172,158,159,,,,,,296,,,,,,,,163,162,,147,168,165", "164,173,160,161,155,153,145,167,146,,582,174,579,578,577,587,580,,582", ",579,578,577,587,580,590,,,,,,,,590,,,,,,,,,,,,,,585,,,,,,,,585,595", "594,598,597,,,,591,595,594,598,597,,,,591"];
      racc_action_table = (arr = $$$('::', 'Array').$new(28007, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby30$8 = function(str){var self = $Ruby30$8.$$s == null ? this : $Ruby30$8.$$s, $$9;

        
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$9 = function(i){var self = $$9.$$s == null ? this : $$9.$$s, $writer = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$9.$$s = self, $$9.$$arity = 1, $$9));}, $Ruby30$8.$$s = self, $Ruby30$8.$$arity = 1, $Ruby30$8));
      clist = ["849,847,1052,999,1056,827,394,849,849,849,762,762,619,849,849,285,849", "46,46,877,21,1109,285,816,849,849,415,1102,414,702,691,628,817,1105", "956,988,849,849,812,849,849,849,849,849,1108,1158,702,383,1032,1199", "1056,1196,137,988,622,815,1006,137,137,1199,847,21,622,814,391,877,849", "849,849,849,849,849,849,849,849,849,849,849,849,849,285,390,849,849", "849,999,849,849,816,691,849,1112,415,849,414,46,46,817,849,1006,849", "441,849,849,762,849,849,849,849,849,111,849,849,849,827,394,619,111", "111,111,1052,619,111,111,111,1052,111,849,1196,752,849,849,816,849,111", "849,111,111,111,1109,628,817,849,956,1109,849,111,111,1054,111,111,111", "111,111,1195,1206,812,1193,1194,812,441,812,1108,1158,815,383,1032,1108", "1158,1196,383,1032,814,391,1196,51,111,111,111,111,111,111,111,111,111", "111,111,111,111,111,390,382,111,111,111,752,111,111,730,970,111,43,321", "111,111,238,111,321,111,1112,111,872,111,111,1112,111,111,111,111,111", "848,111,1111,111,69,638,638,848,848,848,1061,1195,1061,848,848,752,848", "111,752,1114,111,111,111,111,848,111,873,111,472,472,752,872,111,800", "800,111,848,848,970,848,848,848,848,848,238,592,1054,508,508,1115,755", "1054,1195,1206,52,1193,1194,1195,1206,29,1193,1194,873,592,1116,730", "848,848,848,848,848,848,848,848,848,848,848,848,848,848,341,1117,848", "848,848,333,848,848,40,382,848,69,333,848,382,914,348,348,848,638,848", "333,848,848,638,848,848,848,848,848,52,848,692,848,25,755,755,690,846", "692,692,692,472,29,692,692,692,848,692,600,848,848,1129,848,600,848", "692,692,692,692,692,508,848,1130,341,848,29,753,692,692,333,692,692", "692,692,692,755,334,1139,755,747,914,653,284,334,1076,1141,341,1144", "1088,284,755,747,334,348,348,690,846,692,692,692,692,692,692,692,692", "692,692,692,692,692,692,53,352,692,692,692,655,692,692,1145,914,692", "400,914,692,692,400,692,1146,692,478,692,753,692,692,914,692,692,692", "692,692,334,692,692,692,653,653,284,1076,1076,1076,531,1088,1088,409", "653,1147,410,692,352,413,692,692,692,692,1076,692,53,692,1088,693,352", "753,692,236,753,692,693,693,693,655,655,693,693,693,335,693,753,1149", "478,655,876,335,283,693,876,693,693,693,700,283,335,869,399,700,1154", "693,693,700,693,693,693,693,693,17,531,531,531,409,409,409,410,410,410", "413,413,413,675,235,387,5,1164,531,236,387,5,693,693,693,693,693,693", "693,693,693,693,693,693,693,693,335,41,693,693,693,399,693,693,283,1170", "693,869,399,693,693,412,693,399,693,1175,693,399,693,693,675,693,693", "693,693,693,960,693,15,693,721,960,675,235,721,907,399,907,907,907,907", "907,457,693,41,282,693,693,693,693,907,693,282,693,1189,463,41,456,693", "1055,1055,693,463,463,463,1190,399,378,463,463,378,463,907,16,16,412", "412,412,281,463,463,907,907,907,907,281,1165,1165,907,457,88,463,463", "1192,463,463,463,463,463,14,42,457,88,366,456,366,366,366,366,366,282", "416,88,12,907,9,456,1131,366,1197,1131,463,463,463,463,463,463,463,463", "463,463,463,463,463,463,1202,19,463,463,463,366,463,463,281,1203,463", "411,42,463,366,366,366,366,463,1204,463,366,463,463,42,463,463,463,463", "463,462,463,463,463,704,704,1205,462,462,462,416,416,416,462,462,280", "462,463,19,3,463,463,280,463,462,463,279,278,774,774,19,366,463,279", "278,463,462,462,1211,462,462,462,462,462,1217,411,411,411,768,392,768", "768,768,768,768,277,392,371,371,371,371,371,277,768,516,392,462,462", "462,462,462,462,462,462,462,462,462,462,462,462,280,517,462,462,462", "768,462,462,381,381,462,279,278,462,768,768,768,768,462,518,462,768", "462,462,522,462,462,462,462,462,108,462,799,462,392,799,491,108,108", "108,277,490,108,108,108,276,108,462,489,488,462,462,276,462,108,462", "108,108,108,538,375,768,462,375,539,462,108,108,542,108,108,108,108", "108,544,548,549,18,374,337,27,374,548,553,18,563,337,27,564,567,568", "548,569,18,570,337,108,108,108,108,108,108,108,108,108,108,108,108,108", "108,276,571,108,108,108,573,108,108,1151,487,108,574,584,108,108,1151", "108,474,108,596,108,599,108,108,1151,108,108,108,108,108,548,108,18", "108,337,27,536,536,536,536,536,487,756,601,464,487,487,108,603,756,108", "108,108,108,756,108,440,108,756,604,605,606,108,440,455,108,818,818", "818,818,818,818,440,1151,616,818,818,454,452,620,818,398,818,818,818", "818,818,818,818,324,324,324,324,324,818,818,818,818,818,818,818,621", "585,818,585,585,585,756,585,818,818,818,818,818,818,818,818,818,818", "818,818,440,818,818,818,631,818,818,818,818,818,820,631,398,623,353", "49,49,820,585,398,631,353,820,442,398,438,820,585,398,818,353,435,818", "433,650,818,818,1110,658,818,660,818,432,430,1110,818,667,398,424,486", "676,49,49,1110,818,681,404,686,694,818,818,818,818,695,818,818,818,818", "1074,631,697,395,818,818,393,820,720,398,1074,353,818,486,818,818,818", "486,486,818,818,823,823,823,823,823,823,723,724,389,823,823,727,729", "1110,823,819,823,823,823,823,823,823,823,388,735,736,737,1074,823,823", "823,823,823,823,823,739,741,823,379,1074,749,751,377,823,823,823,823", "823,823,823,823,823,823,823,823,376,823,823,823,1104,823,823,823,823", "823,402,1104,819,754,54,757,758,402,761,819,1104,54,372,764,819,368", "402,364,819,823,54,783,823,784,786,823,823,234,362,823,802,823,808,809", "234,823,785,819,785,785,785,358,785,234,823,813,356,349,822,823,823", "823,823,347,823,823,823,823,886,1104,343,826,823,823,342,402,828,819", "886,54,823,340,823,823,823,843,339,823,823,834,834,834,834,834,834,845", "336,854,834,834,330,329,234,834,870,834,834,834,834,834,834,834,23,328", "326,325,886,834,834,834,834,834,834,834,878,879,834,883,886,884,885", "888,834,834,834,834,834,834,834,834,834,834,834,834,313,834,834,834", "310,834,834,834,834,834,23,23,23,23,23,23,23,23,23,23,23,309,23,23,900", "903,23,23,904,834,1,23,834,771,913,834,834,295,918,834,921,834,23,771", "23,834,23,23,922,23,23,23,23,23,834,23,925,927,928,834,834,834,834,930", "834,834,834,834,932,934,935,937,834,834,940,23,771,771,947,950,834,771", "834,834,834,957,959,834,834,1010,1010,1010,1010,1010,1010,966,646,646", "1010,1010,646,646,646,1010,967,1010,1010,1010,1010,1010,1010,1010,8", "8,8,8,8,1010,1010,1010,1010,1010,1010,1010,968,969,1010,979,980,981", "982,445,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010,1010", "244,1010,1010,1010,991,1010,1010,1010,1010,1010,445,445,445,445,445", "445,445,445,445,445,445,992,445,445,993,997,445,445,998,1010,240,239", "1010,1003,1013,1010,1010,1014,1016,1010,1017,1010,445,1018,445,1010", "445,445,1020,445,445,445,445,445,1010,445,1021,1022,237,1010,1010,1010", "1010,1048,1010,1010,1010,1010,1049,1065,216,1075,1010,1010,1083,445", "1085,445,,,1010,,1010,1010,1010,,,1010,1010,615,615,615,615,615,615", ",,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615,615,615,615", "615,615,615,,,615,,,,,794,615,615,615,615,615,615,615,615,615,615,615", "615,,615,615,615,,615,615,615,615,615,794,794,794,794,794,794,794,794", "794,794,794,,794,794,,,794,794,,615,,,615,1091,,615,615,,,615,,615,794", "1091,794,615,794,794,,794,794,794,794,794,615,794,,,,615,615,615,615", ",615,615,615,615,,,,,615,615,,794,1091,1091,,,615,1091,615,615,615,", ",615,615,618,618,618,618,618,618,,,,618,618,,,,618,,618,618,618,618", "618,618,618,,,,,,618,618,618,618,618,618,618,,,618,,,,,451,618,618,618", "618,618,618,618,618,618,618,618,618,,618,618,618,,618,618,618,618,618", "451,451,451,451,451,451,451,451,451,451,451,,451,451,,,451,451,,618", ",,618,,,618,618,,,618,,618,451,,451,618,451,451,,451,451,451,451,451", "618,451,,,,618,618,618,618,,618,618,618,618,,,,,618,618,,451,,,,,618", ",618,618,618,,,618,618,1029,1029,1029,1029,1029,1029,,,,1029,1029,,", ",1029,,1029,1029,1029,1029,1029,1029,1029,,,,,,1029,1029,1029,1029,1029", "1029,1029,,,1029,,,,,763,1029,1029,1029,1029,1029,1029,1029,1029,1029", "1029,1029,1029,,1029,1029,1029,,1029,1029,1029,1029,1029,763,763,763", "763,763,763,763,763,763,763,763,,763,763,,,763,763,,1029,,,1029,,,1029", "1029,,,1029,,1029,763,,763,1029,763,763,,763,763,763,763,763,1029,763", ",,,1029,1029,1029,1029,,1029,1029,1029,1029,,,,,1029,1029,,763,,,,,1029", ",1029,1029,1029,,,1029,1029,218,218,218,218,218,218,,,,218,218,,,,218", ",218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,1174", "218,1174,1174,1174,,1174,218,218,218,218,218,218,218,218,218,218,218", "218,,218,218,218,,218,218,218,218,218,505,505,505,505,505,505,505,505", "505,505,505,,505,505,,,505,505,,218,,,218,,,218,218,,,218,,218,505,", "505,218,505,505,,505,505,505,505,505,218,505,,,,218,218,218,218,,218", "218,218,218,,,,,218,218,505,505,,,,,218,,218,218,218,,,218,218,1066", "1066,1066,1066,1066,1066,,,,1066,1066,,,,1066,,1066,1066,1066,1066,1066", "1066,1066,,,,,,1066,1066,1066,1066,1066,1066,1066,,1068,1066,1068,1068", "1068,,1068,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066,1066", ",1066,1066,1066,,1066,1066,1066,1066,1066,851,851,851,851,851,851,851", "851,851,851,851,,851,851,,,851,851,,1066,,,1066,,,1066,1066,,,1066,", "1066,851,,851,1066,851,851,,851,851,851,851,851,1066,851,,,,1066,1066", "1066,1066,,1066,1066,1066,1066,,,,,1066,1066,,851,,,,,1066,,1066,1066", "1066,,,1066,1066,1067,1067,1067,1067,1067,1067,,,,1067,1067,,,,1067", ",1067,1067,1067,1067,1067,1067,1067,,,,,,1067,1067,1067,1067,1067,1067", "1067,,,1067,,,,,,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067", "1067,,1067,1067,1067,,1067,1067,1067,1067,1067,307,307,307,307,307,307", "307,307,307,307,307,,307,307,,,307,307,,1067,,,1067,,,1067,1067,,,1067", ",1067,307,,307,1067,307,307,,307,307,307,307,307,1067,307,,,,1067,1067", "1067,1067,,1067,1067,1067,1067,,,,,1067,1067,,307,,,,,1067,,1067,1067", "1067,,,1067,1067,639,639,639,639,639,639,,,,639,639,,,,639,,639,639", "639,639,639,639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,,639", "639,639,639,639,639,639,639,639,639,639,639,,639,639,639,,639,639,639", "639,639,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,1050,,1050", "1050,,,1050,1050,,639,,,639,,,639,639,,,639,,639,1050,,1050,639,1050", "1050,,1050,1050,1050,1050,1050,639,1050,,,,639,639,639,639,,639,639", "639,639,,,,,639,639,,1050,,,,,639,,639,639,639,,,639,639,386,386,386", "386,386,386,,,,386,386,,,,386,,386,386,386,386,386,386,386,,,,,,386", "386,386,386,386,386,386,,,386,,,,,,386,386,386,386,386,386,386,386,386", "386,386,386,,386,386,386,,386,386,386,386,386,560,560,560,560,560,560", "560,560,560,560,560,,560,560,,,560,560,,386,,,386,,,386,386,,,386,,386", "560,,560,386,560,560,,560,560,560,560,560,386,560,,,,386,386,386,386", ",386,386,386,386,,,,,386,386,,560,,,,,386,,386,386,386,,,386,386,36", "36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36", "36,36,36,,,36,,,,,,36,36,36,36,36,36,36,36,36,36,36,36,,36,36,36,,36", "36,36,36,36,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,", "1009,1009,,,1009,1009,,36,,,36,,,36,36,,,36,,36,1009,,1009,36,1009,1009", ",1009,1009,1009,1009,1009,36,1009,,,,36,36,36,36,,36,36,36,36,,,,,36", "36,,1009,,,,,36,,36,36,36,,,36,36,135,135,135,135,135,135,,,,135,135", ",,,135,,135,135,135,135,135,135,135,,,,,,135,135,135,135,135,135,135", ",,135,,,,,,135,135,135,135,135,135,135,135,135,135,135,135,,135,135", "135,,135,135,135,135,135,1027,1027,1027,1027,1027,1027,1027,1027,1027", "1027,1027,,1027,1027,,,1027,1027,,135,,,135,,,135,135,,,135,,135,1027", ",1027,135,1027,1027,,1027,1027,1027,1027,1027,135,1027,,,,135,135,135", "135,,135,135,135,135,,,,,135,135,,1027,,,,,135,,135,135,135,,,135,135", "332,332,332,332,332,332,,,,332,332,,,,332,,332,332,332,332,332,332,332", ",,,,,332,332,332,332,332,332,332,,941,332,941,941,941,,941,332,332,332", "332,332,332,332,332,332,332,332,332,,332,332,332,,332,332,332,332,332", "781,,781,781,781,,781,,941,,942,,942,942,942,,942,941,,332,,,332,,,332", "332,,502,332,,332,,,,332,,781,,1119,,1119,1119,1119,332,1119,781,942", ",332,332,332,332,,332,332,332,332,,,502,,332,332,502,502,,502,502,,332", ",332,332,332,,1119,332,332,385,385,385,385,385,385,,,,385,385,,,,385", ",385,385,385,385,385,385,385,,,,,,385,385,385,385,385,385,385,,,385", ",,501,,,385,385,385,385,385,385,385,385,385,385,385,385,,385,385,385", ",385,385,385,385,385,503,503,503,503,503,503,503,501,,503,503,501,501", ",501,501,503,503,,385,,,385,,,385,385,,,385,,385,503,,503,385,503,503", ",503,503,503,503,503,385,503,,,,385,385,385,385,,385,385,385,385,,,", ",385,385,,1118,,1118,1118,1118,385,1118,385,385,385,,,385,385,1120,1120", "1120,1120,1120,1120,,,,1120,1120,,,,1120,,1120,1120,1120,1120,1120,1120", "1120,1118,,,,,1120,1120,1120,1120,1120,1120,1120,,,1120,,,,,,1120,1120", "1120,1120,1120,1120,1120,1120,1120,1120,1120,1120,,1120,1120,1120,,1120", "1120,1120,1120,1120,499,499,499,499,499,499,499,,,499,499,,,,,,499,499", ",1120,,,1120,,,1120,1120,,,1120,,1120,499,,499,1120,499,499,,499,499", "499,499,499,1120,499,,,,1120,1120,1120,1120,,1120,1120,1120,1120,,,", ",1120,1120,,,,,,,1120,,1120,1120,1120,,,1120,1120,327,327,327,327,327", "327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327", "327,327,327,327,,,327,,,,,,327,327,327,327,327,327,327,327,327,327,327", "327,,327,327,327,,327,327,327,327,327,500,500,500,500,500,500,500,,", "500,500,,,,,,500,500,,327,,,327,,,327,327,,,327,,327,500,,500,327,500", "500,,500,500,500,500,500,327,500,,,,327,327,327,327,,327,327,327,327", ",,,,327,327,,,,,,,327,,327,327,327,,,327,327,908,908,908,908,908,908", ",,,908,908,,,,908,,908,908,908,908,908,908,908,,,,,,908,908,908,908", "908,908,908,,,908,,,,,,908,908,908,908,908,908,908,908,908,908,908,908", ",908,908,908,,908,908,908,908,908,498,498,498,498,498,498,498,,,498", "498,,,,,,498,498,,908,,,908,,,908,908,,,908,,908,498,,498,908,498,498", ",498,498,498,498,498,908,498,,,,908,908,908,908,,908,908,908,908,,,", ",908,908,,,,,,,908,,908,908,908,,,908,908,1166,1166,1166,1166,1166,1166", ",,,1166,1166,,,,1166,,1166,1166,1166,1166,1166,1166,1166,,,,,,1166,1166", "1166,1166,1166,1166,1166,,,1166,,,,,,1166,1166,1166,1166,1166,1166,1166", "1166,1166,1166,1166,1166,,1166,1166,1166,,1166,1166,1166,1166,1166,496", "496,496,496,496,496,496,,,496,496,,,,,,496,496,,1166,,,1166,,,1166,1166", ",,1166,,1166,496,,496,1166,496,496,,496,496,496,496,496,1166,496,,,", "1166,1166,1166,1166,,1166,1166,1166,1166,,,,,1166,1166,,,,,,,1166,,1166", "1166,1166,,,1166,1166,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2", "2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,2,2,2,355,355", "355,355,355,355,355,355,355,355,355,,355,355,,,355,355,,2,,,2,,,2,2", ",,2,,2,355,,355,2,355,355,,355,355,355,355,355,2,355,,,,2,2,2,2,,2,2", "2,2,,,,,2,2,,,,,,,2,,2,2,2,,,2,2,370,370,370,370,370,370,,,,370,370", ",,,370,,370,370,370,370,370,370,370,,,,,,370,370,370,370,370,370,370", ",,370,,,,,,370,370,370,370,370,370,370,370,370,370,370,370,,370,370", "370,,370,370,370,370,370,354,354,354,354,354,354,354,354,354,354,354", ",354,354,,,354,354,,370,,,370,,,370,370,,,370,,370,354,,354,370,354", "354,,354,354,354,354,354,370,354,,,,370,370,370,370,,370,370,370,370", ",,,,370,370,,,,,,,370,,370,370,370,,,370,370,369,369,369,369,369,369", ",,,369,369,,,,369,,369,369,369,369,369,369,369,,,,,,369,369,369,369", "369,369,369,,,369,,,,,,369,369,369,369,369,369,369,369,369,369,369,369", ",369,369,369,,369,369,369,369,369,504,504,504,504,504,504,504,504,,504", "504,,,,,,504,504,,369,,,369,,,369,369,,,369,,369,504,,504,369,504,504", ",504,504,504,504,504,369,504,,,,369,369,369,369,,369,369,369,369,,,", ",369,369,,,,,,,369,,369,369,369,,,369,369,920,920,920,920,920,920,,", ",920,920,,,,920,,920,920,920,920,920,920,920,,,,,,920,920,920,920,920", "920,920,,,920,,,,,,920,920,920,920,920,920,920,920,920,920,920,920,", "920,920,920,,920,920,920,920,920,559,,,,,,,,,,,,,,,,559,559,,920,,,920", ",,920,920,,,920,,920,559,,559,920,559,559,,559,559,,,559,920,559,,,", "920,920,920,920,,920,920,920,920,,,,,920,920,,,,,,,920,,920,920,920", ",,920,920,363,363,363,363,363,363,,,,363,363,,,,363,,363,363,363,363", "363,363,363,,,,,,363,363,363,363,363,363,363,,,363,,,,,,363,363,363", "363,363,363,363,363,363,363,363,363,,363,363,363,,363,363,363,363,363", "484,484,484,484,484,484,484,484,484,484,484,,484,484,,,484,484,,363", ",,363,,,363,363,,,363,,363,484,,484,363,484,484,,484,484,484,484,484", "363,484,,,,363,363,363,363,,363,363,363,363,,,,,363,363,,,,,,,363,,363", "363,363,,,363,363,1107,1107,1107,1107,1107,1107,,,,1107,1107,,,,1107", ",1107,1107,1107,1107,1107,1107,1107,,,,,,1107,1107,1107,1107,1107,1107", "1107,,,1107,,,,,,1107,1107,1107,1107,1107,1107,1107,1107,1107,1107,1107", "1107,,1107,1107,1107,,1107,1107,1107,1107,1107,497,497,497,497,497,497", "497,,,497,497,,,,,,497,497,,1107,,,1107,,,1107,1107,,,1107,,1107,497", ",497,1107,497,497,,497,497,497,497,497,1107,497,,,,1107,1107,1107,1107", ",1107,1107,1107,1107,,,,,1107,1107,,,,,,,1107,,1107,1107,1107,,,1107", "1107,955,955,955,955,955,955,,,,955,955,,,,955,,955,955,955,955,955", "955,955,,,,,,955,955,955,955,955,955,955,,,955,,,,,,955,955,955,955", "955,955,955,955,955,955,955,955,,955,955,955,,955,955,955,955,955,485", "485,485,485,485,485,485,485,485,485,485,,485,485,,,485,485,,955,,,955", ",,955,955,,,955,,955,485,,485,955,485,485,,485,485,485,485,485,955,485", ",,,955,955,955,955,,955,955,955,955,,,,,955,955,,,,,,,955,,955,955,955", ",,955,955,961,961,961,961,961,961,,,,961,961,,,,961,,961,961,961,961", "961,961,961,,,,,,961,961,961,961,961,961,961,,,961,,,,,,961,961,961", "961,961,961,961,961,961,961,961,961,,961,961,961,,961,961,961,961,961", "495,495,495,495,495,495,495,,,495,495,,,,,,495,495,,961,,,961,,,961", "961,,,961,,961,495,,495,961,495,495,,495,495,495,495,495,961,495,,,", "961,961,961,961,,961,961,961,961,,,,,961,961,,,,,,,961,,961,961,961", ",,961,961,243,243,243,243,243,243,,,,243,243,,,,243,,243,243,243,243", "243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,243,243,243", "243,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243,243", "506,,,,,,,,,,,,,,,,506,506,,243,,,243,,,243,243,,,243,,243,506,,506", "243,506,506,,506,506,,,506,243,506,,,,243,243,243,243,,243,243,243,243", ",,,,243,243,,,,132,132,132,243,132,243,243,243,132,132,243,243,,132", ",132,132,132,132,132,132,132,,,,,,132,132,132,132,132,132,132,,,132", ",,,,,,132,,,132,132,132,132,132,132,132,132,,132,132,132,,132,132,132", "132,132,492,,,,,,,,,,,,,,,,492,492,,132,,,132,,,132,132,,,132,,,492", ",492,132,492,492,,492,492,,,,132,,,,,132,132,132,132,,132,132,132,132", ",,,,132,132,,,,,,,132,,132,132,132,510,,132,132,,,,510,510,510,,,510", "510,510,,510,494,,,,,,,510,510,510,,,,,,,494,494,,510,510,,510,510,510", "510,510,,,,,,494,,292,292,494,494,292,494,494,,,,,,292,292,,292,292", "292,292,292,292,292,,,292,292,510,,,292,292,292,292,510,,,,,510,510", ",,,,,,292,292,,292,292,292,292,292,292,292,292,292,292,292,292,510,510", "292,,,,,,,,,,,,,510,,,510,,,,,510,7,7,7,7,7,,510,,7,7,,,,7,,7,7,7,7", "7,7,7,,,,,,7,7,7,7,7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7", "7,7,7,7,493,,,,,,,,,,,,,,,,493,493,,7,,,7,,,7,7,,,7,,7,493,,493,7,493", "493,,493,493,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7,7,,,,1155,1155,1155,7,1155", "7,7,7,1155,1155,7,7,,1155,,1155,1155,1155,1155,1155,1155,1155,,,,,,1155", "1155,1155,1155,1155,1155,1155,,,1155,,,,,,,1155,,,1155,1155,1155,1155", "1155,1155,1155,1155,1155,1155,1155,1155,,1155,1155,1155,1155,1155,,", ",,,,,,,,,,,,,,,,,1155,,,1155,,,1155,1155,,,1155,,1155,,1155,,1155,,", "1155,,,,,,1155,,,,,1155,1155,1155,1155,,1155,1155,1155,1155,,,,,1155", "1155,,,,22,22,22,1155,22,1155,1155,1155,22,22,1155,1155,,22,,22,22,22", "22,22,22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22", "22,22,22,,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22", ",,22,,,,,,22,,,,,,,,,22,,,,,22,22,22,22,,22,22,22,22,,,,,22,22,,,,1123", "1123,1123,22,1123,22,22,22,1123,1123,22,22,,1123,,1123,1123,1123,1123", "1123,1123,1123,,,,,,1123,1123,1123,1123,1123,1123,1123,,,1123,,,,,,", "1123,,,1123,1123,1123,1123,1123,1123,1123,1123,,1123,1123,1123,,1123", "1123,1123,1123,1123,,,,,,,,,,,,,,,,,,,,1123,,,1123,,,1123,1123,,,1123", ",,,,,1123,,,,,,,,,1123,,,,,1123,1123,1123,1123,,1123,1123,1123,1123", ",,,,1123,1123,,,,,,,1123,,1123,1123,1123,30,,1123,1123,,,,30,30,30,", ",30,30,30,,30,,,,,,,,30,30,30,30,,,,,,,,,30,30,,30,30,30,30,30,,,,,", ",,,,,,,,,,,,,,,,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30", ",,30,,30,30,,,30,30,,30,,30,,30,,30,30,,30,30,30,30,30,31,30,30,30,", ",,31,31,31,,,31,31,31,,31,30,,,30,30,,30,31,30,31,31,,,,,30,,,,31,31", ",31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,,31,31,31,31,31,31,31,31,31,31", "31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,,31,31", "31,31,31,,31,,31,,,,,,,,,,,,,,31,,,31,31,,31,,31,32,32,32,,32,,31,,32", "32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,", "32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,32,32,32,,,,,,,,,,,", ",,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32,,,,,,32,,,,,32,32,32,32", ",32,32,32,32,,,,,32,32,,,,33,33,33,32,33,32,32,32,33,33,32,32,,33,,33", "33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33", "33,33,33,33,33,33,33,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33", ",,33,33,,,33,,33,,33,,33,,,33,,,,,,33,,,,,33,33,33,33,,33,33,33,33,", ",,,33,33,,,,34,34,34,33,34,33,33,33,34,34,33,33,,34,,34,34,34,34,34", "34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34", "34,34,34,34,34,,34,34,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,", "34,,34,,34,,34,,,34,,,,,,34,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,", ",,1122,1122,1122,34,1122,34,34,34,1122,1122,34,34,,1122,,1122,1122,1122", "1122,1122,1122,1122,,,,,,1122,1122,1122,1122,1122,1122,1122,,,1122,", ",,,,,1122,,,1122,1122,1122,1122,1122,1122,1122,1122,,1122,1122,1122", ",1122,1122,1122,1122,1122,,,,,,,,,,,,,,,,,,,,1122,,,1122,,,1122,1122", ",,1122,,,,,,1122,,,,,,,,,1122,,,,,1122,1122,1122,1122,,1122,1122,1122", "1122,,,,,1122,1122,,,,44,44,44,1122,44,1122,1122,1122,44,44,1122,1122", ",44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,", "44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,", ",44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44", ",,,,44,44,,,,45,45,45,44,45,44,44,44,45,45,44,44,,45,,45,45,45,45,45", "45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45", "45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45", ",,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,47,47,47", "45,47,45,45,45,47,47,45,45,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47", "47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,47", "47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,", ",47,47,47,47,,47,47,47,47,,,,,47,47,,,,48,48,48,47,48,47,47,47,48,48", "47,47,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,48,,,,,", ",48,,,48,48,48,48,48,48,48,48,,48,48,48,,48,48,48,48,48,,,,,,,,,,,,", ",,,,,,,48,,,48,,,48,48,,,48,,,,,,48,,,,,,,,,48,,,,,48,48,48,48,,48,48", "48,48,,,,,48,48,,,,50,50,50,48,50,48,48,48,50,50,48,48,,50,,50,50,50", "50,50,50,50,,,,,,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50", "50,50,50,,50,50,50,,50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50", ",,50,,,,,,50,,,,,,,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,,", ",50,,50,50,50,64,,50,50,,,,64,64,64,,,64,64,64,,64,,,,,,,,64,,64,64", "64,,,,707,707,707,707,64,64,,64,64,64,64,64,,,,,707,707,707,,,,,,,,", ",,707,707,,,707,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64", ",,64,,,64,,,64,64,,64,,64,,64,,64,64,,64,64,64,64,64,,64,,64,,707,707", "707,707,,707,707,707,707,,,,64,707,707,64,64,64,64,,64,707,64,707,707", "707,,64,66,66,66,66,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66", "66,66,66,66,66,66,,,66,,,,,,66,66,,66,66,66,66,66,66,66,66,66,,66,66", "66,,66,66,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,66,,,,66", ",,,,,,,,66,,,,,66,66,66,66,,66,66,66,66,,,,,66,66,,,,67,67,67,66,67", "66,66,66,67,67,66,66,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67", "67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67", "67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,,,67,,", ",,67,67,67,67,,67,67,67,67,,,,,67,67,,,,68,68,68,67,68,67,67,67,68,68", "67,67,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,", ",68,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,,,,,,", ",,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68,68,", "68,68,68,68,,,,,68,68,,,,71,71,71,68,71,68,68,68,71,71,68,68,,71,,71", "71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71", "71,71,71,71,71,,71,71,71,,71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71", ",,71,71,,,71,,,,,,71,,,,,,,,,71,,,,,71,71,71,71,,71,71,71,71,,,,,71", "71,,,,72,72,72,71,72,71,71,71,72,72,71,71,,72,,72,72,72,72,72,72,72", ",,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,,72", "72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,,72,,,,,,72", ",,,,,,,,72,,,,,72,72,72,72,,72,72,72,72,,,,,72,72,,,,75,75,75,72,75", "72,72,72,75,75,72,72,,75,,75,75,75,75,75,75,75,,,,,,75,75,75,75,75,75", "75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75,75,,75,75,75,75,75", ",,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75,,,,,,75,,,,,,,,,75,,,,,75,75", "75,75,,75,75,75,75,,,,,75,75,75,,,,,75,75,,75,75,75,,,75,75,124,124", "124,124,124,,,,124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124", "124,124,124,124,124,124,,,124,,,,,,124,124,124,124,124,124,124,124,124", "124,124,124,,124,124,124,,124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124", ",,124,,,124,124,,,124,,124,,,,124,,,,,,,,,124,,,,,124,124,124,124,,124", "124,124,124,,,,,124,124,,,,,,124,124,,124,124,124,,,124,124,129,129", "129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129,129", "129,129,129,129,129,,,129,,,,,,,129,,,129,129,129,129,129,129,129,129", ",129,129,129,,129,129,129,129,129,,,,,,,,,,,,,,,,,,,,129,,,129,,,129", "129,,,129,,,,,,129,,,,,,,,,129,,,,,129,129,129,129,,129,129,129,129", ",,,,129,129,,,,130,130,130,129,130,129,129,129,130,130,129,129,,130", ",130,130,130,130,130,130,130,,,,,,130,130,130,130,130,130,130,,,130", ",,,,,,130,,,130,130,130,130,130,130,130,130,,130,130,130,,130,130,130", "130,130,,,,,,,,,,,,,,,,,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,", ",,130,,,,,130,130,130,130,,130,130,130,130,,,,,130,130,,,,131,131,131", "130,131,130,130,130,131,131,130,130,,131,,131,131,131,131,131,131,131", ",,,,,131,131,131,131,131,131,131,,,131,,,,,,,131,,,131,131,131,131,131", "131,131,131,,131,131,131,,131,131,131,131,131,,,,,,,,,,,,,,,,,,,,131", ",,131,,,131,131,,,131,,,,,,131,,,,,,,,,131,,,,,131,131,131,131,,131", "131,131,131,,,,,131,131,,,,515,515,515,131,515,131,131,131,515,515,131", "131,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515,515,515", ",,515,,,,,,,515,,,515,515,515,515,515,515,515,515,,515,515,515,,515", "515,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,,,,,,515", ",,,,,,,,515,,,,,515,515,515,515,,515,515,515,515,,,,,515,515,,,,,,,515", ",515,515,515,,,515,515,133,133,133,133,133,,,,133,133,,,,133,,133,133", "133,133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,133", "133,,133,133,133,133,133,133,133,133,133,,133,133,133,,133,133,133,133", "133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,133,,,,133,,,,,,,", ",133,,,,,133,133,133,133,,133,133,133,133,,,,,133,133,,,,231,231,231", "133,231,133,133,133,231,231,133,133,,231,,231,231,231,231,231,231,231", ",,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231", "231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231", ",,231,,,231,231,,,231,,,,,,231,,,,,,,,,231,,,,,231,231,231,231,,231", "231,231,231,,,,,231,231,231,,,242,242,242,231,242,231,231,231,242,242", "231,231,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242", "242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,", "242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,", ",,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,", ",,247,247,247,242,247,242,242,242,247,247,242,242,,247,,247,247,247", "247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247", "247,247,247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,", ",,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247", "247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247", "247,247,248,248,247,247,,248,,248,248,248,248,248,248,248,,,,,,248,248", "248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248", ",248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248", "248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248", ",,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248,248,,249", ",249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249", ",,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249", "249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,", ",,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250", "249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250,250,250", ",,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250", "250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250", ",,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250", "250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,250", "250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251", ",,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251", "251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251", ",,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252", "252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252,252,252", "252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252", "252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,", ",,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252", "252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252", "253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253", "253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253", "253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253", ",,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253", ",,,254,254,254,253,254,253,253,253,254,254,253,253,,254,,254,254,254", "254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254", "254,254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,", ",,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254", "254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254", "254,254,255,255,254,254,,255,,255,255,255,255,255,255,255,,,,,,255,255", "255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255", ",255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255", "255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255", ",,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255,255,,256", ",256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256", ",,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256", "256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,", ",,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257", "256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257,257,257", ",,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257", "257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257", ",,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257", "257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,257", "257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258", ",,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258", "258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258", ",,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,259", "259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259,259,259", "259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259", "259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,", ",,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259", "259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259,259,259", "260,260,259,259,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260", "260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260", "260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260", ",,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260", ",,,261,261,261,260,261,260,260,260,261,261,260,260,,261,,261,261,261", "261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261", "261,261,261,261,261,261,261,,261,261,261,,261,261,261,261,261,,,,,,", ",,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,,261,,,,,261", "261,261,261,,261,261,261,261,,,,,261,261,,,,262,262,262,261,262,261", "261,261,262,262,261,261,,262,,262,262,262,262,262,262,262,,,,,,262,262", "262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262", ",262,262,262,,262,262,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262", "262,,,262,,,,,,262,,,,,,,,,262,,,,,262,262,262,262,,262,262,262,262", ",,,,262,262,,,,263,263,263,262,263,262,262,262,263,263,262,262,,263", ",263,263,263,263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263", ",,,,,,263,,,263,263,263,263,263,263,263,263,,263,263,263,,263,263,263", "263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,,,,,263,,,,,,", ",,263,,,,,263,263,263,263,,263,263,263,263,,,,,263,263,,,,264,264,264", "263,264,263,263,263,264,264,263,263,,264,,264,264,264,264,264,264,264", ",,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264", "264,264,264,,264,264,264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264", ",,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264,264,264,264,,264", "264,264,264,,,,,264,264,,,,265,265,265,264,265,264,264,264,265,265,264", "264,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265,265", ",,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265,,265", "265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,,,,,265", ",,,,,,,,265,,,,,265,265,265,265,,265,265,265,265,,,,,265,265,,,,266", "266,266,265,266,265,265,265,266,266,265,265,,266,,266,266,266,266,266", "266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266", "266,266,266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,", ",,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266", "266,,266,266,266,266,,,,,266,266,,,,267,267,267,266,267,266,266,266", "267,267,266,266,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267", "267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267", "267,,267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267", ",,,,,267,,,,,,,,,267,,,,,267,267,267,267,,267,267,267,267,,,,,267,267", ",,,268,268,268,267,268,267,267,267,268,268,267,267,,268,,268,268,268", "268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268", "268,268,268,268,268,268,268,,268,268,268,,268,268,268,268,268,,,,,,", ",,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,,,,268,,,,,268", "268,268,268,,268,268,268,268,,,,,268,268,,,,273,273,273,268,273,268", "268,268,273,273,268,268,,273,,273,273,273,273,273,273,273,,,,,,273,273", "273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273", ",273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273", "273,,,273,,,,,,273,,,,,,,,,273,,,,,273,273,273,273,,273,273,273,273", ",,,,273,273,,,,974,974,974,273,974,273,273,273,974,974,273,273,,974", ",974,974,974,974,974,974,974,,,,,,974,974,974,974,974,974,974,,,974", ",,,,,,974,,,974,974,974,974,974,974,974,974,,974,974,974,,974,974,974", "974,974,,,,,,,,,,,,,,,,,,,,974,,,974,,,974,974,,,974,,,,,,974,,,,,,", ",,974,,,,,974,974,974,974,,974,974,974,974,,,,,974,974,,,,973,973,973", "974,973,974,974,974,973,973,974,974,,973,,973,973,973,973,973,973,973", ",,,,,973,973,973,973,973,973,973,,,973,,,,,,,973,,,973,973,973,973,973", "973,973,973,973,973,973,973,,973,973,973,973,973,,,,,,,,,,,,,,,,,,,", "973,,,973,,,973,973,,,973,,,,973,,973,,,973,,,,,,973,,,,,973,973,973", "973,,973,973,973,973,,,,,973,973,,,,954,954,954,973,954,973,973,973", "954,954,973,973,,954,,954,954,954,954,954,954,954,,,,,,954,954,954,954", "954,954,954,,,954,,,,,,,954,,,954,954,954,954,954,954,954,954,,954,954", "954,,954,954,954,954,954,,,,,,,,,,,,,,,,,,,,954,,,954,,,954,954,,,954", ",954,,,,954,,,,,,,,,954,,,,,954,954,954,954,,954,954,954,954,,,,,954", "954,,,,949,949,949,954,949,954,954,954,949,949,954,954,,949,,949,949", "949,949,949,949,949,,,,,,949,949,949,949,949,949,949,,,949,,,,,,,949", ",,949,949,949,949,949,949,949,949,,949,949,949,,949,949,949,949,949", ",,,,,,,,,,,,,,,,,,,949,,,949,,,949,949,,,949,,,,,,949,,,,,,,,,949,,", ",,949,949,949,949,,949,949,949,949,,,,,949,949,,,,945,945,945,949,945", "949,949,949,945,945,949,949,,945,,945,945,945,945,945,945,945,,,,,,945", "945,945,945,945,945,945,,,945,,,,,,,945,,,945,945,945,945,945,945,945", "945,,945,945,945,,945,945,945,945,945,,,,,,,,,,,,,,,,,,,,945,,,945,", ",945,945,,,945,,,,,,945,,,,,,,,,945,,,,,945,945,945,945,,945,945,945", "945,,,,,945,945,,,,289,289,289,945,289,945,945,945,289,289,945,945,", "289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,", "289,,,,,,,289,,,289,289,289,289,289,289,289,289,,289,289,289,,289,289", "289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,", ",,,,,,289,,,,,289,289,289,289,,289,289,289,289,,,,,289,289,,,,917,917", "917,289,917,289,289,289,917,917,289,289,,917,,917,917,917,917,917,917", "917,,,,,,917,917,917,917,917,917,917,,,917,,,,,,,917,,,917,917,917,917", "917,917,917,917,,917,917,917,,917,917,917,917,917,,,,,,,,,,,,,,,,,,", ",917,,,917,,,917,917,,,917,,,,,,917,,,,,,,,,917,,,,,917,917,917,917", ",917,917,917,917,,,,,917,917,,,,296,296,296,917,296,917,917,917,296", "296,917,917,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296", "296,296,,,296,,,,,,,296,,,296,296,296,296,296,296,296,296,296,296,296", "296,,296,296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296", ",296,,296,,296,,,296,,,,,,296,,,,,296,296,296,296,,296,296,296,296,", ",,,296,296,,,,297,297,297,296,297,296,296,296,297,297,296,296,,297,", "297,297,297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297,", ",,,,,297,,,297,297,297,297,297,297,297,297,297,297,297,297,,297,297", "297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,297,,297,", "297,,,297,,,,,,297,,,,,297,297,297,297,,297,297,297,297,,,,,297,297", ",,,305,305,305,297,305,297,297,297,305,305,297,297,,305,,305,305,305", "305,305,305,305,,,,,,305,305,305,305,305,305,305,,,305,,,,,,,305,,,305", "305,305,305,305,305,305,305,305,305,305,305,,305,305,305,305,305,,,", ",,,,,,,,,,,,,,,,305,,,305,,,305,305,,,305,,305,,305,,305,,,305,,,,,", "305,,,,,305,305,305,305,,305,305,305,305,,,,,305,305,305,,,897,897,897", "305,897,305,305,305,897,897,305,305,,897,,897,897,897,897,897,897,897", ",,,,,897,897,897,897,897,897,897,,,897,,,,,,,897,,,897,897,897,897,897", "897,897,897,,897,897,897,,897,897,897,897,897,,,,,,,,,,,,,,,,,,,,897", ",,897,,,897,897,,,897,,,,,,897,,,,,,,,,897,,,,,897,897,897,897,,897", "897,897,897,,,,,897,897,,,,312,312,312,897,312,897,897,897,312,312,897", "897,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312,312", ",,312,,,,,,,312,,,312,312,312,312,312,312,312,312,,312,312,312,,312", "312,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,,312,,,,,,312", ",,,,,,,,312,,,,,312,312,312,312,,312,312,312,312,,,,,312,312,,,,314", "314,314,312,314,312,312,312,314,314,312,312,,314,,314,314,314,314,314", "314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314", "314,314,314,314,314,,314,314,314,,314,314,314,314,314,,,,,,,,,,,,,,", ",,,,,314,,,314,,,314,314,,,314,,,,,,314,,,,,,,,,314,,,,,314,314,314", "314,,314,314,314,314,,,,,314,314,,,,317,317,317,314,317,314,314,314", "317,317,314,314,,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317", "317,317,317,,,317,,,,,,,317,,,317,317,317,317,317,317,317,317,,317,317", "317,,317,317,317,317,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317", ",,,,,317,,,,,,,,,317,,,,,317,317,317,317,,317,317,317,317,,,,,317,317", ",,,318,318,318,317,318,317,317,317,318,318,317,317,,318,,318,318,318", "318,318,318,318,,,,,,318,318,318,318,318,318,318,,,318,,,,,,,318,,,318", "318,318,318,318,318,318,318,,318,318,318,,318,318,318,318,318,,,,,,", ",,,,,,,,,,,,,318,,,318,,,318,318,,,318,,,,,,318,,,,,,,,,318,,,,,318", "318,318,318,,318,318,318,318,,,,,318,318,,,,,,,318,,318,318,318,,,318", "318,323,323,323,323,323,,,,323,323,,,,323,,323,323,323,323,323,323,323", ",,,,,323,323,323,323,323,323,323,,,323,,,,,,323,323,,323,323,323,323", "323,323,323,323,323,,323,323,323,,323,323,323,323,323,,,,,,,,,,,,,,", ",,,,,323,,,323,,,323,323,,,323,,323,,,,323,,,,,,,,,323,,,,,323,323,323", "323,,323,323,323,323,,,,,323,323,,,,868,868,868,323,868,323,323,323", "868,868,323,323,,868,,868,868,868,868,868,868,868,,,,,,868,868,868,868", "868,868,868,,,868,,,,,,,868,,,868,868,868,868,868,868,868,868,,868,868", "868,,868,868,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,,868", ",,,,,868,,,,,,,,,868,,,,,868,868,868,868,,868,868,868,868,,,,,868,868", ",,,867,867,867,868,867,868,868,868,867,867,868,868,,867,,867,867,867", "867,867,867,867,,,,,,867,867,867,867,867,867,867,,,867,,,,,,,867,,,867", "867,867,867,867,867,867,867,,867,867,867,,867,867,867,867,867,,,,,,", ",,,,,,,,,,,,,867,,,867,,,867,867,,,867,,,,,,867,,,,,,,,,867,,,,,867", "867,867,867,,867,867,867,867,,,,,867,867,,,,866,866,866,867,866,867", "867,867,866,866,867,867,,866,,866,866,866,866,866,866,866,,,,,,866,866", "866,866,866,866,866,,,866,,,,,,,866,,,866,866,866,866,866,866,866,866", ",866,866,866,,866,866,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866", "866,,,866,,,,,,866,,,,,,,,,866,,,,,866,866,866,866,,866,866,866,866", ",,,,866,866,,,,865,865,865,866,865,866,866,866,865,865,866,866,,865", ",865,865,865,865,865,865,865,,,,,,865,865,865,865,865,865,865,,,865", ",,,,,,865,,,865,865,865,865,865,865,865,865,,865,865,865,,865,865,865", "865,865,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,865,,,865,,,,,,865,,,,,,", ",,865,,,,,865,865,865,865,,865,865,865,865,,,,,865,865,,,,852,852,852", "865,852,865,865,865,852,852,865,865,,852,,852,852,852,852,852,852,852", ",,,,,852,852,852,852,852,852,852,,,852,,,,,,,852,,,852,852,852,852,852", "852,852,852,,852,852,852,,852,852,852,852,852,,,,,,,,,,,,,,,,,,,,852", ",,852,,,852,852,,,852,,,,,,852,,,,,,,,,852,,,,,852,852,852,852,,852", "852,852,852,,,,,852,852,,,,844,844,844,852,844,852,852,852,844,844,852", "852,,844,,844,844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844", ",,844,,,,,,,844,,,844,844,844,844,844,844,844,844,,844,844,844,,844", "844,844,844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,,,,,844", ",,,,,,,,844,,,,,844,844,844,844,,844,844,844,844,,,,,844,844,,,,824", "824,824,844,824,844,844,844,824,824,844,844,,824,,824,824,824,824,824", "824,824,,,,,,824,824,824,824,824,824,824,,,824,,,,,,,824,,,824,824,824", "824,824,824,824,824,,824,824,824,,824,824,824,824,824,,,,,,,,,,,,,,", ",,,,,824,,,824,,,824,824,,,824,,,,,,824,,,,,,,,,824,,,,,824,824,824", "824,,824,824,824,824,,,,,824,824,,,,359,359,359,824,359,824,824,824", "359,359,824,824,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359", "359,359,359,,,359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359", "359,,359,359,359,359,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359", ",,,,,359,,,,,,,,,359,,,,,359,359,359,359,,359,359,359,359,,,,,359,359", ",,,361,361,361,359,361,359,359,359,361,361,359,359,,361,,361,361,361", "361,361,361,361,,,,,,361,361,361,361,361,361,361,,,361,,,,,,,361,,,361", "361,361,361,361,361,361,361,,361,361,361,,361,361,361,361,361,,,,,,", ",,,,,,,,,,,,,361,,,361,361,,361,361,,,361,,,,,,361,,,,,,,,,361,,,,,361", "361,361,361,,361,361,361,361,,,,,361,361,,,,779,779,779,361,779,361", "361,361,779,779,361,361,,779,,779,779,779,779,779,779,779,,,,,,779,779", "779,779,779,779,779,,,779,,,,,,,779,,,779,779,779,779,779,779,779,779", ",779,779,779,,779,779,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,,,779", "779,,,779,,,,,,779,,,,,,,,,779,,,,,779,779,779,779,,779,779,779,779", ",,,,779,779,,,,765,765,765,779,765,779,779,779,765,765,779,779,,765", ",765,765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,,,765", ",,,,,,765,,,765,765,765,765,765,765,765,765,,765,765,765,,765,765,765", "765,765,,,,,,,,,,,,,,,,,,,,765,,,765,,,765,765,,,765,,765,,,,765,,,", ",,,,,765,,,,,765,765,765,765,,765,765,765,765,,,,,765,765,,,,745,745", "745,765,745,765,765,765,745,745,765,765,,745,,745,745,745,745,745,745", "745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745,745", "745,745,745,745,,745,745,745,,745,745,745,745,745,,,,,,,,,,,,,,,,,,", ",745,,,745,,,745,745,,,745,,,,,,745,,,,,,,,,745,,,,,745,745,745,745", ",745,745,745,745,,,,,745,745,,,,742,742,742,745,742,745,745,745,742", "742,745,745,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742", "742,742,,,742,,,,,,,742,,,742,742,742,742,742,742,742,742,,742,742,742", ",742,742,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,", ",,,742,,,,,,,,,742,,,,,742,742,742,742,,742,742,742,742,,,,,742,742", ",,,384,384,384,742,384,742,742,742,384,384,742,742,,384,,384,384,384", "384,384,384,384,,,,,,384,384,384,384,384,384,384,,,384,,,,,,,384,,,384", "384,384,384,384,384,384,384,,384,384,384,,384,384,384,384,384,,,,,,", ",,,,,,,,,,,,,384,,,384,,,384,384,,,384,,,,,,384,,,,,,,,,384,,,,,384", "384,384,384,,384,384,384,384,,,,,384,384,,,,733,733,733,384,733,384", "384,384,733,733,384,384,,733,,733,733,733,733,733,733,733,,,,,,733,733", "733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733", "733,733,733,733,,733,733,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,", "733,733,,,733,,733,,733,,733,,,733,,,,,,733,,,,,733,733,733,733,,733", "733,733,733,,,,,733,733,,,,685,685,685,733,685,733,733,733,685,685,733", "733,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685", ",,685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685,685,,685", "685,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,,,,685", ",,,,,,,,685,,,,,685,685,685,685,,685,685,685,685,,,,,685,685,,,,405", "405,405,685,405,685,685,685,405,405,685,685,,405,,405,405,405,405,405", "405,405,,,,,,405,405,405,405,405,405,405,,,405,,,,,,,405,,,405,405,405", "405,405,405,405,405,,405,405,405,,405,405,405,405,405,,,,,,,,,,,,,,", ",,,,,405,,,405,,,405,405,,,405,,,,,,405,,,,,,,,,405,,,,,405,405,405", "405,,405,405,405,405,,,,,405,405,,,,684,684,684,405,684,405,405,405", "684,684,405,405,,684,,684,684,684,684,684,684,684,,,,,,684,684,684,684", "684,684,684,,,684,,,,,,,684,,,684,684,684,684,684,684,684,684,,684,684", "684,,684,684,684,684,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684", ",,,,,684,,,,,,,,,684,,,,,684,684,684,684,,684,684,684,684,,,,,684,684", ",,,680,680,680,684,680,684,684,684,680,680,684,684,,680,,680,680,680", "680,680,680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680", "680,680,680,680,680,680,680,,680,680,680,,680,680,680,680,680,,,,,,", ",,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,,680,,,,,680", "680,680,680,,680,680,680,680,,,,,680,680,,,,679,679,679,680,679,680", "680,680,679,679,680,680,,679,,679,679,679,679,679,679,679,,,,,,679,679", "679,679,679,679,679,,,679,,,,,,,679,,,679,679,679,679,679,679,679,679", ",679,679,679,,679,679,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679", "679,,,679,,,,,,679,,,,,,,,,679,,,,,679,679,679,679,,679,679,679,679", ",,,,679,679,,,,678,678,678,679,678,679,679,679,678,678,679,679,,678", ",678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678", ",,,,,,678,,,678,678,678,678,678,678,678,678,678,678,678,678,,678,678", "678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,678,,678", ",,678,,,,,,678,,,,,678,678,678,678,,678,678,678,678,,,,,678,678,,,,677", "677,677,678,677,678,678,678,677,677,678,678,,677,,677,677,677,677,677", "677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677", "677,677,677,677,677,677,677,677,677,,677,677,677,677,677,,,,,,,,,,,", ",,,,,,,,677,,,677,,,677,677,,,677,,677,,677,,677,,,677,,,,,,677,,,,", "677,677,677,677,,677,677,677,677,,,,,677,677,,,,674,674,674,677,674", "677,677,677,674,674,677,677,,674,,674,674,674,674,674,674,674,,,,,,674", "674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674,674,674", "674,,674,674,674,,674,674,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,", ",674,674,,,674,,,,,,674,,,,,,,,,674,,,,,674,674,674,674,,674,674,674", "674,,,,,674,674,,,,,,,674,,674,674,674,,,674,674,673,673,673,673,673", ",,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673", "673,673,673,,,673,,,,,,673,673,,673,673,673,673,673,673,673,673,673", ",673,673,673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673", "673,,,673,,673,,,,673,,,,,,,,,673,,,,,673,673,673,673,,673,673,673,673", ",,,,673,673,,,,670,670,670,673,670,673,673,673,670,670,673,673,,670", ",670,670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670", ",,,,,,670,,,670,670,670,670,670,670,670,670,670,670,670,670,,670,670", "670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,670,,670,", "670,,,670,,,,,,670,,,,,670,670,670,670,,670,670,670,670,,,,,670,670", ",,,669,669,669,670,669,670,670,670,669,669,670,670,,669,,669,669,669", "669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669", "669,669,669,669,669,669,669,,669,669,669,,669,669,669,669,669,,,,,,", ",,,,,,,,,,,,,669,,,669,,,669,669,,,669,,,,,,669,,,,,,,,,669,,,,,669", "669,669,669,,669,669,669,669,,,,,669,669,,,,668,668,668,669,668,669", "669,669,668,668,669,669,,668,,668,668,668,668,668,668,668,,,,,,668,668", "668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668,668", ",668,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668", "668,,,668,,668,,,,668,,,,,,,,,668,,,,,668,668,668,668,,668,668,668,668", ",,,,668,668,,,,,,,668,,668,668,668,,,668,668,666,666,666,666,666,,,", "666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666,666,666,666", "666,666,,,666,,,,,,666,666,,666,666,666,666,666,666,666,666,666,,666", "666,666,,666,666,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666", ",,666,,666,,,,666,,,,,,,,,666,,,,,666,666,666,666,,666,666,666,666,", ",,,666,666,,,,434,434,434,666,434,666,666,666,434,434,666,666,,434,", "434,434,434,434,434,434,434,,,,,,434,434,434,434,434,434,434,,,434,", ",,,,,434,,,434,434,434,434,434,434,434,434,,434,434,434,,434,434,434", "434,434,,,,,,,,,,,,,,,,,,,,434,,,434,,,434,434,,,434,,,,,,434,,,,,,", ",,434,,,,,434,434,434,434,,434,434,434,434,,,,,434,434,,,,635,635,635", "434,635,434,434,434,635,635,434,434,,635,,635,635,635,635,635,635,635", ",,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635,635,635", "635,635,635,635,635,635,635,,635,635,635,635,635,,,,,,,,,,,,,,,,,,,", "635,,,635,,,635,635,,,635,,635,,635,,635,,,635,,,,,,635,,,,,635,635", "635,635,,635,635,635,635,,,,,635,635,,,,625,625,625,635,625,635,635", "635,625,625,635,635,,625,,625,625,625,625,625,625,625,,,,,,625,625,625", "625,625,625,625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,625", "625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625", "625,,,625,,625,,625,,625,,,625,,,,,,625,,,,,625,625,625,625,,625,625", "625,625,,,,,625,625,,,,624,624,624,625,624,625,625,625,624,624,625,625", ",624,,624,624,624,624,624,624,624,,,,,,624,624,624,624,624,624,624,", ",624,,,,,,,624,,,624,624,624,624,624,624,624,624,,624,624,624,,624,624", "624,624,624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,624,,,,624", ",,,,,,,,624,,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,,,611", "611,611,624,611,624,624,624,611,611,624,624,,611,,611,611,611,611,611", "611,611,,,,,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611", "611,611,611,611,611,611,611,611,611,,611,611,611,611,611,,,,,,,,,,,", ",,,,,,,,611,,,611,,,611,611,,,611,,,,,,611,,,611,,,,,,611,,,,,611,611", "611,611,,611,611,611,611,,,,,611,611,,,,608,608,608,611,608,611,611", "611,608,608,611,611,,608,,608,608,608,608,608,608,608,,,,,,608,608,608", "608,608,608,608,,,608,,,,,,,608,,,608,608,608,608,608,608,608,608,608", "608,608,608,,608,608,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608", "608,,,608,,608,,,,608,,,608,,,,,,608,,,,,608,608,608,608,,608,608,608", "608,,,,,608,608,,,,,,,608,,608,608,608,458,,608,608,,,,458,458,458,", ",458,458,458,,458,,,,,,,,458,458,458,458,,,,,,,,,458,458,,458,458,458", "458,458,,,,,,,,,,,,,,,,,,,,,,,458,458,458,458,458,458,458,458,458,458", "458,458,458,458,,,458,458,458,,,458,,458,458,,,458,458,,458,,458,,458", ",458,458,,458,458,458,458,458,,458,458,458,,,,,,,,,,,,,,458,,,458,458", ",458,,458,602,602,602,,602,,458,,602,602,,,,602,,602,602,602,602,602", "602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602", "602,602,602,602,602,,602,602,602,,602,602,602,602,602,,,,,,,,,,,,,,", ",,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,,602,,,,,602,602,602", "602,,602,602,602,602,,,,,602,602,,,,,,,602,,602,602,602,467,,602,602", ",,,467,467,467,,,467,467,467,,467,,,,,,,,467,467,467,467,467,,,,,,,", "467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,,,,,,467,467,467,467,467", "467,467,467,467,467,467,467,467,467,,,467,467,467,,,467,,,467,,,467", "467,,467,,467,,467,,467,467,,467,467,467,467,467,,467,467,467,,,,,,", ",,,,,,,467,,,467,467,467,467,,467,468,467,,,,,467,468,468,468,,,468", "468,468,,468,,,,,,,,468,468,468,468,468,,,,,,,,468,468,,468,468,468", "468,468,,,,,,,,,,,,,,,,,,,,,,,468,468,468,468,468,468,468,468,468,468", "468,468,468,468,,,468,468,468,,,468,,,468,,,468,468,,468,,468,,468,", "468,468,,468,468,468,468,468,,468,468,468,,,,,,,,,,,,,,468,,,468,468", "468,468,,468,,468,,588,588,588,468,588,,,,588,588,,,,588,,588,588,588", "588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,,,588,,,588", "588,588,588,588,588,588,588,,588,588,588,,588,588,588,588,588,,,,,,", ",,,,,,,,,,,,,588,,,588,,,588,588,,,588,,,,,,588,,,,,,,,,588,,,,,588", "588,588,588,,588,588,588,588,,,,,588,588,,,,562,562,562,588,562,588", "588,588,562,562,588,588,,562,,562,562,562,562,562,562,562,,,,,,562,562", "562,562,562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562", ",562,562,562,,562,562,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562", "562,,,562,,,,,,562,,,,,,,,,562,,,,,562,562,562,562,,562,562,562,562", ",,,,562,562,,,,561,561,561,562,561,562,562,562,561,561,562,562,,561", ",561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561", ",,,,,,561,,,561,561,561,561,561,561,561,561,,561,561,561,,561,561,561", "561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,,,,,,561,,,,,,", ",,561,,,,,561,561,561,561,,561,561,561,561,,,,,561,561,,,,477,477,477", "561,477,561,561,561,477,477,561,561,,477,,477,477,477,477,477,477,477", ",,,,,477,477,477,477,477,477,477,,,477,,,,,,,477,,,477,477,477,477,477", "477,477,477,477,477,477,477,,477,477,477,477,477,,,,,,,,,,,,,,,,,,,", "477,,,477,,,477,477,,,477,,477,,477,,477,,,477,,,,,,477,,,,,477,477", "477,477,,477,477,477,477,,,,,477,477,,,,558,558,558,477,558,477,477", "477,558,558,477,477,,558,,558,558,558,558,558,558,558,,,,,,558,558,558", "558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558,558,558,558,,558", "558,558,,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558,,,558,558", ",,558,,,,,,558,,,,,,,,,558,,,,,558,558,558,558,,558,558,558,558,,,,", "558,558,,,,479,479,479,558,479,558,558,558,479,479,558,558,,479,,479", "479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,479,,,,,", ",479,,,479,479,479,479,479,479,479,479,,479,479,479,,479,479,479,479", "479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479,,,,,,479,,,,,,,,,479", ",,,,479,479,479,479,,479,479,479,479,,,,,479,479,,,,480,480,480,479", "480,479,479,479,480,480,479,479,,480,,480,480,480,480,480,480,480,,", ",,,480,480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480", "480,480,480,,480,480,480,,480,480,480,480,480,,,,,,,,,,,,,,,,,,,,480", ",,480,,,480,480,,,480,,,,,,480,,,,,,,,,480,,,,,480,480,480,480,,480", "480,480,480,,,,,480,480,,,,481,481,481,480,481,480,480,480,481,481,480", "480,,481,,481,481,481,481,481,481,481,,,,,,481,481,481,481,481,481,481", ",,481,,,,,,,481,,,481,481,481,481,481,481,481,481,,481,481,481,,481", "481,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,,,481,481,,,481,,,,,,481", ",,,,,,,,481,,,,,481,481,481,481,,481,481,481,481,,,,,481,481,,,,555", "555,555,481,555,481,481,481,555,555,481,481,,555,,555,555,555,555,555", "555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,,,555,,,555,555,555", "555,555,555,555,555,,555,555,555,,555,555,555,555,555,,,,,,,,,,,,,,", ",,,,,555,,,555,,,555,555,,,555,,,,,,555,,,,,,,,,555,,,,,555,555,555", "555,,555,555,555,555,,,,,555,555,,,,545,545,545,555,545,555,555,555", "545,545,555,555,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545", "545,545,545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,545,545", "545,545,,545,545,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545", ",,545,,545,,545,,545,,,545,,,,,,545,,,,,545,545,545,545,,545,545,545", "545,,,,,545,545,,,,,,,545,,545,545,545,,,545,545,535,535,535,535,535", ",,,535,535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535,535,535", "535,535,535,,,535,,,,,,535,535,535,535,535,535,535,535,535,535,535,535", ",535,535,535,,535,535,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535", "535,,,535,,535,,,,535,,,,,,,,,535,,,,,535,535,535,535,,535,535,535,535", ",,,,535,535,,,,,,535,535,,535,535,535,,,535,535,529,529,529,,529,,,", "529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529,529,529", "529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529,529,529", ",529,529,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529,,,529,,", ",,,529,,,,,,,,,529,,,,,529,529,529,529,,529,529,529,529,,,,,529,529", ",,,527,527,527,529,527,529,529,529,527,527,529,529,,527,,527,527,527", "527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527", "527,527,527,527,527,527,527,527,527,527,527,,527,527,527,527,527,,,", ",,,,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,527,,527,,,527,,,,,,527", ",,,,527,527,527,527,,527,527,527,527,,,,,527,527,,,,525,525,525,527", "525,527,527,527,525,525,527,527,,525,,525,525,525,525,525,525,525,,", ",,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525,525,525", "525,525,525,525,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,,,,,,", "525,,,525,,,525,525,,,525,,525,,525,,525,,,525,,,,,,525,,,,,525,525", "525,525,,525,525,525,525,,,,,525,525,,,,219,219,219,525,219,525,525", "525,219,219,525,525,,219,,219,219,219,219,219,219,219,,,,,,219,219,219", "219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219", "219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219", ",,219,,219,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,", ",,,219,219,,,,220,220,220,219,220,219,219,219,220,220,219,219,,220,", "220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,", ",,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220", "220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,220,,,,220,,,", ",,,,,220,,,,,220,220,220,220,,220,220,220,220,,,,,220,220,,,,221,221", "221,220,221,220,220,220,221,221,220,220,,221,,221,221,221,221,221,221", "221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221", "221,221,221,221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,", ",221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221", ",221,221,221,221,,,,,221,221,,,,222,222,222,221,222,221,221,221,222", "222,221,221,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222", "222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222", ",222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,", ",,,222,,,,,,,,,222,,,,,222,222,222,222,,222,222,222,222,,,,,222,222", ",,,223,223,223,222,223,222,222,222,223,223,222,222,,223,,223,223,223", "223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223", "223,223,223,223,223,223,223,,223,223,223,,223,223,223,223,223,,,,,,", ",,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,,223,,,,,223", "223,223,223,,223,223,223,223,,,,,223,223,,,,224,224,224,223,224,223", "223,223,224,224,223,223,,224,,224,224,224,224,224,224,224,,,,,,224,224", "224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224", "224,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,", "224,224,,,224,,224,,224,,224,,,224,,,,,,224,,,,,224,224,224,224,,224", "224,224,224,,,,,224,224,,,,229,229,229,224,229,224,224,224,229,229,224", "224,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229,229", ",,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,,229", "229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229", ",,,,,,,,229,,,,,229,229,229,229,,229,229,229,229,,,,,229,229,,,,230", "230,230,229,230,229,229,229,230,230,229,229,,230,,230,230,230,230,230", "230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230", "230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,", ",,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230,,,,,230,230,230", "230,,230,230,230,230,,,,,230,230,,,,1023,1023,1023,230,1023,230,230", "230,1023,1023,230,230,,1023,,1023,1023,1023,1023,1023,1023,1023,,,,", ",1023,1023,1023,1023,1023,1023,1023,,,1023,,,,,,,1023,,,1023,1023,1023", "1023,1023,1023,1023,1023,,1023,1023,1023,,1023,1023,,,1023,,,,,,,,,", ",,,,,,,,,,1023,,,1023,,,1023,1023,,,1023,,,,,,,,,,,,,,,,,,,,1023,1023", "1023,1023,,1023,1023,1023,1023,,,,,1023,1023,,,,76,76,76,1023,76,1023", "1023,1023,76,76,,,,76,,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76", ",,76,,,,,,,76,,,76,76,76,76,76,76,76,76,,76,76,76,,76,76,,,76,,,,,,", ",,,,,,,,,,,,,76,,,76,,,76,76,,,76,,76,,,,,,,,,,,,,,,,,,76,76,76,76,", "76,76,76,76,,,,,76,76,,,,748,748,748,76,748,76,76,76,748,748,,,,748", ",748,748,748,748,748,748,748,,,,,,748,748,748,748,748,748,748,,,748", ",,,,,,748,,,748,748,748,748,748,748,748,748,,748,748,748,,748,748,,", "748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748,,,,,,,,,,,,,,,,,,,", "748,748,748,748,,748,748,748,748,,,,,748,748,,,,759,759,759,748,759", "748,748,748,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759", "759,759,759,759,759,,,759,,,,,,,759,,,759,759,759,759,759,759,759,759", ",759,759,759,,759,759,,,759,,,,,,,,,,,,,,,,,,,,759,,,759,,,759,759,", ",759,,,,,,,,,,,,,,,,,,,,759,759,759,759,,759,759,759,759,,,,,759,759", ",,,350,350,350,759,350,759,759,759,350,350,,,,350,,350,350,350,350,350", "350,350,,,,,,350,350,350,350,350,350,350,,,350,,,,,,,350,,,350,350,350", "350,350,350,350,350,,350,350,350,,350,350,,,350,,,,,,,,,,,,,,,,,,,,350", ",,350,,,350,350,,,350,,,,,,,,,,,,,,,,,,,,350,350,350,350,,350,350,350", "350,,,,,350,350,,,,37,37,37,350,37,350,350,350,37,37,,,,37,,37,37,37", "37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37", "37,37,37,,37,37,37,,37,37,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,", "37,,37,,,,,,,,,,,,,,,,,,37,37,37,37,,37,37,37,37,,,,,37,37,,,,552,552", "552,37,552,37,37,37,552,552,,,,552,,552,552,552,552,552,552,552,,,,", ",552,552,552,552,552,552,552,,,552,,,,,,,552,,,552,552,552,552,552,552", "552,552,,552,552,552,,552,552,,,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552", "552,,,552,,,,,,,,,,,,,,,,,,,,552,552,552,552,,552,552,552,552,,,,,552", "552,,,,1103,1103,1103,552,1103,552,552,552,1103,1103,,,,1103,,1103,1103", "1103,1103,1103,1103,1103,,,,,,1103,1103,1103,1103,1103,1103,1103,,,1103", ",,,,,,1103,,,1103,1103,1103,1103,1103,1103,1103,1103,,1103,1103,1103", ",1103,1103,,,1103,,,,,,,,,,,,,,,,,,,,1103,,,1103,,,1103,1103,,,1103", ",,,,,,,,,,,,,,,,,,,1103,1103,1103,1103,,1103,1103,1103,1103,,,,,1103", "1103,,,,77,77,77,1103,77,1103,1103,1103,77,77,,,,77,,77,77,77,77,77", "77,77,,,,,,77,77,77,77,77,77,77,,,77,,,,,,,77,,,77,77,77,77,77,77,77", "77,,77,77,77,,77,77,,,77,,,,,,,,,,,,,,,,,77,,,77,,,77,,,77,77,,,77,", ",,,,,,,,,,,,,,,,,,77,77,77,77,,77,77,77,77,,,,,77,77,,,,543,543,543", "77,543,77,77,77,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543", "543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543,543", "543,,543,543,543,,543,543,,,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543", ",,543,,,,,,,,,,,,,,,,,,,,543,543,543,543,,543,543,543,543,,,,,543,543", ",,,78,78,78,543,78,543,543,543,78,78,,,,78,,78,78,78,78,78,78,78,,,", ",,78,78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78,78,78,78,78,,78,78", "78,,78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78,,,78,,,,,,,,,,,,,", ",,,,,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,38,38,38,78,38,78,78,78", "38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,", ",,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,38,,,,,,,,,,,,,,", ",,,,,38,,,38,,,38,38,,,38,,,777,,777,777,777,777,777,,,,,,,,,777,,38", "38,38,38,,38,38,38,38,,,,,38,38,,,,38,,777,38,,38,38,38,331,331,331", ",331,777,777,,331,331,777,,,331,,331,331,331,331,331,331,331,,,,,,331", "331,331,331,331,331,331,,,331,,,,,,,331,,,331,331,331,331,331,331,331", "331,,331,331,331,,331,331,,,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331,331", ",,331,,,1043,,1043,1043,1043,1043,1043,,,,,,,,,1043,,331,331,331,331", ",331,331,331,331,,,,,331,331,,,,331,,1043,331,,331,331,331,1033,1033", "1033,,1033,1043,1043,,1033,1033,1043,,,1033,,1033,1033,1033,1033,1033", "1033,1033,,,,,,1033,1033,1033,1033,1033,1033,1033,,,1033,,,,,,,1033", ",,1033,1033,1033,1033,1033,1033,1033,1033,,1033,1033,1033,,1033,1033", ",,1033,,,,,,,,,,,,,,,,,,,,1033,,,1033,,,1033,1033,,,1033,,,,,,,,,,,", ",,,,,,,,1033,1033,1033,1033,,1033,1033,1033,1033,,,,,1033,1033,,,,,", ",1033,,1033,1033,1033,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11", "11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11", "11,11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11", ",,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11", "11,,,11,11,,,,,,,,,,,,,,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10", "10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10,10,10,,,,,", "10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10,10,10,10,10", ",,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10", "10,10,10,,,10,10,,,,,,,,,,,,,,10,664,664,664,664,664,664,664,664,664", "664,664,664,664,664,664,664,664,664,664,664,664,664,664,664,,,,664,664", "664,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,664", "664,,,664,,,,,,,,664,664,,664,664,664,664,664,664,664,,,664,664,,,,664", "664,664,664,,,,,,,,,,,,,,664,664,,664,664,664,664,664,664,664,664,664", "664,664,664,,,664,664,,,,,,,,,,,,,,664,425,425,425,425,425,425,425,425", "425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,425,,,,425", "425,425,425,425,425,425,425,425,425,,,,,,425,425,425,425,425,425,425", "425,425,,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,,,425,425", ",,,425,425,425,425,,,,,,,,,,,,,,425,425,,425,425,425,425,425,425,425", "425,425,425,425,425,,,425,425,,,,,,,,,,,,,,425,24,24,24,24,24,24,24", "24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,,,,24,24,24,24,24", "24,24,24,24,24,,,,,,24,24,24,24,24,24,24,24,24,24,24,24,,24,,,,,,24", "24,,24,24,24,24,24,24,24,,,24,24,,,,24,24,24,24,,,,,,24,,,,,,,,24,24", ",24,24,24,24,24,24,24,24,24,24,24,24,,,24,1001,1001,1001,1001,,,,,,", ",,,,,,1001,1001,1001,1001,,,367,1001,367,367,367,367,367,1001,1001,", ",1001,,,,367,,,,,,,,,,,,,,,,1001,,,1001,,,367,1001,,,1001,,,,,367,367", "367,367,,,,367,,,,1001,,,,1001,1001,1001,1001,,1001,1001,1001,1001,", ",,,1001,1001,1084,1084,1084,1084,,,1001,,1001,1001,1001,,,1001,1001", ",1084,1084,1084,1084,,,793,1084,793,793,793,793,793,1084,1084,,,1084", ",,,793,,,,,,,,,,,,,,,,1084,,,1084,,,793,1084,,,1084,,,,,793,793,793", "793,,,,793,,,,1084,,,,1084,1084,1084,1084,,1084,1084,1084,1084,,,,,1084", "1084,985,985,985,985,,,1084,,1084,1084,1084,,,1084,1084,,985,985,985", "985,,,1212,985,1212,1212,1212,1212,1212,985,985,,,985,,,,1212,,,,,,", ",,,,,,,,,985,,,985,,,1212,985,,,985,,,,,,,1212,1212,,,,1212,,,,985,", ",,985,985,985,985,,985,985,985,985,,,,,985,985,1138,1138,1138,1138,", ",985,,985,985,985,,,985,985,,1138,1138,1138,1138,,,775,1138,775,775", "775,775,775,1138,1138,,,1138,,,,775,,,,,,,,,,,,,,,,1138,,,1138,,,775", "1138,,,1138,,,,,775,775,775,775,,,,775,,,,1138,,,,1138,1138,1138,1138", ",1138,1138,1138,1138,,,,,1138,1138,1200,1200,1200,1200,,,1138,,1138", "1138,1138,,,1138,1138,,1200,1200,1200,1200,,,1041,1200,1041,1041,1041", "1041,1041,1200,1200,,,1200,,,,1041,,,,,,,,,,,,,,,,1200,,,1200,,,1041", "1200,,,1200,,,,,,,1041,1041,,,,1041,,,,1200,,,,1200,1200,1200,1200,", "1200,1200,1200,1200,,,,,1200,1200,1140,1140,1140,1140,,,1200,,1200,1200", "1200,,,1200,1200,,1140,1140,1140,1140,,,1038,1140,1038,1038,1038,1038", "1038,1140,1140,,,1140,,,,1038,,,,,,,,,,,,,,,,1140,,,1140,,,1038,1140", ",,1140,,1140,,,,,1038,1038,,,,1038,,,,1140,,,,1140,1140,1140,1140,,1140", "1140,1140,1140,,,,,1140,1140,1176,1176,1176,1176,,,1140,,1140,1140,1140", ",,1140,1140,,1176,1176,1176,1176,,,1159,1176,1159,1159,1159,1159,1159", "1176,1176,,,1176,,,,1159,,,,,,,,,,,,,,,,1176,,,1176,,,1159,1176,,,1176", ",,,,,,1159,1159,,,,1159,,,,1176,,,,1176,1176,1176,1176,,1176,1176,1176", "1176,,,,,1176,1176,,,,,,,1176,,1176,1176,1176,,,1176,1176,725,725,725", "725,725,725,725,725,725,725,725,725,725,725,725,725,725,725,725,725", "725,725,725,725,,,,725,725,725,725,725,725,725,725,725,725,,,,,,725", "725,725,725,725,725,725,725,725,,,725,,,,,,,,725,725,,725,725,725,725", "725,725,725,,,725,725,,,,725,725,725,725,,,,,,,,,,,,,,725,725,,725,725", "725,725,725,725,725,725,725,725,725,725,,,725,953,953,953,953,,,1099", ",1099,1099,1099,1099,1099,,,,953,953,953,953,,1099,,953,953,,,,,953", "953,,,953,953,,,,,,,,,1099,,,,,,,,,,953,1099,1099,953,,,1099,953,,,953", ",953,,,,,,,953,,,,,,,953,,,,953,953,953,953,,953,953,953,953,,,,,953", "953,701,701,701,701,,,953,,953,953,953,,,953,953,,701,701,701,701,,", "1036,701,1036,1036,1036,1036,1036,701,701,,,701,,,,1036,,,,,,,,,,,,", ",,,701,,,701,,,1036,701,,,701,,701,,,1036,1036,1036,1036,,,,1036,,,", "701,,,,701,701,701,701,,701,701,701,701,,,,,701,701,701,889,889,889", "889,,701,,701,701,701,,,701,701,,,889,889,889,889,,,1094,889,1094,1094", "1094,1094,1094,889,889,,,889,,,,1094,,,,,,,,,,,,,,,,889,,,889,,,1094", "889,,,889,,,,,1094,1094,1094,1094,,,,1094,,,,889,,,,889,889,889,889", ",889,889,889,889,,,,,889,889,482,482,482,482,,,889,,889,889,889,,,889", "889,,482,482,482,482,,,1097,482,1097,1097,1097,1097,1097,482,482,,,482", ",,,1097,,,,,,,,,,,,,,,,482,,,482,,,1097,482,,,482,,,,,1097,1097,1097", "1097,,,,1097,,,,482,,,,482,482,482,482,,482,482,482,482,,,,,482,482", "881,881,881,881,,,482,,482,482,482,,,482,482,,881,881,881,881,,,1186", "881,1186,1186,1186,1186,1186,881,881,,,881,,,,1186,,,,,,,,,,,,,,,,881", ",,881,,,1186,881,,,881,,881,,,,,1186,1186,,,,1186,,,,881,,,,881,881", "881,881,,881,881,881,881,,,,,881,881,875,875,875,875,,,881,,881,881", "881,,,881,881,,875,875,875,875,,,,875,875,,,,,875,875,,,875,875,,,,", ",,,,,,,,,,,,,,875,,,875,,,,875,,,875,,875,,,,,,,875,,,,,,,875,,,,875", "875,875,875,,875,875,875,875,,,,,875,875,874,874,874,874,,,875,,875", "875,875,,,875,875,,874,874,874,874,,,,874,874,,,,,874,874,,,874,874", ",,,,,,,,,,,,,,,,,,874,,,874,,,,874,,,874,,874,,,,,,,874,,,,,,,874,,", ",874,874,874,874,,874,874,874,874,,,,,874,874,871,871,871,871,,,874", ",874,874,874,,,874,874,,871,871,871,871,,,1184,871,1184,1184,1184,1184", "1184,871,871,,,871,,,,1184,,,,,,,,,,,,,,,,871,,,871,,,1184,871,,,871", ",,,,,,1184,1184,,,,1184,,,,871,,,,871,871,871,871,,871,871,871,871,", ",,,871,871,483,483,483,483,,,871,,871,871,871,,,871,871,,483,483,483", "483,,,1182,483,1182,1182,1182,1182,1182,483,483,,,483,,,,1182,,,,,,", ",,,,,,,,,483,,,483,,,1182,483,,,483,,,,,,,1182,1182,,,,1182,,,,483,", ",,483,483,483,483,,483,483,483,483,,,,,483,483,1124,1124,1124,1124,", ",483,,483,483,483,,,483,483,,1124,1124,1124,1124,,,,1124,,,,,,1124,1124", ",,1124,,,,,,,,708,708,708,708,,,,,,,,,1124,,,1124,708,708,708,1124,", ",1124,,1124,,,,,708,708,,,708,,,,,1124,,,,1124,1124,1124,1124,,1124", "1124,1124,1124,,,,,1124,1124,,,,,,,1124,,1124,1124,1124,,,1124,1124", "407,,407,407,407,407,407,,,,,708,708,708,708,407,708,708,708,708,,,", ",708,708,891,891,891,891,,,708,,708,708,708,407,407,,,,891,891,891,", "407,407,407,407,,,,407,,891,891,,,891,890,890,890,890,,,,,,,,,,,,,890", "890,890,,,,,,,,,,,890,890,,,890,,,,,,,,,,,,,,,,891,891,891,891,,891", "891,891,891,,,,,891,891,,,,,,,891,,891,891,891,,,,,,,,,890,890,890,890", ",890,890,890,890,,,,,890,890,671,671,,,671,,890,,890,890,890,,671,671", ",671,671,671,671,671,671,671,,,671,671,,,,671,671,671,671,,,,,,671,", ",,,,,,671,671,,671,671,671,671,671,671,671,671,671,671,671,671,626,626", "671,,626,,,,,,,,626,626,,626,626,626,626,626,626,626,,,626,626,,,,626", "626,626,626,,,,,,626,,,,,,,,626,626,,626,626,626,626,626,626,626,626", "626,626,626,626,225,225,626,,225,,,,,,,,225,225,,225,225,225,225,225", "225,225,,,225,225,,,,225,225,225,225,,,,,,225,,,,,,,,225,225,,225,225", "225,225,225,225,225,225,225,225,225,225,226,226,225,,226,,,,,,,,226", "226,,226,226,226,226,226,226,226,,,226,226,,,,226,226,226,226,,,,,,226", ",,,,,,,226,226,,226,226,226,226,226,226,226,226,226,226,226,226,627", "627,226,,627,,,,,,,,627,627,,627,627,627,627,627,627,627,,,627,627,", ",,627,627,627,627,,,,,,627,,,,,,,,627,627,,627,627,627,627,627,627,627", "627,627,627,627,627,547,547,627,,547,,,,,,,,547,547,,547,547,547,547", "547,547,547,,,547,547,,,,547,547,547,547,,,,,,547,,,,,,,,547,547,,547", "547,547,547,547,547,547,547,547,547,547,547,475,475,547,,475,,,,,,,", "475,475,,475,475,475,475,475,475,475,,,475,475,,,,475,475,475,475,,", ",,,475,,,,,,,,475,475,,475,475,475,475,475,475,475,475,475,475,475,475", "1152,1152,475,,1152,,,,,,,,1152,1152,,1152,1152,1152,1152,1152,1152", "1152,,,1152,1152,,,,1152,1152,1152,1152,,,,,,1152,,,,,,,,1152,1152,", "1152,1152,1152,1152,1152,1152,1152,1152,1152,1152,1152,1152,633,633", "1152,,633,,,,,,,,633,633,,633,633,633,633,633,633,633,,,633,633,,,,633", "633,633,633,,,,,,633,,,,,,,,633,633,,633,633,633,633,633,633,633,633", "633,633,633,633,556,556,633,,556,,,,,,,,556,556,,556,556,556,556,556", "556,556,,,556,556,,,,556,556,556,556,,,,,,556,,,,,,,,556,556,,556,556", "556,556,556,556,556,556,556,556,556,556,557,557,556,,557,,,,,,,,557", "557,,557,557,557,557,557,557,557,,,557,557,,,,557,557,557,557,,,,,,557", ",,,,,,,557,557,,557,557,557,557,557,557,557,557,557,557,557,557,546", "546,557,,546,,,,,,,,546,546,,546,546,546,546,546,546,546,,,546,546,", ",,546,546,546,546,,,,,,546,,,,,,,,546,546,,546,546,546,546,546,546,546", "546,546,546,546,546,634,634,546,,634,,,,,,,,634,634,,634,634,634,634", "634,634,634,,,634,634,,,,634,634,634,634,,,,,,634,,,,,,,,634,634,,634", "634,634,634,634,634,634,634,634,634,634,634,1156,1156,634,,1156,,,,", ",,,1156,1156,,1156,1156,1156,1156,1156,1156,1156,,,1156,1156,,,,1156", "1156,1156,1156,,,,,,1156,,,,,,,,1156,1156,,1156,1156,1156,1156,1156", "1156,1156,1156,1156,1156,1156,1156,476,476,1156,,476,,,,,,,,476,476", ",476,476,476,476,476,476,476,,,476,476,,,,476,476,476,476,,,,,,476,", ",,,,,,476,476,,476,476,476,476,476,476,476,476,476,476,476,476,1157", "1157,476,,1157,,,,,,,,1157,1157,,1157,1157,1157,1157,1157,1157,1157", ",,1157,1157,,,,1157,1157,1157,1157,,,,,,1157,,,,,,,,1157,1157,,1157", "1157,1157,1157,1157,1157,1157,1157,1157,1157,1157,1157,672,672,1157", ",672,,,,,,,,672,672,,672,672,672,672,672,672,672,,,672,672,,,,672,672", "672,672,,,,,,672,,,,,,,,672,672,,672,672,672,672,672,672,672,672,672", "672,672,672,,641,672,641,641,641,641,641,,1180,,1180,1180,1180,1180", "1180,641,,,,,,,,1180,,,,,,,,,,,,,,641,,,,,,,,1180,641,641,641,641,,", ",641,1180,1180,1180,1180,,,,1180"];
      racc_action_check = (arr = $$$('::', 'Array').$new(28007, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby30$10 = function(str){var self = $Ruby30$10.$$s == null ? this : $Ruby30$10.$$s, $$11;

        
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$11 = function(i){var self = $$11.$$s == null ? this : $$11.$$s, $writer = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$11.$$s = self, $$11.$$arity = 1, $$11));}, $Ruby30$10.$$s = self, $Ruby30$10.$$arity = 1, $Ruby30$10));
      racc_action_pointer = [nil, 1349, 3855, 739, nil, 401, nil, 5413, 1392, 558, 24440, 24312, 556, nil, 509, 438, 592, 429, 800, 605, nil, -69, 5675, 1263, 24824, 307, nil, 803, nil, 254, 5947, 6057, 6191, 6322, 6453, nil, 2703, 23109, 23895, nil, 175, 466, 569, 146, 6715, 6846, -44, 6977, 7108, 975, 7239, 45, 185, 323, 1112, nil, nil, nil, nil, nil, nil, nil, nil, nil, 7380, nil, 7521, 7652, 7783, 199, nil, 7914, 8045, nil, nil, 8176, 22585, 23502, 23764, nil, nil, nil, nil, nil, nil, nil, nil, nil, 529, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 830, nil, nil, 110, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 8319, nil, nil, nil, nil, 8462, 8593, 8724, 5138, 8998, nil, 2847, nil, -1, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1400, nil, 1983, 21406, 21537, 21668, 21799, 21930, 22061, 26978, 27039, nil, nil, 22192, 22323, 9129, nil, nil, 1135, 443, 389, 1466, 119, 1349, 1407, nil, 9260, 5007, 1374, nil, nil, 9391, 9522, 9653, 9784, 9915, 10046, 10177, 10308, 10439, 10570, 10701, 10832, 10963, 11094, 11225, 11356, 11487, 11618, 11749, 11880, 12011, 12142, nil, nil, nil, nil, 12273, nil, nil, 768, 698, 670, 669, 658, 556, 523, 417, 306, -62, nil, nil, nil, 13059, nil, nil, 5279, nil, nil, 1260, 13321, 13452, nil, nil, nil, nil, nil, nil, nil, 13583, nil, 2271, nil, 1207, 1190, nil, 13845, 1232, 13976, nil, nil, 14107, 14238, nil, nil, 72, nil, 14381, 960, 1178, 1144, 3423, 1158, 1186, 1142, 24034, 2991, 228, 300, 409, 1216, 802, nil, 1172, 1126, 275, 1160, 1156, nil, nil, nil, 1149, 255, 1099, 22978, nil, 327, 968, 3999, 3855, 1165, nil, 1160, 15429, nil, 15560, 1068, 4431, 1057, nil, 607, 24910, 1055, 4143, 3999, 738, 1067, nil, 748, 730, 1081, 1049, 492, 1071, nil, 772, 179, 35, 16215, 3135, 2559, 400, 1127, 993, 57, 40, 692, 1050, -18, 1078, nil, nil, 966, 479, 372, nil, 1108, nil, 980, 16608, nil, 26698, nil, 395, 398, 641, 506, 401, -32, -34, 606, nil, nil, nil, nil, nil, nil, nil, 966, 24696, nil, nil, nil, nil, 961, nil, 1030, 931, 18204, 929, nil, nil, 911, nil, 889, 15, 1011, nil, nil, 1407, nil, nil, nil, nil, nil, 1695, 858, nil, 854, 841, 526, 511, 19000, nil, nil, nil, 720, 610, 865, nil, nil, 19275, 19411, nil, nil, nil, 212, nil, 837, 27222, 27710, 19941, 345, 20203, 20334, 20465, 26016, 26506, 4431, 4719, 1014, 853, 783, 782, 775, 770, 5138, 5413, 5230, 4863, 3711, 4575, 3567, 3279, 3423, 3110, 3019, 3135, 4143, 1983, 5007, nil, 231, nil, 5279, nil, nil, nil, nil, 8855, 654, 668, 689, nil, nil, nil, 694, nil, nil, 21275, nil, 21144, nil, 21013, nil, 392, nil, nil, nil, 20870, 907, nil, 729, 731, nil, nil, 735, 23633, 744, 20727, 27527, 27161, 798, 787, nil, nil, 23240, 750, nil, 20596, 27405, 27466, 20072, 4287, 2559, 19810, 19679, 878, 879, nil, nil, 759, 757, 762, 761, 778, nil, 782, 788, nil, nil, nil, nil, nil, nil, nil, nil, nil, 777, 961, nil, nil, 19548, nil, nil, nil, 232, nil, nil, nil, 878, nil, nil, 880, 219, 820, 19134, 949, 960, 840, 881, nil, 18859, nil, nil, 18728, nil, nil, nil, 1551, 972, nil, 1695, -14, 980, 1002, 38, 1035, 18597, 18466, 26917, 27100, 7, nil, nil, 958, nil, 27344, 27588, 18335, nil, nil, 189, 2415, nil, 27894, nil, nil, nil, nil, 1362, nil, nil, nil, 946, nil, nil, 322, nil, 357, nil, nil, 935, nil, 937, nil, nil, nil, 24568, nil, 18073, 944, 17930, 17799, 17668, 26856, 27832, 17537, 17394, 442, 987, 17263, 17132, 17001, 16870, 990, nil, nil, 16739, 16477, 992, nil, nil, nil, 251, -56, 332, 471, 959, 1007, nil, 992, nil, nil, 416, 25819, -84, nil, 646, nil, nil, 7380, 26645, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 1056, 534, nil, 1039, 995, 25638, nil, 1122, nil, 1105, 173, nil, nil, 16346, nil, 1031, 1036, 1137, nil, 1022, nil, 1069, 16084, nil, nil, 15953, nil, 247, 22716, 1027, nil, 1031, 105, 343, 1099, 246, 875, 1101, 1058, 22847, nil, 1127, -26, 1839, 1184, 15822, nil, nil, 717, nil, nil, 1296, nil, nil, 649, 25204, nil, 23942, nil, 15691, nil, 3006, nil, 1073, 1075, 1170, 1079, nil, nil, nil, nil, nil, nil, 25008, 1551, nil, nil, nil, nil, 702, 240, nil, 1201, nil, nil, nil, nil, nil, 1208, 1209, nil, nil, 26, 1100, 39, 31, -1, 8, 975, 1110, 964, nil, 1103, 1119, 15298, nil, 1237, -23, 1121, nil, nil, nil, nil, nil, 1263, nil, nil, nil, nil, nil, nil, nil, nil, 1127, 15167, 1140, 252, -85, 220, 0, nil, 2127, 15036, nil, 1139, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 14905, 14774, 14643, 14512, 417, 1228, 26408, 121, 152, 26310, 26212, 441, -68, 1169, 1170, nil, 26114, nil, 1169, 1171, 1254, 1187, nil, 1193, 25918, 26777, 26743, nil, nil, nil, nil, nil, 13714, nil, nil, 1234, nil, nil, 1231, 1217, nil, nil, 539, 3567, nil, nil, nil, nil, 1220, 291, nil, nil, 13190, 1349, nil, 4287, 1226, 1280, nil, nil, 1245, nil, 1243, 1244, nil, 1249, nil, 1336, nil, 1255, 1256, nil, 1257, nil, nil, 1263, 2977, 3016, nil, nil, 12928, nil, 1388, nil, 12797, 1389, nil, nil, 25721, 12666, 4719, 10, 1395, nil, 1396, 451, 4863, nil, nil, nil, nil, 1279, 1333, 1316, 1311, 113, nil, nil, 12535, 12404, nil, nil, nil, nil, 1316, 1317, 1318, 1316, nil, nil, 25103, nil, nil, 2, nil, nil, 1337, 1354, 1357, nil, nil, nil, 1401, 1358, -48, nil, 24907, nil, 1366, nil, nil, -31, nil, nil, 2703, 1407, nil, nil, 1364, 1367, nil, 1368, 1370, 1373, nil, 1402, 1389, 1375, 22454, nil, nil, nil, 2847, nil, 1839, nil, nil, 36, 24173, nil, nil, 25822, nil, 25400, nil, nil, 25302, nil, 24081, nil, nil, nil, nil, 1393, 1398, 2415, nil, -10, nil, 136, 575, -83, nil, nil, nil, nil, 216, nil, nil, nil, 1523, 2127, 2271, 2113, nil, nil, nil, nil, nil, 1043, 1447, 325, nil, nil, nil, nil, nil, nil, 1404, 25005, 1406, nil, nil, 329, nil, nil, 1584, nil, nil, 25921, nil, nil, 26019, nil, 25708, nil, nil, -82, 23371, 1102, -22, nil, 4575, 32, 9, 991, 167, 79, nil, 106, 136, 151, 168, 3215, 3045, 3279, nil, 6584, 5806, 26604, nil, nil, nil, nil, 239, 354, 542, nil, nil, nil, nil, nil, nil, 25201, 245, 25397, 253, nil, nil, 255, 287, 296, 324, nil, 356, nil, 841, 27283, nil, 499, 5544, 27649, 27771, 33, 25498, nil, nil, nil, nil, 399, 628, 3711, nil, nil, nil, 427, nil, nil, nil, 1969, 437, 25495, nil, nil, nil, 27902, nil, 26509, nil, 26411, nil, 26117, nil, nil, 520, 531, nil, 518, 145, 146, 142, 39, 541, nil, 35, 25299, nil, 557, 566, 576, 593, 143, nil, nil, nil, nil, 625, 25106, nil, nil, nil, nil, 631, nil];
      racc_action_default = [-1, -729, -4, -729, -2, -714, -5, -729, -8, -729, -729, -729, -729, -31, -729, -729, -36, -729, -729, -305, -48, -716, -729, -57, -729, -65, -66, -67, -71, -282, -282, -282, -318, -345, -346, -83, -13, -87, -95, -97, -729, -611, -612, -729, -729, -729, -729, -729, -729, -235, -729, -716, -626, -626, -253, -296, -297, -298, -299, -300, -301, -302, -303, -304, -702, -307, -311, -728, -692, -326, -328, -729, -729, -59, -59, -714, -729, -729, -729, -347, -348, -350, -351, -352, -353, -410, -551, -552, -553, -554, -575, -557, -558, -577, -579, -562, -567, -571, -573, -589, -590, -591, -575, -593, -595, -596, -597, -598, -700, -600, -601, -701, -603, -604, -605, -606, -607, -608, -609, -610, -615, -616, 1219, -3, -715, -724, -725, -726, -7, -729, -729, -729, -729, -729, -9, -4, -19, -729, -126, -127, -128, -129, -130, -131, -132, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -24, -133, -13, -729, -729, -729, -729, -729, -272, -729, -729, -712, -713, -729, -729, -716, -717, -52, -729, -611, -612, -729, -305, -729, -729, -241, -729, -13, -729, -53, -55, -218, -219, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -254, -255, -256, -257, -729, -61, -62, -729, -126, -127, -166, -167, -168, -184, -189, -196, -199, -611, -612, -690, -729, -419, -421, -729, -710, -711, -72, -272, -729, -325, -425, -434, -436, -78, -431, -79, -716, -80, -260, -277, -286, -286, -281, -729, -287, -729, -575, -694, -729, -729, -81, -82, -714, -14, -729, -17, -729, -85, -13, -716, -729, -88, -91, -13, -103, -104, -729, -729, -111, -318, -321, -716, -729, -626, -626, -345, -346, -349, -432, -729, -93, -729, -99, -315, -729, -220, -221, -594, -229, -230, -729, -242, -729, -729, -13, -625, -621, -648, -648, -729, -13, -13, -309, -716, -261, -721, -721, -729, -729, -721, -729, -327, -58, -729, -729, -729, -13, -13, -714, -729, -715, -611, -612, -729, -729, -305, -729, -363, -364, -121, -122, -729, -124, -729, -305, -619, -729, -341, -648, -555, -729, -729, -729, -729, -729, -729, -729, -729, -6, -727, -25, -26, -27, -28, -29, -729, -729, -21, -22, -23, -134, -729, -32, -35, -292, -729, -729, -291, -33, -729, -37, -729, -305, -45, -47, -207, -265, -287, -49, -50, -38, -208, -265, -716, -273, -286, -286, -703, -704, -282, -429, -705, -706, -704, -703, -282, -428, -430, -705, -706, -44, -215, -51, -716, -324, -729, -729, -729, -272, -315, -729, -729, -729, -729, -729, -216, -217, -222, -223, -224, -225, -226, -227, -231, -232, -233, -234, -236, -237, -238, -239, -240, -243, -244, -245, -246, -716, -258, -63, -716, -440, -282, -703, -704, -69, -73, -649, -716, -286, -716, -283, -438, -440, -716, -320, -278, -729, -279, -729, -284, -729, -288, -729, -697, -699, -12, -715, -16, -18, -716, -84, -313, -100, -89, -729, -716, -272, -729, -729, -110, -729, -625, -594, -729, -96, -101, -729, -729, -729, -729, -259, -247, -729, -729, -543, -729, -376, -377, -716, -633, -716, -689, -689, -631, -633, -633, -647, -649, -650, -651, -652, -653, -654, -655, -656, -657, -729, -659, -661, -663, -668, -670, -671, -674, -679, -681, -682, -684, -685, -686, -729, -729, -633, -729, -729, -729, -716, -729, -262, -723, -722, -264, -723, -316, -317, -693, -13, -354, -355, -13, -729, -729, -729, -729, -729, -729, -272, -729, -729, -315, -59, -121, -122, -123, -729, -729, -272, -337, -617, -729, -13, -411, -648, -414, -556, -576, -581, -729, -583, -559, -578, -729, -580, -561, -729, -564, -729, -566, -569, -729, -570, -729, -592, -10, -20, -729, -30, -729, -295, -729, -729, -272, -729, -729, -729, -729, -433, -729, -274, -276, -729, -729, -74, -271, -426, -729, -729, -76, -427, -323, -718, -703, -704, -703, -704, -716, -54, -460, -462, -464, -467, -524, -716, -479, -482, -517, -522, -523, -729, -729, -527, -528, -529, -530, -531, -532, -533, -534, -535, -536, -537, -729, -729, -541, -56, -729, -729, -691, -729, -441, -68, -422, -438, -267, -274, -269, -729, -400, -729, -319, -286, -285, -289, -729, -695, -696, -729, -15, -86, -729, -92, -98, -716, -703, -704, -270, -707, -109, -729, -94, -729, -214, -228, -716, -249, -728, -728, -343, -622, -729, -640, -624, -729, -629, -630, -729, -729, -643, -729, -645, -729, -365, -729, -367, -369, -372, -375, -716, -662, -672, -673, -683, -687, -627, -729, -251, -344, -308, -310, -312, -721, -728, -356, -728, -60, -357, -358, -331, -332, -729, -729, -446, -334, -729, -716, -703, -704, -707, -314, -13, -121, -122, -125, -716, -13, -729, -339, -729, -729, -716, -582, -585, -586, -587, -588, -13, -560, -563, -565, -568, -572, -574, -135, -34, -293, -729, -716, -703, -704, -704, -703, -46, -266, -729, -719, -286, -40, -210, -41, -211, -75, -42, -213, -43, -212, -77, -729, -729, -729, -729, -433, -729, -729, -465, -466, -729, -729, -729, -484, -716, -716, -478, -485, -491, -729, -494, -498, -729, -481, -729, -729, -520, -521, -525, -526, -538, -122, -539, -729, -64, -420, -400, -424, -423, -729, -716, -435, -401, -716, -13, -437, -280, -290, -698, -90, -433, -102, -322, -729, -728, -361, -13, -544, -728, -545, -546, -716, -632, -633, -633, -660, -689, -669, -674, -688, -633, -633, -680, -633, -657, -675, -716, -729, -729, -374, -658, -729, -263, -729, -359, -729, -729, -333, -335, -729, -729, -13, -433, -729, -433, -729, -729, -13, -342, -412, -415, -417, -404, -729, -729, -294, -433, -39, -209, -275, -729, -461, -463, -471, -475, -716, -716, -716, -503, -505, -506, -509, -510, -575, -513, -515, -516, -716, -716, -716, -540, -476, -477, -501, -486, -489, -492, -729, -497, -716, -575, -720, -716, -518, -519, -248, -13, -70, -268, -689, -689, -381, -383, -383, -383, -399, -729, -716, -657, -665, -666, -677, -439, -250, -11, -13, -550, -362, -729, -729, -548, -623, -729, -636, -729, -638, -628, -729, -641, -729, -644, -646, -366, -368, -370, -373, -252, -329, -729, -330, -729, -451, -454, -457, -458, -459, -289, -728, -336, -338, -618, -729, -13, -13, -729, -413, -584, -468, -469, -470, -504, -508, -729, -512, -514, -472, -473, -474, -493, -487, -729, -495, -499, -480, -729, -483, -442, -729, -379, -380, -384, -390, -392, -729, -395, -729, -397, -402, -729, -729, -664, -729, -549, -13, -611, -612, -729, -729, -305, -547, -633, -633, -633, -633, -729, -729, -13, -447, -729, -729, -455, -443, -444, -445, -340, -729, -729, -716, -406, -408, -409, -502, -507, -511, -729, -490, -729, -689, -667, -382, -383, -383, -383, -383, -678, -383, -403, -676, -729, -315, -543, -272, -729, -729, -315, -729, -634, -637, -639, -642, -371, -728, -13, -452, -453, -456, -494, -416, -418, -405, -729, -488, -729, -496, -500, -378, -729, -387, -729, -389, -729, -393, -729, -396, -398, -314, -707, -542, -716, -703, -704, -707, -314, -633, -360, -728, -729, -407, -383, -383, -383, -383, -433, -635, -448, -449, -450, -495, -729, -385, -388, -391, -394, -383, -386];
      clist = ["42,141,141,225,291,42,330,230,623,275,274,380,293,809,409,141,308,308", "308,346,346,124,287,458,464,127,416,382,383,365,365,387,764,526,42,334", "334,361,309,309,309,436,437,452,373,514,743,518,878,144,144,772,773", "342,342,632,584,584,346,346,346,947,233,918,42,8,134,136,217,123,8,385", "386,374,391,287,287,310,310,310,349,299,303,449,928,419,420,421,422", "469,510,934,342,342,342,127,929,584,564,356,329,950,615,618,603,604", "343,343,930,928,607,610,375,378,614,516,443,569,15,443,887,929,42,15", "326,443,936,328,1085,371,743,42,932,42,567,600,879,369,735,388,1047", "1017,575,575,908,343,343,343,740,292,740,4,15,553,295,302,304,786,967", "1049,1134,128,695,723,306,319,320,1148,927,649,651,654,654,1132,1170", "642,1032,568,526,892,893,2,15,575,550,550,1028,8,981,993,1177,727,396", "927,653,655,423,743,8,746,1003,404,406,737,362,368,216,397,308,432,425", "1139,482,483,803,276,42,468,725,475,731,979,991,1018,664,435,435,359", "376,730,288,377,395,636,370,988,988,1020,605,531,15,42,808,372,823,961", "639,988,1048,15,1148,15,998,1019,1095,1021,1131,640,963,431,442,293", "407,442,827,1175,1134,1059,1066,442,1067,509,520,458,464,521,900,459", "417,1201,308,308,430,1125,424,1054,1208,953,821,308,1166,1055,1058,975", "976,874,694,875,886,889,740,740,517,309,1135,1136,922,329,1010,980,992", "309,1,346,988,408,410,780,1047,554,546,42,411,412,413,42,549,1211,1144", "334,42,584,346,414,15,1164,438,535,556,438,619,127,310,415,754,438,749", "342,334,903,310,1102,1114,940,754,758,740,829,606,15,1126,42,1007,1008", "751,834,342,42,42,824,931,929,1086,542,826,1142,896,626,,,,877,537,42", "42,534,536,936,1057,776,778,329,,299,,,329,,507,303,343,551,,,,,,127", ",828,1145,1040,837,1146,837,326,141,575,538,343,326,1087,929,544,754", "671,1198,369,1141,519,,859,754,,,988,864,522,676,15,,,,15,813,,,,15", "620,621,622,932,,822,1086,,,584,,,308,910,,144,584,,468,,458,464,1169", ",29,,,,,29,15,717,717,663,584,904,15,15,,,845,,724,743,29,1092,1093", "1202,,1209,,,15,15,29,29,29,,29,,1086,682,1178,554,780,929,,687,943", ",925,,554,,,,346,,459,,308,,994,955,42,346,946,,29,468,855,857,334,29", "29,860,862,29,1178,468,,334,913,,,877,877,,,959,342,,,682,,,443,,,342", "1006,739,1086,,,,443,443,910,,,443,443,,681,,,935,923,937,686,1210,", ",,,29,740,1022,459,,29,29,29,29,29,,29,,459,308,,,343,42,,,42,,468,308", "792,343,1179,1191,468,,,818,,933,812,,933,1056,,729,,42,,804,,,,,,,", ",675,,,15,,799,308,141,,,825,,,,,468,42,1075,,,,,,42,902,780,780,,,", "459,800,676,1127,802,,,,459,676,888,29,29,29,29,29,29,29,1065,,,717", "29,29,29,144,,717,717,,901,442,898,274,971,,29,,141,554,1016,442,442", "841,854,459,442,442,584,,915,842,346,15,,,15,,850,676,,,,346,924,1037", "1039,1090,334,,443,,1042,1044,1107,1045,,15,,334,,,29,,,,342,1015,,29", "29,,,435,1120,,1121,342,29,,854,,960,,15,,1022,438,,1022,,15,,,,,29", "438,438,,29,676,438,438,1130,29,877,,682,,676,687,,,,,966,,42,343,,", ",42,,,,,,,343,,,676,42,,29,,,,,,29,29,,,,,,1115,,1116,780,780,1117,", ",29,29,29,,676,,,,,676,676,,,,717,1022,,717,717,,,29,450,,717,,,957", "470,,,,717,717,717,869,,442,966,,1030,,880,968,1034,,,,381,381,1052", "42,381,1147,,1149,1076,,,,,,,42,,,,,,,,,,1088,,1160,1161,1162,1163,15", ",,,,15,,,,,,,,914,29,933,15,717,1015,42,754,1015,,1015,,42,,381,381", "381,381,,,,438,,1197,,1026,,1192,,,676,676,676,1064,,,717,1031,,,,,888", ",1203,,1204,,1205,,,,717,,,,,,346,29,966,42,956,,,,1207,,346,29,,958", "1061,,287,,1217,15,,,42,,,,1109,29,,,1023,15,,1015,342,1015,970,1015", ",1015,,,,,342,,,1014,447,448,,,,,,,,471,472,42,42,,,,978,1015,15,,,995", "996,,15,1167,1168,,,717,,,346,29,,,29,,,343,1106,,1156,29,,,,,287,343", ",,42,29,,,,29,,,,,,,1173,42,342,,508,717,,,,15,18,,,1129,,18,470,,450", "717,29,717,308,29,29,,468,29,15,,234,468,1113,29,29,,,,29,29,234,234", "234,,18,335,335,42,,,,,,,1154,343,,717,,,,676,,,,15,15,1165,,,1079,1080", "1081,,18,,,,,234,234,717,,234,392,402,402,,,,,459,760,,,,,718,718,381", ",,1023,,,1023,15,,1023,,1023,17,,1199,,,17,,,15,638,,1014,,,1014,,1014", ",,,,18,,,,,234,234,234,234,18,,18,,17,,,,,,,,,,1096,1098,1100,,,,,,", ",15,,,,,,,29,,,17,,29,29,,,,,,,,,,29,,,1023,,1023,,1023,,1023,,,,,,", ",,29,,1014,379,1014,,1014,,1014,,856,858,,,,861,863,1023,,,18,234,440", "234,234,440,234,17,,,,440,234,234,1014,,17,,17,,,,,,,18,,,,,,,,,,,29", ",,,,,,,,1206,,,29,,762,,,,,,,1181,1183,1185,1187,,1188,,,,,,,,,234,", ",,,,29,234,234,,,,29,,,,234,,29,718,473,,,,,718,718,,,,17,,17,,18,17", ",,18,,,17,335,18,1213,1214,1215,1216,,,,,,,,17,,,,1218,,335,,433,446", ",,29,,,,,,,18,,,,,,18,18,,,,,29,,,,,,972,41,523,234,18,18,41,,,,,,,856", "858,863,861,,,,,,,286,234,539,,,,,,29,29,,,41,333,333,,,,,,17,,,,17", ",,,,17,,,,,,,,,,,,528,41,530,,,532,533,,29,,,390,286,286,,,,,,17,,29", ",29,29,17,17,,,,,,234,718,,,718,718,,,,17,17,718,,,,,,,,718,718,718", ",,29,,972,41,,,,,,,,29,41,,41,,,,,,,,,,,,,,,,381,,,,18,,,,,,,,335,,234", ",,,,688,,335,,,,,,,,718,234,,,,,,667,,,,,,,,,,,,,,,,,,,726,,,,,,718", ",732,,734,,41,,738,,,,,,,,718,,,,,,,18,747,,18,,,,750,41,,234,,,,,,", ",,,234,17,,,18,,,,712,712,767,,770,,,,,,,,,381,,741,,379,,744,,,,18", ",,440,234,,,18,,,,,,440,440,,,797,440,440,,,,,,718,,,,,,,,,,,,41,,,", "41,,,,333,41,,,,17,,,17,,787,,,,,,,,,333,718,,,,,,,,,17,741,,41,379", "718,,718,335,41,41,,,,,,,446,,335,,,,,,41,41,17,,,17,,,,17,,,,,,17,17", ",718,,17,17,711,711,,,,,,,,,,,,,843,,,,,,718,,,741,379,,,,,,,18,,,,", "18,234,,,,,381,381,,,,18,,,,,,916,,,,,,,,,,,,440,,,,,,,,,,712,,944,", "741,,712,712,,,,,,911,,,912,,,,,,,,,,,,,,,,19,,,,921,19,,,,,,,,,18,", ",,939,,,41,,,,17,18,,,333,17,,,,19,337,337,,333,,,17,,,,,,,,,,,,,,234", "977,,,17,,18,,,19,,,18,,,,,,,394,403,403,,,,,,,969,,,,,1012,,,,,,,,", ",,,,41,,,41,,,,,1035,,,711,,,17,18,,711,711,,,19,,1046,41,,17,,1104", ",19,,19,,18,,,712,1110,,712,712,,,,,,712,,,,41,,,,712,712,712,41,,,17", "1071,1072,1073,,,17,,,,18,18,,,,,,,,,,,,,,,,,1089,,,1060,,,,,,,,,,,", ",,,,1151,710,710,379,18,,,19,17,441,,712,441,,,,,18,441,234,234,,709", "709,,333,,17,,,,,19,,,,333,,,,,,,712,,,,,,,,,234,,,,,,,712,,,,18,17", "17,,,,,,713,713,711,,,711,711,,,,,,711,,,,,,,,711,711,711,,41,,,,,41", ",,,,17,,,,,,41,19,,,,19,,17,,337,19,,,,,,,,,,,,,,,,,,337,,,712,,,,32", ",,,,32,19,,,711,,,19,19,,,,,17,,32,,,,,,,,19,19,32,32,32,,32,,712,,", "41,,711,,,,,,,,,712,41,712,,,,,711,,,,,,,32,,,,,32,32,,,32,710,,,,,", "710,710,,,,,41,,712,,,,41,,,709,,,,,,709,709,,,,,,,,,,712,,,,,715,715", ",,,32,,,,,32,32,32,32,32,,32,,,,,,,711,41,,,713,,,,,,713,713,,,286,", ",,,,41,,,,1108,,,,,,,,,,,,,,19,,711,,,,,,337,,,,,,,,711,337,711,41,41", ",,,,,,,,,,,,,,,,,32,32,32,32,32,32,32,,,,,32,32,32,,,711,,286,,,,41", ",,32,,,710,,,710,710,,,41,,,710,,711,,19,,,19,710,710,710,709,,,709", "709,,,,,,709,,,,,,,19,709,709,709,,32,,833,,,,,32,32,,41,,,,,,32,,,", ",,19,,,441,,713,,19,713,713,,,32,441,441,713,32,710,441,441,,32,,713", "713,713,,715,,,,,,715,715,,,,709,,,,,,,,,,,710,,,32,,,,,,32,32,,,,,", "710,,,,,709,,,32,32,32,,,,,,,337,,,,709,713,,,,,,337,32,,,,,,,,,,,,", ",,,,,,,,,,,,713,,,,,,,,,,,,,,,,713,,,,,,,,,,,,,710,,,,19,,,,,19,,,,", ",,,,32,,19,709,,,,,,,,,,,,,,,,,441,,710,,,,,716,716,,,715,,,715,715", "710,,710,,,715,,709,,,,,,715,715,715,713,,,,,709,32,709,,,,,,,714,714", "32,,,,,,710,,19,,,,,,,,32,,,,19,,,,713,,,709,,,710,,,,,,,,713,,713,", ",,,715,,,,,,709,,,,19,,,,,,19,,,,,,,,,32,,,32,,,713,715,,,32,,,,,,241", ",,,32,,,715,32,,307,307,307,,713,,,,,,,,354,355,19,357,358,,360,,,,", ",,32,,403,32,32,,,32,19,,307,307,1112,32,32,,,,32,32,,,,,,,,,,,,,,,", ",,,,,,,,,,19,19,,,,,,,,,715,,716,,,,,,716,716,,,,,,,,,,,,,,,,,,403,", ",,19,,,,,,,,,715,714,,,19,,,714,714,,,,,,715,,715,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,19,,715,,,,,32,,,,,32,32,,,,307,445,,,451,307,32,,,715", "451,,,,,,,,,,,,,241,32,,,,484,485,486,487,488,489,490,491,492,493,494", "495,496,497,498,499,500,501,502,503,504,505,,,,,506,,,,,,,,,,,716,,", "716,716,,,,,,716,,307,307,,32,,,716,716,716,307,,,,,,32,307,,307,,,307", "307,,,,,714,,,714,714,,,,,,714,,,,,,,32,714,714,714,,,32,,,,,,32,,,", ",,,559,,560,,,,,716,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,716,,,32,,,,714,", ",,,,,,,716,,,,,,32,,,,,,,,,,,,,,307,,,714,,,,,,,,,,,,,,,,714,,,,32,32", ",,,,,,,,,,,,,,,,,,307,,451,451,451,,,,,,,,,,,,,,,,716,32,,,,,,,,,,,", ",32,,32,32,355,,,,,,,,,,307,,307,,307,,,,,,,714,716,,,,,,,,307,32,,", ",,716,,716,,451,,32,761,,,,763,,,,,,,,,,,,,,714,,,,,,,,,,,,307,716,714", ",714,,,,,,,,,,794,,,,,,307,,,307,,716,,,,,,,,,,,307,307,,,714,,,,,,", "307,,,,,,,,,,,,,,,,,714,,,,,,,,,,,,,,,,307,451,307,,,,851,,,307,307", "451,451,,,,451,451,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,307", ",,,,,,,,307,,,307,,,,,,,,,,,,,,,,,,,,307,,,,,,,,,,,,,,307,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,307,,,,,,,,451", ",,,,,,,,,,,,451,451,451,451,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1009,,,,,,,", ",,,,,,,,,,,,1027,,,,,,,,,,,,,,,,,,,,,,,,,,,,1050,,,,,,,,,307,,,,,,,", ",,,,,,,,,,,307,451,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,307"];
      racc_goto_table = (arr = $$$('::', 'Array').$new(4137, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby30$12 = function(str){var self = $Ruby30$12.$$s == null ? this : $Ruby30$12.$$s, $$13;

        
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$13 = function(i){var self = $$13.$$s == null ? this : $$13.$$s, $writer = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$13.$$s = self, $$13.$$arity = 1, $$13));}, $Ruby30$12.$$s = self, $Ruby30$12.$$arity = 1, $Ruby30$12));
      clist = ["71,74,74,33,154,71,67,35,111,42,44,106,33,112,194,74,51,51,51,82,82", "7,71,54,54,116,194,19,19,86,86,19,12,93,71,71,71,35,87,87,87,24,24,31", "86,56,233,91,171,76,76,135,135,45,45,72,224,224,82,82,82,110,22,13,71", "8,9,17,17,5,8,40,40,87,71,71,71,89,89,89,68,90,90,28,142,19,19,19,19", "28,54,142,45,45,45,116,225,224,10,79,11,13,109,109,10,10,47,47,131,142", "88,88,89,89,88,31,20,91,23,20,183,225,71,23,63,20,229,64,188,8,233,71", "196,71,153,153,172,118,57,5,125,141,219,219,143,47,47,47,94,49,94,2", "23,69,55,55,55,127,145,128,148,6,37,37,62,62,62,230,223,209,209,209", "209,147,189,153,201,140,93,198,198,3,23,219,218,218,14,8,174,174,189", "157,23,223,208,208,8,233,8,16,174,73,73,157,81,81,18,21,51,25,27,188", "38,39,41,48,71,74,50,33,59,171,171,142,77,87,87,83,85,92,104,105,113", "115,119,196,196,145,120,194,23,71,111,121,122,123,124,196,129,23,230", "23,187,133,138,139,146,149,150,22,22,33,151,22,152,188,148,174,155,22", "156,158,160,54,54,161,164,90,6,147,51,51,11,165,2,166,167,168,72,51", "169,170,173,176,178,179,31,180,184,185,94,94,87,87,191,192,200,11,143", "172,172,87,1,82,196,204,205,126,125,67,33,71,206,207,210,71,35,188,141", "71,71,224,82,211,23,128,23,7,33,23,19,116,89,212,54,23,69,45,71,57,89", "145,142,127,54,69,94,213,35,23,13,71,198,198,31,214,45,71,71,217,227", "225,187,68,10,228,72,33,,,,37,9,71,71,5,8,229,172,222,222,11,,90,,,11", ",49,90,47,79,,,,,,116,,153,142,135,209,142,209,63,74,219,64,47,63,183", "225,64,54,33,110,118,131,62,,56,54,,,196,56,62,35,23,,,,23,31,,,,23", "11,11,5,196,,31,187,,,224,,,51,93,,76,224,,74,,54,54,171,,58,,,,,58", "23,71,71,17,224,91,23,23,,,31,,35,233,58,135,135,142,,13,,,23,23,58", "58,58,,58,,187,90,187,67,126,225,,90,126,,91,,67,,,,82,,90,,51,,72,109", "71,82,88,,58,74,28,28,71,58,58,28,28,58,187,74,,71,69,,,37,37,,,10,45", ",,90,,,20,,,45,37,89,187,,,,20,20,93,,,20,20,,55,,,140,24,140,55,112", ",,,,58,94,224,90,,58,58,58,58,58,,58,,90,51,,,47,71,,,71,,74,51,116", "47,135,12,74,,,40,,136,87,,136,37,,55,,71,,116,,,,,,,,,32,,,23,,89,51", "74,,,116,,,,,74,71,37,,,,,,71,106,126,126,,,,90,11,35,111,11,,,,90,35", "35,58,58,58,58,58,58,58,10,,,71,58,58,58,76,,71,71,,154,22,42,44,28", ",58,,74,67,140,22,22,17,89,90,22,22,224,,67,8,82,23,,,23,,8,35,,,,82", "86,222,222,10,71,,20,,222,222,109,222,,23,,71,,,58,,,,45,136,,58,58", ",,87,109,,109,45,58,,89,,19,,23,,224,23,,224,,23,,,,,58,23,23,,58,35", "23,23,10,58,37,,90,,35,90,,,,,35,,71,47,,,,71,,,,,,,47,,,35,71,,58,", ",,,,58,58,,,,,,140,,140,126,126,140,,,58,58,58,,35,,,,,35,35,,,,71,224", ",71,71,,,58,78,,71,,,11,78,,,,71,71,71,32,,22,35,,86,,32,11,86,,,,26", "26,19,71,26,140,,140,194,,,,,,,71,,,,,,,,,,194,,222,222,222,222,23,", ",,,23,,,,,,,,32,58,136,23,71,136,71,54,136,,136,,71,,26,26,26,26,,,", "23,,140,,11,,31,,,35,35,35,116,,,71,11,,,,,35,,140,,140,,140,,,,71,", ",,,,82,58,35,71,32,,,,222,,82,58,,32,11,,71,,140,23,,,71,,,,71,58,,", "226,23,,136,45,136,32,136,,136,,,,,45,,,130,26,26,,,,,,,,26,26,71,71", ",,,32,136,23,,,32,32,,23,19,19,,,71,,,82,58,,,58,,,47,11,,33,58,,,,", "71,47,,,71,58,,,,58,,,,,,,35,71,45,,26,71,,,,23,30,,,11,,30,78,,78,71", "58,71,51,58,58,,74,58,23,,30,74,23,58,58,,,,58,58,30,30,30,,30,30,30", "71,,,,,,,11,47,,71,,,,35,,,,23,23,11,,,32,32,32,,30,,,,,30,30,71,,30", "30,30,30,,,,,90,78,,,,,108,108,26,,,226,,,226,23,,226,,226,29,,11,,", "29,,,23,26,,130,,,130,,130,,,,,30,,,,,30,30,30,30,30,,30,,29,,,,,,,", ",,137,137,137,,,,,,,,23,,,,,,,58,,,29,,58,58,,,,,,,,,,58,,,226,,226", ",226,,226,,,,,,,,,58,,130,84,130,,130,,130,,78,78,,,,78,78,226,,,30", "30,30,30,30,30,30,29,,,,30,30,30,130,,29,,29,,,,,,,30,,,,,,,,,,,58,", ",,,,,,,32,,,58,,26,,,,,,,137,137,137,137,,137,,,,,,,,,30,,,,,,58,30", "30,,,,58,,,,30,,58,108,65,,,,,108,108,,,,29,,29,,30,29,,,30,,,29,30", "30,137,137,137,137,,,,,,,,29,,,,137,,30,,84,84,,,58,,,,,,,30,,,,,,30", "30,,,,,58,,,,,,78,70,65,30,30,30,70,,,,,,,78,78,78,78,,,,,,,70,30,65", ",,,,,58,58,,,70,70,70,,,,,,29,,,,29,,,,,29,,,,,,,,,,,,84,70,84,,,84", "84,,58,,,70,70,70,,,,,,29,,58,,58,58,29,29,,,,,,30,108,,,108,108,,,", "29,29,108,,,,,,,,108,108,108,,,58,,78,70,,,,,,,,58,70,,70,,,,,,,,,,", ",,,,,26,,,,30,,,,,,,,30,,30,,,,,65,,30,,,,,,,,108,30,,,,,,84,,,,,,,", ",,,,,,,,,,,65,,,,,,108,,65,,65,,70,,65,,,,,,,,108,,,,,,,30,65,,30,,", ",65,70,,30,,,,,,,,,,30,29,,,30,,,,99,99,65,,65,,,,,,,,,26,,84,,84,,84", ",,,30,,,30,30,,,30,,,,,,30,30,,,65,30,30,,,,,,108,,,,,,,,,,,,70,,,,70", ",,,70,70,,,,29,,,29,,84,,,,,,,,,70,108,,,,,,,,,29,84,,70,84,108,,108", "30,70,70,,,,,,,84,,30,,,,,,70,70,29,,,29,,,,29,,,,,,29,29,,108,,29,29", "98,98,,,,,,,,,,,,,84,,,,,,108,,,84,84,,,,,,,30,,,,,30,30,,,,,26,26,", ",,30,,,,,,65,,,,,,,,,,,,30,,,,,,,,,,99,,65,,84,,99,99,,,,,,84,,,84,", ",,,,,,,,,,,,,,34,,,,84,34,,,,,,,,,30,,,,84,,,70,,,,29,30,,,70,29,,,", "34,34,34,,70,,,29,,,,,,,,,,,,,,30,65,,,29,,30,,,34,,,30,,,,,,,34,34", "34,,,,,,,84,,,,,65,,,,,,,,,,,,,70,,,70,,,,,65,,,98,,,29,30,,98,98,,", "34,,65,70,,29,,30,,34,,34,,30,,,99,30,,99,99,,,,,,99,,,,70,,,,99,99", "99,70,,,29,65,65,65,,,29,,,,30,30,,,,,,,,,,,,,,,,,65,,,84,,,,,,,,,,", ",,,,,30,97,97,84,30,,,34,29,34,,99,34,,,,,30,34,30,30,,96,96,,70,,29", ",,,,34,,,,70,,,,,,,99,,,,,,,,,30,,,,,,,99,,,,30,29,29,,,,,,100,100,98", ",,98,98,,,,,,98,,,,,,,,98,98,98,,70,,,,,70,,,,,29,,,,,,70,34,,,,34,", "29,,34,34,,,,,,,,,,,,,,,,,,34,,,99,,,,61,,,,,61,34,,,98,,,34,34,,,,", "29,,61,,,,,,,,34,34,61,61,61,,61,,99,,,70,,98,,,,,,,,,99,70,99,,,,,98", ",,,,,,61,,,,,61,61,,,61,97,,,,,,97,97,,,,,70,,99,,,,70,,,96,,,,,,96", "96,,,,,,,,,,99,,,,,102,102,,,,61,,,,,61,61,61,61,61,,61,,,,,,,98,70", ",,100,,,,,,100,100,,,70,,,,,,70,,,,70,,,,,,,,,,,,,,34,,98,,,,,,34,,", ",,,,,98,34,98,70,70,,,,,,,,,,,,,,,,,,61,61,61,61,61,61,61,,,,,61,61", "61,,,98,,70,,,,70,,,61,,,97,,,97,97,,,70,,,97,,98,,34,,,34,97,97,97", "96,,,96,96,,,,,,96,,,,,,,34,96,96,96,,61,,34,,,,,61,61,,70,,,,,,61,", ",,,,34,,,34,,100,,34,100,100,,,61,34,34,100,61,97,34,34,,61,,100,100", "100,,102,,,,,,102,102,,,,96,,,,,,,,,,,97,,,61,,,,,,61,61,,,,,,97,,,", ",96,,,61,61,61,,,,,,,34,,,,96,100,,,,,,34,61,,,,,,,,,,,,,,,,,,,,,,,", ",100,,,,,,,,,,,,,,,,100,,,,,,,,,,,,,97,,,,34,,,,,34,,,,,,,,,61,,34,96", ",,,,,,,,,,,,,,,,34,,97,,,,,103,103,,,102,,,102,102,97,,97,,,102,,96", ",,,,,102,102,102,100,,,,,96,61,96,,,,,,,101,101,61,,,,,,97,,34,,,,,", ",,61,,,,34,,,,100,,,96,,,97,,,,,,,,100,,100,,,,,102,,,,,,96,,,,34,,", ",,,34,,,,,,,,,61,,,61,,,100,102,,,61,,,,,,36,,,,61,,,102,61,,36,36,36", ",100,,,,,,,,36,36,34,36,36,,36,,,,,,,61,,34,61,61,,,61,34,,36,36,34", "61,61,,,,61,61,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,102,,103,,,,,", "103,103,,,,,,,,,,,,,,,,,,34,,,,34,,,,,,,,,102,101,,,34,,,101,101,,,", ",,102,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,102,,,,,61,,,,,61,61", ",,,36,36,,,36,36,61,,,102,36,,,,,,,,,,,,,36,61,,,,36,36,36,36,36,36", "36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,,,,,36,,,,,,,,,,,103", ",,103,103,,,,,,103,,36,36,,61,,,103,103,103,36,,,,,,61,36,,36,,,36,36", ",,,,101,,,101,101,,,,,,101,,,,,,,61,101,101,101,,,61,,,,,,61,,,,,,,36", ",36,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,61,,,,101,,,,,,,,,103", ",,,,,61,,,,,,,,,,,,,,36,,,101,,,,,,,,,,,,,,,,101,,,,61,61,,,,,,,,,,", ",,,,,,,,36,,36,36,36,,,,,,,,,,,,,,,,103,61,,,,,,,,,,,,,61,,61,61,36", ",,,,,,,,,36,,36,,36,,,,,,,101,103,,,,,,,,36,61,,,,,103,,103,,36,,61", "36,,,,36,,,,,,,,,,,,,,101,,,,,,,,,,,,36,103,101,,101,,,,,,,,,,36,,,", ",,36,,,36,,103,,,,,,,,,,,36,36,,,101,,,,,,,36,,,,,,,,,,,,,,,,,101,,", ",,,,,,,,,,,,,36,36,36,,,,36,,,36,36,36,36,,,,36,36,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,36,,,36,,,,,,,,,,,,,,,,,,,", "36,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,36,,,,,,,,36,,,,,,,,,,,,,36,36,36,36,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,", ",,,,,,,36,,,,,,,,,,,,,,,,,,,36,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,36"];
      racc_goto_check = (arr = $$$('::', 'Array').$new(4137, nil));
      idx = 0;
      $send(clist, 'each', [], ($Ruby30$14 = function(str){var self = $Ruby30$14.$$s == null ? this : $Ruby30$14.$$s, $$15;

        
        
        if (str == null) {
          str = nil;
        };
        return $send(str.$split(",", -1), 'each', [], ($$15 = function(i){var self = $$15.$$s == null ? this : $$15.$$s, $writer = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(i['$empty?']())) {
          } else {
            
            $writer = [idx, i.$to_i()];
            $send(arr, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return (idx = $rb_plus(idx, 1));}, $$15.$$s = self, $$15.$$arity = 1, $$15));}, $Ruby30$14.$$s = self, $Ruby30$14.$$arity = 1, $Ruby30$14));
      racc_goto_pointer = [nil, 312, 149, 181, nil, 64, 154, 16, 63, 57, -265, 64, -531, -701, -732, nil, -336, 57, 195, -44, -104, 131, 40, 116, -178, -10, 832, 74, -140, 1226, 1125, -181, 196, -15, 2017, -14, 2981, -320, -33, -33, -2, -405, -15, nil, -14, 16, nil, 69, 191, 122, -289, -16, nil, nil, -202, 125, -250, -382, 471, -293, nil, 2372, 132, 88, 91, 1203, nil, -31, 42, -197, 1505, -2, -345, 124, -9, nil, 39, -205, 654, 53, nil, 152, -18, 178, 1258, 161, -23, 6, -264, 45, 52, -249, -281, -277, -377, nil, 1768, 1747, 1430, 1286, 1817, 2433, 2009, 2394, 206, 163, -58, nil, 732, -280, -739, -380, -609, 156, nil, -171, 20, nil, 84, 169, -133, 177, -392, -580, -160, -801, -268, -428, -783, -693, 145, -663, nil, -654, nil, -519, -142, 256, -762, -652, -189, -766, -684, -592, nil, -670, -812, -895, -908, -150, -569, 177, -376, -232, -21, -696, -695, -318, -19, nil, -28, -26, nil, nil, -452, -778, -668, -913, -523, -831, -662, -653, -565, -661, -686, nil, -577, nil, -577, -405, -403, nil, nil, -582, -404, -404, nil, -629, -873, -950, nil, -770, -769, nil, -76, nil, -639, nil, -528, nil, -459, -746, nil, nil, 227, 223, 228, 228, -218, -241, 228, 236, 245, -289, -282, nil, nil, -268, -158, -224, nil, nil, -184, -600, -310, -672, 128, -401, -716, -649, -930, nil, nil, -481];
      racc_goto_default = [nil, nil, nil, nil, 5, nil, 6, 389, 324, nil, nil, 563, nil, 948, nil, 321, 322, nil, nil, nil, 13, 14, 20, 239, nil, nil, 16, nil, 439, 240, 353, nil, nil, 634, 238, 474, 23, 997, nil, nil, nil, nil, nil, 384, 143, 52, 24, 53, nil, nil, nil, 25, 26, 27, 757, nil, nil, nil, 341, nil, 28, 338, 453, 35, nil, nil, 37, 40, 39, nil, 235, 236, 401, nil, 461, 142, 87, nil, 444, 103, 49, nil, 54, 273, 313, nil, 919, 454, nil, 455, 466, nil, 683, 524, 311, 297, 55, 56, 57, 58, 59, 60, 61, 62, 63, nil, 298, 69, 70, nil, nil, nil, nil, nil, 77, nil, 616, 78, 363, nil, nil, nil, nil, nil, nil, 782, 583, nil, 783, 784, 571, 565, 566, 1143, 1013, nil, 572, nil, nil, nil, 601, nil, 574, nil, 906, nil, nil, nil, 581, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 465, nil, nil, 736, 728, nil, nil, nil, nil, nil, nil, nil, nil, nil, 882, nil, 696, 705, 697, 698, nil, nil, 699, 700, nil, nil, nil, 881, 883, nil, 884, 982, 983, 984, 985, nil, 989, 592, 990, 704, 706, nil, nil, 86, 88, 89, nil, nil, nil, nil, 644, nil, nil, nil, nil, nil, 99, 100, nil, 364, 926, 367, 570, 769, 573, 938, 586, 588, 589, 1024, 593, 1025, 596, 599, 316];
      racc_reduce_table = [0, 0, "racc_error", 0, 150, "_reduce_1", 2, 148, "_reduce_2", 2, 149, "_reduce_3", 0, 151, "_reduce_4", 1, 151, "_reduce_5", 3, 151, "_reduce_6", 2, 151, "_reduce_7", 1, 153, "_reduce_none", 2, 153, "_reduce_9", 3, 156, "_reduce_10", 4, 157, "_reduce_11", 2, 158, "_reduce_12", 0, 162, "_reduce_13", 1, 162, "_reduce_14", 3, 162, "_reduce_15", 2, 162, "_reduce_16", 1, 163, "_reduce_none", 2, 163, "_reduce_18", 0, 174, "_reduce_19", 4, 155, "_reduce_20", 3, 155, "_reduce_21", 3, 155, "_reduce_22", 3, 155, "_reduce_23", 2, 155, "_reduce_24", 3, 155, "_reduce_25", 3, 155, "_reduce_26", 3, 155, "_reduce_27", 3, 155, "_reduce_28", 3, 155, "_reduce_29", 4, 155, "_reduce_30", 1, 155, "_reduce_none", 3, 155, "_reduce_32", 3, 155, "_reduce_33", 5, 155, "_reduce_34", 3, 155, "_reduce_35", 1, 155, "_reduce_none", 3, 167, "_reduce_37", 3, 167, "_reduce_38", 6, 167, "_reduce_39", 5, 167, "_reduce_40", 5, 167, "_reduce_41", 5, 167, "_reduce_42", 5, 167, "_reduce_43", 3, 167, "_reduce_44", 1, 175, "_reduce_none", 3, 175, "_reduce_46", 1, 175, "_reduce_none", 1, 173, "_reduce_none", 3, 173, "_reduce_49", 3, 173, "_reduce_50", 3, 173, "_reduce_51", 2, 173, "_reduce_52", 0, 185, "_reduce_53", 4, 173, "_reduce_54", 0, 186, "_reduce_55", 4, 173, "_reduce_56", 1, 173, "_reduce_none", 1, 166, "_reduce_none", 0, 190, "_reduce_59", 3, 187, "_reduce_60", 1, 189, "_reduce_61", 2, 192, "_reduce_62", 0, 197, "_reduce_63", 5, 194, "_reduce_64", 1, 169, "_reduce_none", 1, 169, "_reduce_none", 1, 199, "_reduce_none", 4, 199, "_reduce_68", 0, 206, "_reduce_69", 4, 203, "_reduce_70", 1, 205, "_reduce_none", 2, 198, "_reduce_72", 3, 198, "_reduce_73", 4, 198, "_reduce_74", 5, 198, "_reduce_75", 4, 198, "_reduce_76", 5, 198, "_reduce_77", 2, 198, "_reduce_78", 2, 198, "_reduce_79", 2, 198, "_reduce_80", 2, 198, "_reduce_81", 2, 198, "_reduce_82", 1, 168, "_reduce_83", 3, 168, "_reduce_84", 1, 211, "_reduce_85", 3, 211, "_reduce_86", 1, 210, "_reduce_none", 2, 210, "_reduce_88", 3, 210, "_reduce_89", 5, 210, "_reduce_90", 2, 210, "_reduce_91", 4, 210, "_reduce_92", 2, 210, "_reduce_93", 4, 210, "_reduce_94", 1, 210, "_reduce_95", 3, 210, "_reduce_96", 1, 214, "_reduce_none", 3, 214, "_reduce_98", 2, 213, "_reduce_99", 3, 213, "_reduce_100", 1, 216, "_reduce_101", 3, 216, "_reduce_102", 1, 215, "_reduce_103", 1, 215, "_reduce_104", 4, 215, "_reduce_105", 3, 215, "_reduce_106", 3, 215, "_reduce_107", 3, 215, "_reduce_108", 3, 215, "_reduce_109", 2, 215, "_reduce_110", 1, 215, "_reduce_111", 1, 170, "_reduce_112", 1, 170, "_reduce_113", 4, 170, "_reduce_114", 3, 170, "_reduce_115", 3, 170, "_reduce_116", 3, 170, "_reduce_117", 3, 170, "_reduce_118", 2, 170, "_reduce_119", 1, 170, "_reduce_120", 1, 219, "_reduce_121", 1, 219, "_reduce_none", 2, 220, "_reduce_123", 1, 220, "_reduce_124", 3, 220, "_reduce_125", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 164, "_reduce_131", 1, 164, "_reduce_none", 1, 165, "_reduce_133", 0, 224, "_reduce_134", 4, 165, "_reduce_135", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 3, 183, "_reduce_207", 3, 183, "_reduce_208", 6, 183, "_reduce_209", 5, 183, "_reduce_210", 5, 183, "_reduce_211", 5, 183, "_reduce_212", 5, 183, "_reduce_213", 4, 183, "_reduce_214", 3, 183, "_reduce_215", 3, 183, "_reduce_216", 3, 183, "_reduce_217", 2, 183, "_reduce_218", 2, 183, "_reduce_219", 2, 183, "_reduce_220", 2, 183, "_reduce_221", 3, 183, "_reduce_222", 3, 183, "_reduce_223", 3, 183, "_reduce_224", 3, 183, "_reduce_225", 3, 183, "_reduce_226", 3, 183, "_reduce_227", 4, 183, "_reduce_228", 2, 183, "_reduce_229", 2, 183, "_reduce_230", 3, 183, "_reduce_231", 3, 183, "_reduce_232", 3, 183, "_reduce_233", 3, 183, "_reduce_234", 1, 183, "_reduce_none", 3, 183, "_reduce_236", 3, 183, "_reduce_237", 3, 183, "_reduce_238", 3, 183, "_reduce_239", 3, 183, "_reduce_240", 2, 183, "_reduce_241", 2, 183, "_reduce_242", 3, 183, "_reduce_243", 3, 183, "_reduce_244", 3, 183, "_reduce_245", 3, 183, "_reduce_246", 3, 183, "_reduce_247", 6, 183, "_reduce_248", 4, 183, "_reduce_249", 6, 183, "_reduce_250", 4, 183, "_reduce_251", 6, 183, "_reduce_252", 1, 183, "_reduce_none", 1, 230, "_reduce_none", 1, 230, "_reduce_none", 1, 230, "_reduce_none", 1, 230, "_reduce_none", 3, 227, "_reduce_258", 3, 227, "_reduce_259", 1, 231, "_reduce_none", 1, 232, "_reduce_none", 2, 232, "_reduce_none", 4, 232, "_reduce_263", 2, 232, "_reduce_264", 1, 225, "_reduce_none", 3, 225, "_reduce_266", 3, 237, "_reduce_267", 5, 237, "_reduce_268", 3, 237, "_reduce_269", 0, 239, "_reduce_270", 1, 239, "_reduce_none", 0, 178, "_reduce_272", 1, 178, "_reduce_none", 2, 178, "_reduce_none", 4, 178, "_reduce_275", 2, 178, "_reduce_276", 1, 209, "_reduce_277", 2, 209, "_reduce_278", 2, 209, "_reduce_279", 4, 209, "_reduce_280", 1, 209, "_reduce_281", 0, 242, "_reduce_282", 2, 202, "_reduce_283", 2, 241, "_reduce_284", 2, 240, "_reduce_285", 0, 240, "_reduce_286", 1, 234, "_reduce_287", 2, 234, "_reduce_288", 3, 234, "_reduce_289", 4, 234, "_reduce_290", 1, 172, "_reduce_291", 1, 172, "_reduce_none", 3, 171, "_reduce_293", 4, 171, "_reduce_294", 2, 171, "_reduce_295", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_none", 1, 229, "_reduce_306", 0, 266, "_reduce_307", 4, 229, "_reduce_308", 0, 267, "_reduce_309", 4, 229, "_reduce_310", 0, 268, "_reduce_311", 4, 229, "_reduce_312", 3, 229, "_reduce_313", 3, 229, "_reduce_314", 2, 229, "_reduce_315", 3, 229, "_reduce_316", 3, 229, "_reduce_317", 1, 229, "_reduce_318", 4, 229, "_reduce_319", 3, 229, "_reduce_320", 1, 229, "_reduce_321", 5, 229, "_reduce_322", 4, 229, "_reduce_323", 3, 229, "_reduce_324", 2, 229, "_reduce_325", 1, 229, "_reduce_none", 2, 229, "_reduce_327", 1, 229, "_reduce_none", 6, 229, "_reduce_329", 6, 229, "_reduce_330", 4, 229, "_reduce_331", 4, 229, "_reduce_332", 5, 229, "_reduce_333", 4, 229, "_reduce_334", 5, 229, "_reduce_335", 6, 229, "_reduce_336", 0, 269, "_reduce_337", 6, 229, "_reduce_338", 0, 270, "_reduce_339", 7, 229, "_reduce_340", 0, 271, "_reduce_341", 5, 229, "_reduce_342", 4, 229, "_reduce_343", 4, 229, "_reduce_344", 1, 229, "_reduce_345", 1, 229, "_reduce_346", 1, 229, "_reduce_347", 1, 229, "_reduce_348", 1, 177, "_reduce_none", 1, 261, "_reduce_350", 1, 264, "_reduce_351", 1, 193, "_reduce_352", 1, 208, "_reduce_353", 1, 256, "_reduce_none", 1, 256, "_reduce_none", 2, 256, "_reduce_356", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 257, "_reduce_none", 5, 257, "_reduce_360", 1, 160, "_reduce_none", 2, 160, "_reduce_362", 1, 260, "_reduce_none", 1, 260, "_reduce_none", 1, 272, "_reduce_365", 3, 272, "_reduce_366", 1, 275, "_reduce_367", 3, 275, "_reduce_368", 1, 274, "_reduce_none", 3, 274, "_reduce_370", 5, 274, "_reduce_371", 1, 274, "_reduce_372", 3, 274, "_reduce_373", 2, 276, "_reduce_374", 1, 276, "_reduce_375", 1, 277, "_reduce_none", 1, 277, "_reduce_none", 4, 280, "_reduce_378", 2, 280, "_reduce_379", 2, 280, "_reduce_380", 1, 280, "_reduce_381", 2, 284, "_reduce_382", 0, 284, "_reduce_383", 1, 285, "_reduce_none", 6, 286, "_reduce_385", 8, 286, "_reduce_386", 4, 286, "_reduce_387", 6, 286, "_reduce_388", 4, 286, "_reduce_389", 2, 286, "_reduce_none", 6, 286, "_reduce_391", 2, 286, "_reduce_392", 4, 286, "_reduce_393", 6, 286, "_reduce_394", 2, 286, "_reduce_395", 4, 286, "_reduce_396", 2, 286, "_reduce_397", 4, 286, "_reduce_398", 1, 286, "_reduce_none", 0, 290, "_reduce_400", 1, 290, "_reduce_401", 3, 291, "_reduce_402", 4, 291, "_reduce_403", 1, 292, "_reduce_404", 4, 292, "_reduce_405", 1, 293, "_reduce_406", 3, 293, "_reduce_407", 1, 294, "_reduce_408", 1, 294, "_reduce_none", 0, 298, "_reduce_410", 0, 299, "_reduce_411", 5, 255, "_reduce_412", 4, 296, "_reduce_413", 1, 296, "_reduce_414", 0, 302, "_reduce_415", 4, 297, "_reduce_416", 0, 303, "_reduce_417", 4, 297, "_reduce_418", 0, 305, "_reduce_419", 4, 301, "_reduce_420", 2, 200, "_reduce_421", 4, 200, "_reduce_422", 5, 200, "_reduce_423", 5, 200, "_reduce_424", 2, 254, "_reduce_425", 4, 254, "_reduce_426", 4, 254, "_reduce_427", 3, 254, "_reduce_428", 3, 254, "_reduce_429", 3, 254, "_reduce_430", 2, 254, "_reduce_431", 1, 254, "_reduce_432", 4, 254, "_reduce_433", 0, 307, "_reduce_434", 4, 253, "_reduce_435", 0, 308, "_reduce_436", 4, 253, "_reduce_437", 0, 309, "_reduce_438", 3, 204, "_reduce_439", 0, 310, "_reduce_440", 0, 311, "_reduce_441", 4, 304, "_reduce_442", 5, 258, "_reduce_443", 1, 312, "_reduce_444", 1, 312, "_reduce_none", 0, 315, "_reduce_446", 0, 316, "_reduce_447", 7, 259, "_reduce_448", 1, 314, "_reduce_449", 1, 314, "_reduce_none", 1, 313, "_reduce_451", 3, 313, "_reduce_452", 3, 313, "_reduce_453", 1, 317, "_reduce_none", 2, 317, "_reduce_455", 3, 317, "_reduce_456", 1, 317, "_reduce_457", 1, 317, "_reduce_458", 1, 317, "_reduce_459", 1, 184, "_reduce_none", 3, 322, "_reduce_461", 1, 322, "_reduce_none", 3, 324, "_reduce_463", 1, 324, "_reduce_none", 1, 326, "_reduce_465", 1, 327, "_reduce_466", 1, 325, "_reduce_none", 4, 325, "_reduce_468", 4, 325, "_reduce_469", 4, 325, "_reduce_470", 3, 325, "_reduce_471", 4, 325, "_reduce_472", 4, 325, "_reduce_473", 4, 325, "_reduce_474", 3, 325, "_reduce_475", 3, 325, "_reduce_476", 3, 325, "_reduce_477", 2, 325, "_reduce_478", 0, 331, "_reduce_479", 4, 325, "_reduce_480", 2, 325, "_reduce_481", 0, 332, "_reduce_482", 4, 325, "_reduce_483", 1, 318, "_reduce_484", 1, 318, "_reduce_485", 2, 318, "_reduce_486", 3, 318, "_reduce_487", 5, 318, "_reduce_488", 2, 318, "_reduce_489", 4, 318, "_reduce_490", 1, 318, "_reduce_none", 2, 333, "_reduce_492", 3, 333, "_reduce_493", 1, 320, "_reduce_494", 3, 320, "_reduce_495", 5, 319, "_reduce_496", 2, 336, "_reduce_497", 1, 336, "_reduce_498", 1, 335, "_reduce_499", 3, 335, "_reduce_500", 1, 334, "_reduce_none", 3, 321, "_reduce_502", 1, 321, "_reduce_503", 2, 321, "_reduce_504", 1, 321, "_reduce_505", 1, 337, "_reduce_506", 3, 337, "_reduce_507", 2, 339, "_reduce_508", 1, 339, "_reduce_509", 1, 340, "_reduce_510", 3, 340, "_reduce_511", 2, 342, "_reduce_512", 1, 342, "_reduce_513", 2, 344, "_reduce_514", 1, 338, "_reduce_none", 1, 338, "_reduce_none", 1, 328, "_reduce_none", 3, 328, "_reduce_518", 3, 328, "_reduce_519", 2, 328, "_reduce_520", 2, 328, "_reduce_521", 1, 328, "_reduce_none", 1, 328, "_reduce_none", 1, 328, "_reduce_none", 2, 328, "_reduce_525", 2, 328, "_reduce_526", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_none", 1, 345, "_reduce_535", 1, 345, "_reduce_none", 1, 323, "_reduce_537", 2, 346, "_reduce_538", 2, 329, "_reduce_539", 3, 329, "_reduce_540", 1, 329, "_reduce_541", 6, 159, "_reduce_542", 0, 159, "_reduce_543", 1, 347, "_reduce_544", 1, 347, "_reduce_none", 1, 347, "_reduce_none", 2, 348, "_reduce_547", 1, 348, "_reduce_none", 2, 161, "_reduce_549", 1, 161, "_reduce_none", 1, 243, "_reduce_none", 1, 243, "_reduce_none", 1, 244, "_reduce_553", 1, 350, "_reduce_554", 2, 350, "_reduce_555", 3, 351, "_reduce_556", 1, 351, "_reduce_557", 1, 351, "_reduce_558", 3, 245, "_reduce_559", 4, 246, "_reduce_560", 3, 247, "_reduce_561", 0, 354, "_reduce_562", 3, 354, "_reduce_563", 1, 355, "_reduce_564", 2, 355, "_reduce_565", 3, 249, "_reduce_566", 0, 357, "_reduce_567", 3, 357, "_reduce_568", 3, 248, "_reduce_569", 3, 250, "_reduce_570", 0, 358, "_reduce_571", 3, 358, "_reduce_572", 0, 359, "_reduce_573", 3, 359, "_reduce_574", 0, 341, "_reduce_575", 2, 341, "_reduce_576", 0, 352, "_reduce_577", 2, 352, "_reduce_578", 0, 353, "_reduce_579", 2, 353, "_reduce_580", 1, 356, "_reduce_581", 2, 356, "_reduce_582", 0, 361, "_reduce_583", 4, 356, "_reduce_584", 1, 360, "_reduce_585", 1, 360, "_reduce_586", 1, 360, "_reduce_587", 1, 360, "_reduce_none", 1, 223, "_reduce_none", 1, 223, "_reduce_none", 1, 362, "_reduce_591", 3, 363, "_reduce_592", 1, 349, "_reduce_593", 2, 349, "_reduce_594", 1, 226, "_reduce_595", 1, 226, "_reduce_596", 1, 226, "_reduce_597", 1, 226, "_reduce_598", 1, 217, "_reduce_599", 1, 217, "_reduce_600", 1, 217, "_reduce_601", 1, 217, "_reduce_602", 1, 217, "_reduce_603", 1, 218, "_reduce_604", 1, 218, "_reduce_605", 1, 218, "_reduce_606", 1, 218, "_reduce_607", 1, 218, "_reduce_608", 1, 218, "_reduce_609", 1, 218, "_reduce_610", 1, 251, "_reduce_611", 1, 251, "_reduce_612", 1, 176, "_reduce_613", 1, 176, "_reduce_614", 1, 181, "_reduce_615", 1, 181, "_reduce_616", 0, 364, "_reduce_617", 4, 262, "_reduce_618", 0, 262, "_reduce_619", 1, 228, "_reduce_none", 1, 228, "_reduce_621", 3, 365, "_reduce_622", 5, 365, "_reduce_623", 3, 365, "_reduce_624", 1, 265, "_reduce_none", 0, 367, "_reduce_626", 3, 265, "_reduce_627", 4, 366, "_reduce_628", 2, 366, "_reduce_629", 2, 366, "_reduce_630", 1, 366, "_reduce_631", 2, 369, "_reduce_632", 0, 369, "_reduce_633", 6, 300, "_reduce_634", 8, 300, "_reduce_635", 4, 300, "_reduce_636", 6, 300, "_reduce_637", 4, 300, "_reduce_638", 6, 300, "_reduce_639", 2, 300, "_reduce_640", 4, 300, "_reduce_641", 6, 300, "_reduce_642", 2, 300, "_reduce_643", 4, 300, "_reduce_644", 2, 300, "_reduce_645", 4, 300, "_reduce_646", 1, 300, "_reduce_647", 0, 300, "_reduce_648", 1, 238, "_reduce_649", 1, 295, "_reduce_650", 1, 295, "_reduce_651", 1, 295, "_reduce_652", 1, 295, "_reduce_653", 1, 273, "_reduce_none", 1, 273, "_reduce_655", 1, 371, "_reduce_656", 1, 372, "_reduce_657", 3, 372, "_reduce_658", 1, 287, "_reduce_659", 3, 287, "_reduce_660", 1, 373, "_reduce_661", 2, 374, "_reduce_662", 1, 374, "_reduce_663", 2, 375, "_reduce_664", 1, 375, "_reduce_665", 1, 281, "_reduce_666", 3, 281, "_reduce_667", 1, 368, "_reduce_668", 3, 368, "_reduce_669", 1, 343, "_reduce_none", 1, 343, "_reduce_none", 2, 279, "_reduce_672", 2, 278, "_reduce_673", 1, 278, "_reduce_674", 3, 376, "_reduce_675", 3, 377, "_reduce_676", 1, 288, "_reduce_677", 3, 288, "_reduce_678", 1, 370, "_reduce_679", 3, 370, "_reduce_680", 1, 378, "_reduce_none", 1, 378, "_reduce_none", 2, 289, "_reduce_683", 1, 289, "_reduce_684", 1, 379, "_reduce_none", 1, 379, "_reduce_none", 2, 283, "_reduce_687", 2, 282, "_reduce_688", 0, 282, "_reduce_689", 1, 195, "_reduce_none", 3, 195, "_reduce_691", 0, 252, "_reduce_692", 2, 252, "_reduce_none", 1, 236, "_reduce_694", 3, 236, "_reduce_695", 3, 380, "_reduce_696", 2, 380, "_reduce_697", 4, 380, "_reduce_698", 2, 380, "_reduce_699", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 201, "_reduce_none", 1, 306, "_reduce_none", 1, 306, "_reduce_none", 1, 306, "_reduce_none", 1, 196, "_reduce_none", 1, 196, "_reduce_none", 1, 180, "_reduce_712", 1, 180, "_reduce_713", 0, 152, "_reduce_none", 1, 152, "_reduce_none", 0, 182, "_reduce_none", 1, 182, "_reduce_none", 2, 212, "_reduce_718", 2, 179, "_reduce_719", 2, 330, "_reduce_720", 0, 235, "_reduce_none", 1, 235, "_reduce_none", 1, 235, "_reduce_none", 1, 263, "_reduce_724", 1, 263, "_reduce_none", 1, 154, "_reduce_none", 2, 154, "_reduce_none", 0, 233, "_reduce_728"];
      racc_reduce_n = 729;
      racc_shift_n = 1219;
      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "k__ENCODING__", 50, "tIDENTIFIER", 51, "tFID", 52, "tGVAR", 53, "tIVAR", 54, "tCONSTANT", 55, "tLABEL", 56, "tCVAR", 57, "tNTH_REF", 58, "tBACK_REF", 59, "tSTRING_CONTENT", 60, "tINTEGER", 61, "tFLOAT", 62, "tUPLUS", 63, "tUMINUS", 64, "tUNARY_NUM", 65, "tPOW", 66, "tCMP", 67, "tEQ", 68, "tEQQ", 69, "tNEQ", 70, "tGEQ", 71, "tLEQ", 72, "tANDOP", 73, "tOROP", 74, "tMATCH", 75, "tNMATCH", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tLBRACK", 92, "tLBRACK2", 93, "tRBRACK", 94, "tLBRACE", 95, "tLBRACE_ARG", 96, "tSTAR", 97, "tSTAR2", 98, "tAMPER", 99, "tAMPER2", 100, "tTILDE", 101, "tPERCENT", 102, "tDIVIDE", 103, "tDSTAR", 104, "tPLUS", 105, "tMINUS", 106, "tLT", 107, "tGT", 108, "tPIPE", 109, "tBANG", 110, "tCARET", 111, "tLCURLY", 112, "tRCURLY", 113, "tBACK_REF2", 114, "tSYMBEG", 115, "tSTRING_BEG", 116, "tXSTRING_BEG", 117, "tREGEXP_BEG", 118, "tREGEXP_OPT", 119, "tWORDS_BEG", 120, "tQWORDS_BEG", 121, "tSYMBOLS_BEG", 122, "tQSYMBOLS_BEG", 123, "tSTRING_DBEG", 124, "tSTRING_DVAR", 125, "tSTRING_END", 126, "tSTRING_DEND", 127, "tSTRING", 128, "tSYMBOL", 129, "tNL", 130, "tEH", 131, "tCOLON", 132, "tCOMMA", 133, "tSPACE", 134, "tSEMI", 135, "tLAMBDA", 136, "tLAMBEG", 137, "tCHARACTER", 138, "tRATIONAL", 139, "tIMAGINARY", 140, "tLABEL_END", 141, "tANDDOT", 142, "tBDOT2", 143, "tBDOT3", 144, "tEQL", 145, "tLOWEST", 146);
      racc_nt_base = 147;
      racc_use_result_var = true;
      Opal.const_set($nesting[0], 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);
      Opal.const_set($nesting[0], 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "k__ENCODING__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tUPLUS", "tUMINUS", "tUNARY_NUM", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tLBRACK", "tLBRACK2", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tDSTAR", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tREGEXP_OPT", "tWORDS_BEG", "tQWORDS_BEG", "tSYMBOLS_BEG", "tQSYMBOLS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING_DEND", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tCHARACTER", "tRATIONAL", "tIMAGINARY", "tLABEL_END", "tANDDOT", "tBDOT2", "tBDOT3", "tEQL", "tLOWEST", "$start", "program", "top_compstmt", "@1", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "begin_block", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "stmt_or_begin", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "lhs", "mrhs", "mrhs_arg", "expr", "@2", "command_rhs", "var_lhs", "primary_value", "opt_call_args", "rbracket", "call_op", "backref", "opt_nl", "arg", "p_expr", "@3", "@4", "expr_value_do", "do", "def_name", "@5", "fname", "defn_head", "k_def", "defs_head", "singleton", "dot_or_colon", "@6", "command", "block_command", "block_call", "operation2", "command_args", "cmd_brace_block", "brace_body", "fcall", "@7", "operation", "k_return", "call_args", "mlhs_basic", "mlhs_inner", "rparen", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "user_variable", "keyword_variable", "cname", "cpath", "op", "reswords", "symbol", "@8", "arg_rhs", "simple_numeric", "rel_expr", "f_opt_paren_args", "primary", "relop", "arg_value", "aref_args", "none", "args", "trailer", "assocs", "paren_args", "args_forward", "opt_paren_args", "opt_block_arg", "block_arg", "@9", "literal", "strings", "xstring", "regexp", "words", "qwords", "symbols", "qsymbols", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "case_body", "p_case_body", "for_var", "k_class", "superclass", "term", "k_module", "f_arglist", "@10", "@11", "@12", "@13", "@14", "@15", "f_marg", "f_norm_arg", "f_margs", "f_marg_list", "f_rest_marg", "f_any_kwrest", "f_kwrest", "f_no_kwarg", "block_args_tail", "f_block_kwarg", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "excessed_comma", "block_param", "f_arg", "f_block_optarg", "f_rest_arg", "opt_block_param", "block_param_def", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "@16", "@17", "f_args", "do_block", "@18", "@19", "do_body", "@20", "operation3", "@21", "@22", "@23", "@24", "@25", "cases", "p_top_expr", "p_cases", "@26", "@27", "p_top_expr_body", "p_args", "p_find", "p_args_tail", "p_kwargs", "p_as", "p_variable", "p_alt", "p_expr_basic", "p_lparen", "p_lbracket", "p_value", "p_const", "rbrace", "@28", "@29", "p_args_head", "p_arg", "p_args_post", "p_rest", "p_kwarg", "p_any_kwrest", "p_kw", "p_kw_label", "string_contents", "p_kwrest", "kwrest_mark", "p_kwnorest", "p_primitive", "p_var_ref", "exc_list", "exc_var", "numeric", "string", "string1", "xstring_contents", "regexp_contents", "word_list", "word", "string_content", "symbol_list", "qword_list", "qsym_list", "string_dvar", "@30", "ssym", "dsym", "@31", "f_paren_args", "args_tail", "@32", "f_kwarg", "opt_args_tail", "f_optarg", "f_arg_asgn", "f_arg_item", "f_label", "f_kw", "f_block_kw", "f_opt", "f_block_opt", "restarg_mark", "blkarg_mark", "assoc"]);
      Opal.const_set($nesting[0], 'Racc_debug_parser', false);
      
      Opal.def(self, '$_reduce_1', $Ruby30__reduce_1$16 = function $$_reduce_1(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$push(nil);
        self.max_numparam_stack.$push($hash2(["static"], {"static": true}));
        return result;
      }, $Ruby30__reduce_1$16.$$arity = 3);
      
      Opal.def(self, '$_reduce_2', $Ruby30__reduce_2$17 = function $$_reduce_2(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        self.current_arg_stack.$pop();
        self.max_numparam_stack.$pop();
        return result;
      }, $Ruby30__reduce_2$17.$$arity = 3);
      
      Opal.def(self, '$_reduce_3', $Ruby30__reduce_3$18 = function $$_reduce_3(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_3$18.$$arity = 3);
      
      Opal.def(self, '$_reduce_4', $Ruby30__reduce_4$19 = function $$_reduce_4(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_4$19.$$arity = 3);
      
      Opal.def(self, '$_reduce_5', $Ruby30__reduce_5$20 = function $$_reduce_5(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_5$20.$$arity = 3);
      
      Opal.def(self, '$_reduce_6', $Ruby30__reduce_6$21 = function $$_reduce_6(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_6$21.$$arity = 3);
      
      Opal.def(self, '$_reduce_7', $Ruby30__reduce_7$22 = function $$_reduce_7(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_7$22.$$arity = 3);
      
      Opal.def(self, '$_reduce_9', $Ruby30__reduce_9$23 = function $$_reduce_9(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'preexe', [val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))));
        return result;
      }, $Ruby30__reduce_9$23.$$arity = 3);
      
      Opal.def(self, '$_reduce_10', $Ruby30__reduce_10$24 = function $$_reduce_10(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby30__reduce_10$24.$$arity = 3);
      
      Opal.def(self, '$_reduce_11', $Ruby30__reduce_11$25 = function $$_reduce_11(val, _values, result) {
        var $a, $b, self = this, rescue_bodies = nil, else_t = nil, else_ = nil, ensure_t = nil, ensure_ = nil, $ret_or_4 = nil;

        
        rescue_bodies = val['$[]'](1);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        $b = val['$[]'](3), $a = Opal.to_ary($b), (ensure_t = ($a[0] == null ? nil : $a[0])), (ensure_ = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy((function() {if ($truthy(($ret_or_4 = rescue_bodies['$empty?']()))) {
          return else_t['$nil?']()['$!']()
        } else {
          return $ret_or_4
        }; return nil; })())) {
          self.$diagnostic("error", "useless_else", nil, else_t)};
        result = self.builder.$begin_body(val['$[]'](0), rescue_bodies, else_t, else_, ensure_t, ensure_);
        return result;
      }, $Ruby30__reduce_11$25.$$arity = 3);
      
      Opal.def(self, '$_reduce_12', $Ruby30__reduce_12$26 = function $$_reduce_12(val, _values, result) {
        var self = this;

        
        result = self.builder.$compstmt(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_12$26.$$arity = 3);
      
      Opal.def(self, '$_reduce_13', $Ruby30__reduce_13$27 = function $$_reduce_13(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_13$27.$$arity = 3);
      
      Opal.def(self, '$_reduce_14', $Ruby30__reduce_14$28 = function $$_reduce_14(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_14$28.$$arity = 3);
      
      Opal.def(self, '$_reduce_15', $Ruby30__reduce_15$29 = function $$_reduce_15(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_15$29.$$arity = 3);
      
      Opal.def(self, '$_reduce_16', $Ruby30__reduce_16$30 = function $$_reduce_16(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_16$30.$$arity = 3);
      
      Opal.def(self, '$_reduce_18', $Ruby30__reduce_18$31 = function $$_reduce_18(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "begin_in_method", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_18$31.$$arity = 3);
      
      Opal.def(self, '$_reduce_19', $Ruby30__reduce_19$32 = function $$_reduce_19(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_19$32.$$arity = 3);
      
      Opal.def(self, '$_reduce_20', $Ruby30__reduce_20$33 = function $$_reduce_20(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_20$33.$$arity = 3);
      
      Opal.def(self, '$_reduce_21', $Ruby30__reduce_21$34 = function $$_reduce_21(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$gvar(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_21$34.$$arity = 3);
      
      Opal.def(self, '$_reduce_22', $Ruby30__reduce_22$35 = function $$_reduce_22(val, _values, result) {
        var self = this;

        
        result = self.builder.$alias(val['$[]'](0), self.builder.$gvar(val['$[]'](1)), self.builder.$back_ref(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_22$35.$$arity = 3);
      
      Opal.def(self, '$_reduce_23', $Ruby30__reduce_23$36 = function $$_reduce_23(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "nth_ref_alias", nil, val['$[]'](2));
        return result;
      }, $Ruby30__reduce_23$36.$$arity = 3);
      
      Opal.def(self, '$_reduce_24', $Ruby30__reduce_24$37 = function $$_reduce_24(val, _values, result) {
        var self = this;

        
        result = self.builder.$undef_method(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_24$37.$$arity = 3);
      
      Opal.def(self, '$_reduce_25', $Ruby30__reduce_25$38 = function $$_reduce_25(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(val['$[]'](0), nil, val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_25$38.$$arity = 3);
      
      Opal.def(self, '$_reduce_26', $Ruby30__reduce_26$39 = function $$_reduce_26(val, _values, result) {
        var self = this;

        
        result = self.builder.$condition_mod(nil, val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_26$39.$$arity = 3);
      
      Opal.def(self, '$_reduce_27', $Ruby30__reduce_27$40 = function $$_reduce_27(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("while", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_27$40.$$arity = 3);
      
      Opal.def(self, '$_reduce_28', $Ruby30__reduce_28$41 = function $$_reduce_28(val, _values, result) {
        var self = this;

        
        result = self.builder.$loop_mod("until", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_28$41.$$arity = 3);
      
      Opal.def(self, '$_reduce_29', $Ruby30__reduce_29$42 = function $$_reduce_29(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby30__reduce_29$42.$$arity = 3);
      
      Opal.def(self, '$_reduce_30', $Ruby30__reduce_30$43 = function $$_reduce_30(val, _values, result) {
        var self = this;

        
        result = self.builder.$postexe(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_30$43.$$arity = 3);
      
      Opal.def(self, '$_reduce_32', $Ruby30__reduce_32$44 = function $$_reduce_32(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_32$44.$$arity = 3);
      
      Opal.def(self, '$_reduce_33', $Ruby30__reduce_33$45 = function $$_reduce_33(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), self.builder.$array(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby30__reduce_33$45.$$arity = 3);
      
      Opal.def(self, '$_reduce_34', $Ruby30__reduce_34$46 = function $$_reduce_34(val, _values, result) {
        var self = this, rescue_body = nil, begin_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](3), nil, nil, nil, nil, val['$[]'](4));
        begin_body = self.builder.$begin_body(val['$[]'](2), [rescue_body]);
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), begin_body);
        return result;
      }, $Ruby30__reduce_34$46.$$arity = 3);
      
      Opal.def(self, '$_reduce_35', $Ruby30__reduce_35$47 = function $$_reduce_35(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_35$47.$$arity = 3);
      
      Opal.def(self, '$_reduce_37', $Ruby30__reduce_37$48 = function $$_reduce_37(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_37$48.$$arity = 3);
      
      Opal.def(self, '$_reduce_38', $Ruby30__reduce_38$49 = function $$_reduce_38(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_38$49.$$arity = 3);
      
      Opal.def(self, '$_reduce_39', $Ruby30__reduce_39$50 = function $$_reduce_39(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby30__reduce_39$50.$$arity = 3);
      
      Opal.def(self, '$_reduce_40', $Ruby30__reduce_40$51 = function $$_reduce_40(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_40$51.$$arity = 3);
      
      Opal.def(self, '$_reduce_41', $Ruby30__reduce_41$52 = function $$_reduce_41(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_41$52.$$arity = 3);
      
      Opal.def(self, '$_reduce_42', $Ruby30__reduce_42$53 = function $$_reduce_42(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_42$53.$$arity = 3);
      
      Opal.def(self, '$_reduce_43', $Ruby30__reduce_43$54 = function $$_reduce_43(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_43$54.$$arity = 3);
      
      Opal.def(self, '$_reduce_44', $Ruby30__reduce_44$55 = function $$_reduce_44(val, _values, result) {
        var self = this;

        
        self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_44$55.$$arity = 3);
      
      Opal.def(self, '$_reduce_46', $Ruby30__reduce_46$56 = function $$_reduce_46(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby30__reduce_46$56.$$arity = 3);
      
      Opal.def(self, '$_reduce_49', $Ruby30__reduce_49$57 = function $$_reduce_49(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_49$57.$$arity = 3);
      
      Opal.def(self, '$_reduce_50', $Ruby30__reduce_50$58 = function $$_reduce_50(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_50$58.$$arity = 3);
      
      Opal.def(self, '$_reduce_51', $Ruby30__reduce_51$59 = function $$_reduce_51(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](2), nil);
        return result;
      }, $Ruby30__reduce_51$59.$$arity = 3);
      
      Opal.def(self, '$_reduce_52', $Ruby30__reduce_52$60 = function $$_reduce_52(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_52$60.$$arity = 3);
      
      Opal.def(self, '$_reduce_53', $Ruby30__reduce_53$61 = function $$_reduce_53(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        result = self.context.$in_kwarg();
        
        $writer = [true];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_53$61.$$arity = 3);
      
      Opal.def(self, '$_reduce_54', $Ruby30__reduce_54$62 = function $$_reduce_54(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        
        $writer = [val['$[]'](2)];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$match_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_54$62.$$arity = 3);
      
      Opal.def(self, '$_reduce_55', $Ruby30__reduce_55$63 = function $$_reduce_55(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        result = self.context.$in_kwarg();
        
        $writer = [true];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_55$63.$$arity = 3);
      
      Opal.def(self, '$_reduce_56', $Ruby30__reduce_56$64 = function $$_reduce_56(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        
        $writer = [val['$[]'](2)];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$match_pattern_p(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_56$64.$$arity = 3);
      
      Opal.def(self, '$_reduce_59', $Ruby30__reduce_59$65 = function $$_reduce_59(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$push(true);
        return result;
      }, $Ruby30__reduce_59$65.$$arity = 3);
      
      Opal.def(self, '$_reduce_60', $Ruby30__reduce_60$66 = function $$_reduce_60(val, _values, result) {
        var self = this;

        
        self.lexer.$cond().$pop();
        result = [val['$[]'](1), val['$[]'](2)];
        return result;
      }, $Ruby30__reduce_60$66.$$arity = 3);
      
      Opal.def(self, '$_reduce_61', $Ruby30__reduce_61$67 = function $$_reduce_61(val, _values, result) {
        var self = this, $writer = nil;

        
        self.$local_push();
        self.current_arg_stack.$push(nil);
        result = [val['$[]'](0), self.context.$dup()];
        
        $writer = [true];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_61$67.$$arity = 3);
      
      Opal.def(self, '$_reduce_62', $Ruby30__reduce_62$68 = function $$_reduce_62(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_62$68.$$arity = 3);
      
      Opal.def(self, '$_reduce_63', $Ruby30__reduce_63$69 = function $$_reduce_63(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_63$69.$$arity = 3);
      
      Opal.def(self, '$_reduce_64', $Ruby30__reduce_64$70 = function $$_reduce_64(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4)];
        return result;
      }, $Ruby30__reduce_64$70.$$arity = 3);
      
      Opal.def(self, '$_reduce_68', $Ruby30__reduce_68$71 = function $$_reduce_68(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby30__reduce_68$71.$$arity = 3);
      
      Opal.def(self, '$_reduce_69', $Ruby30__reduce_69$72 = function $$_reduce_69(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_69$72.$$arity = 3);
      
      Opal.def(self, '$_reduce_70', $Ruby30__reduce_70$73 = function $$_reduce_70(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        
        $writer = [val['$[]'](1).$in_block()];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_70$73.$$arity = 3);
      
      Opal.def(self, '$_reduce_72', $Ruby30__reduce_72$74 = function $$_reduce_72(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_72$74.$$arity = 3);
      
      Opal.def(self, '$_reduce_73', $Ruby30__reduce_73$75 = function $$_reduce_73(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0), nil, val['$[]'](1), nil);
        $b = val['$[]'](2), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_73$75.$$arity = 3);
      
      Opal.def(self, '$_reduce_74', $Ruby30__reduce_74$76 = function $$_reduce_74(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby30__reduce_74$76.$$arity = 3);
      
      Opal.def(self, '$_reduce_75', $Ruby30__reduce_75$77 = function $$_reduce_75(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_75$77.$$arity = 3);
      
      Opal.def(self, '$_reduce_76', $Ruby30__reduce_76$78 = function $$_reduce_76(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        return result;
      }, $Ruby30__reduce_76$78.$$arity = 3);
      
      Opal.def(self, '$_reduce_77', $Ruby30__reduce_77$79 = function $$_reduce_77(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_77$79.$$arity = 3);
      
      Opal.def(self, '$_reduce_78', $Ruby30__reduce_78$80 = function $$_reduce_78(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("super", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_78$80.$$arity = 3);
      
      Opal.def(self, '$_reduce_79', $Ruby30__reduce_79$81 = function $$_reduce_79(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_79$81.$$arity = 3);
      
      Opal.def(self, '$_reduce_80', $Ruby30__reduce_80$82 = function $$_reduce_80(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_80$82.$$arity = 3);
      
      Opal.def(self, '$_reduce_81', $Ruby30__reduce_81$83 = function $$_reduce_81(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_81$83.$$arity = 3);
      
      Opal.def(self, '$_reduce_82', $Ruby30__reduce_82$84 = function $$_reduce_82(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_82$84.$$arity = 3);
      
      Opal.def(self, '$_reduce_83', $Ruby30__reduce_83$85 = function $$_reduce_83(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_83$85.$$arity = 3);
      
      Opal.def(self, '$_reduce_84', $Ruby30__reduce_84$86 = function $$_reduce_84(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_84$86.$$arity = 3);
      
      Opal.def(self, '$_reduce_85', $Ruby30__reduce_85$87 = function $$_reduce_85(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_85$87.$$arity = 3);
      
      Opal.def(self, '$_reduce_86', $Ruby30__reduce_86$88 = function $$_reduce_86(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_86$88.$$arity = 3);
      
      Opal.def(self, '$_reduce_88', $Ruby30__reduce_88$89 = function $$_reduce_88(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_88$89.$$arity = 3);
      
      Opal.def(self, '$_reduce_89', $Ruby30__reduce_89$90 = function $$_reduce_89(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_89$90.$$arity = 3);
      
      Opal.def(self, '$_reduce_90', $Ruby30__reduce_90$91 = function $$_reduce_90(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1), val['$[]'](2))).$concat(val['$[]'](4));
        return result;
      }, $Ruby30__reduce_90$91.$$arity = 3);
      
      Opal.def(self, '$_reduce_91', $Ruby30__reduce_91$92 = function $$_reduce_91(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_91$92.$$arity = 3);
      
      Opal.def(self, '$_reduce_92', $Ruby30__reduce_92$93 = function $$_reduce_92(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(self.builder.$splat(val['$[]'](1))).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_92$93.$$arity = 3);
      
      Opal.def(self, '$_reduce_93', $Ruby30__reduce_93$94 = function $$_reduce_93(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_93$94.$$arity = 3);
      
      Opal.def(self, '$_reduce_94', $Ruby30__reduce_94$95 = function $$_reduce_94(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))].concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby30__reduce_94$95.$$arity = 3);
      
      Opal.def(self, '$_reduce_95', $Ruby30__reduce_95$96 = function $$_reduce_95(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))];
        return result;
      }, $Ruby30__reduce_95$96.$$arity = 3);
      
      Opal.def(self, '$_reduce_96', $Ruby30__reduce_96$97 = function $$_reduce_96(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0))].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_96$97.$$arity = 3);
      
      Opal.def(self, '$_reduce_98', $Ruby30__reduce_98$98 = function $$_reduce_98(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_98$98.$$arity = 3);
      
      Opal.def(self, '$_reduce_99', $Ruby30__reduce_99$99 = function $$_reduce_99(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_99$99.$$arity = 3);
      
      Opal.def(self, '$_reduce_100', $Ruby30__reduce_100$100 = function $$_reduce_100(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_100$100.$$arity = 3);
      
      Opal.def(self, '$_reduce_101', $Ruby30__reduce_101$101 = function $$_reduce_101(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_101$101.$$arity = 3);
      
      Opal.def(self, '$_reduce_102', $Ruby30__reduce_102$102 = function $$_reduce_102(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_102$102.$$arity = 3);
      
      Opal.def(self, '$_reduce_103', $Ruby30__reduce_103$103 = function $$_reduce_103(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_103$103.$$arity = 3);
      
      Opal.def(self, '$_reduce_104', $Ruby30__reduce_104$104 = function $$_reduce_104(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_104$104.$$arity = 3);
      
      Opal.def(self, '$_reduce_105', $Ruby30__reduce_105$105 = function $$_reduce_105(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_105$105.$$arity = 3);
      
      Opal.def(self, '$_reduce_106', $Ruby30__reduce_106$106 = function $$_reduce_106(val, _values, result) {
        var self = this;

        
        if ($truthy(val['$[]'](1)['$[]'](0)['$==']("anddot"))) {
          self.$diagnostic("error", "csend_in_lhs_of_masgn", nil, val['$[]'](1))};
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_106$106.$$arity = 3);
      
      Opal.def(self, '$_reduce_107', $Ruby30__reduce_107$107 = function $$_reduce_107(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_107$107.$$arity = 3);
      
      Opal.def(self, '$_reduce_108', $Ruby30__reduce_108$108 = function $$_reduce_108(val, _values, result) {
        var self = this;

        
        if ($truthy(val['$[]'](1)['$[]'](0)['$==']("anddot"))) {
          self.$diagnostic("error", "csend_in_lhs_of_masgn", nil, val['$[]'](1))};
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_108$108.$$arity = 3);
      
      Opal.def(self, '$_reduce_109', $Ruby30__reduce_109$109 = function $$_reduce_109(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_109$109.$$arity = 3);
      
      Opal.def(self, '$_reduce_110', $Ruby30__reduce_110$110 = function $$_reduce_110(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_110$110.$$arity = 3);
      
      Opal.def(self, '$_reduce_111', $Ruby30__reduce_111$111 = function $$_reduce_111(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_111$111.$$arity = 3);
      
      Opal.def(self, '$_reduce_112', $Ruby30__reduce_112$112 = function $$_reduce_112(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_112$112.$$arity = 3);
      
      Opal.def(self, '$_reduce_113', $Ruby30__reduce_113$113 = function $$_reduce_113(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_113$113.$$arity = 3);
      
      Opal.def(self, '$_reduce_114', $Ruby30__reduce_114$114 = function $$_reduce_114(val, _values, result) {
        var self = this;

        
        result = self.builder.$index_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_114$114.$$arity = 3);
      
      Opal.def(self, '$_reduce_115', $Ruby30__reduce_115$115 = function $$_reduce_115(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_115$115.$$arity = 3);
      
      Opal.def(self, '$_reduce_116', $Ruby30__reduce_116$116 = function $$_reduce_116(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_116$116.$$arity = 3);
      
      Opal.def(self, '$_reduce_117', $Ruby30__reduce_117$117 = function $$_reduce_117(val, _values, result) {
        var self = this;

        
        result = self.builder.$attr_asgn(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_117$117.$$arity = 3);
      
      Opal.def(self, '$_reduce_118', $Ruby30__reduce_118$118 = function $$_reduce_118(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_118$118.$$arity = 3);
      
      Opal.def(self, '$_reduce_119', $Ruby30__reduce_119$119 = function $$_reduce_119(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_119$119.$$arity = 3);
      
      Opal.def(self, '$_reduce_120', $Ruby30__reduce_120$120 = function $$_reduce_120(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_120$120.$$arity = 3);
      
      Opal.def(self, '$_reduce_121', $Ruby30__reduce_121$121 = function $$_reduce_121(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "module_name_const", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_121$121.$$arity = 3);
      
      Opal.def(self, '$_reduce_123', $Ruby30__reduce_123$122 = function $$_reduce_123(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_123$122.$$arity = 3);
      
      Opal.def(self, '$_reduce_124', $Ruby30__reduce_124$123 = function $$_reduce_124(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_124$123.$$arity = 3);
      
      Opal.def(self, '$_reduce_125', $Ruby30__reduce_125$124 = function $$_reduce_125(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_125$124.$$arity = 3);
      
      Opal.def(self, '$_reduce_131', $Ruby30__reduce_131$125 = function $$_reduce_131(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbol_internal(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_131$125.$$arity = 3);
      
      Opal.def(self, '$_reduce_133', $Ruby30__reduce_133$126 = function $$_reduce_133(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_133$126.$$arity = 3);
      
      Opal.def(self, '$_reduce_134', $Ruby30__reduce_134$127 = function $$_reduce_134(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_fname"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_134$127.$$arity = 3);
      
      Opal.def(self, '$_reduce_135', $Ruby30__reduce_135$128 = function $$_reduce_135(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](3));
        return result;
      }, $Ruby30__reduce_135$128.$$arity = 3);
      
      Opal.def(self, '$_reduce_207', $Ruby30__reduce_207$129 = function $$_reduce_207(val, _values, result) {
        var self = this;

        
        result = self.builder.$assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_207$129.$$arity = 3);
      
      Opal.def(self, '$_reduce_208', $Ruby30__reduce_208$130 = function $$_reduce_208(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_208$130.$$arity = 3);
      
      Opal.def(self, '$_reduce_209', $Ruby30__reduce_209$131 = function $$_reduce_209(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3)), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby30__reduce_209$131.$$arity = 3);
      
      Opal.def(self, '$_reduce_210', $Ruby30__reduce_210$132 = function $$_reduce_210(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_210$132.$$arity = 3);
      
      Opal.def(self, '$_reduce_211', $Ruby30__reduce_211$133 = function $$_reduce_211(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_211$133.$$arity = 3);
      
      Opal.def(self, '$_reduce_212', $Ruby30__reduce_212$134 = function $$_reduce_212(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2)), val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_212$134.$$arity = 3);
      
      Opal.def(self, '$_reduce_213', $Ruby30__reduce_213$135 = function $$_reduce_213(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2)));
        result = self.builder.$op_assign(const$, val['$[]'](3), val['$[]'](4));
        return result;
      }, $Ruby30__reduce_213$135.$$arity = 3);
      
      Opal.def(self, '$_reduce_214', $Ruby30__reduce_214$136 = function $$_reduce_214(val, _values, result) {
        var self = this, const$ = nil;

        
        const$ = self.builder.$const_op_assignable(self.builder.$const_global(val['$[]'](0), val['$[]'](1)));
        result = self.builder.$op_assign(const$, val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_214$136.$$arity = 3);
      
      Opal.def(self, '$_reduce_215', $Ruby30__reduce_215$137 = function $$_reduce_215(val, _values, result) {
        var self = this;

        
        result = self.builder.$op_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_215$137.$$arity = 3);
      
      Opal.def(self, '$_reduce_216', $Ruby30__reduce_216$138 = function $$_reduce_216(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_216$138.$$arity = 3);
      
      Opal.def(self, '$_reduce_217', $Ruby30__reduce_217$139 = function $$_reduce_217(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_217$139.$$arity = 3);
      
      Opal.def(self, '$_reduce_218', $Ruby30__reduce_218$140 = function $$_reduce_218(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_218$140.$$arity = 3);
      
      Opal.def(self, '$_reduce_219', $Ruby30__reduce_219$141 = function $$_reduce_219(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_219$141.$$arity = 3);
      
      Opal.def(self, '$_reduce_220', $Ruby30__reduce_220$142 = function $$_reduce_220(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_220$142.$$arity = 3);
      
      Opal.def(self, '$_reduce_221', $Ruby30__reduce_221$143 = function $$_reduce_221(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_221$143.$$arity = 3);
      
      Opal.def(self, '$_reduce_222', $Ruby30__reduce_222$144 = function $$_reduce_222(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_222$144.$$arity = 3);
      
      Opal.def(self, '$_reduce_223', $Ruby30__reduce_223$145 = function $$_reduce_223(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_223$145.$$arity = 3);
      
      Opal.def(self, '$_reduce_224', $Ruby30__reduce_224$146 = function $$_reduce_224(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_224$146.$$arity = 3);
      
      Opal.def(self, '$_reduce_225', $Ruby30__reduce_225$147 = function $$_reduce_225(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_225$147.$$arity = 3);
      
      Opal.def(self, '$_reduce_226', $Ruby30__reduce_226$148 = function $$_reduce_226(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_226$148.$$arity = 3);
      
      Opal.def(self, '$_reduce_227', $Ruby30__reduce_227$149 = function $$_reduce_227(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_227$149.$$arity = 3);
      
      Opal.def(self, '$_reduce_228', $Ruby30__reduce_228$150 = function $$_reduce_228(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), self.builder.$binary_op(val['$[]'](1), val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby30__reduce_228$150.$$arity = 3);
      
      Opal.def(self, '$_reduce_229', $Ruby30__reduce_229$151 = function $$_reduce_229(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_229$151.$$arity = 3);
      
      Opal.def(self, '$_reduce_230', $Ruby30__reduce_230$152 = function $$_reduce_230(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_230$152.$$arity = 3);
      
      Opal.def(self, '$_reduce_231', $Ruby30__reduce_231$153 = function $$_reduce_231(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_231$153.$$arity = 3);
      
      Opal.def(self, '$_reduce_232', $Ruby30__reduce_232$154 = function $$_reduce_232(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_232$154.$$arity = 3);
      
      Opal.def(self, '$_reduce_233', $Ruby30__reduce_233$155 = function $$_reduce_233(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_233$155.$$arity = 3);
      
      Opal.def(self, '$_reduce_234', $Ruby30__reduce_234$156 = function $$_reduce_234(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_234$156.$$arity = 3);
      
      Opal.def(self, '$_reduce_236', $Ruby30__reduce_236$157 = function $$_reduce_236(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_236$157.$$arity = 3);
      
      Opal.def(self, '$_reduce_237', $Ruby30__reduce_237$158 = function $$_reduce_237(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_237$158.$$arity = 3);
      
      Opal.def(self, '$_reduce_238', $Ruby30__reduce_238$159 = function $$_reduce_238(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_238$159.$$arity = 3);
      
      Opal.def(self, '$_reduce_239', $Ruby30__reduce_239$160 = function $$_reduce_239(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_239$160.$$arity = 3);
      
      Opal.def(self, '$_reduce_240', $Ruby30__reduce_240$161 = function $$_reduce_240(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_240$161.$$arity = 3);
      
      Opal.def(self, '$_reduce_241', $Ruby30__reduce_241$162 = function $$_reduce_241(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_241$162.$$arity = 3);
      
      Opal.def(self, '$_reduce_242', $Ruby30__reduce_242$163 = function $$_reduce_242(val, _values, result) {
        var self = this;

        
        result = self.builder.$unary_op(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_242$163.$$arity = 3);
      
      Opal.def(self, '$_reduce_243', $Ruby30__reduce_243$164 = function $$_reduce_243(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_243$164.$$arity = 3);
      
      Opal.def(self, '$_reduce_244', $Ruby30__reduce_244$165 = function $$_reduce_244(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_244$165.$$arity = 3);
      
      Opal.def(self, '$_reduce_245', $Ruby30__reduce_245$166 = function $$_reduce_245(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("and", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_245$166.$$arity = 3);
      
      Opal.def(self, '$_reduce_246', $Ruby30__reduce_246$167 = function $$_reduce_246(val, _values, result) {
        var self = this;

        
        result = self.builder.$logical_op("or", val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_246$167.$$arity = 3);
      
      Opal.def(self, '$_reduce_247', $Ruby30__reduce_247$168 = function $$_reduce_247(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), nil, [val['$[]'](2)], nil);
        return result;
      }, $Ruby30__reduce_247$168.$$arity = 3);
      
      Opal.def(self, '$_reduce_248', $Ruby30__reduce_248$169 = function $$_reduce_248(val, _values, result) {
        var self = this;

        
        result = self.builder.$ternary(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, $Ruby30__reduce_248$169.$$arity = 3);
      
      Opal.def(self, '$_reduce_249', $Ruby30__reduce_249$170 = function $$_reduce_249(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, name_t = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), ($c = Opal.to_ary(($a[1] == null ? nil : $a[1])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        self.$endless_method_name(name_t);
        result = self.builder.$def_endless_method(def_t, name_t, val['$[]'](1), val['$[]'](2), val['$[]'](3));
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_249$170.$$arity = 3);
      
      Opal.def(self, '$_reduce_250', $Ruby30__reduce_250$171 = function $$_reduce_250(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, name_t = nil, ctx = nil, rescue_body = nil, method_body = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), ($c = Opal.to_ary(($a[1] == null ? nil : $a[1])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = self.builder.$def_endless_method(def_t, name_t, val['$[]'](1), val['$[]'](2), method_body);
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_250$171.$$arity = 3);
      
      Opal.def(self, '$_reduce_251', $Ruby30__reduce_251$172 = function $$_reduce_251(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, recv = nil, dot_t = nil, name_t = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), (recv = ($a[1] == null ? nil : $a[1])), (dot_t = ($a[2] == null ? nil : $a[2])), ($c = Opal.to_ary(($a[3] == null ? nil : $a[3])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        self.$endless_method_name(name_t);
        result = self.builder.$def_endless_singleton(def_t, recv, dot_t, name_t, val['$[]'](1), val['$[]'](2), val['$[]'](3));
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_251$172.$$arity = 3);
      
      Opal.def(self, '$_reduce_252', $Ruby30__reduce_252$173 = function $$_reduce_252(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, recv = nil, dot_t = nil, name_t = nil, ctx = nil, rescue_body = nil, method_body = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), (recv = ($a[1] == null ? nil : $a[1])), (dot_t = ($a[2] == null ? nil : $a[2])), ($c = Opal.to_ary(($a[3] == null ? nil : $a[3])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        self.$endless_method_name(name_t);
        rescue_body = self.builder.$rescue_body(val['$[]'](4), nil, nil, nil, nil, val['$[]'](5));
        method_body = self.builder.$begin_body(val['$[]'](3), [rescue_body]);
        result = self.builder.$def_endless_singleton(def_t, recv, dot_t, name_t, val['$[]'](1), val['$[]'](2), method_body);
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_252$173.$$arity = 3);
      
      Opal.def(self, '$_reduce_258', $Ruby30__reduce_258$174 = function $$_reduce_258(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_258$174.$$arity = 3);
      
      Opal.def(self, '$_reduce_259', $Ruby30__reduce_259$175 = function $$_reduce_259(val, _values, result) {
        var self = this;

        
        result = self.builder.$binary_op(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_259$175.$$arity = 3);
      
      Opal.def(self, '$_reduce_263', $Ruby30__reduce_263$176 = function $$_reduce_263(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby30__reduce_263$176.$$arity = 3);
      
      Opal.def(self, '$_reduce_264', $Ruby30__reduce_264$177 = function $$_reduce_264(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby30__reduce_264$177.$$arity = 3);
      
      Opal.def(self, '$_reduce_266', $Ruby30__reduce_266$178 = function $$_reduce_266(val, _values, result) {
        var self = this, rescue_body = nil;

        
        rescue_body = self.builder.$rescue_body(val['$[]'](1), nil, nil, nil, nil, val['$[]'](2));
        result = self.builder.$begin_body(val['$[]'](0), [rescue_body]);
        return result;
      }, $Ruby30__reduce_266$178.$$arity = 3);
      
      Opal.def(self, '$_reduce_267', $Ruby30__reduce_267$179 = function $$_reduce_267(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby30__reduce_267$179.$$arity = 3);
      
      Opal.def(self, '$_reduce_268', $Ruby30__reduce_268$180 = function $$_reduce_268(val, _values, result) {
        var self = this;

        
        if ($truthy(self.static_env['$declared_forward_args?']())) {
        } else {
          self.$diagnostic("error", "unexpected_token", $hash2(["token"], {"token": "tBDOT3"}), val['$[]'](3))
        };
        result = [val['$[]'](0), [].concat(Opal.to_a(val['$[]'](1))).concat([self.builder.$forwarded_args(val['$[]'](3))]), val['$[]'](4)];
        return result;
      }, $Ruby30__reduce_268$180.$$arity = 3);
      
      Opal.def(self, '$_reduce_269', $Ruby30__reduce_269$181 = function $$_reduce_269(val, _values, result) {
        var self = this;

        
        if ($truthy(self.static_env['$declared_forward_args?']())) {
        } else {
          self.$diagnostic("error", "unexpected_token", $hash2(["token"], {"token": "tBDOT3"}), val['$[]'](1))
        };
        result = [val['$[]'](0), [self.builder.$forwarded_args(val['$[]'](1))], val['$[]'](2)];
        return result;
      }, $Ruby30__reduce_269$181.$$arity = 3);
      
      Opal.def(self, '$_reduce_270', $Ruby30__reduce_270$182 = function $$_reduce_270(val, _values, result) {
        var self = this;

        
        result = [nil, [], nil];
        return result;
      }, $Ruby30__reduce_270$182.$$arity = 3);
      
      Opal.def(self, '$_reduce_272', $Ruby30__reduce_272$183 = function $$_reduce_272(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_272$183.$$arity = 3);
      
      Opal.def(self, '$_reduce_275', $Ruby30__reduce_275$184 = function $$_reduce_275(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$associate(nil, val['$[]'](2), nil));
        return result;
      }, $Ruby30__reduce_275$184.$$arity = 3);
      
      Opal.def(self, '$_reduce_276', $Ruby30__reduce_276$185 = function $$_reduce_276(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        return result;
      }, $Ruby30__reduce_276$185.$$arity = 3);
      
      Opal.def(self, '$_reduce_277', $Ruby30__reduce_277$186 = function $$_reduce_277(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_277$186.$$arity = 3);
      
      Opal.def(self, '$_reduce_278', $Ruby30__reduce_278$187 = function $$_reduce_278(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_278$187.$$arity = 3);
      
      Opal.def(self, '$_reduce_279', $Ruby30__reduce_279$188 = function $$_reduce_279(val, _values, result) {
        var self = this;

        
        result = [self.builder.$associate(nil, val['$[]'](0), nil)];
        result.$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_279$188.$$arity = 3);
      
      Opal.def(self, '$_reduce_280', $Ruby30__reduce_280$189 = function $$_reduce_280(val, _values, result) {
        var self = this, assocs = nil;

        
        assocs = self.builder.$associate(nil, val['$[]'](2), nil);
        result = val['$[]'](0)['$<<'](assocs);
        result.$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_280$189.$$arity = 3);
      
      Opal.def(self, '$_reduce_281', $Ruby30__reduce_281$190 = function $$_reduce_281(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_281$190.$$arity = 3);
      
      Opal.def(self, '$_reduce_282', $Ruby30__reduce_282$191 = function $$_reduce_282(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, $ret_or_5 = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = (function() {if ($truthy(($ret_or_5 = last_token['$==']("tLBRACK")))) {
          return $ret_or_5
        } else {
          return last_token['$==']("tLPAREN_ARG")
        }; return nil; })();
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(true);
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$push(true)
        };
        return result;
      }, $Ruby30__reduce_282$191.$$arity = 3);
      
      Opal.def(self, '$_reduce_283', $Ruby30__reduce_283$192 = function $$_reduce_283(val, _values, result) {
        var self = this, last_token = nil, lookahead = nil, top = nil;

        
        last_token = self.last_token['$[]'](0);
        lookahead = last_token['$==']("tLBRACE_ARG");
        if ($truthy(lookahead)) {
          
          top = self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$pop();
          self.lexer.$cmdarg().$push(top);
        } else {
          self.lexer.$cmdarg().$pop()
        };
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_283$192.$$arity = 3);
      
      Opal.def(self, '$_reduce_284', $Ruby30__reduce_284$193 = function $$_reduce_284(val, _values, result) {
        var self = this;

        
        result = self.builder.$block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_284$193.$$arity = 3);
      
      Opal.def(self, '$_reduce_285', $Ruby30__reduce_285$194 = function $$_reduce_285(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_285$194.$$arity = 3);
      
      Opal.def(self, '$_reduce_286', $Ruby30__reduce_286$195 = function $$_reduce_286(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_286$195.$$arity = 3);
      
      Opal.def(self, '$_reduce_287', $Ruby30__reduce_287$196 = function $$_reduce_287(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_287$196.$$arity = 3);
      
      Opal.def(self, '$_reduce_288', $Ruby30__reduce_288$197 = function $$_reduce_288(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_288$197.$$arity = 3);
      
      Opal.def(self, '$_reduce_289', $Ruby30__reduce_289$198 = function $$_reduce_289(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_289$198.$$arity = 3);
      
      Opal.def(self, '$_reduce_290', $Ruby30__reduce_290$199 = function $$_reduce_290(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby30__reduce_290$199.$$arity = 3);
      
      Opal.def(self, '$_reduce_291', $Ruby30__reduce_291$200 = function $$_reduce_291(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_291$200.$$arity = 3);
      
      Opal.def(self, '$_reduce_293', $Ruby30__reduce_293$201 = function $$_reduce_293(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_293$201.$$arity = 3);
      
      Opal.def(self, '$_reduce_294', $Ruby30__reduce_294$202 = function $$_reduce_294(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, $Ruby30__reduce_294$202.$$arity = 3);
      
      Opal.def(self, '$_reduce_295', $Ruby30__reduce_295$203 = function $$_reduce_295(val, _values, result) {
        var self = this;

        
        result = [self.builder.$splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_295$203.$$arity = 3);
      
      Opal.def(self, '$_reduce_306', $Ruby30__reduce_306$204 = function $$_reduce_306(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(nil, nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_306$204.$$arity = 3);
      
      Opal.def(self, '$_reduce_307', $Ruby30__reduce_307$205 = function $$_reduce_307(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby30__reduce_307$205.$$arity = 3);
      
      Opal.def(self, '$_reduce_308', $Ruby30__reduce_308$206 = function $$_reduce_308(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        result = self.builder.$begin_keyword(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_308$206.$$arity = 3);
      
      Opal.def(self, '$_reduce_309', $Ruby30__reduce_309$207 = function $$_reduce_309(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_309$207.$$arity = 3);
      
      Opal.def(self, '$_reduce_310', $Ruby30__reduce_310$208 = function $$_reduce_310(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_310$208.$$arity = 3);
      
      Opal.def(self, '$_reduce_311', $Ruby30__reduce_311$209 = function $$_reduce_311(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_endarg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_311$209.$$arity = 3);
      
      Opal.def(self, '$_reduce_312', $Ruby30__reduce_312$210 = function $$_reduce_312(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), nil, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_312$210.$$arity = 3);
      
      Opal.def(self, '$_reduce_313', $Ruby30__reduce_313$211 = function $$_reduce_313(val, _values, result) {
        var self = this;

        
        result = self.builder.$begin(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_313$211.$$arity = 3);
      
      Opal.def(self, '$_reduce_314', $Ruby30__reduce_314$212 = function $$_reduce_314(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_314$212.$$arity = 3);
      
      Opal.def(self, '$_reduce_315', $Ruby30__reduce_315$213 = function $$_reduce_315(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_315$213.$$arity = 3);
      
      Opal.def(self, '$_reduce_316', $Ruby30__reduce_316$214 = function $$_reduce_316(val, _values, result) {
        var self = this;

        
        result = self.builder.$array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_316$214.$$arity = 3);
      
      Opal.def(self, '$_reduce_317', $Ruby30__reduce_317$215 = function $$_reduce_317(val, _values, result) {
        var self = this;

        
        result = self.builder.$associate(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_317$215.$$arity = 3);
      
      Opal.def(self, '$_reduce_318', $Ruby30__reduce_318$216 = function $$_reduce_318(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("return", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_318$216.$$arity = 3);
      
      Opal.def(self, '$_reduce_319', $Ruby30__reduce_319$217 = function $$_reduce_319(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_319$217.$$arity = 3);
      
      Opal.def(self, '$_reduce_320', $Ruby30__reduce_320$218 = function $$_reduce_320(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0), val['$[]'](1), [], val['$[]'](2));
        return result;
      }, $Ruby30__reduce_320$218.$$arity = 3);
      
      Opal.def(self, '$_reduce_321', $Ruby30__reduce_321$219 = function $$_reduce_321(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("yield", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_321$219.$$arity = 3);
      
      Opal.def(self, '$_reduce_322', $Ruby30__reduce_322$220 = function $$_reduce_322(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("defined?", val['$[]'](0), val['$[]'](2), [val['$[]'](3)], val['$[]'](4));
        return result;
      }, $Ruby30__reduce_322$220.$$arity = 3);
      
      Opal.def(self, '$_reduce_323', $Ruby30__reduce_323$221 = function $$_reduce_323(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_323$221.$$arity = 3);
      
      Opal.def(self, '$_reduce_324', $Ruby30__reduce_324$222 = function $$_reduce_324(val, _values, result) {
        var self = this;

        
        result = self.builder.$not_op(val['$[]'](0), val['$[]'](1), nil, val['$[]'](2));
        return result;
      }, $Ruby30__reduce_324$222.$$arity = 3);
      
      Opal.def(self, '$_reduce_325', $Ruby30__reduce_325$223 = function $$_reduce_325(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(nil, nil, val['$[]'](0));
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_325$223.$$arity = 3);
      
      Opal.def(self, '$_reduce_327', $Ruby30__reduce_327$224 = function $$_reduce_327(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_327$224.$$arity = 3);
      
      Opal.def(self, '$_reduce_329', $Ruby30__reduce_329$225 = function $$_reduce_329(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, val['$[]'](5));
        return result;
      }, $Ruby30__reduce_329$225.$$arity = 3);
      
      Opal.def(self, '$_reduce_330', $Ruby30__reduce_330$226 = function $$_reduce_330(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), else_, else_t, val['$[]'](3), val['$[]'](5));
        return result;
      }, $Ruby30__reduce_330$226.$$arity = 3);
      
      Opal.def(self, '$_reduce_331', $Ruby30__reduce_331$227 = function $$_reduce_331(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["while", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby30__reduce_331$227.$$arity = 3);
      
      Opal.def(self, '$_reduce_332', $Ruby30__reduce_332$228 = function $$_reduce_332(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'loop', ["until", val['$[]'](0)].concat(Opal.to_a(val['$[]'](1))).concat([val['$[]'](2), val['$[]'](3)]));
        return result;
      }, $Ruby30__reduce_332$228.$$arity = 3);
      
      Opal.def(self, '$_reduce_333', $Ruby30__reduce_333$229 = function $$_reduce_333(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), val['$[]'](1), when_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, $Ruby30__reduce_333$229.$$arity = 3);
      
      Opal.def(self, '$_reduce_334', $Ruby30__reduce_334$230 = function $$_reduce_334(val, _values, result) {
        var $a, $b, $c, self = this, when_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](2))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case(val['$[]'](0), nil, when_bodies, else_t, else_body, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_334$230.$$arity = 3);
      
      Opal.def(self, '$_reduce_335', $Ruby30__reduce_335$231 = function $$_reduce_335(val, _values, result) {
        var $a, $b, $c, self = this, in_bodies = nil, else_t = nil, else_body = nil;

        
        $a = [].concat(Opal.to_a(val['$[]'](3))), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (in_bodies = $slice.call($a, 0, $b)), ($c = Opal.to_ary(($a[$b] == null ? nil : $a[$b])), (else_t = ($c[0] == null ? nil : $c[0])), (else_body = ($c[1] == null ? nil : $c[1]))), $a;
        result = self.builder.$case_match(val['$[]'](0), val['$[]'](1), in_bodies, else_t, else_body, val['$[]'](4));
        return result;
      }, $Ruby30__reduce_335$231.$$arity = 3);
      
      Opal.def(self, '$_reduce_336', $Ruby30__reduce_336$232 = function $$_reduce_336(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'for', [val['$[]'](0), val['$[]'](1), val['$[]'](2)].concat(Opal.to_a(val['$[]'](3))).concat([val['$[]'](4), val['$[]'](5)]));
        return result;
      }, $Ruby30__reduce_336$232.$$arity = 3);
      
      Opal.def(self, '$_reduce_337', $Ruby30__reduce_337$233 = function $$_reduce_337(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [true];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$local_push();
        return result;
      }, $Ruby30__reduce_337$233.$$arity = 3);
      
      Opal.def(self, '$_reduce_338', $Ruby30__reduce_338$234 = function $$_reduce_338(val, _values, result) {
        var $a, $b, self = this, k_class = nil, ctx = nil, lt_t = nil, superclass = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (k_class = ($a[0] == null ? nil : $a[0])), (ctx = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(self.context.$in_def())) {
          self.$diagnostic("error", "class_in_def", nil, k_class)};
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lt_t = ($a[0] == null ? nil : $a[0])), (superclass = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$def_class(k_class, val['$[]'](1), lt_t, superclass, val['$[]'](4), val['$[]'](5));
        self.$local_pop();
        
        $writer = [ctx.$in_class()];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_338$234.$$arity = 3);
      
      Opal.def(self, '$_reduce_339', $Ruby30__reduce_339$235 = function $$_reduce_339(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [false];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$local_push();
        return result;
      }, $Ruby30__reduce_339$235.$$arity = 3);
      
      Opal.def(self, '$_reduce_340', $Ruby30__reduce_340$236 = function $$_reduce_340(val, _values, result) {
        var $a, $b, self = this, k_class = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (k_class = ($a[0] == null ? nil : $a[0])), (ctx = ($a[1] == null ? nil : $a[1])), $b;
        result = self.builder.$def_sclass(k_class, val['$[]'](1), val['$[]'](2), val['$[]'](5), val['$[]'](6));
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [ctx.$in_class()];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_340$236.$$arity = 3);
      
      Opal.def(self, '$_reduce_341', $Ruby30__reduce_341$237 = function $$_reduce_341(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [true];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$local_push();
        return result;
      }, $Ruby30__reduce_341$237.$$arity = 3);
      
      Opal.def(self, '$_reduce_342', $Ruby30__reduce_342$238 = function $$_reduce_342(val, _values, result) {
        var $a, $b, self = this, k_mod = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (k_mod = ($a[0] == null ? nil : $a[0])), (ctx = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(self.context.$in_def())) {
          self.$diagnostic("error", "module_in_def", nil, k_mod)};
        result = self.builder.$def_module(k_mod, val['$[]'](1), val['$[]'](3), val['$[]'](4));
        self.$local_pop();
        
        $writer = [ctx.$in_class()];
        $send(self.context, 'in_class=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_342$238.$$arity = 3);
      
      Opal.def(self, '$_reduce_343', $Ruby30__reduce_343$239 = function $$_reduce_343(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, name_t = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), ($c = Opal.to_ary(($a[1] == null ? nil : $a[1])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        result = self.builder.$def_method(def_t, name_t, val['$[]'](1), val['$[]'](2), val['$[]'](3));
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_343$239.$$arity = 3);
      
      Opal.def(self, '$_reduce_344', $Ruby30__reduce_344$240 = function $$_reduce_344(val, _values, result) {
        var $a, $b, $c, self = this, def_t = nil, recv = nil, dot_t = nil, name_t = nil, ctx = nil, $writer = nil;

        
        $b = val['$[]'](0), $a = Opal.to_ary($b), (def_t = ($a[0] == null ? nil : $a[0])), (recv = ($a[1] == null ? nil : $a[1])), (dot_t = ($a[2] == null ? nil : $a[2])), ($c = Opal.to_ary(($a[3] == null ? nil : $a[3])), (name_t = ($c[0] == null ? nil : $c[0])), (ctx = ($c[1] == null ? nil : $c[1]))), $b;
        result = self.builder.$def_singleton(def_t, recv, dot_t, name_t, val['$[]'](1), val['$[]'](2), val['$[]'](3));
        self.$local_pop();
        
        $writer = [ctx.$in_def()];
        $send(self.context, 'in_def=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.current_arg_stack.$pop();
        return result;
      }, $Ruby30__reduce_344$240.$$arity = 3);
      
      Opal.def(self, '$_reduce_345', $Ruby30__reduce_345$241 = function $$_reduce_345(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("break", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_345$241.$$arity = 3);
      
      Opal.def(self, '$_reduce_346', $Ruby30__reduce_346$242 = function $$_reduce_346(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("next", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_346$242.$$arity = 3);
      
      Opal.def(self, '$_reduce_347', $Ruby30__reduce_347$243 = function $$_reduce_347(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("redo", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_347$243.$$arity = 3);
      
      Opal.def(self, '$_reduce_348', $Ruby30__reduce_348$244 = function $$_reduce_348(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("retry", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_348$244.$$arity = 3);
      
      Opal.def(self, '$_reduce_350', $Ruby30__reduce_350$245 = function $$_reduce_350(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.context.$dup()];
        return result;
      }, $Ruby30__reduce_350$245.$$arity = 3);
      
      Opal.def(self, '$_reduce_351', $Ruby30__reduce_351$246 = function $$_reduce_351(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.context.$dup()];
        return result;
      }, $Ruby30__reduce_351$246.$$arity = 3);
      
      Opal.def(self, '$_reduce_352', $Ruby30__reduce_352$247 = function $$_reduce_352(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_352$247.$$arity = 3);
      
      Opal.def(self, '$_reduce_353', $Ruby30__reduce_353$248 = function $$_reduce_353(val, _values, result) {
        var self = this, $ret_or_6 = nil, $ret_or_7 = nil, $ret_or_8 = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = self.context.$in_class()))) {
          return self.context.$in_def()['$!']()
        } else {
          return $ret_or_7
        }; return nil; })()))) {
          return (function() {if ($truthy(($ret_or_8 = self.$context().$in_block()))) {
            return $ret_or_8
          } else {
            return self.$context().$in_lambda()
          }; return nil; })()['$!']()
        } else {
          return $ret_or_6
        }; return nil; })())) {
          self.$diagnostic("error", "invalid_return", nil, val['$[]'](0))};
        return result;
      }, $Ruby30__reduce_353$248.$$arity = 3);
      
      Opal.def(self, '$_reduce_356', $Ruby30__reduce_356$249 = function $$_reduce_356(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_356$249.$$arity = 3);
      
      Opal.def(self, '$_reduce_360', $Ruby30__reduce_360$250 = function $$_reduce_360(val, _values, result) {
        var $a, $b, self = this, else_t = nil, else_ = nil;

        
        $b = val['$[]'](4), $a = Opal.to_ary($b), (else_t = ($a[0] == null ? nil : $a[0])), (else_ = ($a[1] == null ? nil : $a[1])), $b;
        result = [val['$[]'](0), self.builder.$condition(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3), else_t, else_, nil)];
        return result;
      }, $Ruby30__reduce_360$250.$$arity = 3);
      
      Opal.def(self, '$_reduce_362', $Ruby30__reduce_362$251 = function $$_reduce_362(val, _values, result) {
        var self = this;

        
        result = val;
        return result;
      }, $Ruby30__reduce_362$251.$$arity = 3);
      
      Opal.def(self, '$_reduce_365', $Ruby30__reduce_365$252 = function $$_reduce_365(val, _values, result) {
        var self = this;

        
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_365$252.$$arity = 3);
      
      Opal.def(self, '$_reduce_366', $Ruby30__reduce_366$253 = function $$_reduce_366(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_366$253.$$arity = 3);
      
      Opal.def(self, '$_reduce_367', $Ruby30__reduce_367$254 = function $$_reduce_367(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_367$254.$$arity = 3);
      
      Opal.def(self, '$_reduce_368', $Ruby30__reduce_368$255 = function $$_reduce_368(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_368$255.$$arity = 3);
      
      Opal.def(self, '$_reduce_370', $Ruby30__reduce_370$256 = function $$_reduce_370(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(val['$[]'](2));
        return result;
      }, $Ruby30__reduce_370$256.$$arity = 3);
      
      Opal.def(self, '$_reduce_371', $Ruby30__reduce_371$257 = function $$_reduce_371(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$push(val['$[]'](2)).$concat(val['$[]'](4));
        return result;
      }, $Ruby30__reduce_371$257.$$arity = 3);
      
      Opal.def(self, '$_reduce_372', $Ruby30__reduce_372$258 = function $$_reduce_372(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_372$258.$$arity = 3);
      
      Opal.def(self, '$_reduce_373', $Ruby30__reduce_373$259 = function $$_reduce_373(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_373$259.$$arity = 3);
      
      Opal.def(self, '$_reduce_374', $Ruby30__reduce_374$260 = function $$_reduce_374(val, _values, result) {
        var self = this;

        
        result = self.builder.$restarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_374$260.$$arity = 3);
      
      Opal.def(self, '$_reduce_375', $Ruby30__reduce_375$261 = function $$_reduce_375(val, _values, result) {
        var self = this;

        
        result = self.builder.$restarg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_375$261.$$arity = 3);
      
      Opal.def(self, '$_reduce_378', $Ruby30__reduce_378$262 = function $$_reduce_378(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_378$262.$$arity = 3);
      
      Opal.def(self, '$_reduce_379', $Ruby30__reduce_379$263 = function $$_reduce_379(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_379$263.$$arity = 3);
      
      Opal.def(self, '$_reduce_380', $Ruby30__reduce_380$264 = function $$_reduce_380(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_380$264.$$arity = 3);
      
      Opal.def(self, '$_reduce_381', $Ruby30__reduce_381$265 = function $$_reduce_381(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_381$265.$$arity = 3);
      
      Opal.def(self, '$_reduce_382', $Ruby30__reduce_382$266 = function $$_reduce_382(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_382$266.$$arity = 3);
      
      Opal.def(self, '$_reduce_383', $Ruby30__reduce_383$267 = function $$_reduce_383(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_383$267.$$arity = 3);
      
      Opal.def(self, '$_reduce_385', $Ruby30__reduce_385$268 = function $$_reduce_385(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_385$268.$$arity = 3);
      
      Opal.def(self, '$_reduce_386', $Ruby30__reduce_386$269 = function $$_reduce_386(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby30__reduce_386$269.$$arity = 3);
      
      Opal.def(self, '$_reduce_387', $Ruby30__reduce_387$270 = function $$_reduce_387(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_387$270.$$arity = 3);
      
      Opal.def(self, '$_reduce_388', $Ruby30__reduce_388$271 = function $$_reduce_388(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_388$271.$$arity = 3);
      
      Opal.def(self, '$_reduce_389', $Ruby30__reduce_389$272 = function $$_reduce_389(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_389$272.$$arity = 3);
      
      Opal.def(self, '$_reduce_391', $Ruby30__reduce_391$273 = function $$_reduce_391(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_391$273.$$arity = 3);
      
      Opal.def(self, '$_reduce_392', $Ruby30__reduce_392$274 = function $$_reduce_392(val, _values, result) {
        var self = this, $ret_or_9 = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_9 = val['$[]'](1)['$empty?']()))) {
          return val['$[]'](0).$size()['$=='](1)
        } else {
          return $ret_or_9
        }; return nil; })())) {
          result = [self.builder.$procarg0(val['$[]'](0)['$[]'](0))]
        } else {
          result = val['$[]'](0).$concat(val['$[]'](1))
        };
        return result;
      }, $Ruby30__reduce_392$274.$$arity = 3);
      
      Opal.def(self, '$_reduce_393', $Ruby30__reduce_393$275 = function $$_reduce_393(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_393$275.$$arity = 3);
      
      Opal.def(self, '$_reduce_394', $Ruby30__reduce_394$276 = function $$_reduce_394(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_394$276.$$arity = 3);
      
      Opal.def(self, '$_reduce_395', $Ruby30__reduce_395$277 = function $$_reduce_395(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_395$277.$$arity = 3);
      
      Opal.def(self, '$_reduce_396', $Ruby30__reduce_396$278 = function $$_reduce_396(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_396$278.$$arity = 3);
      
      Opal.def(self, '$_reduce_397', $Ruby30__reduce_397$279 = function $$_reduce_397(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_397$279.$$arity = 3);
      
      Opal.def(self, '$_reduce_398', $Ruby30__reduce_398$280 = function $$_reduce_398(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_398$280.$$arity = 3);
      
      Opal.def(self, '$_reduce_400', $Ruby30__reduce_400$281 = function $$_reduce_400(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, $Ruby30__reduce_400$281.$$arity = 3);
      
      Opal.def(self, '$_reduce_401', $Ruby30__reduce_401$282 = function $$_reduce_401(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_401$282.$$arity = 3);
      
      Opal.def(self, '$_reduce_402', $Ruby30__reduce_402$283 = function $$_reduce_402(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(nil);
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_402$283.$$arity = 3);
      
      Opal.def(self, '$_reduce_403', $Ruby30__reduce_403$284 = function $$_reduce_403(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(nil);
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_403$284.$$arity = 3);
      
      Opal.def(self, '$_reduce_404', $Ruby30__reduce_404$285 = function $$_reduce_404(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_404$285.$$arity = 3);
      
      Opal.def(self, '$_reduce_405', $Ruby30__reduce_405$286 = function $$_reduce_405(val, _values, result) {
        var self = this;

        
        result = val['$[]'](2);
        return result;
      }, $Ruby30__reduce_405$286.$$arity = 3);
      
      Opal.def(self, '$_reduce_406', $Ruby30__reduce_406$287 = function $$_reduce_406(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_406$287.$$arity = 3);
      
      Opal.def(self, '$_reduce_407', $Ruby30__reduce_407$288 = function $$_reduce_407(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_407$288.$$arity = 3);
      
      Opal.def(self, '$_reduce_408', $Ruby30__reduce_408$289 = function $$_reduce_408(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        result = self.builder.$shadowarg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_408$289.$$arity = 3);
      
      Opal.def(self, '$_reduce_410', $Ruby30__reduce_410$290 = function $$_reduce_410(val, _values, result) {
        var self = this, $writer = nil;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push($hash2(["static"], {"static": false}));
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_410$290.$$arity = 3);
      
      Opal.def(self, '$_reduce_411', $Ruby30__reduce_411$291 = function $$_reduce_411(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby30__reduce_411$291.$$arity = 3);
      
      Opal.def(self, '$_reduce_412', $Ruby30__reduce_412$292 = function $$_reduce_412(val, _values, result) {
        var $a, $b, self = this, lambda_call = nil, args = nil, begin_t = nil, body = nil, end_t = nil, $writer = nil;

        
        lambda_call = self.builder.$call_lambda(val['$[]'](0));
        args = (function() {if ($truthy(self.max_numparam_stack['$has_numparams?']())) {
          return self.builder.$numargs(self.max_numparam_stack.$top())
        } else {
          return val['$[]'](2)
        }; return nil; })();
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        
        $writer = [val['$[]'](1).$in_lambda()];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$block(lambda_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_412$292.$$arity = 3);
      
      Opal.def(self, '$_reduce_413', $Ruby30__reduce_413$293 = function $$_reduce_413(val, _values, result) {
        var self = this;

        
        self.max_numparam_stack['$has_ordinary_params!']();
        result = self.builder.$args(val['$[]'](0), val['$[]'](1).$concat(val['$[]'](2)), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_413$293.$$arity = 3);
      
      Opal.def(self, '$_reduce_414', $Ruby30__reduce_414$294 = function $$_reduce_414(val, _values, result) {
        var self = this;

        
        if ($truthy(val['$[]'](0)['$any?']())) {
          self.max_numparam_stack['$has_ordinary_params!']()};
        result = self.builder.$args(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_414$294.$$arity = 3);
      
      Opal.def(self, '$_reduce_415', $Ruby30__reduce_415$295 = function $$_reduce_415(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_415$295.$$arity = 3);
      
      Opal.def(self, '$_reduce_416', $Ruby30__reduce_416$296 = function $$_reduce_416(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        
        $writer = [val['$[]'](1).$in_lambda()];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_416$296.$$arity = 3);
      
      Opal.def(self, '$_reduce_417', $Ruby30__reduce_417$297 = function $$_reduce_417(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_417$297.$$arity = 3);
      
      Opal.def(self, '$_reduce_418', $Ruby30__reduce_418$298 = function $$_reduce_418(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        
        $writer = [val['$[]'](1).$in_lambda()];
        $send(self.context, 'in_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_418$298.$$arity = 3);
      
      Opal.def(self, '$_reduce_419', $Ruby30__reduce_419$299 = function $$_reduce_419(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_419$299.$$arity = 3);
      
      Opal.def(self, '$_reduce_420', $Ruby30__reduce_420$300 = function $$_reduce_420(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        
        $writer = [val['$[]'](1).$in_block()];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_420$300.$$arity = 3);
      
      Opal.def(self, '$_reduce_421', $Ruby30__reduce_421$301 = function $$_reduce_421(val, _values, result) {
        var $a, $b, self = this, begin_t = nil, block_args = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (block_args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(val['$[]'](0), begin_t, block_args, body, end_t);
        return result;
      }, $Ruby30__reduce_421$301.$$arity = 3);
      
      Opal.def(self, '$_reduce_422', $Ruby30__reduce_422$302 = function $$_reduce_422(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_422$302.$$arity = 3);
      
      Opal.def(self, '$_reduce_423', $Ruby30__reduce_423$303 = function $$_reduce_423(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil, method_call = nil, begin_t = nil, body = nil, end_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_423$303.$$arity = 3);
      
      Opal.def(self, '$_reduce_424', $Ruby30__reduce_424$304 = function $$_reduce_424(val, _values, result) {
        var $a, $b, self = this, method_call = nil, begin_t = nil, args = nil, body = nil, end_t = nil;

        
        method_call = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), nil, val['$[]'](3), nil);
        $b = val['$[]'](4), $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), (end_t = ($a[3] == null ? nil : $a[3])), $b;
        result = self.builder.$block(method_call, begin_t, args, body, end_t);
        return result;
      }, $Ruby30__reduce_424$304.$$arity = 3);
      
      Opal.def(self, '$_reduce_425', $Ruby30__reduce_425$305 = function $$_reduce_425(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(nil, nil, val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_425$305.$$arity = 3);
      
      Opal.def(self, '$_reduce_426', $Ruby30__reduce_426$306 = function $$_reduce_426(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_426$306.$$arity = 3);
      
      Opal.def(self, '$_reduce_427', $Ruby30__reduce_427$307 = function $$_reduce_427(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](3), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2), lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_427$307.$$arity = 3);
      
      Opal.def(self, '$_reduce_428', $Ruby30__reduce_428$308 = function $$_reduce_428(val, _values, result) {
        var self = this;

        
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_428$308.$$arity = 3);
      
      Opal.def(self, '$_reduce_429', $Ruby30__reduce_429$309 = function $$_reduce_429(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_429$309.$$arity = 3);
      
      Opal.def(self, '$_reduce_430', $Ruby30__reduce_430$310 = function $$_reduce_430(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$call_method(val['$[]'](0), val['$[]'](1), nil, lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_430$310.$$arity = 3);
      
      Opal.def(self, '$_reduce_431', $Ruby30__reduce_431$311 = function $$_reduce_431(val, _values, result) {
        var $a, $b, self = this, lparen_t = nil, args = nil, rparen_t = nil;

        
        $b = val['$[]'](1), $a = Opal.to_ary($b), (lparen_t = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (rparen_t = ($a[2] == null ? nil : $a[2])), $b;
        result = self.builder.$keyword_cmd("super", val['$[]'](0), lparen_t, args, rparen_t);
        return result;
      }, $Ruby30__reduce_431$311.$$arity = 3);
      
      Opal.def(self, '$_reduce_432', $Ruby30__reduce_432$312 = function $$_reduce_432(val, _values, result) {
        var self = this;

        
        result = self.builder.$keyword_cmd("zsuper", val['$[]'](0));
        return result;
      }, $Ruby30__reduce_432$312.$$arity = 3);
      
      Opal.def(self, '$_reduce_433', $Ruby30__reduce_433$313 = function $$_reduce_433(val, _values, result) {
        var self = this;

        
        result = self.builder.$index(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_433$313.$$arity = 3);
      
      Opal.def(self, '$_reduce_434', $Ruby30__reduce_434$314 = function $$_reduce_434(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_434$314.$$arity = 3);
      
      Opal.def(self, '$_reduce_435', $Ruby30__reduce_435$315 = function $$_reduce_435(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        
        $writer = [val['$[]'](1).$in_block()];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_435$315.$$arity = 3);
      
      Opal.def(self, '$_reduce_436', $Ruby30__reduce_436$316 = function $$_reduce_436(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$dup();
        
        $writer = [true];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_436$316.$$arity = 3);
      
      Opal.def(self, '$_reduce_437', $Ruby30__reduce_437$317 = function $$_reduce_437(val, _values, result) {
        var self = this, $writer = nil;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3)]);
        
        $writer = [val['$[]'](1).$in_block()];
        $send(self.context, 'in_block=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_437$317.$$arity = 3);
      
      Opal.def(self, '$_reduce_438', $Ruby30__reduce_438$318 = function $$_reduce_438(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push($hash2(["static"], {"static": false}));
        return result;
      }, $Ruby30__reduce_438$318.$$arity = 3);
      
      Opal.def(self, '$_reduce_439', $Ruby30__reduce_439$319 = function $$_reduce_439(val, _values, result) {
        var self = this, args = nil;

        
        args = (function() {if ($truthy(self.max_numparam_stack['$has_numparams?']())) {
          return self.builder.$numargs(self.max_numparam_stack.$top())
        } else {
          return val['$[]'](1)
        }; return nil; })();
        result = [args, val['$[]'](2)];
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        return result;
      }, $Ruby30__reduce_439$319.$$arity = 3);
      
      Opal.def(self, '$_reduce_440', $Ruby30__reduce_440$320 = function $$_reduce_440(val, _values, result) {
        var self = this;

        
        self.static_env.$extend_dynamic();
        self.max_numparam_stack.$push($hash2(["static"], {"static": false}));
        return result;
      }, $Ruby30__reduce_440$320.$$arity = 3);
      
      Opal.def(self, '$_reduce_441', $Ruby30__reduce_441$321 = function $$_reduce_441(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        return result;
      }, $Ruby30__reduce_441$321.$$arity = 3);
      
      Opal.def(self, '$_reduce_442', $Ruby30__reduce_442$322 = function $$_reduce_442(val, _values, result) {
        var self = this, args = nil;

        
        args = (function() {if ($truthy(self.max_numparam_stack['$has_numparams?']())) {
          return self.builder.$numargs(self.max_numparam_stack.$top())
        } else {
          return val['$[]'](2)
        }; return nil; })();
        result = [args, val['$[]'](3)];
        self.max_numparam_stack.$pop();
        self.static_env.$unextend();
        self.lexer.$cmdarg().$pop();
        return result;
      }, $Ruby30__reduce_442$322.$$arity = 3);
      
      Opal.def(self, '$_reduce_443', $Ruby30__reduce_443$323 = function $$_reduce_443(val, _values, result) {
        var self = this;

        
        result = [self.builder.$when(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3))].concat(Opal.to_a(val['$[]'](4)));
        return result;
      }, $Ruby30__reduce_443$323.$$arity = 3);
      
      Opal.def(self, '$_reduce_444', $Ruby30__reduce_444$324 = function $$_reduce_444(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_444$324.$$arity = 3);
      
      Opal.def(self, '$_reduce_446', $Ruby30__reduce_446$325 = function $$_reduce_446(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_beg"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.lexer, 'command_start=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pattern_variables.$push();
        self.pattern_hash_keys.$push();
        result = self.context.$in_kwarg();
        
        $writer = [true];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_446$325.$$arity = 3);
      
      Opal.def(self, '$_reduce_447', $Ruby30__reduce_447$326 = function $$_reduce_447(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_variables.$pop();
        self.pattern_hash_keys.$pop();
        
        $writer = [val['$[]'](1)];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_447$326.$$arity = 3);
      
      Opal.def(self, '$_reduce_448', $Ruby30__reduce_448$327 = function $$_reduce_448(val, _values, result) {
        var self = this;

        
        result = [$send(self.builder, 'in_pattern', [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](3), val['$[]'](5)]))].concat(Opal.to_a(val['$[]'](6)));
        return result;
      }, $Ruby30__reduce_448$327.$$arity = 3);
      
      Opal.def(self, '$_reduce_449', $Ruby30__reduce_449$328 = function $$_reduce_449(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_449$328.$$arity = 3);
      
      Opal.def(self, '$_reduce_451', $Ruby30__reduce_451$329 = function $$_reduce_451(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), nil];
        return result;
      }, $Ruby30__reduce_451$329.$$arity = 3);
      
      Opal.def(self, '$_reduce_452', $Ruby30__reduce_452$330 = function $$_reduce_452(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.builder.$if_guard(val['$[]'](1), val['$[]'](2))];
        return result;
      }, $Ruby30__reduce_452$330.$$arity = 3);
      
      Opal.def(self, '$_reduce_453', $Ruby30__reduce_453$331 = function $$_reduce_453(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), self.builder.$unless_guard(val['$[]'](1), val['$[]'](2))];
        return result;
      }, $Ruby30__reduce_453$331.$$arity = 3);
      
      Opal.def(self, '$_reduce_455', $Ruby30__reduce_455$332 = function $$_reduce_455(val, _values, result) {
        var self = this, item = nil;

        
        item = self.builder.$match_with_trailing_comma(val['$[]'](0), val['$[]'](1));
        result = self.builder.$array_pattern(nil, [item], nil);
        return result;
      }, $Ruby30__reduce_455$332.$$arity = 3);
      
      Opal.def(self, '$_reduce_456', $Ruby30__reduce_456$333 = function $$_reduce_456(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(nil, [val['$[]'](0)].$concat(val['$[]'](2)), nil);
        return result;
      }, $Ruby30__reduce_456$333.$$arity = 3);
      
      Opal.def(self, '$_reduce_457', $Ruby30__reduce_457$334 = function $$_reduce_457(val, _values, result) {
        var self = this;

        
        result = self.builder.$find_pattern(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_457$334.$$arity = 3);
      
      Opal.def(self, '$_reduce_458', $Ruby30__reduce_458$335 = function $$_reduce_458(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_458$335.$$arity = 3);
      
      Opal.def(self, '$_reduce_459', $Ruby30__reduce_459$336 = function $$_reduce_459(val, _values, result) {
        var self = this;

        
        result = self.builder.$hash_pattern(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_459$336.$$arity = 3);
      
      Opal.def(self, '$_reduce_461', $Ruby30__reduce_461$337 = function $$_reduce_461(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_as(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_461$337.$$arity = 3);
      
      Opal.def(self, '$_reduce_463', $Ruby30__reduce_463$338 = function $$_reduce_463(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_alt(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_463$338.$$arity = 3);
      
      Opal.def(self, '$_reduce_465', $Ruby30__reduce_465$339 = function $$_reduce_465(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        self.pattern_hash_keys.$push();
        return result;
      }, $Ruby30__reduce_465$339.$$arity = 3);
      
      Opal.def(self, '$_reduce_466', $Ruby30__reduce_466$340 = function $$_reduce_466(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        self.pattern_hash_keys.$push();
        return result;
      }, $Ruby30__reduce_466$340.$$arity = 3);
      
      Opal.def(self, '$_reduce_468', $Ruby30__reduce_468$341 = function $$_reduce_468(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$array_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_468$341.$$arity = 3);
      
      Opal.def(self, '$_reduce_469', $Ruby30__reduce_469$342 = function $$_reduce_469(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$find_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_469$342.$$arity = 3);
      
      Opal.def(self, '$_reduce_470', $Ruby30__reduce_470$343 = function $$_reduce_470(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$hash_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_470$343.$$arity = 3);
      
      Opal.def(self, '$_reduce_471', $Ruby30__reduce_471$344 = function $$_reduce_471(val, _values, result) {
        var self = this, pattern = nil;

        
        pattern = self.builder.$array_pattern(val['$[]'](1), nil, val['$[]'](2));
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](2));
        return result;
      }, $Ruby30__reduce_471$344.$$arity = 3);
      
      Opal.def(self, '$_reduce_472', $Ruby30__reduce_472$345 = function $$_reduce_472(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$array_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_472$345.$$arity = 3);
      
      Opal.def(self, '$_reduce_473', $Ruby30__reduce_473$346 = function $$_reduce_473(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$find_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_473$346.$$arity = 3);
      
      Opal.def(self, '$_reduce_474', $Ruby30__reduce_474$347 = function $$_reduce_474(val, _values, result) {
        var self = this, pattern = nil;

        
        self.pattern_hash_keys.$pop();
        pattern = self.builder.$hash_pattern(nil, val['$[]'](2), nil);
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](3));
        return result;
      }, $Ruby30__reduce_474$347.$$arity = 3);
      
      Opal.def(self, '$_reduce_475', $Ruby30__reduce_475$348 = function $$_reduce_475(val, _values, result) {
        var self = this, pattern = nil;

        
        pattern = self.builder.$array_pattern(val['$[]'](1), nil, val['$[]'](2));
        result = self.builder.$const_pattern(val['$[]'](0), val['$[]'](1), pattern, val['$[]'](2));
        return result;
      }, $Ruby30__reduce_475$348.$$arity = 3);
      
      Opal.def(self, '$_reduce_476', $Ruby30__reduce_476$349 = function $$_reduce_476(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_476$349.$$arity = 3);
      
      Opal.def(self, '$_reduce_477', $Ruby30__reduce_477$350 = function $$_reduce_477(val, _values, result) {
        var self = this;

        
        result = self.builder.$find_pattern(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_477$350.$$arity = 3);
      
      Opal.def(self, '$_reduce_478', $Ruby30__reduce_478$351 = function $$_reduce_478(val, _values, result) {
        var self = this;

        
        result = self.builder.$array_pattern(val['$[]'](0), [], val['$[]'](1));
        return result;
      }, $Ruby30__reduce_478$351.$$arity = 3);
      
      Opal.def(self, '$_reduce_479', $Ruby30__reduce_479$352 = function $$_reduce_479(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_hash_keys.$push();
        result = self.context.$in_kwarg();
        
        $writer = [false];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_479$352.$$arity = 3);
      
      Opal.def(self, '$_reduce_480', $Ruby30__reduce_480$353 = function $$_reduce_480(val, _values, result) {
        var self = this, $writer = nil;

        
        self.pattern_hash_keys.$pop();
        
        $writer = [val['$[]'](1)];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$hash_pattern(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_480$353.$$arity = 3);
      
      Opal.def(self, '$_reduce_481', $Ruby30__reduce_481$354 = function $$_reduce_481(val, _values, result) {
        var self = this;

        
        result = self.builder.$hash_pattern(val['$[]'](0), [], val['$[]'](1));
        return result;
      }, $Ruby30__reduce_481$354.$$arity = 3);
      
      Opal.def(self, '$_reduce_482', $Ruby30__reduce_482$355 = function $$_reduce_482(val, _values, result) {
        var self = this;

        
        self.pattern_hash_keys.$push();
        return result;
      }, $Ruby30__reduce_482$355.$$arity = 3);
      
      Opal.def(self, '$_reduce_483', $Ruby30__reduce_483$356 = function $$_reduce_483(val, _values, result) {
        var self = this;

        
        self.pattern_hash_keys.$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_483$356.$$arity = 3);
      
      Opal.def(self, '$_reduce_484', $Ruby30__reduce_484$357 = function $$_reduce_484(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_484$357.$$arity = 3);
      
      Opal.def(self, '$_reduce_485', $Ruby30__reduce_485$358 = function $$_reduce_485(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_485$358.$$arity = 3);
      
      Opal.def(self, '$_reduce_486', $Ruby30__reduce_486$359 = function $$_reduce_486(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([val['$[]'](1)]);
        return result;
      }, $Ruby30__reduce_486$359.$$arity = 3);
      
      Opal.def(self, '$_reduce_487', $Ruby30__reduce_487$360 = function $$_reduce_487(val, _values, result) {
        var self = this, match_rest = nil;

        
        match_rest = self.builder.$match_rest(val['$[]'](1), val['$[]'](2));
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([match_rest]);
        return result;
      }, $Ruby30__reduce_487$360.$$arity = 3);
      
      Opal.def(self, '$_reduce_488', $Ruby30__reduce_488$361 = function $$_reduce_488(val, _values, result) {
        var self = this, match_rest = nil;

        
        match_rest = self.builder.$match_rest(val['$[]'](1), val['$[]'](2));
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([match_rest]).concat(Opal.to_a(val['$[]'](4)));
        return result;
      }, $Ruby30__reduce_488$361.$$arity = 3);
      
      Opal.def(self, '$_reduce_489', $Ruby30__reduce_489$362 = function $$_reduce_489(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([self.builder.$match_rest(val['$[]'](1))]);
        return result;
      }, $Ruby30__reduce_489$362.$$arity = 3);
      
      Opal.def(self, '$_reduce_490', $Ruby30__reduce_490$363 = function $$_reduce_490(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([self.builder.$match_rest(val['$[]'](1))]).concat(Opal.to_a(val['$[]'](3)));
        return result;
      }, $Ruby30__reduce_490$363.$$arity = 3);
      
      Opal.def(self, '$_reduce_492', $Ruby30__reduce_492$364 = function $$_reduce_492(val, _values, result) {
        var self = this, item = nil;

        
        item = self.builder.$match_with_trailing_comma(val['$[]'](0), val['$[]'](1));
        result = [item];
        return result;
      }, $Ruby30__reduce_492$364.$$arity = 3);
      
      Opal.def(self, '$_reduce_493', $Ruby30__reduce_493$365 = function $$_reduce_493(val, _values, result) {
        var self = this, last_item = nil;

        
        last_item = self.builder.$match_with_trailing_comma(val['$[]'](1), val['$[]'](2));
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([last_item]);
        return result;
      }, $Ruby30__reduce_493$365.$$arity = 3);
      
      Opal.def(self, '$_reduce_494', $Ruby30__reduce_494$366 = function $$_reduce_494(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_494$366.$$arity = 3);
      
      Opal.def(self, '$_reduce_495', $Ruby30__reduce_495$367 = function $$_reduce_495(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_495$367.$$arity = 3);
      
      Opal.def(self, '$_reduce_496', $Ruby30__reduce_496$368 = function $$_reduce_496(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)].concat(Opal.to_a(val['$[]'](2))).concat([val['$[]'](4)]);
        return result;
      }, $Ruby30__reduce_496$368.$$arity = 3);
      
      Opal.def(self, '$_reduce_497', $Ruby30__reduce_497$369 = function $$_reduce_497(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_rest(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_497$369.$$arity = 3);
      
      Opal.def(self, '$_reduce_498', $Ruby30__reduce_498$370 = function $$_reduce_498(val, _values, result) {
        var self = this;

        
        result = self.builder.$match_rest(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_498$370.$$arity = 3);
      
      Opal.def(self, '$_reduce_499', $Ruby30__reduce_499$371 = function $$_reduce_499(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_499$371.$$arity = 3);
      
      Opal.def(self, '$_reduce_500', $Ruby30__reduce_500$372 = function $$_reduce_500(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([val['$[]'](2)]);
        return result;
      }, $Ruby30__reduce_500$372.$$arity = 3);
      
      Opal.def(self, '$_reduce_502', $Ruby30__reduce_502$373 = function $$_reduce_502(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat(Opal.to_a(val['$[]'](2)));
        return result;
      }, $Ruby30__reduce_502$373.$$arity = 3);
      
      Opal.def(self, '$_reduce_503', $Ruby30__reduce_503$374 = function $$_reduce_503(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_503$374.$$arity = 3);
      
      Opal.def(self, '$_reduce_504', $Ruby30__reduce_504$375 = function $$_reduce_504(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_504$375.$$arity = 3);
      
      Opal.def(self, '$_reduce_505', $Ruby30__reduce_505$376 = function $$_reduce_505(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_505$376.$$arity = 3);
      
      Opal.def(self, '$_reduce_506', $Ruby30__reduce_506$377 = function $$_reduce_506(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_506$377.$$arity = 3);
      
      Opal.def(self, '$_reduce_507', $Ruby30__reduce_507$378 = function $$_reduce_507(val, _values, result) {
        var self = this;

        
        result = [].concat(Opal.to_a(val['$[]'](0))).concat([val['$[]'](2)]);
        return result;
      }, $Ruby30__reduce_507$378.$$arity = 3);
      
      Opal.def(self, '$_reduce_508', $Ruby30__reduce_508$379 = function $$_reduce_508(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'match_pair', Opal.to_a(val['$[]'](0)).concat([val['$[]'](1)]));
        return result;
      }, $Ruby30__reduce_508$379.$$arity = 3);
      
      Opal.def(self, '$_reduce_509', $Ruby30__reduce_509$380 = function $$_reduce_509(val, _values, result) {
        var self = this;

        
        result = $send(self.builder, 'match_label', Opal.to_a(val['$[]'](0)));
        return result;
      }, $Ruby30__reduce_509$380.$$arity = 3);
      
      Opal.def(self, '$_reduce_510', $Ruby30__reduce_510$381 = function $$_reduce_510(val, _values, result) {
        var self = this;

        
        result = ["label", val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_510$381.$$arity = 3);
      
      Opal.def(self, '$_reduce_511', $Ruby30__reduce_511$382 = function $$_reduce_511(val, _values, result) {
        var self = this;

        
        result = ["quoted", [val['$[]'](0), val['$[]'](1), val['$[]'](2)]];
        return result;
      }, $Ruby30__reduce_511$382.$$arity = 3);
      
      Opal.def(self, '$_reduce_512', $Ruby30__reduce_512$383 = function $$_reduce_512(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_rest(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_512$383.$$arity = 3);
      
      Opal.def(self, '$_reduce_513', $Ruby30__reduce_513$384 = function $$_reduce_513(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_rest(val['$[]'](0), nil)];
        return result;
      }, $Ruby30__reduce_513$384.$$arity = 3);
      
      Opal.def(self, '$_reduce_514', $Ruby30__reduce_514$385 = function $$_reduce_514(val, _values, result) {
        var self = this;

        
        result = [self.builder.$match_nil_pattern(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_514$385.$$arity = 3);
      
      Opal.def(self, '$_reduce_518', $Ruby30__reduce_518$386 = function $$_reduce_518(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_518$386.$$arity = 3);
      
      Opal.def(self, '$_reduce_519', $Ruby30__reduce_519$387 = function $$_reduce_519(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_519$387.$$arity = 3);
      
      Opal.def(self, '$_reduce_520', $Ruby30__reduce_520$388 = function $$_reduce_520(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_520$388.$$arity = 3);
      
      Opal.def(self, '$_reduce_521', $Ruby30__reduce_521$389 = function $$_reduce_521(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(val['$[]'](0), val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_521$389.$$arity = 3);
      
      Opal.def(self, '$_reduce_525', $Ruby30__reduce_525$390 = function $$_reduce_525(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_inclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_525$390.$$arity = 3);
      
      Opal.def(self, '$_reduce_526', $Ruby30__reduce_526$391 = function $$_reduce_526(val, _values, result) {
        var self = this;

        
        result = self.builder.$range_exclusive(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_526$391.$$arity = 3);
      
      Opal.def(self, '$_reduce_535', $Ruby30__reduce_535$392 = function $$_reduce_535(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_535$392.$$arity = 3);
      
      Opal.def(self, '$_reduce_537', $Ruby30__reduce_537$393 = function $$_reduce_537(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(self.builder.$match_var(val['$[]'](0)));
        return result;
      }, $Ruby30__reduce_537$393.$$arity = 3);
      
      Opal.def(self, '$_reduce_538', $Ruby30__reduce_538$394 = function $$_reduce_538(val, _values, result) {
        var self = this, name = nil, lvar = nil;

        
        name = val['$[]'](1)['$[]'](0);
        if ($truthy(self.$static_env()['$declared?'](name))) {
        } else {
          self.$diagnostic("error", "undefined_lvar", $hash2(["name"], {"name": name}), val['$[]'](1))
        };
        lvar = self.builder.$accessible(self.builder.$ident(val['$[]'](1)));
        result = self.builder.$pin(val['$[]'](0), lvar);
        return result;
      }, $Ruby30__reduce_538$394.$$arity = 3);
      
      Opal.def(self, '$_reduce_539', $Ruby30__reduce_539$395 = function $$_reduce_539(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_global(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_539$395.$$arity = 3);
      
      Opal.def(self, '$_reduce_540', $Ruby30__reduce_540$396 = function $$_reduce_540(val, _values, result) {
        var self = this;

        
        result = self.builder.$const_fetch(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_540$396.$$arity = 3);
      
      Opal.def(self, '$_reduce_541', $Ruby30__reduce_541$397 = function $$_reduce_541(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_541$397.$$arity = 3);
      
      Opal.def(self, '$_reduce_542', $Ruby30__reduce_542$398 = function $$_reduce_542(val, _values, result) {
        var $a, $b, self = this, assoc_t = nil, exc_var = nil, exc_list = nil;

        
        $b = val['$[]'](2), $a = Opal.to_ary($b), (assoc_t = ($a[0] == null ? nil : $a[0])), (exc_var = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(val['$[]'](1))) {
          exc_list = self.builder.$array(nil, val['$[]'](1), nil)};
        result = [self.builder.$rescue_body(val['$[]'](0), exc_list, assoc_t, exc_var, val['$[]'](3), val['$[]'](4))].concat(Opal.to_a(val['$[]'](5)));
        return result;
      }, $Ruby30__reduce_542$398.$$arity = 3);
      
      Opal.def(self, '$_reduce_543', $Ruby30__reduce_543$399 = function $$_reduce_543(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_543$399.$$arity = 3);
      
      Opal.def(self, '$_reduce_544', $Ruby30__reduce_544$400 = function $$_reduce_544(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_544$400.$$arity = 3);
      
      Opal.def(self, '$_reduce_547', $Ruby30__reduce_547$401 = function $$_reduce_547(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_547$401.$$arity = 3);
      
      Opal.def(self, '$_reduce_549', $Ruby30__reduce_549$402 = function $$_reduce_549(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_549$402.$$arity = 3);
      
      Opal.def(self, '$_reduce_553', $Ruby30__reduce_553$403 = function $$_reduce_553(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_compose(nil, val['$[]'](0), nil);
        return result;
      }, $Ruby30__reduce_553$403.$$arity = 3);
      
      Opal.def(self, '$_reduce_554', $Ruby30__reduce_554$404 = function $$_reduce_554(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_554$404.$$arity = 3);
      
      Opal.def(self, '$_reduce_555', $Ruby30__reduce_555$405 = function $$_reduce_555(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_555$405.$$arity = 3);
      
      Opal.def(self, '$_reduce_556', $Ruby30__reduce_556$406 = function $$_reduce_556(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby30__reduce_556$406.$$arity = 3);
      
      Opal.def(self, '$_reduce_557', $Ruby30__reduce_557$407 = function $$_reduce_557(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$string(val['$[]'](0));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby30__reduce_557$407.$$arity = 3);
      
      Opal.def(self, '$_reduce_558', $Ruby30__reduce_558$408 = function $$_reduce_558(val, _values, result) {
        var self = this;

        
        result = self.builder.$character(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_558$408.$$arity = 3);
      
      Opal.def(self, '$_reduce_559', $Ruby30__reduce_559$409 = function $$_reduce_559(val, _values, result) {
        var self = this, string = nil;

        
        string = self.builder.$xstring_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        result = self.builder.$dedent_string(string, self.lexer.$dedent_level());
        return result;
      }, $Ruby30__reduce_559$409.$$arity = 3);
      
      Opal.def(self, '$_reduce_560', $Ruby30__reduce_560$410 = function $$_reduce_560(val, _values, result) {
        var self = this, opts = nil;

        
        opts = self.builder.$regexp_options(val['$[]'](3));
        result = self.builder.$regexp_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2), opts);
        return result;
      }, $Ruby30__reduce_560$410.$$arity = 3);
      
      Opal.def(self, '$_reduce_561', $Ruby30__reduce_561$411 = function $$_reduce_561(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_561$411.$$arity = 3);
      
      Opal.def(self, '$_reduce_562', $Ruby30__reduce_562$412 = function $$_reduce_562(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_562$412.$$arity = 3);
      
      Opal.def(self, '$_reduce_563', $Ruby30__reduce_563$413 = function $$_reduce_563(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_563$413.$$arity = 3);
      
      Opal.def(self, '$_reduce_564', $Ruby30__reduce_564$414 = function $$_reduce_564(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_564$414.$$arity = 3);
      
      Opal.def(self, '$_reduce_565', $Ruby30__reduce_565$415 = function $$_reduce_565(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_565$415.$$arity = 3);
      
      Opal.def(self, '$_reduce_566', $Ruby30__reduce_566$416 = function $$_reduce_566(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_566$416.$$arity = 3);
      
      Opal.def(self, '$_reduce_567', $Ruby30__reduce_567$417 = function $$_reduce_567(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_567$417.$$arity = 3);
      
      Opal.def(self, '$_reduce_568', $Ruby30__reduce_568$418 = function $$_reduce_568(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$word(val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_568$418.$$arity = 3);
      
      Opal.def(self, '$_reduce_569', $Ruby30__reduce_569$419 = function $$_reduce_569(val, _values, result) {
        var self = this;

        
        result = self.builder.$words_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_569$419.$$arity = 3);
      
      Opal.def(self, '$_reduce_570', $Ruby30__reduce_570$420 = function $$_reduce_570(val, _values, result) {
        var self = this;

        
        result = self.builder.$symbols_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_570$420.$$arity = 3);
      
      Opal.def(self, '$_reduce_571', $Ruby30__reduce_571$421 = function $$_reduce_571(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_571$421.$$arity = 3);
      
      Opal.def(self, '$_reduce_572', $Ruby30__reduce_572$422 = function $$_reduce_572(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$string_internal(val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_572$422.$$arity = 3);
      
      Opal.def(self, '$_reduce_573', $Ruby30__reduce_573$423 = function $$_reduce_573(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_573$423.$$arity = 3);
      
      Opal.def(self, '$_reduce_574', $Ruby30__reduce_574$424 = function $$_reduce_574(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](self.builder.$symbol_internal(val['$[]'](1)));
        return result;
      }, $Ruby30__reduce_574$424.$$arity = 3);
      
      Opal.def(self, '$_reduce_575', $Ruby30__reduce_575$425 = function $$_reduce_575(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_575$425.$$arity = 3);
      
      Opal.def(self, '$_reduce_576', $Ruby30__reduce_576$426 = function $$_reduce_576(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_576$426.$$arity = 3);
      
      Opal.def(self, '$_reduce_577', $Ruby30__reduce_577$427 = function $$_reduce_577(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_577$427.$$arity = 3);
      
      Opal.def(self, '$_reduce_578', $Ruby30__reduce_578$428 = function $$_reduce_578(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_578$428.$$arity = 3);
      
      Opal.def(self, '$_reduce_579', $Ruby30__reduce_579$429 = function $$_reduce_579(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_579$429.$$arity = 3);
      
      Opal.def(self, '$_reduce_580', $Ruby30__reduce_580$430 = function $$_reduce_580(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, $Ruby30__reduce_580$430.$$arity = 3);
      
      Opal.def(self, '$_reduce_581', $Ruby30__reduce_581$431 = function $$_reduce_581(val, _values, result) {
        var self = this;

        
        result = self.builder.$string_internal(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_581$431.$$arity = 3);
      
      Opal.def(self, '$_reduce_582', $Ruby30__reduce_582$432 = function $$_reduce_582(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_582$432.$$arity = 3);
      
      Opal.def(self, '$_reduce_583', $Ruby30__reduce_583$433 = function $$_reduce_583(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$push(false);
        self.lexer.$cond().$push(false);
        return result;
      }, $Ruby30__reduce_583$433.$$arity = 3);
      
      Opal.def(self, '$_reduce_584', $Ruby30__reduce_584$434 = function $$_reduce_584(val, _values, result) {
        var self = this;

        
        self.lexer.$cmdarg().$pop();
        self.lexer.$cond().$pop();
        result = self.builder.$begin(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_584$434.$$arity = 3);
      
      Opal.def(self, '$_reduce_585', $Ruby30__reduce_585$435 = function $$_reduce_585(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_585$435.$$arity = 3);
      
      Opal.def(self, '$_reduce_586', $Ruby30__reduce_586$436 = function $$_reduce_586(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_586$436.$$arity = 3);
      
      Opal.def(self, '$_reduce_587', $Ruby30__reduce_587$437 = function $$_reduce_587(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_587$437.$$arity = 3);
      
      Opal.def(self, '$_reduce_591', $Ruby30__reduce_591$438 = function $$_reduce_591(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_591$438.$$arity = 3);
      
      Opal.def(self, '$_reduce_592', $Ruby30__reduce_592$439 = function $$_reduce_592(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$symbol_compose(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_592$439.$$arity = 3);
      
      Opal.def(self, '$_reduce_593', $Ruby30__reduce_593$440 = function $$_reduce_593(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_593$440.$$arity = 3);
      
      Opal.def(self, '$_reduce_594', $Ruby30__reduce_594$441 = function $$_reduce_594(val, _values, result) {
        var self = this;

        
        if ($truthy(self.builder['$respond_to?']("negate"))) {
          result = self.builder.$negate(val['$[]'](0), val['$[]'](1))
        } else {
          result = self.builder.$unary_num(val['$[]'](0), val['$[]'](1))
        };
        return result;
      }, $Ruby30__reduce_594$441.$$arity = 3);
      
      Opal.def(self, '$_reduce_595', $Ruby30__reduce_595$442 = function $$_reduce_595(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$integer(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_595$442.$$arity = 3);
      
      Opal.def(self, '$_reduce_596', $Ruby30__reduce_596$443 = function $$_reduce_596(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$float(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_596$443.$$arity = 3);
      
      Opal.def(self, '$_reduce_597', $Ruby30__reduce_597$444 = function $$_reduce_597(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$rational(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_597$444.$$arity = 3);
      
      Opal.def(self, '$_reduce_598', $Ruby30__reduce_598$445 = function $$_reduce_598(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_end"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$complex(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_598$445.$$arity = 3);
      
      Opal.def(self, '$_reduce_599', $Ruby30__reduce_599$446 = function $$_reduce_599(val, _values, result) {
        var self = this;

        
        result = self.builder.$ident(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_599$446.$$arity = 3);
      
      Opal.def(self, '$_reduce_600', $Ruby30__reduce_600$447 = function $$_reduce_600(val, _values, result) {
        var self = this;

        
        result = self.builder.$ivar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_600$447.$$arity = 3);
      
      Opal.def(self, '$_reduce_601', $Ruby30__reduce_601$448 = function $$_reduce_601(val, _values, result) {
        var self = this;

        
        result = self.builder.$gvar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_601$448.$$arity = 3);
      
      Opal.def(self, '$_reduce_602', $Ruby30__reduce_602$449 = function $$_reduce_602(val, _values, result) {
        var self = this;

        
        result = self.builder.$const(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_602$449.$$arity = 3);
      
      Opal.def(self, '$_reduce_603', $Ruby30__reduce_603$450 = function $$_reduce_603(val, _values, result) {
        var self = this;

        
        result = self.builder.$cvar(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_603$450.$$arity = 3);
      
      Opal.def(self, '$_reduce_604', $Ruby30__reduce_604$451 = function $$_reduce_604(val, _values, result) {
        var self = this;

        
        result = self.builder.$nil(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_604$451.$$arity = 3);
      
      Opal.def(self, '$_reduce_605', $Ruby30__reduce_605$452 = function $$_reduce_605(val, _values, result) {
        var self = this;

        
        result = self.builder.$self(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_605$452.$$arity = 3);
      
      Opal.def(self, '$_reduce_606', $Ruby30__reduce_606$453 = function $$_reduce_606(val, _values, result) {
        var self = this;

        
        result = self.builder.$true(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_606$453.$$arity = 3);
      
      Opal.def(self, '$_reduce_607', $Ruby30__reduce_607$454 = function $$_reduce_607(val, _values, result) {
        var self = this;

        
        result = self.builder.$false(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_607$454.$$arity = 3);
      
      Opal.def(self, '$_reduce_608', $Ruby30__reduce_608$455 = function $$_reduce_608(val, _values, result) {
        var self = this;

        
        result = self.builder.$__FILE__(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_608$455.$$arity = 3);
      
      Opal.def(self, '$_reduce_609', $Ruby30__reduce_609$456 = function $$_reduce_609(val, _values, result) {
        var self = this;

        
        result = self.builder.$__LINE__(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_609$456.$$arity = 3);
      
      Opal.def(self, '$_reduce_610', $Ruby30__reduce_610$457 = function $$_reduce_610(val, _values, result) {
        var self = this;

        
        result = self.builder.$__ENCODING__(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_610$457.$$arity = 3);
      
      Opal.def(self, '$_reduce_611', $Ruby30__reduce_611$458 = function $$_reduce_611(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_611$458.$$arity = 3);
      
      Opal.def(self, '$_reduce_612', $Ruby30__reduce_612$459 = function $$_reduce_612(val, _values, result) {
        var self = this;

        
        result = self.builder.$accessible(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_612$459.$$arity = 3);
      
      Opal.def(self, '$_reduce_613', $Ruby30__reduce_613$460 = function $$_reduce_613(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_613$460.$$arity = 3);
      
      Opal.def(self, '$_reduce_614', $Ruby30__reduce_614$461 = function $$_reduce_614(val, _values, result) {
        var self = this;

        
        result = self.builder.$assignable(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_614$461.$$arity = 3);
      
      Opal.def(self, '$_reduce_615', $Ruby30__reduce_615$462 = function $$_reduce_615(val, _values, result) {
        var self = this;

        
        result = self.builder.$nth_ref(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_615$462.$$arity = 3);
      
      Opal.def(self, '$_reduce_616', $Ruby30__reduce_616$463 = function $$_reduce_616(val, _values, result) {
        var self = this;

        
        result = self.builder.$back_ref(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_616$463.$$arity = 3);
      
      Opal.def(self, '$_reduce_617', $Ruby30__reduce_617$464 = function $$_reduce_617(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_617$464.$$arity = 3);
      
      Opal.def(self, '$_reduce_618', $Ruby30__reduce_618$465 = function $$_reduce_618(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      }, $Ruby30__reduce_618$465.$$arity = 3);
      
      Opal.def(self, '$_reduce_619', $Ruby30__reduce_619$466 = function $$_reduce_619(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby30__reduce_619$466.$$arity = 3);
      
      Opal.def(self, '$_reduce_621', $Ruby30__reduce_621$467 = function $$_reduce_621(val, _values, result) {
        var self = this;

        
        result = self.builder.$args(nil, [], nil);
        return result;
      }, $Ruby30__reduce_621$467.$$arity = 3);
      
      Opal.def(self, '$_reduce_622', $Ruby30__reduce_622$468 = function $$_reduce_622(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.builder.$args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_622$468.$$arity = 3);
      
      Opal.def(self, '$_reduce_623', $Ruby30__reduce_623$469 = function $$_reduce_623(val, _values, result) {
        var self = this, args = nil;

        
        args = [].concat(Opal.to_a(val['$[]'](1))).concat([self.builder.$forward_arg(val['$[]'](3))]);
        result = self.builder.$args(val['$[]'](0), args, val['$[]'](4));
        self.static_env.$declare_forward_args();
        return result;
      }, $Ruby30__reduce_623$469.$$arity = 3);
      
      Opal.def(self, '$_reduce_624', $Ruby30__reduce_624$470 = function $$_reduce_624(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.builder.$forward_only_args(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        self.static_env.$declare_forward_args();
        
        $writer = ["expr_value"];
        $send(self.lexer, 'state=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_624$470.$$arity = 3);
      
      Opal.def(self, '$_reduce_626', $Ruby30__reduce_626$471 = function $$_reduce_626(val, _values, result) {
        var self = this, $writer = nil;

        
        result = self.context.$in_kwarg();
        
        $writer = [true];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $Ruby30__reduce_626$471.$$arity = 3);
      
      Opal.def(self, '$_reduce_627', $Ruby30__reduce_627$472 = function $$_reduce_627(val, _values, result) {
        var self = this, $writer = nil;

        
        
        $writer = [val['$[]'](0)];
        $send(self.context, 'in_kwarg=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        result = self.builder.$args(nil, val['$[]'](1), nil);
        return result;
      }, $Ruby30__reduce_627$472.$$arity = 3);
      
      Opal.def(self, '$_reduce_628', $Ruby30__reduce_628$473 = function $$_reduce_628(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_628$473.$$arity = 3);
      
      Opal.def(self, '$_reduce_629', $Ruby30__reduce_629$474 = function $$_reduce_629(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_629$474.$$arity = 3);
      
      Opal.def(self, '$_reduce_630', $Ruby30__reduce_630$475 = function $$_reduce_630(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_630$475.$$arity = 3);
      
      Opal.def(self, '$_reduce_631', $Ruby30__reduce_631$476 = function $$_reduce_631(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_631$476.$$arity = 3);
      
      Opal.def(self, '$_reduce_632', $Ruby30__reduce_632$477 = function $$_reduce_632(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_632$477.$$arity = 3);
      
      Opal.def(self, '$_reduce_633', $Ruby30__reduce_633$478 = function $$_reduce_633(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_633$478.$$arity = 3);
      
      Opal.def(self, '$_reduce_634', $Ruby30__reduce_634$479 = function $$_reduce_634(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_634$479.$$arity = 3);
      
      Opal.def(self, '$_reduce_635', $Ruby30__reduce_635$480 = function $$_reduce_635(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](6)).$concat(val['$[]'](7));
        return result;
      }, $Ruby30__reduce_635$480.$$arity = 3);
      
      Opal.def(self, '$_reduce_636', $Ruby30__reduce_636$481 = function $$_reduce_636(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_636$481.$$arity = 3);
      
      Opal.def(self, '$_reduce_637', $Ruby30__reduce_637$482 = function $$_reduce_637(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_637$482.$$arity = 3);
      
      Opal.def(self, '$_reduce_638', $Ruby30__reduce_638$483 = function $$_reduce_638(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_638$483.$$arity = 3);
      
      Opal.def(self, '$_reduce_639', $Ruby30__reduce_639$484 = function $$_reduce_639(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_639$484.$$arity = 3);
      
      Opal.def(self, '$_reduce_640', $Ruby30__reduce_640$485 = function $$_reduce_640(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_640$485.$$arity = 3);
      
      Opal.def(self, '$_reduce_641', $Ruby30__reduce_641$486 = function $$_reduce_641(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_641$486.$$arity = 3);
      
      Opal.def(self, '$_reduce_642', $Ruby30__reduce_642$487 = function $$_reduce_642(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](4)).$concat(val['$[]'](5));
        return result;
      }, $Ruby30__reduce_642$487.$$arity = 3);
      
      Opal.def(self, '$_reduce_643', $Ruby30__reduce_643$488 = function $$_reduce_643(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_643$488.$$arity = 3);
      
      Opal.def(self, '$_reduce_644', $Ruby30__reduce_644$489 = function $$_reduce_644(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_644$489.$$arity = 3);
      
      Opal.def(self, '$_reduce_645', $Ruby30__reduce_645$490 = function $$_reduce_645(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](1));
        return result;
      }, $Ruby30__reduce_645$490.$$arity = 3);
      
      Opal.def(self, '$_reduce_646', $Ruby30__reduce_646$491 = function $$_reduce_646(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0).$concat(val['$[]'](2)).$concat(val['$[]'](3));
        return result;
      }, $Ruby30__reduce_646$491.$$arity = 3);
      
      Opal.def(self, '$_reduce_647', $Ruby30__reduce_647$492 = function $$_reduce_647(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_647$492.$$arity = 3);
      
      Opal.def(self, '$_reduce_648', $Ruby30__reduce_648$493 = function $$_reduce_648(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_648$493.$$arity = 3);
      
      Opal.def(self, '$_reduce_649', $Ruby30__reduce_649$494 = function $$_reduce_649(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_649$494.$$arity = 3);
      
      Opal.def(self, '$_reduce_650', $Ruby30__reduce_650$495 = function $$_reduce_650(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_const", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_650$495.$$arity = 3);
      
      Opal.def(self, '$_reduce_651', $Ruby30__reduce_651$496 = function $$_reduce_651(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_ivar", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_651$496.$$arity = 3);
      
      Opal.def(self, '$_reduce_652', $Ruby30__reduce_652$497 = function $$_reduce_652(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_gvar", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_652$497.$$arity = 3);
      
      Opal.def(self, '$_reduce_653', $Ruby30__reduce_653$498 = function $$_reduce_653(val, _values, result) {
        var self = this;

        
        self.$diagnostic("error", "argument_cvar", nil, val['$[]'](0));
        return result;
      }, $Ruby30__reduce_653$498.$$arity = 3);
      
      Opal.def(self, '$_reduce_655', $Ruby30__reduce_655$499 = function $$_reduce_655(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        self.max_numparam_stack['$has_ordinary_params!']();
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_655$499.$$arity = 3);
      
      Opal.def(self, '$_reduce_656', $Ruby30__reduce_656$500 = function $$_reduce_656(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_656$500.$$arity = 3);
      
      Opal.def(self, '$_reduce_657', $Ruby30__reduce_657$501 = function $$_reduce_657(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$arg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_657$501.$$arity = 3);
      
      Opal.def(self, '$_reduce_658', $Ruby30__reduce_658$502 = function $$_reduce_658(val, _values, result) {
        var self = this;

        
        result = self.builder.$multi_lhs(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_658$502.$$arity = 3);
      
      Opal.def(self, '$_reduce_659', $Ruby30__reduce_659$503 = function $$_reduce_659(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_659$503.$$arity = 3);
      
      Opal.def(self, '$_reduce_660', $Ruby30__reduce_660$504 = function $$_reduce_660(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_660$504.$$arity = 3);
      
      Opal.def(self, '$_reduce_661', $Ruby30__reduce_661$505 = function $$_reduce_661(val, _values, result) {
        var self = this;

        
        self.$check_kwarg_name(val['$[]'](0));
        self.static_env.$declare(val['$[]'](0)['$[]'](0));
        self.max_numparam_stack['$has_ordinary_params!']();
        self.current_arg_stack.$set(val['$[]'](0)['$[]'](0));
        result = val['$[]'](0);
        return result;
      }, $Ruby30__reduce_661$505.$$arity = 3);
      
      Opal.def(self, '$_reduce_662', $Ruby30__reduce_662$506 = function $$_reduce_662(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(nil);
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_662$506.$$arity = 3);
      
      Opal.def(self, '$_reduce_663', $Ruby30__reduce_663$507 = function $$_reduce_663(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(nil);
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_663$507.$$arity = 3);
      
      Opal.def(self, '$_reduce_664', $Ruby30__reduce_664$508 = function $$_reduce_664(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_664$508.$$arity = 3);
      
      Opal.def(self, '$_reduce_665', $Ruby30__reduce_665$509 = function $$_reduce_665(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwarg(val['$[]'](0));
        return result;
      }, $Ruby30__reduce_665$509.$$arity = 3);
      
      Opal.def(self, '$_reduce_666', $Ruby30__reduce_666$510 = function $$_reduce_666(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_666$510.$$arity = 3);
      
      Opal.def(self, '$_reduce_667', $Ruby30__reduce_667$511 = function $$_reduce_667(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_667$511.$$arity = 3);
      
      Opal.def(self, '$_reduce_668', $Ruby30__reduce_668$512 = function $$_reduce_668(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_668$512.$$arity = 3);
      
      Opal.def(self, '$_reduce_669', $Ruby30__reduce_669$513 = function $$_reduce_669(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_669$513.$$arity = 3);
      
      Opal.def(self, '$_reduce_672', $Ruby30__reduce_672$514 = function $$_reduce_672(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwnilarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_672$514.$$arity = 3);
      
      Opal.def(self, '$_reduce_673', $Ruby30__reduce_673$515 = function $$_reduce_673(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$kwrestarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_673$515.$$arity = 3);
      
      Opal.def(self, '$_reduce_674', $Ruby30__reduce_674$516 = function $$_reduce_674(val, _values, result) {
        var self = this;

        
        result = [self.builder.$kwrestarg(val['$[]'](0))];
        return result;
      }, $Ruby30__reduce_674$516.$$arity = 3);
      
      Opal.def(self, '$_reduce_675', $Ruby30__reduce_675$517 = function $$_reduce_675(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_675$517.$$arity = 3);
      
      Opal.def(self, '$_reduce_676', $Ruby30__reduce_676$518 = function $$_reduce_676(val, _values, result) {
        var self = this;

        
        self.current_arg_stack.$set(0);
        result = self.builder.$optarg(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_676$518.$$arity = 3);
      
      Opal.def(self, '$_reduce_677', $Ruby30__reduce_677$519 = function $$_reduce_677(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_677$519.$$arity = 3);
      
      Opal.def(self, '$_reduce_678', $Ruby30__reduce_678$520 = function $$_reduce_678(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_678$520.$$arity = 3);
      
      Opal.def(self, '$_reduce_679', $Ruby30__reduce_679$521 = function $$_reduce_679(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_679$521.$$arity = 3);
      
      Opal.def(self, '$_reduce_680', $Ruby30__reduce_680$522 = function $$_reduce_680(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_680$522.$$arity = 3);
      
      Opal.def(self, '$_reduce_683', $Ruby30__reduce_683$523 = function $$_reduce_683(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = [self.builder.$restarg(val['$[]'](0), val['$[]'](1))];
        return result;
      }, $Ruby30__reduce_683$523.$$arity = 3);
      
      Opal.def(self, '$_reduce_684', $Ruby30__reduce_684$524 = function $$_reduce_684(val, _values, result) {
        var self = this;

        
        result = [self.builder.$restarg(val['$[]'](0))];
        return result;
      }, $Ruby30__reduce_684$524.$$arity = 3);
      
      Opal.def(self, '$_reduce_687', $Ruby30__reduce_687$525 = function $$_reduce_687(val, _values, result) {
        var self = this;

        
        self.static_env.$declare(val['$[]'](1)['$[]'](0));
        result = self.builder.$blockarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_687$525.$$arity = 3);
      
      Opal.def(self, '$_reduce_688', $Ruby30__reduce_688$526 = function $$_reduce_688(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](1)];
        return result;
      }, $Ruby30__reduce_688$526.$$arity = 3);
      
      Opal.def(self, '$_reduce_689', $Ruby30__reduce_689$527 = function $$_reduce_689(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_689$527.$$arity = 3);
      
      Opal.def(self, '$_reduce_691', $Ruby30__reduce_691$528 = function $$_reduce_691(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_691$528.$$arity = 3);
      
      Opal.def(self, '$_reduce_692', $Ruby30__reduce_692$529 = function $$_reduce_692(val, _values, result) {
        var self = this;

        
        result = [];
        return result;
      }, $Ruby30__reduce_692$529.$$arity = 3);
      
      Opal.def(self, '$_reduce_694', $Ruby30__reduce_694$530 = function $$_reduce_694(val, _values, result) {
        var self = this;

        
        result = [val['$[]'](0)];
        return result;
      }, $Ruby30__reduce_694$530.$$arity = 3);
      
      Opal.def(self, '$_reduce_695', $Ruby30__reduce_695$531 = function $$_reduce_695(val, _values, result) {
        var self = this;

        
        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, $Ruby30__reduce_695$531.$$arity = 3);
      
      Opal.def(self, '$_reduce_696', $Ruby30__reduce_696$532 = function $$_reduce_696(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, $Ruby30__reduce_696$532.$$arity = 3);
      
      Opal.def(self, '$_reduce_697', $Ruby30__reduce_697$533 = function $$_reduce_697(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_keyword(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_697$533.$$arity = 3);
      
      Opal.def(self, '$_reduce_698', $Ruby30__reduce_698$534 = function $$_reduce_698(val, _values, result) {
        var self = this;

        
        result = self.builder.$pair_quoted(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, $Ruby30__reduce_698$534.$$arity = 3);
      
      Opal.def(self, '$_reduce_699', $Ruby30__reduce_699$535 = function $$_reduce_699(val, _values, result) {
        var self = this;

        
        result = self.builder.$kwsplat(val['$[]'](0), val['$[]'](1));
        return result;
      }, $Ruby30__reduce_699$535.$$arity = 3);
      
      Opal.def(self, '$_reduce_712', $Ruby30__reduce_712$536 = function $$_reduce_712(val, _values, result) {
        var self = this;

        
        result = ["dot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby30__reduce_712$536.$$arity = 3);
      
      Opal.def(self, '$_reduce_713', $Ruby30__reduce_713$537 = function $$_reduce_713(val, _values, result) {
        var self = this;

        
        result = ["anddot", val['$[]'](0)['$[]'](1)];
        return result;
      }, $Ruby30__reduce_713$537.$$arity = 3);
      
      Opal.def(self, '$_reduce_718', $Ruby30__reduce_718$538 = function $$_reduce_718(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_718$538.$$arity = 3);
      
      Opal.def(self, '$_reduce_719', $Ruby30__reduce_719$539 = function $$_reduce_719(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_719$539.$$arity = 3);
      
      Opal.def(self, '$_reduce_720', $Ruby30__reduce_720$540 = function $$_reduce_720(val, _values, result) {
        var self = this;

        
        result = val['$[]'](1);
        return result;
      }, $Ruby30__reduce_720$540.$$arity = 3);
      
      Opal.def(self, '$_reduce_724', $Ruby30__reduce_724$541 = function $$_reduce_724(val, _values, result) {
        var self = this;

        
        self.$yyerrok();
        return result;
      }, $Ruby30__reduce_724$541.$$arity = 3);
      
      Opal.def(self, '$_reduce_728', $Ruby30__reduce_728$542 = function $$_reduce_728(val, _values, result) {
        var self = this;

        
        result = nil;
        return result;
      }, $Ruby30__reduce_728$542.$$arity = 3);
      return (Opal.def(self, '$_reduce_none', $Ruby30__reduce_none$543 = function $$_reduce_none(val, _values, result) {
        var self = this;

        return val['$[]'](0)
      }, $Ruby30__reduce_none$543.$$arity = 3), nil) && '_reduce_none';
    })($nesting[0], $$$($$($nesting, 'Parser'), 'Base'), $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/ast/builder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$emit_lambda=', '$-', '$new']);
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby30");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Builder');

        var $nesting = [self].concat($parent_nesting), $Builder_n$1, $writer = nil;

        
        
        $writer = [true];
        $send(self, 'emit_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return (Opal.def(self, '$n', $Builder_n$1 = function $$n(type, children, location) {
          var self = this;

          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": location}))
        }, $Builder_n$1.$$arity = 3), nil) && 'n';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Builders'), 'Default'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/base"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $alias = Opal.alias, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$new', '$current_node', '$loc', '$+', '$stmts_of', '$begin_with_stmts', '$nil?', '$include?', '$type', '$children', '$length', '$===', '$[]', '$s', '$attr_accessor', '$current_node=', '$-', '$location=', '$raise']);
  
  self.$require("parser");
  self.$require("opal/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_s$9, $Base_s$10, $Base_prepend_to_body$11, $Base_append_to_body$12, $Base_stmts_of$13, $Base_begin_with_stmts$14, $Base_process$15, $Base_error$16;

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DummyLocation');

          var $nesting = [self].concat($parent_nesting), $DummyLocation_node$eq$1, $DummyLocation_expression$2, $DummyLocation_begin_pos$3, $DummyLocation_end_pos$4, $DummyLocation_source$5, $DummyLocation_line$6, $DummyLocation_column$7, $DummyLocation_last_line$8;

          
          
          Opal.def(self, '$node=', $DummyLocation_node$eq$1 = function($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return nil;
          }, $DummyLocation_node$eq$1.$$arity = -1);
          
          Opal.def(self, '$expression', $DummyLocation_expression$2 = function $$expression() {
            var self = this;

            return self
          }, $DummyLocation_expression$2.$$arity = 0);
          
          Opal.def(self, '$begin_pos', $DummyLocation_begin_pos$3 = function $$begin_pos() {
            var self = this;

            return 0
          }, $DummyLocation_begin_pos$3.$$arity = 0);
          
          Opal.def(self, '$end_pos', $DummyLocation_end_pos$4 = function $$end_pos() {
            var self = this;

            return 0
          }, $DummyLocation_end_pos$4.$$arity = 0);
          
          Opal.def(self, '$source', $DummyLocation_source$5 = function $$source() {
            var self = this;

            return ""
          }, $DummyLocation_source$5.$$arity = 0);
          
          Opal.def(self, '$line', $DummyLocation_line$6 = function $$line() {
            var self = this;

            return 0
          }, $DummyLocation_line$6.$$arity = 0);
          
          Opal.def(self, '$column', $DummyLocation_column$7 = function $$column() {
            var self = this;

            return 0
          }, $DummyLocation_column$7.$$arity = 0);
          return (Opal.def(self, '$last_line', $DummyLocation_last_line$8 = function $$last_line() {
            var self = this;

            return $$$($$($nesting, 'Float'), 'INFINITY')
          }, $DummyLocation_last_line$8.$$arity = 0), nil) && 'last_line';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'DUMMY_LOCATION', $$($nesting, 'DummyLocation').$new());
        
        Opal.def(self, '$s', $Base_s$9 = function $$s(type, $a) {
          var $post_args, children, self = this, loc = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          loc = (function() {if ($truthy(self.$current_node())) {
            return self.$current_node().$loc()
          } else {
            return $$($nesting, 'DUMMY_LOCATION')
          }; return nil; })();
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": loc}));
        }, $Base_s$9.$$arity = -2);
        Opal.defs(self, '$s', $Base_s$10 = function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": $$($nesting, 'DUMMY_LOCATION')}));
        }, $Base_s$10.$$arity = -2);
        $alias(self, "on_iter", "process_regular_node");
        $alias(self, "on_top", "process_regular_node");
        $alias(self, "on_zsuper", "process_regular_node");
        $alias(self, "on_jscall", "on_send");
        $alias(self, "on_jsattr", "process_regular_node");
        $alias(self, "on_jsattrasgn", "process_regular_node");
        $alias(self, "on_kwsplat", "process_regular_node");
        
        Opal.def(self, '$prepend_to_body', $Base_prepend_to_body$11 = function $$prepend_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(node), self.$stmts_of(body));
          return self.$begin_with_stmts(stmts);
        }, $Base_prepend_to_body$11.$$arity = 2);
        
        Opal.def(self, '$append_to_body', $Base_append_to_body$12 = function $$append_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(body), self.$stmts_of(node));
          return self.$begin_with_stmts(stmts);
        }, $Base_append_to_body$12.$$arity = 2);
        
        Opal.def(self, '$stmts_of', $Base_stmts_of$13 = function $$stmts_of(node) {
          var self = this;

          if ($truthy(node['$nil?']())) {
            return []
          } else if ($truthy(["begin", "kwbegin"]['$include?'](node.$type()))) {
            return node.$children()
          } else {
            return [node]
          }
        }, $Base_stmts_of$13.$$arity = 1);
        
        Opal.def(self, '$begin_with_stmts', $Base_begin_with_stmts$14 = function $$begin_with_stmts(stmts) {
          var self = this, $case = nil;

          return (function() {$case = stmts.$length();
          if ((0)['$===']($case)) {return nil}
          else if ((1)['$===']($case)) {return stmts['$[]'](0)}
          else {return $send(self, 's', ["begin"].concat(Opal.to_a(stmts)))}})()
        }, $Base_begin_with_stmts$14.$$arity = 1);
        self.$attr_accessor("current_node");
        
        Opal.def(self, '$process', $Base_process$15 = function $$process(node) {
          var $iter = $Base_process$15.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Base_process$15.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return (function() { try {
          
          
          $writer = [node];
          $send(self, 'current_node=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send2(self, $find_super(self, 'process', $Base_process$15, false, true), 'process', $zuper, $iter);
          } finally {
            (($writer = [nil]), $send(self, 'current_node=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          }; })()
        }, $Base_process$15.$$arity = 1);
        return (Opal.def(self, '$error', $Base_error$16 = function $$error(msg) {
          var self = this, error = nil, $writer = nil;

          
          error = $$$($$$('::', 'Opal'), 'RewritingError').$new(msg);
          if ($truthy(self.$current_node())) {
            
            $writer = [self.$current_node().$loc()];
            $send(error, 'location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return self.$raise(error);
        }, $Base_error$16.$$arity = 1), nil) && 'error';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/opal_engine_check"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$children', '$skip_check_present?', '$process', '$s', '$skip_check_present_not?', '$==']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $OpalEngineCheck_on_if$1, $OpalEngineCheck_skip_check_present$ques$2, $OpalEngineCheck_skip_check_present_not$ques$3;

        
        
        Opal.def(self, '$on_if', $OpalEngineCheck_on_if$1 = function $$on_if(node) {
          var $a, $iter = $OpalEngineCheck_on_if$1.$$p, $yield = $iter || nil, self = this, test = nil, true_body = nil, false_body = nil, $ret_or_1 = nil, $ret_or_2 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $OpalEngineCheck_on_if$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            return self.$process((function() {if ($truthy(($ret_or_1 = true_body))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else if ($truthy(self['$skip_check_present_not?'](test))) {
            return self.$process((function() {if ($truthy(($ret_or_2 = false_body))) {
              return $ret_or_2
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else {
            return $send2(self, $find_super(self, 'on_if', $OpalEngineCheck_on_if$1, false, true), 'on_if', $zuper, $iter)
          };
        }, $OpalEngineCheck_on_if$1.$$arity = 1);
        
        Opal.def(self, '$skip_check_present?', $OpalEngineCheck_skip_check_present$ques$2 = function(test) {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK'))))) {
            return $ret_or_3
          } else {
            return test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK'))
          }
        }, $OpalEngineCheck_skip_check_present$ques$2.$$arity = 1);
        
        Opal.def(self, '$skip_check_present_not?', $OpalEngineCheck_skip_check_present_not$ques$3 = function(test) {
          var self = this, $ret_or_4 = nil;

          if ($truthy(($ret_or_4 = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK_NOT'))))) {
            return $ret_or_4
          } else {
            return test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK_NOT'))
          }
        }, $OpalEngineCheck_skip_check_present_not$ques$3.$$arity = 1);
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/for_rewriter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$+', '$find', '$map', '$s', '$next_tmp', '$class', '$type', '$===', '$<<', '$prepend_to_body', '$process', '$attr_reader', '$new', '$to_a', '$result']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForRewriter');

        var $nesting = [self].concat($parent_nesting), $ForRewriter_reset_tmp_counter$excl$1, $ForRewriter_next_tmp$2, $ForRewriter_on_for$3;

        
        Opal.defs(self, '$reset_tmp_counter!', $ForRewriter_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (self.counter = 0)
        }, $ForRewriter_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$next_tmp', $ForRewriter_next_tmp$2 = function $$next_tmp() {
          var self = this, $ret_or_1 = nil;
          if (self.counter == null) self.counter = nil;

          
          self.counter = (function() {if ($truthy(($ret_or_1 = self.counter))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$for_tmp" + (self.counter);
        }, $ForRewriter_next_tmp$2.$$arity = 0);
        
        Opal.def(self, '$on_for', $ForRewriter_on_for$3 = function $$on_for(node) {
          var $a, $$4, self = this, loop_variable = nil, iterating_value = nil, loop_body = nil, iterating_lvars = nil, lvars_declared_in_body = nil, outer_assigns = nil, tmp_loop_variable = nil, get_tmp_loop_variable = nil, loop_variable_assignment = nil, $case = nil;

          
          $a = [].concat(Opal.to_a(node)), (loop_variable = ($a[0] == null ? nil : $a[0])), (iterating_value = ($a[1] == null ? nil : $a[1])), (loop_body = ($a[2] == null ? nil : $a[2])), $a;
          iterating_lvars = $$($nesting, 'LocalVariableAssigns').$find(loop_variable);
          lvars_declared_in_body = $$($nesting, 'LocalVariableAssigns').$find(loop_body);
          outer_assigns = $send($rb_plus(iterating_lvars, lvars_declared_in_body), 'map', [], ($$4 = function(lvar_name){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (lvar_name == null) {
              lvar_name = nil;
            };
            return self.$s("lvdeclare", lvar_name);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          tmp_loop_variable = self.$class().$next_tmp();
          get_tmp_loop_variable = self.$s("js_tmp", tmp_loop_variable);
          loop_variable_assignment = (function() {$case = loop_variable.$type();
          if ("mlhs"['$===']($case)) {return self.$s("masgn", loop_variable, get_tmp_loop_variable)}
          else {return loop_variable['$<<'](get_tmp_loop_variable)}})();
          loop_body = self.$prepend_to_body(loop_body, loop_variable_assignment);
          node = self.$s("send", iterating_value, "each", self.$s("iter", self.$s("args", self.$s("arg", tmp_loop_variable)), self.$process(loop_body)));
          return $send(self, 's', ["begin"].concat(Opal.to_a(outer_assigns)).concat([node]));
        }, $ForRewriter_on_for$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'LocalVariableAssigns');

          var $nesting = [self].concat($parent_nesting), $LocalVariableAssigns_find$5, $LocalVariableAssigns_initialize$6, $LocalVariableAssigns_on_lvasgn$7;

          
          self.$attr_reader("result");
          Opal.defs(self, '$find', $LocalVariableAssigns_find$5 = function $$find(node) {
            var self = this, processor = nil;

            
            processor = self.$new();
            processor.$process(node);
            return processor.$result().$to_a();
          }, $LocalVariableAssigns_find$5.$$arity = 1);
          
          Opal.def(self, '$initialize', $LocalVariableAssigns_initialize$6 = function $$initialize() {
            var self = this;

            return (self.result = $$($nesting, 'Set').$new())
          }, $LocalVariableAssigns_initialize$6.$$arity = 0);
          return (Opal.def(self, '$on_lvasgn', $LocalVariableAssigns_on_lvasgn$7 = function $$on_lvasgn(node) {
            var $a, $iter = $LocalVariableAssigns_on_lvasgn$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $LocalVariableAssigns_on_lvasgn$7.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            self.$result()['$<<'](name);
            return $send2(self, $find_super(self, 'on_lvasgn', $LocalVariableAssigns_on_lvasgn$7, false, true), 'on_lvasgn', $zuper, $iter);
          }, $LocalVariableAssigns_on_lvasgn$7.$$arity = 1), nil) && 'on_lvasgn';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/explicit_writer_return"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$=~', '$to_s', '$==', '$process_all', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExplicitWriterReturn');

        var $nesting = [self].concat($parent_nesting), $ExplicitWriterReturn_initialize$1, $ExplicitWriterReturn_on_send$2, $ExplicitWriterReturn_on_masgn$3;

        self.$$prototype.in_masgn = nil;
        
        
        Opal.def(self, '$initialize', $ExplicitWriterReturn_initialize$1 = function $$initialize() {
          var self = this;

          return (self.in_masgn = false)
        }, $ExplicitWriterReturn_initialize$1.$$arity = 0);
        Opal.const_set($nesting[0], 'TMP_NAME', "$writer");
        Opal.const_set($nesting[0], 'GET_ARGS_NODE', self.$s("lvar", $$($nesting, 'TMP_NAME')));
        Opal.const_set($nesting[0], 'RETURN_ARGS_NODE', self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("send", self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("str", "length")), "-", self.$s("int", 1))));
        
        Opal.def(self, '$on_send', $ExplicitWriterReturn_on_send$2 = function $$on_send(node) {
          var $a, $iter = $ExplicitWriterReturn_on_send$2.$$p, $yield = $iter || nil, self = this, recv = nil, method_name = nil, args = nil, $ret_or_1 = nil, set_args_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_send$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.in_masgn)) {
            return $send2(self, $find_super(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)};
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy((function() {if ($truthy(($ret_or_1 = method_name.$to_s()['$=~'](Opal.regexp([$$($nesting, 'REGEXP_START'), "\\w+=", $$($nesting, 'REGEXP_END')]))))) {
            return $ret_or_1
          } else {
            return method_name.$to_s()['$==']("[]=")
          }; return nil; })())) {
            
            set_args_node = self.$s("lvasgn", $$($nesting, 'TMP_NAME'), $send(self, 's', ["array"].concat(Opal.to_a(self.$process_all(args)))));
            return self.$s("begin", set_args_node, node.$updated(nil, [recv, method_name, self.$s("splat", $$($nesting, 'GET_ARGS_NODE'))]), $$($nesting, 'RETURN_ARGS_NODE'));
          } else {
            return $send2(self, $find_super(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)
          };
        }, $ExplicitWriterReturn_on_send$2.$$arity = 1);
        return (Opal.def(self, '$on_masgn', $ExplicitWriterReturn_on_masgn$3 = function $$on_masgn(node) {
          var $iter = $ExplicitWriterReturn_on_masgn$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_masgn$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.in_masgn = true;
          result = $send2(self, $find_super(self, 'on_masgn', $ExplicitWriterReturn_on_masgn$3, false, true), 'on_masgn', $zuper, $iter);
          self.in_masgn = false;
          return result;
        }, $ExplicitWriterReturn_on_masgn$3.$$arity = 1), nil) && 'on_masgn';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', "^");
    Opal.const_set($nesting[0], 'REGEXP_END', "$");
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new("" + "[^" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    return Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new("" + ($$($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/js_reserved_words"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$freeze', '$=~', '$!', '$valid_name?', '$class', '$to_sym', '$valid_ivar_name?', '$[]', '$to_s', '$updated', '$fix_var_name', '$fix_ivar_name']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsReservedWords');

        var $nesting = [self].concat($parent_nesting), $JsReservedWords_valid_name$ques$1, $JsReservedWords_valid_ivar_name$ques$2, $JsReservedWords_fix_var_name$3, $JsReservedWords_fix_ivar_name$4, $JsReservedWords_on_lvar$5, $JsReservedWords_on_lvasgn$6, $JsReservedWords_on_ivar$7, $JsReservedWords_on_ivasgn$8, $JsReservedWords_on_restarg$9, $JsReservedWords_on_argument$10;

        
        Opal.const_set($nesting[0], 'ES51_RESERVED_WORD', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'ES3_RESERVED_WORD_EXCLUSIVE', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_METHODS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:hasOwnProperty|valueOf)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'IMMUTABLE_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:NaN|Infinity|undefined)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'BASIC_IDENTIFIER_RULES', Opal.regexp([$$($nesting, 'REGEXP_START'), "[$_a-z][$_a-z\\d]*", $$($nesting, 'REGEXP_END')], 'i').$freeze());
        Opal.const_set($nesting[0], 'RESERVED_FUNCTION_NAMES', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:Array)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.defs(self, '$valid_name?', $JsReservedWords_valid_name$ques$1 = function(name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = $$($nesting, 'BASIC_IDENTIFIER_RULES')['$=~'](name)))) {
            return (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = $$($nesting, 'ES51_RESERVED_WORD')['$=~'](name)))) {
              return $ret_or_3
            } else {
              return $$($nesting, 'ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name)
            }; return nil; })()))) {
              return $ret_or_2
            } else {
              return $$($nesting, 'IMMUTABLE_PROPS')['$=~'](name)
            }; return nil; })()['$!']()
          } else {
            return $ret_or_1
          }
        }, $JsReservedWords_valid_name$ques$1.$$arity = 1);
        Opal.defs(self, '$valid_ivar_name?', $JsReservedWords_valid_ivar_name$ques$2 = function(name) {
          var self = this, $ret_or_4 = nil;

          return (function() {if ($truthy(($ret_or_4 = $$($nesting, 'PROTO_SPECIAL_PROPS')['$=~'](name)))) {
            return $ret_or_4
          } else {
            return $$($nesting, 'PROTO_SPECIAL_METHODS')['$=~'](name)
          }; return nil; })()['$!']()
        }, $JsReservedWords_valid_ivar_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$fix_var_name', $JsReservedWords_fix_var_name$3 = function $$fix_var_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_name?'](name))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_var_name$3.$$arity = 1);
        
        Opal.def(self, '$fix_ivar_name', $JsReservedWords_fix_ivar_name$4 = function $$fix_ivar_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_ivar_name?'](name.$to_s()['$[]']($range(1, -1, false))))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_ivar_name$4.$$arity = 1);
        
        Opal.def(self, '$on_lvar', $JsReservedWords_on_lvar$5 = function $$on_lvar(node) {
          var $a, $iter = $JsReservedWords_on_lvar$5.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_lvar$5.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_var_name(name)]);
          return $send2(self, $find_super(self, 'on_lvar', $JsReservedWords_on_lvar$5, false, true), 'on_lvar', [node], null);
        }, $JsReservedWords_on_lvar$5.$$arity = 1);
        
        Opal.def(self, '$on_lvasgn', $JsReservedWords_on_lvasgn$6 = function $$on_lvasgn(node) {
          var $a, $iter = $JsReservedWords_on_lvasgn$6.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_lvasgn$6.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_var_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_var_name(name)])
          }; return nil; })();
          return $send2(self, $find_super(self, 'on_lvasgn', $JsReservedWords_on_lvasgn$6, false, true), 'on_lvasgn', [node], null);
        }, $JsReservedWords_on_lvasgn$6.$$arity = 1);
        
        Opal.def(self, '$on_ivar', $JsReservedWords_on_ivar$7 = function $$on_ivar(node) {
          var $a, $iter = $JsReservedWords_on_ivar$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_ivar$7.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_ivar_name(name)]);
          return $send2(self, $find_super(self, 'on_ivar', $JsReservedWords_on_ivar$7, false, true), 'on_ivar', [node], null);
        }, $JsReservedWords_on_ivar$7.$$arity = 1);
        
        Opal.def(self, '$on_ivasgn', $JsReservedWords_on_ivasgn$8 = function $$on_ivasgn(node) {
          var $a, $iter = $JsReservedWords_on_ivasgn$8.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_ivasgn$8.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_ivar_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_ivar_name(name)])
          }; return nil; })();
          return $send2(self, $find_super(self, 'on_ivasgn', $JsReservedWords_on_ivasgn$8, false, true), 'on_ivasgn', [node], null);
        }, $JsReservedWords_on_ivasgn$8.$$arity = 1);
        
        Opal.def(self, '$on_restarg', $JsReservedWords_on_restarg$9 = function $$on_restarg(node) {
          var $a, self = this, name = nil, _ = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(name)) {
            node = node.$updated(nil, [self.$fix_var_name(name)], $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}))};
          return node;
        }, $JsReservedWords_on_restarg$9.$$arity = 1);
        return (Opal.def(self, '$on_argument', $JsReservedWords_on_argument$10 = function $$on_argument(node) {
          var $a, $iter = $JsReservedWords_on_argument$10.$$p, $yield = $iter || nil, self = this, name = nil, value = nil, fixed_name = nil, new_children = nil;

          if ($iter) $JsReservedWords_on_argument$10.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_argument', $JsReservedWords_on_argument$10, false, true), 'on_argument', [node], null);
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          fixed_name = self.$fix_var_name(name);
          new_children = (function() {if ($truthy(value)) {
            return [fixed_name, value]
          } else {
            return [fixed_name]
          }; return nil; })();
          return node.$updated(nil, new_children, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}));
        }, $JsReservedWords_on_argument$10.$$arity = 1), nil) && 'on_argument';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/block_to_iter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$s', '$updated', '$+', '$children']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockToIter');

        var $nesting = [self].concat($parent_nesting), $BlockToIter_on_block$1;

        return (Opal.def(self, '$on_block', $BlockToIter_on_block$1 = function $$on_block(node) {
          var $a, $iter = $BlockToIter_on_block$1.$$p, $yield = $iter || nil, self = this, recvr = nil, args = nil, body = nil, iter_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BlockToIter_on_block$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a($send2(self, $find_super(self, 'on_block', $BlockToIter_on_block$1, false, true), 'on_block', $zuper, $iter))), (recvr = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          iter_node = self.$s("iter", args, body);
          return recvr.$updated(nil, $rb_plus(recvr.$children(), [iter_node]));
        }, $BlockToIter_on_block$1.$$arity = 1), nil) && 'on_block'
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/dot_js_syntax"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$type', '$===', '$!=', '$size', '$error', '$first', '$to_js_attr_call', '$to_js_attr_assign_call', '$to_native_js_call', '$s']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DotJsSyntax');

        var $nesting = [self].concat($parent_nesting), $DotJsSyntax_on_send$1, $DotJsSyntax_to_native_js_call$2, $DotJsSyntax_to_js_attr_call$3, $DotJsSyntax_to_js_attr_assign_call$4;

        
        
        Opal.def(self, '$on_send', $DotJsSyntax_on_send$1 = function $$on_send(node) {
          var $a, $iter = $DotJsSyntax_on_send$1.$$p, $yield = $iter || nil, self = this, recv = nil, meth = nil, args = nil, $ret_or_1 = nil, recv_of_recv = nil, meth_of_recv = nil, _ = nil, $case = nil, property = nil, value = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DotJsSyntax_on_send$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy((function() {if ($truthy(($ret_or_1 = recv))) {
            return recv.$type()['$==']("send")
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            $a = [].concat(Opal.to_a(recv)), (recv_of_recv = ($a[0] == null ? nil : $a[0])), (meth_of_recv = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $a;
            if (meth_of_recv['$==']("JS")) {
              
              $case = meth;
              if ("[]"['$===']($case)) {
              if ($truthy(args.$size()['$!='](1))) {
                self.$error(".JS[:property] syntax supports only one argument")};
              property = args.$first();
              node = self.$to_js_attr_call(recv_of_recv, property);}
              else if ("[]="['$===']($case)) {
              if ($truthy(args.$size()['$!='](2))) {
                self.$error(".JS[:property]= syntax supports only two arguments")};
              $a = [].concat(Opal.to_a(args)), (property = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
              node = self.$to_js_attr_assign_call(recv_of_recv, property, value);}
              else {node = self.$to_native_js_call(recv_of_recv, meth, args)};
              return $send2(self, $find_super(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', [node], null);
            } else {
              return $send2(self, $find_super(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
            };
          } else {
            return $send2(self, $find_super(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
          };
        }, $DotJsSyntax_on_send$1.$$arity = 1);
        
        Opal.def(self, '$to_native_js_call', $DotJsSyntax_to_native_js_call$2 = function $$to_native_js_call(recv, meth, args) {
          var self = this;

          return $send(self, 's', ["jscall", recv, meth].concat(Opal.to_a(args)))
        }, $DotJsSyntax_to_native_js_call$2.$$arity = 3);
        
        Opal.def(self, '$to_js_attr_call', $DotJsSyntax_to_js_attr_call$3 = function $$to_js_attr_call(recv, property) {
          var self = this;

          return self.$s("jsattr", recv, property)
        }, $DotJsSyntax_to_js_attr_call$3.$$arity = 2);
        return (Opal.def(self, '$to_js_attr_assign_call', $DotJsSyntax_to_js_attr_assign_call$4 = function $$to_js_attr_assign_call(recv, property, value) {
          var self = this;

          return self.$s("jsattrasgn", recv, property, value)
        }, $DotJsSyntax_to_js_attr_assign_call$4.$$arity = 3), nil) && 'to_js_attr_assign_call';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/pattern_matching"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$require', '$s', '$convert_full_pattern', '$raise_no_matching_pattern_error', '$+', '$process', '$single_case_match', '$private', '$shift', '$type', '$===', '$!', '$empty?', '$!=', '$==', '$class', '$new', '$run!', '$variables', '$pattern', '$map', '$<<', '$array', '$on_literal', '$first', '$children', '$to_proc', '$method', '$each', '$to_ast', '$on_array_pattern', '$compact', '$[]']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'PatternMatching');

        var $nesting = [self].concat($parent_nesting), $PatternMatching_initialize$1, $PatternMatching_on_match_pattern$2, $PatternMatching_on_match_pattern_p$3, $PatternMatching_on_case_match$4, $PatternMatching_raise_no_matching_pattern_error$5, $PatternMatching_single_case_match$6, $PatternMatching_convert_full_pattern$7;

        self.$$prototype.depth = nil;
        
        
        Opal.def(self, '$initialize', $PatternMatching_initialize$1 = function $$initialize() {
          var $iter = $PatternMatching_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $PatternMatching_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.depth = 0;
          return $send2(self, $find_super(self, 'initialize', $PatternMatching_initialize$1, false, true), 'initialize', $zuper, $iter);
        }, $PatternMatching_initialize$1.$$arity = 0);
        
        Opal.def(self, '$on_match_pattern', $PatternMatching_on_match_pattern$2 = function $$on_match_pattern(node) {
          var $a, self = this, from = nil, pat = nil;

          
          $a = [].concat(Opal.to_a(node)), (from = ($a[0] == null ? nil : $a[0])), (pat = ($a[1] == null ? nil : $a[1])), $a;
          return self.$s("begin", self.$s("lvasgn", "$pmvar", from), self.$s("if", self.$convert_full_pattern(from, pat), nil, self.$raise_no_matching_pattern_error("$pmvar")));
        }, $PatternMatching_on_match_pattern$2.$$arity = 1);
        
        Opal.def(self, '$on_match_pattern_p', $PatternMatching_on_match_pattern_p$3 = function $$on_match_pattern_p(node) {
          var $a, self = this, from = nil, pat = nil;

          
          $a = [].concat(Opal.to_a(node)), (from = ($a[0] == null ? nil : $a[0])), (pat = ($a[1] == null ? nil : $a[1])), $a;
          return self.$s("if", self.$convert_full_pattern(from, pat), self.$s("true"), self.$s("false"));
        }, $PatternMatching_on_match_pattern_p$3.$$arity = 1);
        
        Opal.def(self, '$on_case_match', $PatternMatching_on_case_match$4 = function $$on_case_match(node) {
          var $a, $b, self = this, cmvar = nil, from = nil, cases = nil, els = nil;

          
          self.depth = $rb_plus(self.depth, 1);
          cmvar = "" + "$cmvar" + (self.depth);
          $a = [].concat(Opal.to_a(node)), (from = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (cases = $slice.call($a, 1, $b)), (els = ($a[$b] == null ? nil : $a[$b])), $a;
          if ($truthy(els)) {
            self.$process(els)
          } else {
            els = self.$raise_no_matching_pattern_error(cmvar)
          };
          return self.$s("begin", self.$s("lvasgn", cmvar, from), $send(self, 'single_case_match', [cmvar].concat(Opal.to_a(cases)).concat([els])));
        }, $PatternMatching_on_case_match$4.$$arity = 1);
        self.$private();
        
        Opal.def(self, '$raise_no_matching_pattern_error', $PatternMatching_raise_no_matching_pattern_error$5 = function $$raise_no_matching_pattern_error(from) {
          var self = this;

          return self.$s("send", nil, "raise", self.$s("const", nil, "NoMatchingPatternError"), self.$s("lvar", from))
        }, $PatternMatching_raise_no_matching_pattern_error$5.$$arity = 1);
        
        Opal.def(self, '$single_case_match', $PatternMatching_single_case_match$6 = function $$single_case_match(from, $a, $b) {
          var $post_args, cases, els, $c, self = this, cas = nil, pat = nil, if_guard = nil, body = nil, guard = nil, $case = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          cases = $post_args.splice(0, $post_args.length - 1);;
          
          els = $post_args[0];
          $post_args.splice(0, 1);
          if (els == null) {
            els = nil
          };
          cas = cases.$shift();
          $c = [].concat(Opal.to_a(cas)), (pat = ($c[0] == null ? nil : $c[0])), (if_guard = ($c[1] == null ? nil : $c[1])), (body = ($c[2] == null ? nil : $c[2])), $c;
          pat = self.$convert_full_pattern(from, pat);
          if ($truthy(if_guard)) {
            
            $c = [].concat(Opal.to_a(if_guard)), (guard = ($c[0] == null ? nil : $c[0])), $c;
            $case = if_guard.$type();
            if ("if_guard"['$===']($case)) {pat = self.$s("and", pat, guard)}
            else if ("unless_guard"['$===']($case)) {pat = self.$s("and", pat, self.$s("send", guard, "!"))};};
          return self.$s("if", pat, self.$process(body), (function() {if ($truthy(cases['$empty?']()['$!']())) {
            return $send(self, 'single_case_match', [from].concat(Opal.to_a(cases)).concat([els]))
          } else if ($truthy(els['$!='](self.$s("empty_else")))) {
            return els
          } else {
            return nil
          }; return nil; })());
        }, $PatternMatching_single_case_match$6.$$arity = -3);
        
        Opal.def(self, '$convert_full_pattern', $PatternMatching_convert_full_pattern$7 = function $$convert_full_pattern(from, pat) {
          var self = this, converter = nil;

          
          if (from.$class()['$==']($$($nesting, 'Symbol'))) {
            from = self.$s("lvar", from)};
          converter = $$($nesting, 'PatternConverter').$new(pat);
          converter['$run!']();
          return self.$s("masgn", $send(self, 's', ["mlhs"].concat(Opal.to_a(converter.$variables()))), self.$s("send", self.$s("const", self.$s("cbase"), "PatternMatching"), "call", from, converter.$pattern()));
        }, $PatternMatching_convert_full_pattern$7.$$arity = 2);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PatternConverter');

          var $nesting = [self].concat($parent_nesting), $PatternConverter_initialize$8, $PatternConverter_run$excl$9, $PatternConverter_pattern$10, $PatternConverter_variables$11, $PatternConverter_on_match_var$13, $PatternConverter_on_match_as$14, $PatternConverter_on_literal$15, $PatternConverter_on_pin$16, $PatternConverter_on_match_rest$17, $PatternConverter_on_match_alt$18, $PatternConverter_on_const_pattern$19, $PatternConverter_on_array_pattern$20, $PatternConverter_on_array_pattern_with_tail$22, $PatternConverter_on_hash_pattern$23, $PatternConverter_on_find_pattern$25, $PatternConverter_array$26, $PatternConverter_to_ast$27;

          self.$$prototype.pat = self.$$prototype.outpat = self.$$prototype.variables = nil;
          
          
          Opal.def(self, '$initialize', $PatternConverter_initialize$8 = function $$initialize(pat) {
            var self = this;

            
            self.pat = pat;
            return (self.variables = []);
          }, $PatternConverter_initialize$8.$$arity = 1);
          
          Opal.def(self, '$run!', $PatternConverter_run$excl$9 = function() {
            var self = this;

            return (self.outpat = self.$process(self.pat))
          }, $PatternConverter_run$excl$9.$$arity = 0);
          
          Opal.def(self, '$pattern', $PatternConverter_pattern$10 = function $$pattern() {
            var self = this;

            return self.outpat
          }, $PatternConverter_pattern$10.$$arity = 0);
          
          Opal.def(self, '$variables', $PatternConverter_variables$11 = function $$variables() {
            var $$12, self = this;

            return $send(self.variables, 'map', [], ($$12 = function(i){var self = $$12.$$s == null ? this : $$12.$$s;

              
              
              if (i == null) {
                i = nil;
              };
              return self.$s("lvasgn", i);}, $$12.$$s = self, $$12.$$arity = 1, $$12))
          }, $PatternConverter_variables$11.$$arity = 0);
          
          Opal.def(self, '$on_match_var', $PatternConverter_on_match_var$13 = function $$on_match_var(node) {
            var $a, self = this, var$ = nil;

            
            $a = [].concat(Opal.to_a(node)), (var$ = ($a[0] == null ? nil : $a[0])), $a;
            self.variables['$<<'](var$);
            return self.$s("sym", "var");
          }, $PatternConverter_on_match_var$13.$$arity = 1);
          
          Opal.def(self, '$on_match_as', $PatternConverter_on_match_as$14 = function $$on_match_as(node) {
            var $a, self = this, pat = nil, save = nil;

            
            $a = [].concat(Opal.to_a(node)), (pat = ($a[0] == null ? nil : $a[0])), (save = ($a[1] == null ? nil : $a[1])), $a;
            self.$process(save);
            return self.$array(self.$s("sym", "save"), self.$process(pat));
          }, $PatternConverter_on_match_as$14.$$arity = 1);
          
          Opal.def(self, '$on_literal', $PatternConverter_on_literal$15 = function $$on_literal(node) {
            var self = this;

            return self.$array(self.$s("sym", "lit"), node)
          }, $PatternConverter_on_literal$15.$$arity = 1);
          $alias(self, "on_int", "on_literal");
          $alias(self, "on_float", "on_literal");
          $alias(self, "on_complex", "on_literal");
          $alias(self, "on_rational", "on_literal");
          $alias(self, "on_array", "on_literal");
          $alias(self, "on_str", "on_literal");
          $alias(self, "on_dstr", "on_literal");
          $alias(self, "on_xstr", "on_literal");
          $alias(self, "on_sym", "on_literal");
          $alias(self, "on_irange", "on_literal");
          $alias(self, "on_erange", "on_literal");
          $alias(self, "on_const", "on_literal");
          $alias(self, "on_regexp", "on_literal");
          $alias(self, "on_lambda", "on_literal");
          $alias(self, "on_begin", "on_literal");
          
          Opal.def(self, '$on_pin', $PatternConverter_on_pin$16 = function $$on_pin(node) {
            var self = this;

            return self.$on_literal(node.$children().$first())
          }, $PatternConverter_on_pin$16.$$arity = 1);
          
          Opal.def(self, '$on_match_rest', $PatternConverter_on_match_rest$17 = function $$on_match_rest(node) {
            var self = this;

            if ($truthy(node.$children()['$empty?']())) {
              return self.$array(self.$s("sym", "rest"))
            } else {
              return self.$array(self.$s("sym", "rest"), self.$process(node.$children().$first()))
            }
          }, $PatternConverter_on_match_rest$17.$$arity = 1);
          
          Opal.def(self, '$on_match_alt', $PatternConverter_on_match_alt$18 = function $$on_match_alt(node) {
            var self = this;

            return $send(self, 'array', [self.$s("sym", "any")].concat(Opal.to_a($send(node.$children(), 'map', [], self.$method("process").$to_proc()))))
          }, $PatternConverter_on_match_alt$18.$$arity = 1);
          
          Opal.def(self, '$on_const_pattern', $PatternConverter_on_const_pattern$19 = function $$on_const_pattern(node) {
            var self = this;

            return $send(self, 'array', [self.$s("sym", "all")].concat(Opal.to_a($send(node.$children(), 'map', [], self.$method("process").$to_proc()))))
          }, $PatternConverter_on_const_pattern$19.$$arity = 1);
          
          Opal.def(self, '$on_array_pattern', $PatternConverter_on_array_pattern$20 = function $$on_array_pattern(node, tail) {
            var $$21, self = this, children = nil, fixed_size = nil, array_size = nil;

            
            
            if (tail == null) {
              tail = false;
            };
            children = [].concat(Opal.to_a(node));
            if ($truthy(tail)) {
              children['$<<'](self.$s("match_rest"))};
            fixed_size = true;
            array_size = 0;
            children = $send(children, 'each', [], ($$21 = function(i){var self = $$21.$$s == null ? this : $$21.$$s, $case = nil;

              
              
              if (i == null) {
                i = nil;
              };
              return (function() {$case = i.$type();
              if ("match_rest"['$===']($case)) {return (fixed_size = false)}
              else {return (array_size = $rb_plus(array_size, 1))}})();}, $$21.$$s = self, $$21.$$arity = 1, $$21));
            return self.$array(self.$s("sym", "array"), self.$to_ast(fixed_size), self.$to_ast(array_size), self.$to_ast($send(children, 'map', [], self.$method("process").$to_proc())));
          }, $PatternConverter_on_array_pattern$20.$$arity = -2);
          
          Opal.def(self, '$on_array_pattern_with_tail', $PatternConverter_on_array_pattern_with_tail$22 = function $$on_array_pattern_with_tail(node) {
            var self = this;

            return self.$on_array_pattern(node, true)
          }, $PatternConverter_on_array_pattern_with_tail$22.$$arity = 1);
          
          Opal.def(self, '$on_hash_pattern', $PatternConverter_on_hash_pattern$23 = function $$on_hash_pattern(node) {
            var $$24, self = this, children = nil, any_size = nil;

            
            children = [].concat(Opal.to_a(node));
            any_size = (function() {if ($truthy(children['$empty?']())) {
              return self.$to_ast(false)
            } else {
              return self.$to_ast(true)
            }; return nil; })();
            children = $send(children, 'map', [], ($$24 = function(i){var self = $$24.$$s == null ? this : $$24.$$s, $case = nil;

              
              
              if (i == null) {
                i = nil;
              };
              return (function() {$case = i.$type();
              if ("pair"['$===']($case)) {return self.$array(i.$children()['$[]'](0), self.$process(i.$children()['$[]'](1)))}
              else if ("match_var"['$===']($case)) {return self.$array(self.$s("sym", i.$children()['$[]'](0)), self.$process(i))}
              else if ("match_nil_pattern"['$===']($case)) {
              any_size = self.$to_ast(false);
              return nil;}
              else if ("match_rest"['$===']($case)) {
              if ($truthy(i.$children().$first())) {
                any_size = self.$process(i.$children().$first())
              } else {
                any_size = self.$to_ast(true)
              };
              return nil;}
              else { return nil }})();}, $$24.$$s = self, $$24.$$arity = 1, $$24)).$compact();
            return self.$array(self.$s("sym", "hash"), any_size, $send(self, 'array', Opal.to_a(children)));
          }, $PatternConverter_on_hash_pattern$23.$$arity = 1);
          
          Opal.def(self, '$on_find_pattern', $PatternConverter_on_find_pattern$25 = function $$on_find_pattern(node) {
            var self = this, children = nil;

            
            children = [].concat(Opal.to_a(node));
            children = $send(children, 'map', [], self.$method("process").$to_proc());
            return self.$array(self.$s("sym", "find"), $send(self, 'array', Opal.to_a(children)));
          }, $PatternConverter_on_find_pattern$25.$$arity = 1);
          self.$private();
          
          Opal.def(self, '$array', $PatternConverter_array$26 = function $$array($a) {
            var $post_args, args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return self.$to_ast(args);
          }, $PatternConverter_array$26.$$arity = -1);
          return (Opal.def(self, '$to_ast', $PatternConverter_to_ast$27 = function $$to_ast(val) {
            var self = this, $case = nil;

            return (function() {$case = val;
            if ($$($nesting, 'Array')['$===']($case)) {return $send(self, 's', ["array"].concat(Opal.to_a(val)))}
            else if ($$($nesting, 'Integer')['$===']($case)) {return self.$s("int", val)}
            else if (true['$===']($case)) {return self.$s("true")}
            else if (false['$===']($case)) {return self.$s("false")}
            else if (nil['$===']($case)) {return self.$s("nil")}
            else { return nil }})()
          }, $PatternConverter_to_ast$27.$$arity = 1), nil) && 'to_ast';
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/logical_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $lambda = Opal.lambda, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$include?', '$==', '$[]', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LogicalOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $LogicalOperatorAssignment_reset_tmp_counter$excl$1, $LogicalOperatorAssignment_new_temp$2, $LogicalOperatorAssignment$3, $LogicalOperatorAssignment_on_or_asgn$7, $LogicalOperatorAssignment_on_and_asgn$9, $LogicalOperatorAssignment_on_defined$ques$11;

        
        Opal.defs(self, '$reset_tmp_counter!', $LogicalOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return $class_variable_set($nesting[0], '@@counter', 0)
        }, $LogicalOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $LogicalOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, self = this, $ret_or_1 = nil;

          
          $class_variable_set($nesting[0], '@@counter', (function() {if ($truthy((($a = $nesting[0].$$cvars['@@counter'], $a != null) ? 'class variable' : nil))) {
            
            if ($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@counter', false)))) {
              return $ret_or_1
            } else {
              return 0
            };
          } else {
            return 0
          }; return nil; })());
          $class_variable_set($nesting[0], '@@counter', $rb_plus($class_variable_get($nesting[0], '@@counter', false), 1));
          return "" + "$logical_op_recvr_tmp_" + ($class_variable_get($nesting[0], '@@counter', false));
        }, $LogicalOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($LogicalOperatorAssignment$3 = function(get_type, set_type){var self = $LogicalOperatorAssignment$3.$$s == null ? this : $LogicalOperatorAssignment$3.$$s, $$4;

          
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, rhs, root_type){var self = $$4.$$s == null ? this : $$4.$$s, get_node = nil, condition_node = nil, $ret_or_2 = nil, defined_node = nil;

            
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            
            if (root_type == null) {
              root_type = nil;
            };
            get_node = lhs.$updated(get_type);
            condition_node = self.$s(root_type, get_node, rhs);
            if ($truthy((function() {if ($truthy(($ret_or_2 = ["const", "cvar"]['$include?'](get_type)))) {
              return root_type['$==']("or")
            } else {
              return $ret_or_2
            }; return nil; })())) {
              
              defined_node = self.$s("defined?", get_node);
              condition_node = self.$s("if", defined_node, self.$s("begin", condition_node), rhs);};
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([condition_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $LogicalOperatorAssignment$3.$$s = self, $LogicalOperatorAssignment$3.$$arity = 2, $LogicalOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, $ret_or_3 = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_writer = nil, get_or_set = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy((function() {if ($truthy(($ret_or_3 = recvr))) {
              return recvr.$type()['$==']("send")
            } else {
              return $ret_or_3
            }; return nil; })())) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([rhs]));
            get_or_set = self.$s(root_type, call_reader, call_writer);
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, get_or_set)
            } else {
              return get_or_set
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, rhs, root_type) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_or_asgn = nil;

            
            root_type = "" + (root_type) + "_asgn";
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_or_asgn = self.$s(root_type, plain_send, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_or_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_or_asgn', $LogicalOperatorAssignment_on_or_asgn$7 = function $$on_or_asgn(node) {
          var $a, $$8, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

            return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, rhs, "or");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_or_asgn$7.$$arity = 1);
        
        Opal.def(self, '$on_and_asgn', $LogicalOperatorAssignment_on_and_asgn$9 = function $$on_and_asgn(node) {
          var $a, $$10, self = this, lhs = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

            return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$10.$$s = self, $$10.$$arity = 0, $$10)).$call(lhs, rhs, "and");
          return self.$process(result);
        }, $LogicalOperatorAssignment_on_and_asgn$9.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $LogicalOperatorAssignment_on_defined$ques$11 = function(node) {
          var $a, $iter = $LogicalOperatorAssignment_on_defined$ques$11.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $LogicalOperatorAssignment_on_defined$ques$11.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(["or_asgn", "and_asgn"]['$include?'](inner.$type()))) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, $find_super(self, 'on_defined?', $LogicalOperatorAssignment_on_defined$ques$11, false, true), 'on_defined?', [node], null)
          };
        }, $LogicalOperatorAssignment_on_defined$ques$11.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/binary_operator_assignment"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $class_variable_set = Opal.class_variable_set, $truthy = Opal.truthy, $class_variable_get = Opal.class_variable_get, $lambda = Opal.lambda, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$[]', '$==', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $BinaryOperatorAssignment_reset_tmp_counter$excl$1, $BinaryOperatorAssignment_new_temp$2, $BinaryOperatorAssignment$3, $BinaryOperatorAssignment_on_op_asgn$7, $BinaryOperatorAssignment_on_defined$ques$9;

        
        Opal.defs(self, '$reset_tmp_counter!', $BinaryOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return $class_variable_set($nesting[0], '@@counter', 0)
        }, $BinaryOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $BinaryOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, self = this, $ret_or_1 = nil;

          
          $class_variable_set($nesting[0], '@@counter', (function() {if ($truthy((($a = $nesting[0].$$cvars['@@counter'], $a != null) ? 'class variable' : nil))) {
            
            if ($truthy(($ret_or_1 = $class_variable_get($nesting[0], '@@counter', false)))) {
              return $ret_or_1
            } else {
              return 0
            };
          } else {
            return 0
          }; return nil; })());
          $class_variable_set($nesting[0], '@@counter', $rb_plus($class_variable_get($nesting[0], '@@counter', false), 1));
          return "" + "$binary_op_recvr_tmp_" + ($class_variable_get($nesting[0], '@@counter', false));
        }, $BinaryOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($BinaryOperatorAssignment$3 = function(get_type, set_type){var self = $BinaryOperatorAssignment$3.$$s == null ? this : $BinaryOperatorAssignment$3.$$s, $$4;

          
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, operation, rhs){var self = $$4.$$s == null ? this : $$4.$$s, get_node = nil, set_node = nil;

            
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (operation == null) {
              operation = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            get_node = lhs.$updated(get_type);
            set_node = self.$s("send", get_node, operation, rhs);
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([set_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $BinaryOperatorAssignment$3.$$s = self, $BinaryOperatorAssignment$3.$$arity = 2, $BinaryOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, $ret_or_2 = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_op = nil, call_writer = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy((function() {if ($truthy(($ret_or_2 = recvr))) {
              return recvr.$type()['$==']("send")
            } else {
              return $ret_or_2
            }; return nil; })())) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_op = self.$s("send", call_reader, operation, rhs);
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([call_op]));
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, call_writer)
            } else {
              return call_writer
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_op_asgn = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_op_asgn = self.$s("op_asgn", plain_send, operation, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_op_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_op_asgn', $BinaryOperatorAssignment_on_op_asgn$7 = function $$on_op_asgn(node) {
          var $a, $$8, self = this, lhs = nil, op = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

            return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, op, rhs);
          return self.$process(result);
        }, $BinaryOperatorAssignment_on_op_asgn$7.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $BinaryOperatorAssignment_on_defined$ques$9 = function(node) {
          var $a, $iter = $BinaryOperatorAssignment_on_defined$ques$9.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $BinaryOperatorAssignment_on_defined$ques$9.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if (inner.$type()['$==']("op_asgn")) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, $find_super(self, 'on_defined?', $BinaryOperatorAssignment_on_defined$ques$9, false, true), 'on_defined?', [node], null)
          };
        }, $BinaryOperatorAssignment_on_defined$ques$9.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/hashes/key_duplicates_rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$include?', '$type', '$<<', '$==', '$process_regular_node', '$updated', '$inspect', '$warn']);
  
  self.$require("opal/rewriters/base");
  self.$require("set");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Hashes');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'KeyDuplicatesRewriter');

          var $nesting = [self].concat($parent_nesting), $KeyDuplicatesRewriter_initialize$1, $KeyDuplicatesRewriter_on_hash$2, $KeyDuplicatesRewriter_on_pair$3, $KeyDuplicatesRewriter_on_kwsplat$4;

          self.$$prototype.keys = nil;
          
          
          Opal.def(self, '$initialize', $KeyDuplicatesRewriter_initialize$1 = function $$initialize() {
            var self = this;

            return (self.keys = $$($nesting, 'UniqKeysSet').$new())
          }, $KeyDuplicatesRewriter_initialize$1.$$arity = 0);
          
          Opal.def(self, '$on_hash', $KeyDuplicatesRewriter_on_hash$2 = function $$on_hash(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_hash$2.$$p, $yield = $iter || nil, self = this, previous_keys = nil;

            if ($iter) $KeyDuplicatesRewriter_on_hash$2.$$p = null;
            return (function() { try {
            
            $a = [self.keys, $$($nesting, 'UniqKeysSet').$new()], (previous_keys = $a[0]), (self.keys = $a[1]), $a;
            return $send2(self, $find_super(self, 'on_hash', $KeyDuplicatesRewriter_on_hash$2, false, true), 'on_hash', [node], null);
            } finally {
              (self.keys = previous_keys)
            }; })()
          }, $KeyDuplicatesRewriter_on_hash$2.$$arity = 1);
          
          Opal.def(self, '$on_pair', $KeyDuplicatesRewriter_on_pair$3 = function $$on_pair(node) {
            var $a, $iter = $KeyDuplicatesRewriter_on_pair$3.$$p, $yield = $iter || nil, self = this, key = nil, _value = nil;

            if ($iter) $KeyDuplicatesRewriter_on_pair$3.$$p = null;
            
            $a = [].concat(Opal.to_a(node)), (key = ($a[0] == null ? nil : $a[0])), (_value = ($a[1] == null ? nil : $a[1])), $a;
            if ($truthy(["str", "sym"]['$include?'](key.$type()))) {
              self.keys['$<<'](key)};
            return $send2(self, $find_super(self, 'on_pair', $KeyDuplicatesRewriter_on_pair$3, false, true), 'on_pair', [node], null);
          }, $KeyDuplicatesRewriter_on_pair$3.$$arity = 1);
          
          Opal.def(self, '$on_kwsplat', $KeyDuplicatesRewriter_on_kwsplat$4 = function $$on_kwsplat(node) {
            var $a, self = this, hash = nil, _ = nil;

            
            $a = [].concat(Opal.to_a(node)), (hash = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            if (hash.$type()['$==']("hash")) {
              hash = self.$process_regular_node(hash)};
            return node.$updated(nil, [hash]);
          }, $KeyDuplicatesRewriter_on_kwsplat$4.$$arity = 1);
          return (function($base, $super, $parent_nesting) {
            var self = $klass($base, $super, 'UniqKeysSet');

            var $nesting = [self].concat($parent_nesting), $UniqKeysSet_initialize$5, $UniqKeysSet_$lt$lt$6;

            self.$$prototype.set = nil;
            
            
            Opal.def(self, '$initialize', $UniqKeysSet_initialize$5 = function $$initialize() {
              var self = this;

              return (self.set = $$($nesting, 'Set').$new())
            }, $UniqKeysSet_initialize$5.$$arity = 0);
            return (Opal.def(self, '$<<', $UniqKeysSet_$lt$lt$6 = function(element) {
              var $a, self = this, key = nil, _ = nil;

              if ($truthy(self.set['$include?'](element))) {
                
                $a = [].concat(Opal.to_a(element)), (key = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
                key = (function() {if (element.$type()['$==']("str")) {
                  return key.$inspect()
                } else {
                  return "" + ":" + (key)
                }; return nil; })();
                return $$($nesting, 'Kernel').$warn("" + "warning: key " + (key) + " is duplicated and overwritten");
              } else {
                return self.set['$<<'](element)
              }
            }, $UniqKeysSet_$lt$lt$6.$$arity = 1), nil) && '<<';
          })($nesting[0], null, $nesting);
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/dump_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DumpArgs');

        var $nesting = [self].concat($parent_nesting), $DumpArgs_on_def$1, $DumpArgs_on_defs$2, $DumpArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $DumpArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $DumpArgs_on_def$1.$$p, $yield = $iter || nil, self = this, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_def$1.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $DumpArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $DumpArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $DumpArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_defs$2.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $DumpArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_defs$2.$$arity = 1);
        return (Opal.def(self, '$on_iter', $DumpArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $DumpArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_iter$3.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $DumpArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_iter$3.$$arity = 1), nil) && 'on_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/mlhs_args"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$updated', '$rewritten', '$initialization', '$s', '$prepend_to_body', '$attr_reader', '$split!', '$+', '$each', '$children', '$==', '$type', '$new_mlhs_tmp', '$process', '$<<', '$length', '$[]', '$empty?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $MlhsArgs_on_def$1, $MlhsArgs_on_defs$2, $MlhsArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $MlhsArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $MlhsArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          if ($iter) $MlhsArgs_on_def$1.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $MlhsArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_1 = body))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [mid, args, body]);
        }, $MlhsArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $MlhsArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $MlhsArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_2 = nil;

          if ($iter) $MlhsArgs_on_defs$2.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $MlhsArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_2 = body))) {
              return $ret_or_2
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [recv, mid, args, body]);
        }, $MlhsArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $MlhsArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $MlhsArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, arguments$ = nil, $ret_or_3 = nil;

          if ($iter) $MlhsArgs_on_iter$3.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $MlhsArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_3 = body))) {
              return $ret_or_3
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [args, body]);
        }, $MlhsArgs_on_iter$3.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $Arguments_initialize$4, $Arguments_reset_tmp_counter$excl$5, $Arguments_new_mlhs_tmp$6, $Arguments_split$excl$7;

          self.$$prototype.counter = self.$$prototype.args = self.$$prototype.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          Opal.def(self, '$initialize', $Arguments_initialize$4 = function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$($nesting, 'MlhsRewriter').$new();
            return self['$split!']();
          }, $Arguments_initialize$4.$$arity = 1);
          
          Opal.def(self, '$reset_tmp_counter!', $Arguments_reset_tmp_counter$excl$5 = function() {
            var self = this;

            return (self.counter = 0)
          }, $Arguments_reset_tmp_counter$excl$5.$$arity = 0);
          
          Opal.def(self, '$new_mlhs_tmp', $Arguments_new_mlhs_tmp$6 = function $$new_mlhs_tmp() {
            var self = this, $ret_or_4 = nil;

            
            self.counter = (function() {if ($truthy(($ret_or_4 = self.counter))) {
              return $ret_or_4
            } else {
              return 0
            }; return nil; })();
            self.counter = $rb_plus(self.counter, 1);
            return "" + "$mlhs_tmp" + (self.counter);
          }, $Arguments_new_mlhs_tmp$6.$$arity = 0);
          return (Opal.def(self, '$split!', $Arguments_split$excl$7 = function() {
            var $$8, self = this;

            
            $send(self.args.$children(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              if (arg.$type()['$==']("mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": var_name})})));
              } else {
                return self.rewritten['$<<'](arg)
              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
            if (self.initialization.$length()['$=='](1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            };
          }, $Arguments_split$excl$7.$$arity = 0), nil) && 'split!';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MlhsRewriter');

          var $nesting = [self].concat($parent_nesting), $MlhsRewriter_on_arg$9, $MlhsRewriter_on_restarg$10;

          
          
          Opal.def(self, '$on_arg', $MlhsRewriter_on_arg$9 = function $$on_arg(node) {
            var self = this;

            return node.$updated("lvasgn")
          }, $MlhsRewriter_on_arg$9.$$arity = 1);
          return (Opal.def(self, '$on_restarg', $MlhsRewriter_on_restarg$10 = function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          }, $MlhsRewriter_on_restarg$10.$$arity = 1), nil) && 'on_restarg';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/arguments"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$each', '$type', '$===', '$<<', '$any?', '$raise', '$!', '$nil?', '$has_any_kwargs?', '$can_inline_kwargs?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Arguments');

        var $nesting = [self].concat($parent_nesting), $Arguments_initialize$1, $Arguments_has_post_args$ques$3, $Arguments_has_any_kwargs$ques$4, $Arguments_can_inline_kwargs$ques$5;

        self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "kwnilarg", "shadowargs", "blockarg");
        
        Opal.def(self, '$initialize', $Arguments_initialize$1 = function $$initialize(args) {
          var $$2, self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.kwnilarg = false;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], ($$2 = function(arg){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil, $ret_or_1 = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

            
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("arg"['$===']($case) || "mlhs"['$===']($case)) {return (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = self.restarg))) {
              return $ret_or_1
            } else {
              return self.optargs['$any?']()
            }; return nil; })())) {
              return self.postargs
            } else {
              return self.args
            }; return nil; })()['$<<'](arg)}
            else if ("optarg"['$===']($case)) {return self.optargs['$<<'](arg)}
            else if ("restarg"['$===']($case)) {return (self.restarg = arg)}
            else if ("kwarg"['$===']($case)) {return self.kwargs['$<<'](arg)}
            else if ("kwoptarg"['$===']($case)) {return self.kwoptargs['$<<'](arg)}
            else if ("kwnilarg"['$===']($case)) {return (self.kwnilarg = true)}
            else if ("kwrestarg"['$===']($case)) {return (self.kwrestarg = arg)}
            else if ("shadowarg"['$===']($case)) {return self.shadowargs['$<<'](arg)}
            else if ("blockarg"['$===']($case)) {return (self.blockarg = arg)}
            else {return self.$raise("" + "Unsupported arg type " + (arg.$type()))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $Arguments_initialize$1.$$arity = 1);
        
        Opal.def(self, '$has_post_args?', $Arguments_has_post_args$ques$3 = function() {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.restarg['$nil?']()['$!']()))) {
            return $ret_or_3
          } else {
            return self.postargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            
            if ($truthy(($ret_or_4 = self['$has_any_kwargs?']()))) {
              return self['$can_inline_kwargs?']()['$!']()
            } else {
              return $ret_or_4
            };
          }
        }, $Arguments_has_post_args$ques$3.$$arity = 0);
        
        Opal.def(self, '$has_any_kwargs?', $Arguments_has_any_kwargs$ques$4 = function() {
          var self = this, $ret_or_5 = nil, $ret_or_6 = nil;

          if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self.kwargs['$any?']()))) {
            return $ret_or_6
          } else {
            return self.kwoptargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_5
          } else {
            return self.kwrestarg['$nil?']()['$!']()
          }
        }, $Arguments_has_any_kwargs$ques$4.$$arity = 0);
        return (Opal.def(self, '$can_inline_kwargs?', $Arguments_can_inline_kwargs$ques$5 = function() {
          var self = this, $ret_or_7 = nil, $ret_or_8 = nil;

          if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self.optargs['$empty?']()))) {
            return self.restarg['$nil?']()
          } else {
            return $ret_or_8
          }; return nil; })()))) {
            return self.postargs['$empty?']()
          } else {
            return $ret_or_7
          }
        }, $Arguments_can_inline_kwargs$ques$5.$$arity = 0), nil) && 'can_inline_kwargs?';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/inline_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$new', '$updated', '$inline', '$prepend_to_body', '$initialization', '$attr_reader', '$freeze', '$children', '$each', '$send', '$any?', '$blockarg', '$<<', '$shadowargs', '$args', '$==', '$[]', '$has_post_args?', '$length', '$has_any_kwargs?', '$can_inline_kwargs?', '$kwargs', '$kwoptargs', '$kwrestarg', '$postargs', '$optargs', '$args_to_keep', '$restarg']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $InlineArgs_on_def$1, $InlineArgs_on_defs$2, $InlineArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $InlineArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $InlineArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_def$1.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_def', $InlineArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = (function() {if ($truthy(($ret_or_1 = body))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "def"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        }, $InlineArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $InlineArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $InlineArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, $ret_or_2 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_defs$2.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_defs', $InlineArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = (function() {if ($truthy(($ret_or_2 = body))) {
            return $ret_or_2
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "defs"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        }, $InlineArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $InlineArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $InlineArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, $ret_or_3 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_iter$3.$$p = null;
          
          node = $send2(self, $find_super(self, 'on_iter', $InlineArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = (function() {if ($truthy(($ret_or_3 = body))) {
            return $ret_or_3
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "iter"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        }, $InlineArgs_on_iter$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $Initializer_initialize$4, $Initializer_extract_blockarg$6, $Initializer_initialize_shadowargs$7, $Initializer_extract_args$9, $Initializer_prepare_post_args$11, $Initializer_prepare_kwargs$12, $Initializer_extract_kwargs$13, $Initializer_extract_kwoptargs$15, $Initializer_extract_kwrestarg$17, $Initializer_extract_post_args$18, $Initializer_extract_optargs$20, $Initializer_extract_restarg$22, $Initializer_args_to_keep$23;

          self.$$prototype.initialization = self.$$prototype.args = self.$$prototype.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          Opal.const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          Opal.def(self, '$initialize', $Initializer_initialize$4 = function $$initialize(args, $kwargs) {
            var type, $$5, self = this;

            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'type')) {
              throw Opal.ArgumentError.$new('missing keyword: type');
            }
            type = $kwargs.$$smap["type"];;
            self.args = $$($nesting, 'Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            self.underscore_found = false;
            $send($$($nesting, 'STEPS'), 'each', [], ($$5 = function(step){var self = $$5.$$s == null ? this : $$5.$$s;

              
              
              if (step == null) {
                step = nil;
              };
              return self.$send(step);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          }, $Initializer_initialize$4.$$arity = 2);
          
          Opal.def(self, '$extract_blockarg', $Initializer_extract_blockarg$6 = function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_blockarg$6.$$arity = 0);
          
          Opal.def(self, '$initialize_shadowargs', $Initializer_initialize_shadowargs$7 = function $$initialize_shadowargs() {
            var $$8, self = this;

            return $send(self.args.$shadowargs(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
          }, $Initializer_initialize_shadowargs$7.$$arity = 0);
          
          Opal.def(self, '$extract_args', $Initializer_extract_args$9 = function $$extract_args() {
            var $$10, self = this;

            return $send(self.args.$args(), 'each', [], ($$10 = function(arg){var self = $$10.$$s == null ? this : $$10.$$s;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.underscore_found == null) self.underscore_found = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              if (self.type['$==']("iter")) {
                
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"));
                if (arg.$children()['$[]'](0)['$==']("_")) {
                  
                  if ($truthy(self.underscore_found)) {
                    arg = self.$s("fake_arg")};
                  self.underscore_found = true;};};
              return self.inline['$<<'](arg);}, $$10.$$s = self, $$10.$$arity = 1, $$10))
          }, $Initializer_extract_args$9.$$arity = 0);
          
          Opal.def(self, '$prepare_post_args', $Initializer_prepare_post_args$11 = function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          }, $Initializer_prepare_post_args$11.$$arity = 0);
          
          Opal.def(self, '$prepare_kwargs', $Initializer_prepare_kwargs$12 = function $$prepare_kwargs() {
            var self = this;

            
            if ($truthy(self.args['$has_any_kwargs?']())) {
            } else {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          }, $Initializer_prepare_kwargs$12.$$arity = 0);
          
          Opal.def(self, '$extract_kwargs', $Initializer_extract_kwargs$13 = function $$extract_kwargs() {
            var $$14, self = this;

            return $send(self.args.$kwargs(), 'each', [], ($$14 = function(arg){var self = $$14.$$s == null ? this : $$14.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          }, $Initializer_extract_kwargs$13.$$arity = 0);
          
          Opal.def(self, '$extract_kwoptargs', $Initializer_extract_kwoptargs$15 = function $$extract_kwoptargs() {
            var $$16, self = this;

            return $send(self.args.$kwoptargs(), 'each', [], ($$16 = function(arg){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.initialization == null) self.initialization = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, $$16.$$s = self, $$16.$$arity = 1, $$16))
          }, $Initializer_extract_kwoptargs$15.$$arity = 0);
          
          Opal.def(self, '$extract_kwrestarg', $Initializer_extract_kwrestarg$17 = function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_kwrestarg$17.$$arity = 0);
          
          Opal.def(self, '$extract_post_args', $Initializer_extract_post_args$18 = function $$extract_post_args() {
            var $$19, self = this;

            return $send(self.args.$postargs(), 'each', [], ($$19 = function(arg){var self = $$19.$$s == null ? this : $$19.$$s;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Initializer_extract_post_args$18.$$arity = 0);
          
          Opal.def(self, '$extract_optargs', $Initializer_extract_optargs$20 = function $$extract_optargs() {
            var $$21, self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], ($$21 = function(arg){var self = $$21.$$s == null ? this : $$21.$$s, $a, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

              
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(has_post_args)) {
                
                $a = [].concat(Opal.to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          }, $Initializer_extract_optargs$20.$$arity = 0);
          
          Opal.def(self, '$extract_restarg', $Initializer_extract_restarg$22 = function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          }, $Initializer_extract_restarg$22.$$arity = 0);
          return (Opal.def(self, '$args_to_keep', $Initializer_args_to_keep$23 = function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          }, $Initializer_args_to_keep$23.$$arity = 0), nil) && 'args_to_keep';
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/numblocks"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$children', '$s', '$gen_args', '$map']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Numblocks');

        var $nesting = [self].concat($parent_nesting), $Numblocks_on_numblock$1, $Numblocks_gen_args$2;

        
        
        Opal.def(self, '$on_numblock', $Numblocks_on_numblock$1 = function $$on_numblock(node) {
          var $a, $b, self = this, left = nil, arg_count = nil, right = nil;

          
          $b = node.$children(), $a = Opal.to_ary($b), (left = ($a[0] == null ? nil : $a[0])), (arg_count = ($a[1] == null ? nil : $a[1])), (right = ($a[2] == null ? nil : $a[2])), $b;
          return self.$s("block", left, $send(self, 's', ["args"].concat(Opal.to_a(self.$gen_args(arg_count)))), right);
        }, $Numblocks_on_numblock$1.$$arity = 1);
        return (Opal.def(self, '$gen_args', $Numblocks_gen_args$2 = function $$gen_args(arg_count) {
          var $$3, self = this;

          return $send(Opal.Range.$new(1, arg_count, false), 'map', [], ($$3 = function(i){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (i == null) {
              i = nil;
            };
            return self.$s("arg", "" + "_" + (i));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Numblocks_gen_args$2.$$arity = 1), nil) && 'gen_args';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/returnable_logic"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$children', '$next_tmp', '$updated', '$s', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableLogic');

        var $nesting = [self].concat($parent_nesting), $ReturnableLogic_next_tmp$1, $ReturnableLogic_reset_tmp_counter$excl$2, $ReturnableLogic_on_or$3, $ReturnableLogic_on_and$4;

        self.$$prototype.counter = nil;
        
        
        Opal.def(self, '$next_tmp', $ReturnableLogic_next_tmp$1 = function $$next_tmp() {
          var self = this, $ret_or_1 = nil;

          
          self.counter = (function() {if ($truthy(($ret_or_1 = self.counter))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$ret_or_" + (self.counter);
        }, $ReturnableLogic_next_tmp$1.$$arity = 0);
        
        Opal.def(self, '$reset_tmp_counter!', $ReturnableLogic_reset_tmp_counter$excl$2 = function() {
          var self = this;

          return (self.counter = nil)
        }, $ReturnableLogic_reset_tmp_counter$excl$2.$$arity = 0);
        
        Opal.def(self, '$on_or', $ReturnableLogic_on_or$3 = function $$on_or(node) {
          var $a, self = this, lhs = nil, rhs = nil, lhs_tmp = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          lhs_tmp = self.$next_tmp();
          return node.$updated("if", [self.$s("lvasgn", lhs_tmp, self.$process(lhs)), self.$s("js_tmp", lhs_tmp), self.$process(rhs)]);
        }, $ReturnableLogic_on_or$3.$$arity = 1);
        return (Opal.def(self, '$on_and', $ReturnableLogic_on_and$4 = function $$on_and(node) {
          var $a, self = this, lhs = nil, rhs = nil, lhs_tmp = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          lhs_tmp = self.$next_tmp();
          return node.$updated("if", [self.$s("lvasgn", lhs_tmp, self.$process(lhs)), self.$process(rhs), self.$s("js_tmp", lhs_tmp)]);
        }, $ReturnableLogic_on_and$4.$$arity = 1), nil) && 'on_and';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/forward_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$process', '$s', '$last', '$children', '$==', '$type', '$[]', '$updated', '$!=', '$class']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForwardArgs');

        var $nesting = [self].concat($parent_nesting), $ForwardArgs_on_forward_args$1, $ForwardArgs_on_args$2, $ForwardArgs_on_send$3;

        
        
        Opal.def(self, '$on_forward_args', $ForwardArgs_on_forward_args$1 = function $$on_forward_args(_node) {
          var self = this;

          return self.$process(self.$s("args", self.$s("forward_arg", "$")))
        }, $ForwardArgs_on_forward_args$1.$$arity = 1);
        
        Opal.def(self, '$on_args', $ForwardArgs_on_args$2 = function $$on_args(node) {
          var $iter = $ForwardArgs_on_args$2.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil, prev_children = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ForwardArgs_on_args$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy((function() {if ($truthy(($ret_or_1 = node.$children().$last()))) {
            return node.$children().$last().$type()['$==']("forward_arg")
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            prev_children = node.$children()['$[]']($range(0, -2, false));
            return node.$updated(nil, [].concat(Opal.to_a(prev_children)).concat([self.$s("restarg", "$fwd_rest"), self.$s("blockarg", "$fwd_block")]));
          } else {
            return $send2(self, $find_super(self, 'on_args', $ForwardArgs_on_args$2, false, true), 'on_args', $zuper, $iter)
          }
        }, $ForwardArgs_on_args$2.$$arity = 1);
        return (Opal.def(self, '$on_send', $ForwardArgs_on_send$3 = function $$on_send(node) {
          var $iter = $ForwardArgs_on_send$3.$$p, $yield = $iter || nil, self = this, $ret_or_2 = nil, $ret_or_3 = nil, prev_children = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ForwardArgs_on_send$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = node.$children().$last()))) {
            return node.$children().$last().$class()['$!=']($$($nesting, 'Symbol'))
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return node.$children().$last().$type()['$==']("forwarded_args")
          } else {
            return $ret_or_2
          }; return nil; })())) {
            
            prev_children = node.$children()['$[]']($range(0, -2, false));
            return node.$updated(nil, [].concat(Opal.to_a(prev_children)).concat([self.$s("splat", self.$s("lvar", "$fwd_rest")), self.$s("block_pass", self.$s("lvar", "$fwd_block"))]));
          } else {
            return $send2(self, $find_super(self, 'on_send', $ForwardArgs_on_send$3, false, true), 'on_send', $zuper, $iter)
          }
        }, $ForwardArgs_on_send$3.$$arity = 1), nil) && 'on_send';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$<<', '$list', '$delete', '$use', '$disabled?', '$class', '$each', '$new', '$process']);
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/explicit_writer_return");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/pattern_matching");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  self.$require("opal/rewriters/numblocks");
  self.$require("opal/rewriters/returnable_logic");
  self.$require("opal/rewriters/forward_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$6, $Rewriter_process$7;

      self.$$prototype.sexp = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $list$1, $use$2, $delete$3, $disable$4, $disabled$ques$5;

        
        
        Opal.def(self, '$list', $list$1 = function $$list() {
          var self = this, $ret_or_1 = nil;
          if (self.list == null) self.list = nil;

          return (self.list = (function() {if ($truthy(($ret_or_1 = self.list))) {
            return $ret_or_1
          } else {
            return []
          }; return nil; })())
        }, $list$1.$$arity = 0);
        
        Opal.def(self, '$use', $use$2 = function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        }, $use$2.$$arity = 1);
        
        Opal.def(self, '$delete', $delete$3 = function(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        }, $delete$3.$$arity = 1);
        
        Opal.def(self, '$disable', $disable$4 = function $$disable() {
          var $iter = $disable$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $disable$4.$$p = null;
          return (function() { try {
          
          self.disabled = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = false)
          }; })()
        }, $disable$4.$$arity = 0);
        return (Opal.def(self, '$disabled?', $disabled$ques$5 = function() {
          var $a, self = this;
          if (self.disabled == null) self.disabled = nil;

          if ($truthy((($a = self['disabled'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.disabled
          } else {
            return nil
          }
        }, $disabled$ques$5.$$arity = 0), nil) && 'disabled?';
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$($nesting, 'Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ForRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'Numblocks'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ForwardArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BlockToIter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$($nesting, 'Rewriters'), 'PatternMatching'));
      self.$use($$$($$($nesting, 'Rewriters'), 'JsReservedWords'));
      self.$use($$$($$($nesting, 'Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ExplicitWriterReturn'));
      self.$use($$$($$$($$($nesting, 'Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ReturnableLogic'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DumpArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'MlhsArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'InlineArgs'));
      
      Opal.def(self, '$initialize', $Rewriter_initialize$6 = function $$initialize(sexp) {
        var self = this;

        return (self.sexp = sexp)
      }, $Rewriter_initialize$6.$$arity = 1);
      return (Opal.def(self, '$process', $Rewriter_process$7 = function $$process() {
        var $$8, self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp};
        $send(self.$class().$list(), 'each', [], ($$8 = function(rewriter_class){var self = $$8.$$s == null ? this : $$8.$$s, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

          
          
          if (rewriter_class == null) {
            rewriter_class = nil;
          };
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return self.sexp;
      }, $Rewriter_process$7.$$arity = 0), nil) && 'process';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/parser/source_buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $find_super = Opal.find_super;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $SourceBuffer_recognize_encoding$1;

        return (Opal.defs(self, '$recognize_encoding', $SourceBuffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $iter = $SourceBuffer_recognize_encoding$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SourceBuffer_recognize_encoding$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy(($ret_or_1 = $send2(self, $find_super(self, 'recognize_encoding', $SourceBuffer_recognize_encoding$1, false, true), 'recognize_encoding', $zuper, $iter)))) {
            return $ret_or_1
          } else {
            return $$$($$($nesting, 'Encoding'), 'UTF_8')
          }
        }, $SourceBuffer_recognize_encoding$1.$$arity = 1), nil) && 'recognize_encoding'
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/parser/default_config"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $lambda = Opal.lambda;

  Opal.add_stubs(['$attr_accessor', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$diagnostics_consumer', '$consumer=', '$extend', '$diagnostics_consumer=', '$new', '$rewrite', '$process', '$default_parser', '$default_parser_class']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $DefaultConfig_included$2, $DefaultConfig_initialize$4, $DefaultConfig_parse$5, $DefaultConfig_rewrite$6;

        
        (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_default_parser$1;

          
          self.$attr_accessor("diagnostics_consumer");
          return (Opal.def(self, '$default_parser', $ClassMethods_default_parser$1 = function $$default_parser() {
            var $iter = $ClassMethods_default_parser$1.$$p, $yield = $iter || nil, self = this, parser = nil, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $ClassMethods_default_parser$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            parser = $send2(self, $find_super(self, 'default_parser', $ClassMethods_default_parser$1, false, true), 'default_parser', $zuper, $iter);
            
            $writer = [true];
            $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [false];
            $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$diagnostics_consumer()];
            $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return parser;
          }, $ClassMethods_default_parser$1.$$arity = 0), nil) && 'default_parser';
        })($nesting[0], $nesting);
        Opal.defs(self, '$included', $DefaultConfig_included$2 = function $$included(klass) {
          var $$3, self = this, $writer = nil;

          
          klass.$extend($$($nesting, 'ClassMethods'));
          
          $writer = [$lambda(($$3 = function(diagnostic){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (diagnostic == null) {
              diagnostic = nil;
            };
            return nil;}, $$3.$$s = self, $$3.$$arity = 1, $$3))];
          $send(klass, 'diagnostics_consumer=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $DefaultConfig_included$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $DefaultConfig_initialize$4 = function $$initialize($a) {
          var $post_args, $iter = $DefaultConfig_initialize$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $DefaultConfig_initialize$4.$$p = null;
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return $send2(self, $find_super(self, 'initialize', $DefaultConfig_initialize$4, false, true), 'initialize', [$$$($$$($$($nesting, 'Opal'), 'AST'), 'Builder').$new()], null);
        }, $DefaultConfig_initialize$4.$$arity = -1);
        
        Opal.def(self, '$parse', $DefaultConfig_parse$5 = function $$parse(source_buffer) {
          var $iter = $DefaultConfig_parse$5.$$p, $yield = $iter || nil, self = this, parsed = nil, rewriten = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DefaultConfig_parse$5.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          parsed = $send2(self, $find_super(self, 'parse', $DefaultConfig_parse$5, false, true), 'parse', $zuper, $iter);
          rewriten = self.$rewrite(parsed);
          return rewriten;
        }, $DefaultConfig_parse$5.$$arity = 1);
        return (Opal.def(self, '$rewrite', $DefaultConfig_rewrite$6 = function $$rewrite(node) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Rewriter').$new(node).$process()
        }, $DefaultConfig_rewrite$6.$$arity = 1), nil) && 'rewrite';
      })($nesting[0], $nesting);
      return (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $default_parser$7;

        
        self.$attr_accessor("default_parser_class");
        return (Opal.def(self, '$default_parser', $default_parser$7 = function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        }, $default_parser$7.$$arity = 0), nil) && 'default_parser';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/parser/with_ruby_lexer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$include', '$default_parser_class=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WithRubyLexer');

    var $nesting = [self].concat($parent_nesting), $writer = nil;

    
    self.$include($$$($$$($$($nesting, 'Opal'), 'Parser'), 'DefaultConfig'));
    
    $writer = [self];
    $send($$$($$($nesting, 'Opal'), 'Parser'), 'default_parser_class=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($$$($$($nesting, 'Opal'), 'Parser'), $$$($$($nesting, 'Parser'), 'Ruby30'), $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/parser/patch"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $module = Opal.module;

  Opal.add_stubs(['$source', '$unpack', '$+', '$to_a', '$lines', '$end_with?', '$<<', '$map', '$chomp', '$=~', '$diagnostic', '$nil?', '$type', '$[]', '$respond_to?', '$[]=', '$-', '$send', '$value']);
  
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $Lexer_source_buffer$eq$1;

    self.$$prototype.source_buffer = nil;
    return (Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$1 = function(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        return (self.source_pts = source.$unpack("U*"));
      } else {
        return (self.source_pts = nil)
      };
    }, $Lexer_source_buffer$eq$1.$$arity = 1), nil) && 'source_buffer='
  })($$($nesting, 'Parser'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Literal');

    var $nesting = [self].concat($parent_nesting), $Literal_extend_string$2;

    self.$$prototype.buffer_s = self.$$prototype.buffer = nil;
    
    
    Opal.udef(self, '$' + "extend_string");;
    return (Opal.def(self, '$extend_string', $Literal_extend_string$2 = function $$extend_string(string, ts, te) {
      var self = this, $ret_or_1 = nil;

      
      self.buffer_s = (function() {if ($truthy(($ret_or_1 = self.buffer_s))) {
        return $ret_or_1
      } else {
        return ts
      }; return nil; })();
      self.buffer_e = te;
      return (self.buffer = $rb_plus(self.buffer, string));
    }, $Literal_extend_string$2.$$arity = 3), nil) && 'extend_string';
  })($$$($$($nesting, 'Parser'), 'Lexer'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Buffer');

    var $nesting = [self].concat($parent_nesting), $Buffer_source_lines$3;

    self.$$prototype.lines = self.$$prototype.source = nil;
    return (Opal.def(self, '$source_lines', $Buffer_source_lines$3 = function $$source_lines() {
      var $$4, self = this, $ret_or_2 = nil, lines = nil;

      return (self.lines = (function() {if ($truthy(($ret_or_2 = self.lines))) {
        return $ret_or_2
      } else {
        
        lines = self.source.$lines().$to_a();
        if ($truthy(self.source['$end_with?']("\n"))) {
          lines['$<<']("")};
        return $send(lines, 'map', [], ($$4 = function(line){var self = $$4.$$s == null ? this : $$4.$$s;

          
          
          if (line == null) {
            line = nil;
          };
          return line.$chomp("\n");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      }; return nil; })())
    }, $Buffer_source_lines$3.$$arity = 0), nil) && 'source_lines'
  })($$$($$($nesting, 'Parser'), 'Source'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Default');

    var $nesting = [self].concat($parent_nesting), $Default_check_lvar_name$5;

    return (Opal.def(self, '$check_lvar_name', $Default_check_lvar_name$5 = function $$check_lvar_name(name, loc) {
      var self = this;

      if ($truthy(name['$=~'](new RegExp('^[\\p{Ll}|_][\\p{L}\\p{Nl}\\p{Nd}_]*$', 'u')))) {
        return nil
      } else {
        return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
      }
    }, $Default_check_lvar_name$5.$$arity = 2), nil) && 'check_lvar_name'
  })($$$($$($nesting, 'Parser'), 'Builders'), null, $nesting);;
  (function($base, $parent_nesting) {
    var self = $module($base, 'Mixin');

    var $nesting = [self].concat($parent_nesting), $Mixin_process$6;

    
    
    Opal.udef(self, '$' + "process");;
    return (Opal.def(self, '$process', $Mixin_process$6 = function $$process(node) {
      var self = this, $ret_or_3 = nil, type = nil, on_handler = nil, $ret_or_4 = nil, $writer = nil, handler = nil, $ret_or_5 = nil;
      if (self._on_handler_cache == null) self._on_handler_cache = nil;

      
      if ($truthy(node['$nil?']())) {
        return nil};
      self._on_handler_cache = (function() {if ($truthy(($ret_or_3 = self._on_handler_cache))) {
        return $ret_or_3
      } else {
        return $hash2([], {})
      }; return nil; })();
      type = node.$type();
      on_handler = (function() {if ($truthy(($ret_or_4 = self._on_handler_cache['$[]'](type)))) {
        return $ret_or_4
      } else {
        
        $writer = [type, ((handler = "" + "on_" + (type)), (function() {if ($truthy(self['$respond_to?'](handler))) {
          return nil
        } else {
          return (handler = "handler_missing")
        }; return nil; })(), handler)];
        $send(self._on_handler_cache, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }; return nil; })();
      if ($truthy(($ret_or_5 = self.$send(on_handler, node)))) {
        return $ret_or_5
      } else {
        return node
      };
    }, $Mixin_process$6.$$arity = 1), nil) && 'process';
  })($$$($$($nesting, 'AST'), 'Processor'), $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Default');

    var $nesting = [self].concat($parent_nesting), $Default_string_value$7;

    
    
    Opal.udef(self, '$' + "string_value");;
    return (Opal.def(self, '$string_value', $Default_string_value$7 = function $$string_value(token) {
      var self = this;

      return self.$value(token)
    }, $Default_string_value$7.$$arity = 1), nil) && 'string_value';
  })($$$($$($nesting, 'Parser'), 'Builders'), null, $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/ast/builder");
  self.$require("opal/rewriter");
  self.$require("opal/parser/source_buffer");
  self.$require("opal/parser/default_config");
  self.$require("opal/parser/with_ruby_lexer");
  return self.$require("opal/parser/patch");
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/fragment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_s', '$inspect', '$type', '$===', '$first', '$children', '$[]', '$line', '$column']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fragment');

      var $nesting = [self].concat($parent_nesting), $Fragment_initialize$1, $Fragment_inspect$2, $Fragment_source_map_name$3, $Fragment_line$4, $Fragment_column$5;

      self.$$prototype.code = self.$$prototype.sexp = nil;
      
      self.$attr_reader("code");
      
      Opal.def(self, '$initialize', $Fragment_initialize$1 = function $$initialize(code, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        self.code = code.$to_s();
        self.sexp = sexp;
        return (self.scope = scope);
      }, $Fragment_initialize$1.$$arity = -3);
      
      Opal.def(self, '$inspect', $Fragment_inspect$2 = function $$inspect() {
        var self = this;

        return "" + "f(" + (self.code.$inspect()) + ")"
      }, $Fragment_inspect$2.$$arity = 0);
      
      Opal.def(self, '$source_map_name', $Fragment_source_map_name$3 = function $$source_map_name() {
        var self = this, $case = nil;

        return (function() {$case = self.sexp.$type();
        if ("top"['$===']($case) || "begin"['$===']($case) || "newline"['$===']($case) || "js_return"['$===']($case)) {return nil}
        else if ("self"['$===']($case)) {return "self"}
        else if ("module"['$===']($case)) {return "module"}
        else if ("class"['$===']($case)) {return "class"}
        else if ("int"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("def"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("defs"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("send"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("lvar"['$===']($case) || "lvasgn"['$===']($case) || "lvdeclare"['$===']($case) || "ivar"['$===']($case) || "ivasgn"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case) || "cvasgn"['$===']($case) || "gvars"['$===']($case) || "gvasgn"['$===']($case)) {return self.sexp.$children().$first()}
        else { return nil }})()
      }, $Fragment_source_map_name$3.$$arity = 0);
      
      Opal.def(self, '$line', $Fragment_line$4 = function $$line() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$line()
        } else {
          return nil
        }
      }, $Fragment_line$4.$$arity = 0);
      return (Opal.def(self, '$column', $Fragment_column$5 = function $$column() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$column()
        } else {
          return nil
        }
      }, $Fragment_column$5.$$arity = 0), nil) && 'column';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$valid_name?', '$inspect', '$=~', '$to_s', '$+', '$indent', '$compiler', '$to_proc', '$parser_indent', '$push', '$current_indent', '$js_truthy_optimize', '$helper', '$fragment', '$expr', '$==', '$type', '$[]', '$children', '$uses_block!', '$scope', '$block_name', '$handlers', '$include?', '$truthy_optimize?', '$new_temp', '$wrap']);
  
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Helpers');

        var $nesting = [self].concat($parent_nesting), $Helpers_property$1, $Helpers_valid_name$ques$2, $Helpers_mid_to_jsid$3, $Helpers_indent$4, $Helpers_current_indent$5, $Helpers_line$6, $Helpers_empty_line$7, $Helpers_js_truthy$8, $Helpers_js_falsy$9, $Helpers_js_truthy_optimize$10, $Helpers_conditional_send$11;

        
        
        Opal.def(self, '$property', $Helpers_property$1 = function $$property(name) {
          var self = this;

          if ($truthy(self['$valid_name?'](name))) {
            return "" + "." + (name)
          } else {
            return "" + "[" + (name.$inspect()) + "]"
          }
        }, $Helpers_property$1.$$arity = 1);
        
        Opal.def(self, '$valid_name?', $Helpers_valid_name$ques$2 = function(name) {
          var self = this;

          return $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'JsReservedWords')['$valid_name?'](name)
        }, $Helpers_valid_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$mid_to_jsid', $Helpers_mid_to_jsid$3 = function $$mid_to_jsid(mid) {
          var self = this;

          if ($truthy(/\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[/['$=~'](mid.$to_s()))) {
            return "" + "['$" + (mid) + "']"
          } else {
            return $rb_plus(".$", mid)
          }
        }, $Helpers_mid_to_jsid$3.$$arity = 1);
        
        Opal.def(self, '$indent', $Helpers_indent$4 = function $$indent() {
          var $iter = $Helpers_indent$4.$$p, block = $iter || nil, self = this;

          if ($iter) $Helpers_indent$4.$$p = null;
          
          
          if ($iter) $Helpers_indent$4.$$p = null;;
          return $send(self.$compiler(), 'indent', [], block.$to_proc());
        }, $Helpers_indent$4.$$arity = 0);
        
        Opal.def(self, '$current_indent', $Helpers_current_indent$5 = function $$current_indent() {
          var self = this;

          return self.$compiler().$parser_indent()
        }, $Helpers_current_indent$5.$$arity = 0);
        
        Opal.def(self, '$line', $Helpers_line$6 = function $$line($a) {
          var $post_args, strs, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          self.$push("" + "\n" + (self.$current_indent()));
          return $send(self, 'push', Opal.to_a(strs));
        }, $Helpers_line$6.$$arity = -1);
        
        Opal.def(self, '$empty_line', $Helpers_empty_line$7 = function $$empty_line() {
          var self = this;

          return self.$push("\n")
        }, $Helpers_empty_line$7.$$arity = 0);
        
        Opal.def(self, '$js_truthy', $Helpers_js_truthy$8 = function $$js_truthy(sexp) {
          var self = this, optimize = nil;

          
          if ($truthy((optimize = self.$js_truthy_optimize(sexp)))) {
            return optimize};
          self.$helper("truthy");
          return [self.$fragment("$truthy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_truthy$8.$$arity = 1);
        
        Opal.def(self, '$js_falsy', $Helpers_js_falsy$9 = function $$js_falsy(sexp) {
          var self = this, mid = nil;

          
          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            if (mid['$==']("block_given?")) {
              
              self.$scope()['$uses_block!']();
              return "" + (self.$scope().$block_name()) + " === nil";};};
          self.$helper("falsy");
          return [self.$fragment("$falsy("), self.$expr(sexp), self.$fragment(")")];
        }, $Helpers_js_falsy$9.$$arity = 1);
        
        Opal.def(self, '$js_truthy_optimize', $Helpers_js_truthy_optimize$10 = function $$js_truthy_optimize(sexp) {
          var self = this, mid = nil, receiver_handler_class = nil, $ret_or_1 = nil, receiver = nil, allow_optimization_on_type = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

          if (sexp.$type()['$==']("send")) {
            
            mid = sexp.$children()['$[]'](1);
            receiver_handler_class = (function() {if ($truthy(($ret_or_1 = (receiver = sexp.$children()['$[]'](0))))) {
              return self.$compiler().$handlers()['$[]'](receiver.$type())
            } else {
              return $ret_or_1
            }; return nil; })();
            allow_optimization_on_type = (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = $$$($$($nesting, 'Compiler'), 'COMPARE')['$include?'](mid.$to_s())))) {
              return receiver_handler_class
            } else {
              return $ret_or_3
            }; return nil; })()))) {
              return receiver_handler_class['$truthy_optimize?']()
            } else {
              return $ret_or_2
            }; return nil; })();
            if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = allow_optimization_on_type))) {
              return $ret_or_5
            } else {
              return mid['$==']("block_given?")
            }; return nil; })()))) {
              return $ret_or_4
            } else {
              return mid['$==']("==")
            }; return nil; })())) {
              return self.$expr(sexp)
            } else {
              return nil
            };
          } else {
            return nil
          }
        }, $Helpers_js_truthy_optimize$10.$$arity = 1);
        return (Opal.def(self, '$conditional_send', $Helpers_conditional_send$11 = function $$conditional_send(recvr) {
          var $iter = $Helpers_conditional_send$11.$$p, $yield = $iter || nil, self = this, receiver_temp = nil;

          if ($iter) $Helpers_conditional_send$11.$$p = null;
          
          receiver_temp = self.$scope().$new_temp();
          self.$push("" + (receiver_temp) + " = ", recvr);
          self.$push("" + ", (" + (receiver_temp) + " === nil || " + (receiver_temp) + " == null) ? nil : ");
          Opal.yield1($yield, receiver_temp);
          return self.$wrap("(", ")");
        }, $Helpers_conditional_send$11.$$arity = 1), nil) && 'conditional_send';
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$-', '$each_with_index', '$define_method', '$[]', '$children', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$reverse_each', '$unshift', '$push', '$new', '$scope', '$error', '$top_scope', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get', '$has_rescue_else?', '$in_ensure', '$in_ensure?', '$in_resbody', '$in_resbody?', '$in_rescue', '$!', '$class_scope?', '$sclass?', '$+', '$parent', '$class_variable_owner_nesting_level', '$comments', '$compiler', '$loc', '$name', '$source_buffer', '$expression', '$start_with?', '$end_with?', '$line']);
  
  self.$require("opal/nodes/helpers");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_handlers$1, $Base_handle$2, $Base_children$4, $Base_truthy_optimize$ques$7, $Base_initialize$8, $Base_children$9, $Base_compile_to_fragments$10, $Base_compile$11, $Base_push$12, $Base_unshift$14, $Base_wrap$16, $Base_fragment$17, $Base_error$18, $Base_scope$19, $Base_top_scope$20, $Base_s$21, $Base_expr$ques$22, $Base_recv$ques$23, $Base_stmt$ques$24, $Base_process$25, $Base_expr$26, $Base_recv$27, $Base_stmt$28, $Base_expr_or_nil$29, $Base_add_local$30, $Base_add_ivar$31, $Base_add_gvar$32, $Base_add_temp$33, $Base_helper$34, $Base_with_temp$35, $Base_in_while$ques$36, $Base_while_loop$37, $Base_has_rescue_else$ques$38, $Base_in_ensure$39, $Base_in_ensure$ques$40, $Base_in_resbody$41, $Base_in_resbody$ques$42, $Base_in_rescue$43, $Base_class_variable_owner_nesting_level$44, $Base_class_variable_owner$45, $Base_comments$46, $Base_source_location$47;

        self.$$prototype.sexp = self.$$prototype.fragments = self.$$prototype.compiler = self.$$prototype.level = nil;
        
        self.$include($$($nesting, 'Helpers'));
        Opal.defs(self, '$handlers', $Base_handlers$1 = function $$handlers() {
          var self = this, $ret_or_1 = nil;
          if (self.handlers == null) self.handlers = nil;

          return (self.handlers = (function() {if ($truthy(($ret_or_1 = self.handlers))) {
            return $ret_or_1
          } else {
            return $hash2([], {})
          }; return nil; })())
        }, $Base_handlers$1.$$arity = 0);
        Opal.defs(self, '$handle', $Base_handle$2 = function $$handle($a) {
          var $post_args, types, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          types = $post_args;;
          return $send(types, 'each', [], ($$3 = function(type){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

            
            
            if (type == null) {
              type = nil;
            };
            $writer = [type, self];
            $send($$($nesting, 'Base').$handlers(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $Base_handle$2.$$arity = -1);
        Opal.defs(self, '$children', $Base_children$4 = function $$children($a) {
          var $post_args, names, $$5, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          return $send(names, 'each_with_index', [], ($$5 = function(name, idx){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

            
            
            if (name == null) {
              name = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return $send(self, 'define_method', [name], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.sexp == null) self.sexp = nil;

              return self.sexp.$children()['$[]'](idx)}, $$6.$$s = self, $$6.$$arity = 0, $$6));}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        }, $Base_children$4.$$arity = -1);
        Opal.defs(self, '$truthy_optimize?', $Base_truthy_optimize$ques$7 = function() {
          var self = this;

          return false
        }, $Base_truthy_optimize$ques$7.$$arity = 0);
        self.$attr_reader("compiler", "type");
        
        Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(sexp, level, compiler) {
          var self = this;

          
          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return (self.compiler = compiler);
        }, $Base_initialize$8.$$arity = 3);
        
        Opal.def(self, '$children', $Base_children$9 = function $$children() {
          var self = this;

          return self.sexp.$children()
        }, $Base_children$9.$$arity = 0);
        
        Opal.def(self, '$compile_to_fragments', $Base_compile_to_fragments$10 = function $$compile_to_fragments() {
          var $a, self = this;

          
          if ($truthy((($a = self['fragments'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, $Base_compile_to_fragments$10.$$arity = 0);
        
        Opal.def(self, '$compile', $Base_compile$11 = function $$compile() {
          var self = this;

          return self.$raise("Not Implemented")
        }, $Base_compile$11.$$arity = 0);
        
        Opal.def(self, '$push', $Base_push$12 = function $$push($a) {
          var $post_args, strs, $$13, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'each', [], ($$13 = function(str){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.fragments == null) self.fragments = nil;

            
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        }, $Base_push$12.$$arity = -1);
        
        Opal.def(self, '$unshift', $Base_unshift$14 = function $$unshift($a) {
          var $post_args, strs, $$15, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'reverse_each', [], ($$15 = function(str){var self = $$15.$$s == null ? this : $$15.$$s;
            if (self.fragments == null) self.fragments = nil;

            
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        }, $Base_unshift$14.$$arity = -1);
        
        Opal.def(self, '$wrap', $Base_wrap$16 = function $$wrap(pre, post) {
          var self = this;

          
          self.$unshift(pre);
          return self.$push(post);
        }, $Base_wrap$16.$$arity = 2);
        
        Opal.def(self, '$fragment', $Base_fragment$17 = function $$fragment(str) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Fragment').$new(str, self.$scope(), self.sexp)
        }, $Base_fragment$17.$$arity = 1);
        
        Opal.def(self, '$error', $Base_error$18 = function $$error(msg) {
          var self = this;

          return self.compiler.$error(msg)
        }, $Base_error$18.$$arity = 1);
        
        Opal.def(self, '$scope', $Base_scope$19 = function $$scope() {
          var self = this;

          return self.compiler.$scope()
        }, $Base_scope$19.$$arity = 0);
        
        Opal.def(self, '$top_scope', $Base_top_scope$20 = function $$top_scope() {
          var self = this;

          return self.$scope().$top_scope()
        }, $Base_top_scope$20.$$arity = 0);
        
        Opal.def(self, '$s', $Base_s$21 = function $$s($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.compiler, 's', Opal.to_a(args));
        }, $Base_s$21.$$arity = -1);
        
        Opal.def(self, '$expr?', $Base_expr$ques$22 = function() {
          var self = this;

          return self.level['$==']("expr")
        }, $Base_expr$ques$22.$$arity = 0);
        
        Opal.def(self, '$recv?', $Base_recv$ques$23 = function() {
          var self = this;

          return self.level['$==']("recv")
        }, $Base_recv$ques$23.$$arity = 0);
        
        Opal.def(self, '$stmt?', $Base_stmt$ques$24 = function() {
          var self = this;

          return self.level['$==']("stmt")
        }, $Base_stmt$ques$24.$$arity = 0);
        
        Opal.def(self, '$process', $Base_process$25 = function $$process(sexp, level) {
          var self = this;

          
          
          if (level == null) {
            level = "expr";
          };
          return self.compiler.$process(sexp, level);
        }, $Base_process$25.$$arity = -2);
        
        Opal.def(self, '$expr', $Base_expr$26 = function $$expr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr")
        }, $Base_expr$26.$$arity = 1);
        
        Opal.def(self, '$recv', $Base_recv$27 = function $$recv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv")
        }, $Base_recv$27.$$arity = 1);
        
        Opal.def(self, '$stmt', $Base_stmt$28 = function $$stmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt")
        }, $Base_stmt$28.$$arity = 1);
        
        Opal.def(self, '$expr_or_nil', $Base_expr_or_nil$29 = function $$expr_or_nil(sexp) {
          var self = this;

          if ($truthy(sexp)) {
            return self.$expr(sexp)
          } else {
            return "nil"
          }
        }, $Base_expr_or_nil$29.$$arity = 1);
        
        Opal.def(self, '$add_local', $Base_add_local$30 = function $$add_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym())
        }, $Base_add_local$30.$$arity = 1);
        
        Opal.def(self, '$add_ivar', $Base_add_ivar$31 = function $$add_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name)
        }, $Base_add_ivar$31.$$arity = 1);
        
        Opal.def(self, '$add_gvar', $Base_add_gvar$32 = function $$add_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name)
        }, $Base_add_gvar$32.$$arity = 1);
        
        Opal.def(self, '$add_temp', $Base_add_temp$33 = function $$add_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp)
        }, $Base_add_temp$33.$$arity = 1);
        
        Opal.def(self, '$helper', $Base_helper$34 = function $$helper(name) {
          var self = this;

          return self.compiler.$helper(name)
        }, $Base_helper$34.$$arity = 1);
        
        Opal.def(self, '$with_temp', $Base_with_temp$35 = function $$with_temp() {
          var $iter = $Base_with_temp$35.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_with_temp$35.$$p = null;
          
          
          if ($iter) $Base_with_temp$35.$$p = null;;
          return $send(self.compiler, 'with_temp', [], block.$to_proc());
        }, $Base_with_temp$35.$$arity = 0);
        
        Opal.def(self, '$in_while?', $Base_in_while$ques$36 = function() {
          var self = this;

          return self.compiler['$in_while?']()
        }, $Base_in_while$ques$36.$$arity = 0);
        
        Opal.def(self, '$while_loop', $Base_while_loop$37 = function $$while_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop")
        }, $Base_while_loop$37.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $Base_has_rescue_else$ques$38 = function() {
          var self = this;

          return self.$scope()['$has_rescue_else?']()
        }, $Base_has_rescue_else$ques$38.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $Base_in_ensure$39 = function $$in_ensure() {
          var $iter = $Base_in_ensure$39.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_ensure$39.$$p = null;
          
          
          if ($iter) $Base_in_ensure$39.$$p = null;;
          return $send(self.$scope(), 'in_ensure', [], block.$to_proc());
        }, $Base_in_ensure$39.$$arity = 0);
        
        Opal.def(self, '$in_ensure?', $Base_in_ensure$ques$40 = function() {
          var self = this;

          return self.$scope()['$in_ensure?']()
        }, $Base_in_ensure$ques$40.$$arity = 0);
        
        Opal.def(self, '$in_resbody', $Base_in_resbody$41 = function $$in_resbody() {
          var $iter = $Base_in_resbody$41.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_resbody$41.$$p = null;
          
          
          if ($iter) $Base_in_resbody$41.$$p = null;;
          return $send(self.$scope(), 'in_resbody', [], block.$to_proc());
        }, $Base_in_resbody$41.$$arity = 0);
        
        Opal.def(self, '$in_resbody?', $Base_in_resbody$ques$42 = function() {
          var self = this;

          return self.$scope()['$in_resbody?']()
        }, $Base_in_resbody$ques$42.$$arity = 0);
        
        Opal.def(self, '$in_rescue', $Base_in_rescue$43 = function $$in_rescue(node) {
          var $iter = $Base_in_rescue$43.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_rescue$43.$$p = null;
          
          
          if ($iter) $Base_in_rescue$43.$$p = null;;
          return $send(self.$scope(), 'in_rescue', [node], block.$to_proc());
        }, $Base_in_rescue$43.$$arity = 1);
        
        Opal.def(self, '$class_variable_owner_nesting_level', $Base_class_variable_owner_nesting_level$44 = function $$class_variable_owner_nesting_level() {
          var $a, self = this, cvar_scope = nil, nesting_level = nil, $ret_or_2 = nil;

          
          cvar_scope = self.$scope();
          nesting_level = 0;
          while ($truthy((function() {if ($truthy(($ret_or_2 = cvar_scope))) {
            return cvar_scope['$class_scope?']()['$!']()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            
            if ($truthy(cvar_scope['$sclass?']())) {
              nesting_level = $rb_plus(nesting_level, 1)};
            cvar_scope = cvar_scope.$parent();
          };
          return nesting_level;
        }, $Base_class_variable_owner_nesting_level$44.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner', $Base_class_variable_owner$45 = function $$class_variable_owner() {
          var self = this;

          if ($truthy(self.$scope())) {
            return "" + "$nesting[" + (self.$class_variable_owner_nesting_level()) + "]"
          } else {
            return "Opal.Object"
          }
        }, $Base_class_variable_owner$45.$$arity = 0);
        
        Opal.def(self, '$comments', $Base_comments$46 = function $$comments() {
          var self = this;

          return self.$compiler().$comments()['$[]'](self.sexp.$loc())
        }, $Base_comments$46.$$arity = 0);
        return (Opal.def(self, '$source_location', $Base_source_location$47 = function $$source_location() {
          var self = this, file = nil, line = nil;

          
          file = self.sexp.$loc().$expression().$source_buffer().$name();
          if ($truthy(file['$start_with?']("corelib/"))) {
            file = "" + "<internal:" + (file) + ">"};
          if ($truthy(file['$end_with?'](".js"))) {
            file = "" + "<js:" + (file) + ">"};
          line = self.sexp.$loc().$line();
          return "" + "['" + (file) + "', " + (line) + "]";
        }, $Base_source_location$47.$$arity = 0), nil) && 'source_location';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $lambda = Opal.lambda, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$freeze', '$join', '$keys', '$gsub', '$even?', '$length', '$last_match', '$+', '$chop', '$[]', '$inspect', '$to_i', '$to_utf16', '$translate_escape_chars', '$valid_encoding?', '$helper', '$upcase', '$<=', '$call', '$-', '$>>', '$&', '$attr_accessor', '$extract_flags_and_value', '$select!', '$flags', '$=~', '$warning', '$compiler', '$==', '$compile_static_regexp', '$compile_dynamic_regexp', '$each_with_index', '$zero?', '$expr', '$any?', '$===', '$new', '$map', '$to_proc', '$flags=', '$empty?', '$s', '$single_line?', '$value=', '$include?', '$is_a?', '$updated', '$delete', '$source', '$expression', '$loc', '$private', '$>', '$!=', '$!', '$regexp', '$each', '$compile_inline?', '$compile_inline', '$compile_range_initialize', '$start', '$finish', '$raise', '$expr_or_nil', '$numerator', '$denominator', '$real', '$imag']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ValueNode');

        var $nesting = [self].concat($parent_nesting), $ValueNode_compile$1, $ValueNode_truthy_optimize$ques$2;

        
        self.$handle("true", "false", "self", "nil");
        
        Opal.def(self, '$compile', $ValueNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$type().$to_s())
        }, $ValueNode_compile$1.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $ValueNode_truthy_optimize$ques$2 = function() {
          var self = this;

          return true
        }, $ValueNode_truthy_optimize$ques$2.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NumericNode');

        var $nesting = [self].concat($parent_nesting), $NumericNode_compile$3, $NumericNode_truthy_optimize$ques$4;

        
        self.$handle("int", "float");
        self.$children("value");
        
        Opal.def(self, '$compile', $NumericNode_compile$3 = function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $NumericNode_compile$3.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $NumericNode_truthy_optimize$ques$4 = function() {
          var self = this;

          return true
        }, $NumericNode_truthy_optimize$ques$4.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $StringNode_translate_escape_chars$5, $StringNode_compile$7, $StringNode_to_utf16$9;

        
        self.$handle("str");
        self.$children("value");
        Opal.const_set($nesting[0], 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}).$freeze());
        Opal.const_set($nesting[0], 'ESCAPE_REGEX', Opal.regexp(["(\\\\+)([", $$($nesting, 'ESCAPE_CHARS').$keys().$join(""), "])"]).$freeze());
        
        Opal.def(self, '$translate_escape_chars', $StringNode_translate_escape_chars$5 = function $$translate_escape_chars(inspect_string) {
          var $$6, self = this;

          return $send(inspect_string, 'gsub', [$$($nesting, 'ESCAPE_REGEX')], ($$6 = function(original){var self = $$6.$$s == null ? this : $$6.$$s;

            
            
            if (original == null) {
              original = nil;
            };
            if ($truthy($$($nesting, 'Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$($nesting, 'Regexp').$last_match(1).$chop(), $$($nesting, 'ESCAPE_CHARS')['$[]']($$($nesting, 'Regexp').$last_match(2)))
            };}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        }, $StringNode_translate_escape_chars$5.$$arity = 1);
        
        Opal.def(self, '$compile', $StringNode_compile$7 = function $$compile() {
          var $$8, self = this, string_value = nil, sanitized_value = nil;

          
          string_value = self.$value();
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, code_point = nil;

            
            code_point = $$($nesting, 'Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, $$8.$$s = self, $$8.$$arity = 0, $$8));
          self.$push(self.$translate_escape_chars(sanitized_value));
          nil;
          if ($truthy(self.$value()['$valid_encoding?']())) {
            return nil
          } else {
            
            self.$helper("binary");
            return self.$wrap("$binary(", ")");
          };
        }, $StringNode_compile$7.$$arity = 0);
        return (Opal.def(self, '$to_utf16', $StringNode_to_utf16$9 = function $$to_utf16(code_point) {
          var $$10, self = this, ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(($$10 = function(code_unit){var self = $$10.$$s == null ? this : $$10.$$s;

            
            
            if (code_unit == null) {
              code_unit = nil;
            };
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)};
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        }, $StringNode_to_utf16$9.$$arity = 1), nil) && 'to_utf16';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SymbolNode');

        var $nesting = [self].concat($parent_nesting), $SymbolNode_compile$11;

        
        self.$handle("sym");
        self.$children("value");
        return (Opal.def(self, '$compile', $SymbolNode_compile$11 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        }, $SymbolNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $RegexpNode_initialize$12, $RegexpNode_compile$13, $RegexpNode_compile_dynamic_regexp$15, $RegexpNode_compile_static_regexp$17, $RegexpNode_extract_flags_and_value$18, $RegexpNode_raw_value$20, $RegexpNode_single_line$ques$21;

        self.$$prototype.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        Opal.const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/.$freeze());
        
        Opal.def(self, '$initialize', $RegexpNode_initialize$12 = function $$initialize($a) {
          var $post_args, $iter = $RegexpNode_initialize$12.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $RegexpNode_initialize$12.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $RegexpNode_initialize$12, false, true), 'initialize', $zuper, $iter);
          return self.$extract_flags_and_value();
        }, $RegexpNode_initialize$12.$$arity = -1);
        
        Opal.def(self, '$compile', $RegexpNode_compile$13 = function $$compile() {
          var $$14, self = this;

          
          $send(self.$flags(), 'select!', [], ($$14 = function(flag){var self = $$14.$$s == null ? this : $$14.$$s;

            
            
            if (flag == null) {
              flag = nil;
            };
            if ($truthy($$($nesting, 'SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("" + "Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          if (self.$value().$type()['$==']("str")) {
            return self.$compile_static_regexp()
          } else {
            return self.$compile_dynamic_regexp()
          };
        }, $RegexpNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$compile_dynamic_regexp', $RegexpNode_compile_dynamic_regexp$15 = function $$compile_dynamic_regexp() {
          var $$16, self = this;

          
          self.$push("Opal.regexp([");
          $send(self.$value().$children(), 'each_with_index', [], ($$16 = function(v, index){var self = $$16.$$s == null ? this : $$16.$$s;

            
            
            if (v == null) {
              v = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            if ($truthy(index['$zero?']())) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(v));}, $$16.$$s = self, $$16.$$arity = 2, $$16));
          self.$push("]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push("" + ", '" + (self.$flags().$join()) + "'")};
          return self.$push(")");
        }, $RegexpNode_compile_dynamic_regexp$15.$$arity = 0);
        
        Opal.def(self, '$compile_static_regexp', $RegexpNode_compile_static_regexp$17 = function $$compile_static_regexp() {
          var self = this, value = nil, $case = nil;

          
          value = self.$value().$children()['$[]'](0);
          return (function() {$case = value;
          if (""['$===']($case)) {return self.$push("/(?:)/")}
          else {return self.$push("" + ($$($nesting, 'Regexp').$new(value).$inspect()) + (self.$flags().$join()))}})();
        }, $RegexpNode_compile_static_regexp$17.$$arity = 0);
        
        Opal.def(self, '$extract_flags_and_value', $RegexpNode_extract_flags_and_value$18 = function $$extract_flags_and_value() {
          var $a, $b, $$19, self = this, values = nil, flags_sexp = nil, $writer = nil, parts = nil;

          
          $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice.call($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          
          $writer = [$send(flags_sexp.$children(), 'map', [], "to_s".$to_proc())];
          $send(self, 'flags=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [(function() {if ($truthy(values['$empty?']())) {
            return self.$s("str", "")
          } else if ($truthy(self['$single_line?'](values))) {
            return values['$[]'](0)
          } else {
            return $send(self, 's', ["dstr"].concat(Opal.to_a(values)))
          }; return nil; })()];
          $send(self, 'value=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], ($$19 = function(part){var self = $$19.$$s == null ? this : $$19.$$s, $ret_or_1 = nil, trimmed_value = nil;

              
              
              if (part == null) {
                part = nil;
              };
              if ($truthy((function() {if ($truthy(($ret_or_1 = part['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))))) {
                return part.$type()['$==']("str")
              } else {
                return $ret_or_1
              }; return nil; })())) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, $$19.$$s = self, $$19.$$arity = 1, $$19));
            
            $writer = [self.$value().$updated(nil, parts)];
            $send(self, 'value=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$flags().$delete("x");};
          if (self.$value().$type()['$==']("str")) {
            
            $writer = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))];
            $send(self, 'value=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $RegexpNode_extract_flags_and_value$18.$$arity = 0);
        
        Opal.def(self, '$raw_value', $RegexpNode_raw_value$20 = function $$raw_value() {
          var self = this, $writer = nil;

          
          $writer = [self.sexp.$loc().$expression().$source()];
          $send(self, 'value=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $RegexpNode_raw_value$20.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$single_line?', $RegexpNode_single_line$ques$21 = function(values) {
          var self = this, value = nil, $ret_or_2 = nil;

          
          if ($truthy($rb_gt(values.$length(), 1))) {
            return false};
          value = values['$[]'](0);
          if ($truthy(($ret_or_2 = value.$type()['$!=']("str")))) {
            return $ret_or_2
          } else {
            return value.$children()['$[]'](0)['$include?']("\n")['$!']()
          };
        }, $RegexpNode_single_line$ques$21.$$arity = 1), nil) && 'single_line?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        var $nesting = [self].concat($parent_nesting), $MatchCurrentLineNode_compile$22;

        
        self.$handle("match_current_line");
        self.$children("regexp");
        return (Opal.def(self, '$compile', $MatchCurrentLineNode_compile$22 = function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        }, $MatchCurrentLineNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicStringNode');

        var $nesting = [self].concat($parent_nesting), $DynamicStringNode_compile$23;

        
        self.$handle("dstr");
        return (Opal.def(self, '$compile', $DynamicStringNode_compile$23 = function $$compile() {
          var $$24, self = this;

          
          self.$push("\"\"");
          return $send(self.$children(), 'each', [], ($$24 = function(part){var self = $$24.$$s == null ? this : $$24.$$s;

            
            
            if (part == null) {
              part = nil;
            };
            self.$push(" + ");
            if (part.$type()['$==']("str")) {
              self.$push(part.$children()['$[]'](0).$inspect())
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, $$24.$$s = self, $$24.$$arity = 1, $$24));
        }, $DynamicStringNode_compile$23.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("dsym")
      })($nesting[0], $$($nesting, 'DynamicStringNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $RangeNode_compile$25, $RangeNode_compile_inline$ques$26, $RangeNode_compile_inline$27, $RangeNode_compile_range_initialize$28;

        
        self.$children("start", "finish");
        Opal.const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        Opal.def(self, '$compile', $RangeNode_compile$25 = function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        }, $RangeNode_compile$25.$$arity = 0);
        
        Opal.def(self, '$compile_inline?', $RangeNode_compile_inline$ques$26 = function() {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil;

          if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = self.$start()['$!']()))) {
            return $ret_or_4
          } else {
            
            if ($truthy(($ret_or_5 = self.$start().$type()))) {
              return $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type())
            } else {
              return $ret_or_5
            };
          }; return nil; })()))) {
            
            if ($truthy(($ret_or_6 = self.$finish()['$!']()))) {
              return $ret_or_6
            } else {
              
              if ($truthy(($ret_or_7 = self.$finish().$type()))) {
                return $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type())
              } else {
                return $ret_or_7
              };
            };
          } else {
            return $ret_or_3
          }
        }, $RangeNode_compile_inline$ques$26.$$arity = 0);
        
        Opal.def(self, '$compile_inline', $RangeNode_compile_inline$27 = function $$compile_inline() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_inline$27.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $RangeNode_compile_range_initialize$28 = function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_range_initialize$28.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $InclusiveRangeNode_compile_inline$29, $InclusiveRangeNode_compile_range_initialize$30;

        
        self.$handle("irange");
        
        Opal.def(self, '$compile_inline', $InclusiveRangeNode_compile_inline$29 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_inline$29.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $InclusiveRangeNode_compile_range_initialize$30 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_range_initialize$30.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $ExclusiveRangeNode_compile_inline$31, $ExclusiveRangeNode_compile_range_initialize$32;

        
        self.$handle("erange");
        
        Opal.def(self, '$compile_inline', $ExclusiveRangeNode_compile_inline$31 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr_or_nil(self.$start()), ", ", self.$expr_or_nil(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_inline$31.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $ExclusiveRangeNode_compile_range_initialize$32 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr_or_nil(self.$start()), ",", self.$expr_or_nil(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_range_initialize$32.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RationalNode');

        var $nesting = [self].concat($parent_nesting), $RationalNode_compile$33;

        
        self.$handle("rational");
        self.$children("value");
        return (Opal.def(self, '$compile', $RationalNode_compile$33 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Rational.$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        }, $RationalNode_compile$33.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ComplexNode');

        var $nesting = [self].concat($parent_nesting), $ComplexNode_compile$34;

        
        self.$handle("complex");
        self.$children("value");
        return (Opal.def(self, '$compile', $ComplexNode_compile$34 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Complex.$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        }, $ComplexNode_compile$34.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $send2 = Opal.send2, $find_super = Opal.find_super;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$expr?', '$[]', '$name', '$add_ivar', '$helper', '$add_gvar', '$===', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$raise', '$index', '$stmt?', '$class_variable_owner', '$inspect']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalVariableNode');

        var $nesting = [self].concat($parent_nesting), $LocalVariableNode_using_irb$ques$1, $LocalVariableNode_compile$2;

        
        self.$handle("lvar");
        self.$children("var_name");
        
        Opal.def(self, '$using_irb?', $LocalVariableNode_using_irb$ques$1 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        }, $LocalVariableNode_using_irb$ques$1.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalVariableNode_compile$2 = function $$compile() {
          var $$3, self = this;

          
          if ($truthy(self['$using_irb?']())) {
          } else {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], ($$3 = function(tmp){var self = $$3.$$s == null ? this : $$3.$$s;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("" + "((" + (tmp) + " = Opal.irb_vars", "" + ") == null ? nil : " + (tmp) + ")");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $LocalVariableNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalAssignNode');

        var $nesting = [self].concat($parent_nesting), $LocalAssignNode_using_irb$ques$4, $LocalAssignNode_compile$5;

        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        Opal.def(self, '$using_irb?', $LocalAssignNode_using_irb$ques$4 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_2
          }
        }, $LocalAssignNode_using_irb$ques$4.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalAssignNode_compile$5 = function $$compile() {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("" + "Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = self['$recv?']()))) {
            return $ret_or_4
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $LocalAssignNode_compile$5.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        var $nesting = [self].concat($parent_nesting), $LocalDeclareNode_compile$6;

        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return (Opal.def(self, '$compile', $LocalDeclareNode_compile$6 = function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        }, $LocalDeclareNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        var $nesting = [self].concat($parent_nesting), $InstanceVariableNode_var_name$7, $InstanceVariableNode_compile$8;

        
        self.$handle("ivar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $InstanceVariableNode_var_name$7 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceVariableNode_var_name$7.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceVariableNode_compile$8 = function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + "self" + (name));
        }, $InstanceVariableNode_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        var $nesting = [self].concat($parent_nesting), $InstanceAssignNode_var_name$9, $InstanceAssignNode_compile$10;

        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $InstanceAssignNode_var_name$9 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceAssignNode_var_name$9.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceAssignNode_compile$10 = function $$compile() {
          var self = this, name = nil, $ret_or_5 = nil, $ret_or_6 = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + "self" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self['$recv?']()))) {
            return $ret_or_6
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_5
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $InstanceAssignNode_compile$10.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        var $nesting = [self].concat($parent_nesting), $GlobalVariableNode_var_name$11, $GlobalVariableNode_compile$12;

        
        self.$handle("gvar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $GlobalVariableNode_var_name$11 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalVariableNode_var_name$11.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalVariableNode_compile$12 = function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("" + "$gvars" + (name));
        }, $GlobalVariableNode_compile$12.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $BackRefNode_compile$13, $BackRefNode_handle_global_match$14, $BackRefNode_handle_pre_match$16, $BackRefNode_handle_post_match$18;

        
        self.$handle("back_ref");
        
        Opal.def(self, '$compile', $BackRefNode_compile$13 = function $$compile() {
          var $iter = $BackRefNode_compile$13.$$p, $yield = $iter || nil, self = this, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BackRefNode_compile$13.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.$helper("gvars");
          return (function() {$case = self.$var_name();
          if ("&"['$===']($case)) {return self.$handle_global_match()}
          else if ("'"['$===']($case)) {return self.$handle_post_match()}
          else if ("`"['$===']($case)) {return self.$handle_pre_match()}
          else if ("+"['$===']($case)) {return $send2(self, $find_super(self, 'compile', $BackRefNode_compile$13, false, true), 'compile', $zuper, $iter)}
          else {return self.$raise($$($nesting, 'NotImplementedError'))}})();
        }, $BackRefNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$handle_global_match', $BackRefNode_handle_global_match$14 = function $$handle_global_match() {
          var $$15, self = this;

          return $send(self, 'with_temp', [], ($$15 = function(tmp){var self = $$15.$$s == null ? this : $$15.$$s;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, $$15.$$s = self, $$15.$$arity = 1, $$15))
        }, $BackRefNode_handle_global_match$14.$$arity = 0);
        
        Opal.def(self, '$handle_pre_match', $BackRefNode_handle_pre_match$16 = function $$handle_pre_match() {
          var $$17, self = this;

          return $send(self, 'with_temp', [], ($$17 = function(tmp){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, $$17.$$s = self, $$17.$$arity = 1, $$17))
        }, $BackRefNode_handle_pre_match$16.$$arity = 0);
        return (Opal.def(self, '$handle_post_match', $BackRefNode_handle_post_match$18 = function $$handle_post_match() {
          var $$19, self = this;

          return $send(self, 'with_temp', [], ($$19 = function(tmp){var self = $$19.$$s == null ? this : $$19.$$s;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, $$19.$$s = self, $$19.$$arity = 1, $$19))
        }, $BackRefNode_handle_post_match$18.$$arity = 0), nil) && 'handle_post_match';
      })($nesting[0], $$($nesting, 'GlobalVariableNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        var $nesting = [self].concat($parent_nesting), $GlobalAssignNode_var_name$20, $GlobalAssignNode_compile$21;

        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $GlobalAssignNode_var_name$20 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalAssignNode_var_name$20.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalAssignNode_compile$21 = function $$compile() {
          var self = this, name = nil, $ret_or_7 = nil, $ret_or_8 = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("" + "$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self['$recv?']()))) {
            return $ret_or_8
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_7
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $GlobalAssignNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NthrefNode');

        var $nesting = [self].concat($parent_nesting), $NthrefNode_compile$22;

        
        self.$handle("nth_ref");
        self.$children("index");
        return (Opal.def(self, '$compile', $NthrefNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], ($$23 = function(tmp){var self = $$23.$$s == null ? this : $$23.$$s;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $NthrefNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVariableNode');

        var $nesting = [self].concat($parent_nesting), $ClassVariableNode_compile$24;

        
        self.$handle("cvar");
        self.$children("name");
        return (Opal.def(self, '$compile', $ClassVariableNode_compile$24 = function $$compile() {
          var self = this, tolerant = nil;

          
          self.$helper("class_variable_get");
          tolerant = false;
          if ($truthy(self['$stmt?']())) {
            tolerant = true};
          return self.$push("" + "$class_variable_get(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', " + (tolerant.$inspect()) + ")");
        }, $ClassVariableNode_compile$24.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        var $nesting = [self].concat($parent_nesting), $ClassVarAssignNode_compile$25;

        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return (Opal.def(self, '$compile', $ClassVarAssignNode_compile$25 = function $$compile() {
          var self = this;

          
          self.$helper("class_variable_set");
          return self.$push("" + "$class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")");
        }, $ClassVarAssignNode_compile$25.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$magical_data_const?', '$push', '$const_scope', '$recv', '$name', '$eval?', '$compiler', '$nil?', '$==', '$eof_content', '$base', '$expr', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $ConstNode_compile$1, $ConstNode_magical_data_const$ques$2;

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        Opal.def(self, '$compile', $ConstNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("$$$(", self.$recv(self.$const_scope()), "" + ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          } else {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          }
        }, $ConstNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$magical_data_const?', $ConstNode_magical_data_const$ques$2 = function() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.$const_scope()['$nil?']()))) {
            return self.$name()['$==']("DATA")
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            return self.$compiler().$eof_content()
          } else {
            return $ret_or_1
          }
        }, $ConstNode_magical_data_const$ques$2.$$arity = 0), nil) && 'magical_data_const?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CbaseNode');

        var $nesting = [self].concat($parent_nesting), $CbaseNode_compile$3;

        
        self.$handle("cbase");
        return (Opal.def(self, '$compile', $CbaseNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("'::'")
        }, $CbaseNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstAssignNode');

        var $nesting = [self].concat($parent_nesting), $ConstAssignNode_compile$4;

        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return (Opal.def(self, '$compile', $ConstAssignNode_compile$4 = function $$compile() {
          var self = this;

          if ($truthy(self.$base())) {
            return self.$push("Opal.const_set(", self.$expr(self.$base()), "" + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("" + "Opal.const_set($nesting[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          }
        }, $ConstAssignNode_compile$4.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $falsy = Opal.falsy, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$>', '$<', '$===', '$raise', '$class', '$<=>', '$equal?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Comparable');

    var $nesting = [self].concat($parent_nesting), $Comparable_$eq_eq$1, $Comparable_$gt$2, $Comparable_$gt_eq$3, $Comparable_$lt$4, $Comparable_$lt_eq$5, $Comparable_between$ques$6, $Comparable_clamp$7, $case = nil;

    
    
    function normalize(what) {
      if (Opal.is_a(what, Opal.Integer)) { return what; }

      if ($rb_gt(what, 0)) { return 1; }
      if ($rb_lt(what, 0)) { return -1; }
      return 0;
    }

    function fail_comparison(lhs, rhs) {
      var class_name;
      (function() {$case = rhs;
    if (nil['$===']($case) || true['$===']($case) || false['$===']($case) || $$($nesting, 'Integer')['$===']($case) || $$($nesting, 'Float')['$===']($case)) {return class_name = rhs.$inspect();}
    else {return class_name = rhs.$$class;}})()
      self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((lhs).$class()) + " with " + (class_name) + " failed")
    }

    function cmp_or_fail(lhs, rhs) {
      var cmp = (lhs)['$<=>'](rhs);
      if ($falsy(cmp)) fail_comparison(lhs, rhs);
      return normalize(cmp);
    }
  ;
    
    Opal.def(self, '$==', $Comparable_$eq_eq$1 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy(self['$equal?'](other))) {
        return true};
      
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        return false
      };
      return normalize(cmp) == 0;;
    }, $Comparable_$eq_eq$1.$$arity = 1);
    
    Opal.def(self, '$>', $Comparable_$gt$2 = function(other) {
      var self = this;

      return cmp_or_fail(self, other) > 0;
    }, $Comparable_$gt$2.$$arity = 1);
    
    Opal.def(self, '$>=', $Comparable_$gt_eq$3 = function(other) {
      var self = this;

      return cmp_or_fail(self, other) >= 0;
    }, $Comparable_$gt_eq$3.$$arity = 1);
    
    Opal.def(self, '$<', $Comparable_$lt$4 = function(other) {
      var self = this;

      return cmp_or_fail(self, other) < 0;
    }, $Comparable_$lt$4.$$arity = 1);
    
    Opal.def(self, '$<=', $Comparable_$lt_eq$5 = function(other) {
      var self = this;

      return cmp_or_fail(self, other) <= 0;
    }, $Comparable_$lt_eq$5.$$arity = 1);
    
    Opal.def(self, '$between?', $Comparable_between$ques$6 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, $Comparable_between$ques$6.$$arity = 2);
    return (Opal.def(self, '$clamp', $Comparable_clamp$7 = function $$clamp(min, max) {
      var self = this;

      
      
      if (max == null) {
        max = nil;
      };
      
      var c, excl;

      if (max === nil) {
        // We are dealing with a new Ruby 2.7 behaviour that we are able to
        // provide a single Range argument instead of 2 Comparables.

        if (!Opal.is_a(min, Opal.Range)) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (min.$class()) + " (expected Range)")
        }

        excl = min.excl;
        max = min.end;
        min = min.begin;

        if (max !== nil && excl) {
          self.$raise($$($nesting, 'ArgumentError'), "cannot clamp with an exclusive range")
        }
      }

      if (min !== nil && max !== nil && cmp_or_fail(min, max) > 0) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")
      }

      if (min !== nil) {
        c = cmp_or_fail(self, min);

        if (c == 0) return self;
        if (c < 0) return min;
      }

      if (max !== nil) {
        c = cmp_or_fail(self, max);

        if (c > 0) return max;
      }

      return self;
    ;
    }, $Comparable_clamp$7.$$arity = -2), nil) && 'clamp';
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>', '$nonzero?', '$proc', '$casecmp', '$cleanpath', '$inspect', '$include?', '$fill', '$map', '$entries']);
  
  self.$require("corelib/comparable");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Pathname');

    var $nesting = [self].concat($parent_nesting), $Pathname_initialize$1, $Pathname_$eq_eq$2, $Pathname_absolute$ques$3, $Pathname_relative$ques$4, $Pathname_chop_basename$5, $Pathname_root$ques$6, $Pathname_parent$7, $Pathname_sub$8, $Pathname_cleanpath$9, $Pathname_to_path$10, $Pathname_hash$11, $Pathname_expand_path$12, $Pathname_$plus$13, $Pathname_plus$14, $Pathname_join$15, $Pathname_split$17, $Pathname_dirname$18, $Pathname_basename$19, $Pathname_directory$ques$20, $Pathname_extname$21, $Pathname_$lt_eq_gt$22, $Pathname$23, $Pathname$24, $Pathname_relative_path_from$25, $Pathname_entries$26;

    self.$$prototype.path = nil;
    
    self.$include($$($nesting, 'Comparable'));
    Opal.const_set($nesting[0], 'SEPARATOR_PAT', Opal.regexp([$$($nesting, 'Regexp').$quote($$$($$($nesting, 'File'), 'SEPARATOR'))]));
    
    Opal.def(self, '$initialize', $Pathname_initialize$1 = function $$initialize(path) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](path))) {
        self.path = path.$path().$to_s()
      } else if ($truthy(path['$respond_to?']("to_path"))) {
        self.path = path.$to_path()
      } else if ($truthy(path['$is_a?']($$($nesting, 'String')))) {
        self.path = path
      } else if ($truthy(path['$nil?']())) {
        self.$raise($$($nesting, 'TypeError'), "no implicit conversion of nil into String")
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\u0000")) {
        return self.$raise($$($nesting, 'ArgumentError'))
      } else {
        return nil
      };
    }, $Pathname_initialize$1.$$arity = 1);
    self.$attr_reader("path");
    
    Opal.def(self, '$==', $Pathname_$eq_eq$2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path)
    }, $Pathname_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$absolute?', $Pathname_absolute$ques$3 = function() {
      var self = this;

      return self['$relative?']()['$!']()
    }, $Pathname_absolute$ques$3.$$arity = 0);
    
    Opal.def(self, '$relative?', $Pathname_relative$ques$4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      
      path = self.path;
      while ($truthy((r = self.$chop_basename(path)))) {
        $c = r, $b = Opal.to_ary($c), (path = ($b[0] == null ? nil : $b[0])), $c
      };
      return path['$==']("");
    }, $Pathname_relative$ques$4.$$arity = 0);
    
    Opal.def(self, '$chop_basename', $Pathname_chop_basename$5 = function $$chop_basename(path) {
      var self = this, base = nil;

      
      base = $$($nesting, 'File').$basename(path);
      if ($truthy($$($nesting, 'Regexp').$new("" + "^" + ($$$($$($nesting, 'Pathname'), 'SEPARATOR_PAT').$source()) + "?$")['$=~'](base))) {
        return nil
      } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, $Pathname_chop_basename$5.$$arity = 1);
    
    Opal.def(self, '$root?', $Pathname_root$ques$6 = function() {
      var self = this;

      return self.path['$==']("/")
    }, $Pathname_root$ques$6.$$arity = 0);
    
    Opal.def(self, '$parent', $Pathname_parent$7 = function $$parent() {
      var self = this, new_path = nil;

      
      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ($truthy(self['$absolute?']())) {
          return "/"
        } else {
          return "."
        }; return nil; })()};
      return $$($nesting, 'Pathname').$new(new_path);
    }, $Pathname_parent$7.$$arity = 0);
    
    Opal.def(self, '$sub', $Pathname_sub$8 = function $$sub($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $$($nesting, 'Pathname').$new($send(self.path, 'sub', Opal.to_a(args)));
    }, $Pathname_sub$8.$$arity = -1);
    
    Opal.def(self, '$cleanpath', $Pathname_cleanpath$9 = function $$cleanpath() {
      var self = this;

      return Opal.normalize(self.path)
    }, $Pathname_cleanpath$9.$$arity = 0);
    
    Opal.def(self, '$to_path', $Pathname_to_path$10 = function $$to_path() {
      var self = this;

      return self.path
    }, $Pathname_to_path$10.$$arity = 0);
    
    Opal.def(self, '$hash', $Pathname_hash$11 = function $$hash() {
      var self = this;

      return self.path
    }, $Pathname_hash$11.$$arity = 0);
    
    Opal.def(self, '$expand_path', $Pathname_expand_path$12 = function $$expand_path() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$expand_path(self.path))
    }, $Pathname_expand_path$12.$$arity = 0);
    
    Opal.def(self, '$+', $Pathname_$plus$13 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Pathname')['$==='](other))) {
      } else {
        other = $$($nesting, 'Pathname').$new(other)
      };
      return $$($nesting, 'Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, $Pathname_$plus$13.$$arity = 1);
    
    Opal.def(self, '$plus', $Pathname_plus$14 = function $$plus(path1, path2) {
      var $a, $b, $c, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, $ret_or_1 = nil, r1 = nil, basename1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil, suffix2 = nil;

      
      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ($truthy((r2 = self.$chop_basename(prefix2)))) {
        
        $c = r2, $b = Opal.to_ary($c), (prefix2 = ($b[0] == null ? nil : $b[0])), (basename2 = ($b[1] == null ? nil : $b[1])), $c;
        index_list2.$unshift(prefix2.$length());
        basename_list2.$unshift(basename2);
      };
      if ($truthy(prefix2['$!='](""))) {
        return path2};
      prefix1 = path1;
      while ($truthy(true)) {
        
        while ($truthy((function() {if ($truthy(($ret_or_1 = basename_list2['$empty?']()['$!']()))) {
          return basename_list2.$first()['$=='](".")
        } else {
          return $ret_or_1
        }; return nil; })())) {
          
          index_list2.$shift();
          basename_list2.$shift();
        };
        if ($truthy((r1 = self.$chop_basename(prefix1)))) {
        } else {
          break;
        };
        $c = r1, $b = Opal.to_ary($c), (prefix1 = ($b[0] == null ? nil : $b[0])), (basename1 = ($b[1] == null ? nil : $b[1])), $c;
        if (basename1['$=='](".")) {
          continue;};
        if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = basename1['$==']("..")))) {
          return $ret_or_3
        } else {
          return basename_list2['$empty?']()
        }; return nil; })()))) {
          return $ret_or_2
        } else {
          return basename_list2.$first()['$!=']("..")
        }; return nil; })())) {
          
          prefix1 = $rb_plus(prefix1, basename1);
          break;;};
        index_list2.$shift();
        basename_list2.$shift();
      };
      r1 = self.$chop_basename(prefix1);
      if ($truthy((function() {if ($truthy(($ret_or_4 = r1['$!']()))) {
        return Opal.regexp([$$($nesting, 'SEPARATOR_PAT')])['$=~']($$($nesting, 'File').$basename(prefix1))
      } else {
        return $ret_or_4
      }; return nil; })())) {
        while ($truthy((function() {if ($truthy(($ret_or_5 = basename_list2['$empty?']()['$!']()))) {
          return basename_list2.$first()['$==']("..")
        } else {
          return $ret_or_5
        }; return nil; })())) {
          
          index_list2.$shift();
          basename_list2.$shift();
        }};
      if ($truthy(basename_list2['$empty?']()['$!']())) {
        
        suffix2 = path2['$[]'](Opal.Range.$new(index_list2.$first(), -1, false));
        if ($truthy(r1)) {
          return $$($nesting, 'File').$join(prefix1, suffix2)
        } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if ($truthy(r1)) {
        return prefix1
      } else {
        return $$($nesting, 'File').$dirname(prefix1)
      };
    }, $Pathname_plus$14.$$arity = 2);
    
    Opal.def(self, '$join', $Pathname_join$15 = function $$join($a) {try {

      var $post_args, args, $$16, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$empty?']())) {
        return self};
      result = args.$pop();
      if ($truthy($$($nesting, 'Pathname')['$==='](result))) {
      } else {
        result = $$($nesting, 'Pathname').$new(result)
      };
      if ($truthy(result['$absolute?']())) {
        return result};
      $send(args, 'reverse_each', [], ($$16 = function(arg){var self = $$16.$$s == null ? this : $$16.$$s;

        
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy($$($nesting, 'Pathname')['$==='](arg))) {
        } else {
          arg = $$($nesting, 'Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ($truthy(result['$absolute?']())) {
          Opal.ret(result)
        } else {
          return nil
        };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Pathname_join$15.$$arity = -1);
    
    Opal.def(self, '$split', $Pathname_split$17 = function $$split() {
      var self = this;

      return [self.$dirname(), self.$basename()]
    }, $Pathname_split$17.$$arity = 0);
    
    Opal.def(self, '$dirname', $Pathname_dirname$18 = function $$dirname() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$dirname(self.path))
    }, $Pathname_dirname$18.$$arity = 0);
    
    Opal.def(self, '$basename', $Pathname_basename$19 = function $$basename() {
      var self = this;

      return $$($nesting, 'Pathname').$new($$($nesting, 'File').$basename(self.path))
    }, $Pathname_basename$19.$$arity = 0);
    
    Opal.def(self, '$directory?', $Pathname_directory$ques$20 = function() {
      var self = this;

      return $$($nesting, 'File')['$directory?'](self.path)
    }, $Pathname_directory$ques$20.$$arity = 0);
    
    Opal.def(self, '$extname', $Pathname_extname$21 = function $$extname() {
      var self = this;

      return $$($nesting, 'File').$extname(self.path)
    }, $Pathname_extname$21.$$arity = 0);
    
    Opal.def(self, '$<=>', $Pathname_$lt_eq_gt$22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path())
    }, $Pathname_$lt_eq_gt$22.$$arity = 1);
    $alias(self, "eql?", "==");
    $alias(self, "===", "==");
    $alias(self, "to_str", "to_path");
    $alias(self, "to_s", "to_path");
    Opal.const_set($nesting[0], 'SAME_PATHS', (function() {if ($truthy($$$($$($nesting, 'File'), 'FNM_SYSCASE')['$nonzero?']())) {
      return $send(self, 'proc', [], ($Pathname$23 = function(a, b){var self = $Pathname$23.$$s == null ? this : $Pathname$23.$$s;

        
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a.$casecmp(b)['$=='](0);}, $Pathname$23.$$s = self, $Pathname$23.$$arity = 2, $Pathname$23))
    } else {
      return $send(self, 'proc', [], ($Pathname$24 = function(a, b){var self = $Pathname$24.$$s == null ? this : $Pathname$24.$$s;

        
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$=='](b);}, $Pathname$24.$$s = self, $Pathname$24.$$arity = 2, $Pathname$24))
    }; return nil; })());
    
    Opal.def(self, '$relative_path_from', $Pathname_relative_path_from$25 = function $$relative_path_from(base_directory) {
      var $a, $b, $c, self = this, dest_directory = nil, dest_prefix = nil, dest_names = nil, r = nil, basename = nil, base_prefix = nil, base_names = nil, $ret_or_6 = nil, $ret_or_7 = nil, relpath_names = nil;

      
      dest_directory = self.$cleanpath().$to_s();
      base_directory = base_directory.$cleanpath().$to_s();
      dest_prefix = dest_directory;
      dest_names = [];
      while ($truthy((r = self.$chop_basename(dest_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (dest_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          dest_names.$unshift(basename)};
      };
      base_prefix = base_directory;
      base_names = [];
      while ($truthy((r = self.$chop_basename(base_prefix)))) {
        
        $c = r, $b = Opal.to_ary($c), (base_prefix = ($b[0] == null ? nil : $b[0])), (basename = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(basename['$!=']("."))) {
          base_names.$unshift(basename)};
      };
      if ($truthy($$($nesting, 'SAME_PATHS')['$[]'](dest_prefix, base_prefix))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "different prefix: " + (dest_prefix.$inspect()) + " and " + (base_directory.$inspect()))
      };
      while ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = dest_names['$empty?']()['$!']()))) {
        return base_names['$empty?']()['$!']()
      } else {
        return $ret_or_7
      }; return nil; })()))) {
        return $$($nesting, 'SAME_PATHS')['$[]'](dest_names.$first(), base_names.$first())
      } else {
        return $ret_or_6
      }; return nil; })())) {
        
        dest_names.$shift();
        base_names.$shift();
      };
      if ($truthy(base_names['$include?'](".."))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "base_directory has ..: " + (base_directory.$inspect()))};
      base_names.$fill("..");
      relpath_names = $rb_plus(base_names, dest_names);
      if ($truthy(relpath_names['$empty?']())) {
        return $$($nesting, 'Pathname').$new(".")
      } else {
        return $$($nesting, 'Pathname').$new($send($$($nesting, 'File'), 'join', Opal.to_a(relpath_names)))
      };
    }, $Pathname_relative_path_from$25.$$arity = 1);
    return (Opal.def(self, '$entries', $Pathname_entries$26 = function $$entries() {
      var $$27, self = this;

      return $send($$($nesting, 'Dir').$entries(self.path), 'map', [], ($$27 = function(f){var self = $$27.$$s == null ? this : $$27.$$s;

        
        
        if (f == null) {
          f = nil;
        };
        return self.$class().$new(f);}, $$27.$$s = self, $$27.$$arity = 1, $$27))
    }, $Pathname_entries$26.$$arity = 0), nil) && 'entries';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Pathname$28;

    return (Opal.def(self, '$Pathname', $Kernel_Pathname$28 = function $$Pathname(path) {
      var self = this;

      return $$($nesting, 'Pathname').$new(path)
    }, $Kernel_Pathname$28.$$arity = 1), nil) && 'Pathname'
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/rewriters/break_finder"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $alias = Opal.alias;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/rewriter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakFinder');

        var $nesting = [self].concat($parent_nesting), $BreakFinder_initialize$1, $BreakFinder_found_break$ques$2, $BreakFinder_on_break$3, $BreakFinder_stop_lookup$4;

        self.$$prototype.found_break = nil;
        
        
        Opal.def(self, '$initialize', $BreakFinder_initialize$1 = function $$initialize() {
          var self = this;

          return (self.found_break = false)
        }, $BreakFinder_initialize$1.$$arity = 0);
        
        Opal.def(self, '$found_break?', $BreakFinder_found_break$ques$2 = function() {
          var self = this;

          return self.found_break
        }, $BreakFinder_found_break$ques$2.$$arity = 0);
        
        Opal.def(self, '$on_break', $BreakFinder_on_break$3 = function $$on_break(node) {
          var self = this;

          
          self.found_break = true;
          return node;
        }, $BreakFinder_on_break$3.$$arity = 1);
        
        Opal.def(self, '$stop_lookup', $BreakFinder_stop_lookup$4 = function $$stop_lookup(node) {
          var self = this;

          return nil
        }, $BreakFinder_stop_lookup$4.$$arity = 1);
        $alias(self, "on_for", "stop_lookup");
        $alias(self, "on_while", "stop_lookup");
        $alias(self, "on_while_post", "stop_lookup");
        $alias(self, "on_until", "stop_lookup");
        $alias(self, "on_until_post", "stop_lookup");
        return $alias(self, "on_block", "stop_lookup");
      })($nesting[0], $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/call"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$attr_reader', '$freeze', '$[]=', '$-', '$define_method', '$to_proc', '$include?', '$type', '$s', '$handle_special', '$record_method?', '$<<', '$method_calls', '$compiler', '$to_sym', '$meth', '$using_eval?', '$compile_eval_var', '$using_irb?', '$compile_irb_var', '$default_compile', '$private', '$iter', '$new', '$process', '$found_break?', '$splat?', '$!', '$empty?', '$collect_refinements_temps', '$scope', '$invoke_using_refinement?', '$compile_using_refined_send', '$invoke_using_send?', '$compile_using_send', '$compile_simple_call_chain', '$compile_break_catcher', '$helper', '$push', '$compile_receiver', '$compile_method_name', '$compile_arguments', '$compile_block_pass', '$compile_refinements', '$recv', '$receiver_sexp', '$expr', '$arglist', '$children', '$map', '$iter_has_break?', '$unshift', '$line', '$method_jsid', '$any?', '$==', '$recvr', '$mid_to_jsid', '$to_s', '$with_temp', '$intern', '$irb?', '$top?', '$variable_like?', '$eval?', '$scope_variables', '$nil?', '$updated', '$method', '$arity', '$[]', '$each', '$add_special', '$inline_operators?', '$operator_helpers', '$fragment', '$call', '$resolve', '$requires', '$file', '$dirname', '$cleanpath', '$join', '$Pathname', '$inspect', '$class_scope?', '$required_trees', '$force_encoding', '$encoding', '$+', '$handle_block_given_call', '$def?', '$mid', '$accepts_using?', '$count', '$using_refinement', '$first', '$refinements_temp', '$arity_check?', '$defines_lambda', '$push_nesting?', '$!=', '$length', '$new_temp', '$scope_locals', '$source_location', '$size', '$last', '$handle_part', '$is_a?', '$expand_path', '$split', '$dynamic_require_severity', '$===', '$error', '$warning', '$each_with_object', '$pop']);
  
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CallNode');

        var $nesting = [self].concat($parent_nesting), $CallNode_add_special$1, $CallNode_initialize$2, $CallNode_compile$3, $CallNode_iter_has_break$ques$5, $CallNode_invoke_using_send$ques$6, $CallNode_invoke_using_refinement$ques$7, $CallNode_default_compile$8, $CallNode_compile_using_send$9, $CallNode_compile_using_refined_send$10, $CallNode_compile_receiver$11, $CallNode_compile_method_name$12, $CallNode_compile_arguments$13, $CallNode_compile_block_pass$14, $CallNode_compile_refinements$15, $CallNode_compile_break_catcher$17, $CallNode_compile_simple_call_chain$18, $CallNode_splat$ques$19, $CallNode_receiver_sexp$21, $CallNode_method_jsid$22, $CallNode_record_method$ques$23, $CallNode_compile_irb_var$24, $CallNode_compile_eval_var$26, $CallNode_using_irb$ques$27, $CallNode_using_eval$ques$28, $CallNode_variable_like$ques$29, $CallNode_sexp_with_arglist$30, $CallNode_handle_special$31, $CallNode$32, $CallNode$34, $CallNode$35, $CallNode$36, $CallNode$37, $CallNode$38, $CallNode$39, $CallNode$40, $CallNode$41, $CallNode_using_refinement$42, $CallNode$43, $CallNode$44, $CallNode$45, $CallNode$47, $CallNode$48, $CallNode$49, $CallNode$50, $CallNode_push_nesting$ques$51;

        self.$$prototype.sexp = self.$$prototype.compiler = nil;
        
        self.$handle("send");
        self.$attr_reader("recvr", "meth", "arglist", "iter");
        Opal.const_set($nesting[0], 'SPECIALS', $hash2([], {}));
        Opal.const_set($nesting[0], 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}).$freeze());
        Opal.defs(self, '$add_special', $CallNode_add_special$1 = function $$add_special(name, options) {
          var $iter = $CallNode_add_special$1.$$p, handler = $iter || nil, self = this, $writer = nil;

          if ($iter) $CallNode_add_special$1.$$p = null;
          
          
          if ($iter) $CallNode_add_special$1.$$p = null;;
          
          if (options == null) {
            options = $hash2([], {});
          };
          
          $writer = [name, options];
          $send($$($nesting, 'SPECIALS'), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send(self, 'define_method', ["" + "handle_" + (name)], handler.$to_proc());
        }, $CallNode_add_special$1.$$arity = -2);
        
        Opal.def(self, '$initialize', $CallNode_initialize$2 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $CallNode_initialize$2.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_arg = nil, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $CallNode_initialize$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $CallNode_initialize$2, false, true), 'initialize', $zuper, $iter);
          $b = [].concat(Opal.to_a(self.sexp)), (self.recvr = ($b[0] == null ? nil : $b[0])), (self.meth = ($b[1] == null ? nil : $b[1])), (args = $slice.call($b, 2)), $b;
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_arg = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy((function() {if ($truthy(($ret_or_1 = last_arg))) {
            return ["iter", "block_pass"]['$include?'](last_arg.$type())
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            self.iter = last_arg;
            args = rest;
          } else {
            self.iter = nil
          };
          return (self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args))));
        }, $CallNode_initialize$2.$$arity = -1);
        
        Opal.def(self, '$compile', $CallNode_compile$3 = function $$compile() {try {

          var $$4, self = this;

          return $send(self, 'handle_special', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

            
            if ($truthy(self['$record_method?']())) {
              self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())};
            if ($truthy(self['$using_eval?']())) {
              Opal.ret(self.$compile_eval_var())};
            if ($truthy(self['$using_irb?']())) {
              Opal.ret(self.$compile_irb_var())};
            return self.$default_compile();}, $$4.$$s = self, $$4.$$arity = 0, $$4))
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, $CallNode_compile$3.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$iter_has_break?', $CallNode_iter_has_break$ques$5 = function() {
          var self = this, finder = nil;

          
          if ($truthy(self.$iter())) {
          } else {
            return false
          };
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.$iter());
          return finder['$found_break?']();
        }, $CallNode_iter_has_break$ques$5.$$arity = 0);
        
        Opal.def(self, '$invoke_using_send?', $CallNode_invoke_using_send$ques$6 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.$iter()))) {
            return $ret_or_2
          } else {
            return self['$splat?']()
          }
        }, $CallNode_invoke_using_send$ques$6.$$arity = 0);
        
        Opal.def(self, '$invoke_using_refinement?', $CallNode_invoke_using_refinement$ques$7 = function() {
          var self = this;

          return self.$scope().$scope().$collect_refinements_temps()['$empty?']()['$!']()
        }, $CallNode_invoke_using_refinement$ques$7.$$arity = 0);
        
        Opal.def(self, '$default_compile', $CallNode_default_compile$8 = function $$default_compile() {
          var self = this;

          
          if ($truthy(self['$invoke_using_refinement?']())) {
            self.$compile_using_refined_send()
          } else if ($truthy(self['$invoke_using_send?']())) {
            self.$compile_using_send()
          } else {
            self.$compile_simple_call_chain()
          };
          return self.$compile_break_catcher();
        }, $CallNode_default_compile$8.$$arity = 0);
        
        Opal.def(self, '$compile_using_send', $CallNode_compile_using_send$9 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send");
          self.$push("$send(");
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $CallNode_compile_using_send$9.$$arity = 0);
        
        Opal.def(self, '$compile_using_refined_send', $CallNode_compile_using_refined_send$10 = function $$compile_using_refined_send() {
          var self = this;

          
          self.$helper("refined_send");
          self.$push("$refined_send(");
          self.$compile_refinements();
          self.$compile_receiver();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $CallNode_compile_using_refined_send$10.$$arity = 0);
        
        Opal.def(self, '$compile_receiver', $CallNode_compile_receiver$11 = function $$compile_receiver() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()))
        }, $CallNode_compile_receiver$11.$$arity = 0);
        
        Opal.def(self, '$compile_method_name', $CallNode_compile_method_name$12 = function $$compile_method_name() {
          var self = this;

          return self.$push("" + ", '" + (self.$meth()) + "'")
        }, $CallNode_compile_method_name$12.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $CallNode_compile_arguments$13 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self['$splat?']())) {
            return self.$push(self.$expr(self.$arglist()))
          } else if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push("[", self.$expr(self.$arglist()), "]")
          };
        }, $CallNode_compile_arguments$13.$$arity = 0);
        
        Opal.def(self, '$compile_block_pass', $CallNode_compile_block_pass$14 = function $$compile_block_pass() {
          var self = this;

          if ($truthy(self.$iter())) {
            return self.$push(", ", self.$expr(self.$iter()))
          } else {
            return nil
          }
        }, $CallNode_compile_block_pass$14.$$arity = 0);
        
        Opal.def(self, '$compile_refinements', $CallNode_compile_refinements$15 = function $$compile_refinements() {
          var $$16, self = this, refinements = nil;

          
          refinements = $send(self.$scope().$collect_refinements_temps(), 'map', [], ($$16 = function(i){var self = $$16.$$s == null ? this : $$16.$$s;

            
            
            if (i == null) {
              i = nil;
            };
            return self.$s("js_tmp", i);}, $$16.$$s = self, $$16.$$arity = 1, $$16));
          return self.$push(self.$expr($send(self, 's', ["array"].concat(Opal.to_a(refinements)))), ", ");
        }, $CallNode_compile_refinements$15.$$arity = 0);
        
        Opal.def(self, '$compile_break_catcher', $CallNode_compile_break_catcher$17 = function $$compile_break_catcher() {
          var self = this;

          if ($truthy(self['$iter_has_break?']())) {
            
            self.$unshift("return ");
            self.$unshift("(function(){var $brk = Opal.new_brk(); try {");
            return self.$line("} catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()");
          } else {
            return nil
          }
        }, $CallNode_compile_break_catcher$17.$$arity = 0);
        
        Opal.def(self, '$compile_simple_call_chain', $CallNode_compile_simple_call_chain$18 = function $$compile_simple_call_chain() {
          var self = this;

          return self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), "(", self.$expr(self.$arglist()), ")")
        }, $CallNode_compile_simple_call_chain$18.$$arity = 0);
        
        Opal.def(self, '$splat?', $CallNode_splat$ques$19 = function() {
          var $$20, self = this;

          return $send(self.$arglist().$children(), 'any?', [], ($$20 = function(a){var self = $$20.$$s == null ? this : $$20.$$s;

            
            
            if (a == null) {
              a = nil;
            };
            return a.$type()['$==']("splat");}, $$20.$$s = self, $$20.$$arity = 1, $$20))
        }, $CallNode_splat$ques$19.$$arity = 0);
        
        Opal.def(self, '$receiver_sexp', $CallNode_receiver_sexp$21 = function $$receiver_sexp() {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self.$recvr()))) {
            return $ret_or_3
          } else {
            return self.$s("self")
          }
        }, $CallNode_receiver_sexp$21.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $CallNode_method_jsid$22 = function $$method_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s())
        }, $CallNode_method_jsid$22.$$arity = 0);
        
        Opal.def(self, '$record_method?', $CallNode_record_method$ques$23 = function() {
          var self = this;

          return true
        }, $CallNode_record_method$ques$23.$$arity = 0);
        
        Opal.def(self, '$compile_irb_var', $CallNode_compile_irb_var$24 = function $$compile_irb_var() {
          var $$25, self = this;

          return $send(self, 'with_temp', [], ($$25 = function(tmp){var self = $$25.$$s == null ? this : $$25.$$s, lvar = nil, call = nil;

            
            
            if (tmp == null) {
              tmp = nil;
            };
            lvar = self.$meth();
            call = self.$s("send", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("" + "((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), "" + " : " + (tmp) + ")");}, $$25.$$s = self, $$25.$$arity = 1, $$25))
        }, $CallNode_compile_irb_var$24.$$arity = 0);
        
        Opal.def(self, '$compile_eval_var', $CallNode_compile_eval_var$26 = function $$compile_eval_var() {
          var self = this;

          return self.$push(self.$meth().$to_s())
        }, $CallNode_compile_eval_var$26.$$arity = 0);
        
        Opal.def(self, '$using_irb?', $CallNode_using_irb$ques$27 = function() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil;

          if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.compiler['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_5
          }; return nil; })()))) {
            return self['$variable_like?']()
          } else {
            return $ret_or_4
          }
        }, $CallNode_using_irb$ques$27.$$arity = 0);
        
        Opal.def(self, '$using_eval?', $CallNode_using_eval$ques$28 = function() {
          var self = this, $ret_or_6 = nil, $ret_or_7 = nil;

          if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = self.compiler['$eval?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_7
          }; return nil; })()))) {
            return self.compiler.$scope_variables()['$include?'](self.$meth())
          } else {
            return $ret_or_6
          }
        }, $CallNode_using_eval$ques$28.$$arity = 0);
        
        Opal.def(self, '$variable_like?', $CallNode_variable_like$ques$29 = function() {
          var self = this, $ret_or_8 = nil, $ret_or_9 = nil;

          if ($truthy(($ret_or_8 = (function() {if ($truthy(($ret_or_9 = self.$arglist()['$=='](self.$s("arglist"))))) {
            return self.$recvr()['$nil?']()
          } else {
            return $ret_or_9
          }; return nil; })()))) {
            return self.$iter()['$nil?']()
          } else {
            return $ret_or_8
          }
        }, $CallNode_variable_like$ques$29.$$arity = 0);
        
        Opal.def(self, '$sexp_with_arglist', $CallNode_sexp_with_arglist$30 = function $$sexp_with_arglist() {
          var self = this;

          return self.sexp.$updated(nil, [self.$recvr(), self.$meth(), self.$arglist()])
        }, $CallNode_sexp_with_arglist$30.$$arity = 0);
        
        Opal.def(self, '$handle_special', $CallNode_handle_special$31 = function $$handle_special() {
          var $iter = $CallNode_handle_special$31.$$p, compile_default = $iter || nil, self = this, method = nil;

          if ($iter) $CallNode_handle_special$31.$$p = null;
          
          
          if ($iter) $CallNode_handle_special$31.$$p = null;;
          if ($truthy($$($nesting, 'SPECIALS')['$include?'](self.$meth()))) {
            
            method = self.$method("" + "handle_" + (self.$meth()));
            if (method.$arity()['$=='](1)) {
              return method['$[]'](compile_default)
            } else {
              return method['$[]']()
            };
          } else {
            return Opal.yieldX(compile_default, []);
          };
        }, $CallNode_handle_special$31.$$arity = 0);
        $send($$($nesting, 'OPERATORS'), 'each', [], ($CallNode$32 = function(operator, name){var self = $CallNode$32.$$s == null ? this : $CallNode$32.$$s, $$33;

          
          
          if (operator == null) {
            operator = nil;
          };
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'add_special', [operator.$to_sym()], ($$33 = function(compile_default){var self = $$33.$$s == null ? this : $$33.$$s, $a, lhs = nil, rhs = nil;

            
            
            if (compile_default == null) {
              compile_default = nil;
            };
            if ($truthy(self.$compiler()['$inline_operators?']())) {
              
              if ($truthy(self['$record_method?']())) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())};
              self.$compiler().$operator_helpers()['$<<'](operator.$to_sym());
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist())], (lhs = $a[0]), (rhs = $a[1]), $a;
              self.$push(self.$fragment("" + "$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
            } else {
              return compile_default.$call()
            };}, $$33.$$s = self, $$33.$$arity = 1, $$33));}, $CallNode$32.$$s = self, $CallNode$32.$$arity = 2, $CallNode$32));
        $send(self, 'add_special', ["require"], ($CallNode$34 = function(compile_default){var self = $CallNode$34.$$s == null ? this : $CallNode$34.$$s, str = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](0)).$resolve();
          if ($truthy(str['$nil?']())) {
          } else {
            self.$compiler().$requires()['$<<'](str)
          };
          return compile_default.$call();}, $CallNode$34.$$s = self, $CallNode$34.$$arity = 1, $CallNode$34));
        $send(self, 'add_special', ["require_relative"], ($CallNode$35 = function(){var self = $CallNode$35.$$s == null ? this : $CallNode$35.$$s, arg = nil, file = nil, dir = nil;

          
          arg = self.$arglist().$children()['$[]'](0);
          file = self.$compiler().$file();
          if (arg.$type()['$==']("str")) {
            
            dir = $$($nesting, 'File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg.$children()['$[]'](0)).$cleanpath().$to_s());};
          self.$push(self.$fragment("" + "self.$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, $CallNode$35.$$s = self, $CallNode$35.$$arity = 0, $CallNode$35));
        $send(self, 'add_special', ["autoload"], ($CallNode$36 = function(compile_default){var self = $CallNode$36.$$s == null ? this : $CallNode$36.$$s, str = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          if ($truthy(self.$scope()['$class_scope?']())) {
            
            str = $$($nesting, 'DependencyResolver').$new(self.$compiler(), self.$arglist().$children()['$[]'](1)).$resolve();
            if ($truthy(str['$nil?']())) {
            } else {
              self.$compiler().$requires()['$<<'](str)
            };
            return compile_default.$call();
          } else {
            return nil
          };}, $CallNode$36.$$s = self, $CallNode$36.$$arity = 1, $CallNode$36));
        $send(self, 'add_special', ["require_tree"], ($CallNode$37 = function(compile_default){var self = $CallNode$37.$$s == null ? this : $CallNode$37.$$s, $a, first_arg = nil, rest = nil, relative_path = nil, dir = nil, full_path = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          $a = [].concat(Opal.to_a(self.$arglist().$children())), (first_arg = ($a[0] == null ? nil : $a[0])), (rest = $slice.call($a, 1)), $a;
          if (first_arg.$type()['$==']("str")) {
            
            relative_path = first_arg.$children()['$[]'](0);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $$($nesting, 'File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            full_path.$force_encoding(relative_path.$encoding());
            first_arg = first_arg.$updated(nil, [full_path]);};
          self.arglist = self.$arglist().$updated(nil, $rb_plus([first_arg], rest));
          return compile_default.$call();}, $CallNode$37.$$s = self, $CallNode$37.$$arity = 1, $CallNode$37));
        $send(self, 'add_special', ["block_given?"], ($CallNode$38 = function(){var self = $CallNode$38.$$s == null ? this : $CallNode$38.$$s;
          if (self.sexp == null) self.sexp = nil;

          return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, $CallNode$38.$$s = self, $CallNode$38.$$arity = 0, $CallNode$38));
        $send(self, 'add_special', ["__callee__"], ($CallNode$39 = function(){var self = $CallNode$39.$$s == null ? this : $CallNode$39.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$39.$$s = self, $CallNode$39.$$arity = 0, $CallNode$39));
        $send(self, 'add_special', ["__method__"], ($CallNode$40 = function(){var self = $CallNode$40.$$s == null ? this : $CallNode$40.$$s;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
          } else {
            return self.$push(self.$fragment("nil"))
          }}, $CallNode$40.$$s = self, $CallNode$40.$$arity = 0, $CallNode$40));
        $send(self, 'add_special', ["using"], ($CallNode$41 = function(compile_default){var self = $CallNode$41.$$s == null ? this : $CallNode$41.$$s, $ret_or_10 = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_10 = self.$scope()['$accepts_using?']()))) {
            return self.$arglist().$children().$count()['$=='](1)
          } else {
            return $ret_or_10
          }; return nil; })())) {
            return self.$using_refinement(self.$arglist().$children().$first())
          } else {
            return compile_default.$call()
          };}, $CallNode$41.$$s = self, $CallNode$41.$$arity = 1, $CallNode$41));
        
        Opal.def(self, '$using_refinement', $CallNode_using_refinement$42 = function $$using_refinement(arg) {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [].concat(Opal.to_a(self.$scope().$refinements_temp())), (prev = ($a[0] == null ? nil : $a[0])), (curr = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(prev)) {
            return self.$push("" + "(" + (curr) + " = " + (prev) + ".slice(), " + (curr) + ".push(", self.$expr(arg), "), self)")
          } else {
            return self.$push("" + "(" + (curr) + " = [", self.$expr(arg), "], self)")
          };
        }, $CallNode_using_refinement$42.$$arity = 1);
        $send(self, 'add_special', ["debugger"], ($CallNode$43 = function(){var self = $CallNode$43.$$s == null ? this : $CallNode$43.$$s;

          return self.$push(self.$fragment("debugger"))}, $CallNode$43.$$s = self, $CallNode$43.$$arity = 0, $CallNode$43));
        $send(self, 'add_special', ["__OPAL_COMPILER_CONFIG__"], ($CallNode$44 = function(){var self = $CallNode$44.$$s == null ? this : $CallNode$44.$$s;

          return self.$push(self.$fragment("" + "Opal.hash({ arity_check: " + (self.$compiler()['$arity_check?']()) + " })"))}, $CallNode$44.$$s = self, $CallNode$44.$$arity = 0, $CallNode$44));
        $send(self, 'add_special', ["lambda"], ($CallNode$45 = function(compile_default){var self = $CallNode$45.$$s == null ? this : $CallNode$45.$$s, $$46;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          return $send(self.$scope(), 'defines_lambda', [], ($$46 = function(){var self = $$46.$$s == null ? this : $$46.$$s;

            return compile_default.$call()}, $$46.$$s = self, $$46.$$arity = 0, $$46));}, $CallNode$45.$$s = self, $CallNode$45.$$arity = 1, $CallNode$45));
        $send(self, 'add_special', ["nesting"], ($CallNode$47 = function(compile_default){var self = $CallNode$47.$$s == null ? this : $CallNode$47.$$s, push_nesting = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$47.$$s = self, $CallNode$47.$$arity = 1, $CallNode$47));
        $send(self, 'add_special', ["constants"], ($CallNode$48 = function(compile_default){var self = $CallNode$48.$$s == null ? this : $CallNode$48.$$s, push_nesting = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          push_nesting = self['$push_nesting?']();
          if ($truthy(push_nesting)) {
            self.$push("(Opal.Module.$$nesting = $nesting, ")};
          compile_default.$call();
          if ($truthy(push_nesting)) {
            return self.$push(")")
          } else {
            return nil
          };}, $CallNode$48.$$s = self, $CallNode$48.$$arity = 1, $CallNode$48));
        $send(self, 'add_special', ["eval"], ($CallNode$49 = function(compile_default){var self = $CallNode$49.$$s == null ? this : $CallNode$49.$$s, $ret_or_11 = nil, temp = nil, scope_variables = nil;

          
          
          if (compile_default == null) {
            compile_default = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_11 = self.$arglist().$children().$length()['$!='](1)))) {
            return $ret_or_11
          } else {
            return [self.$s("self"), nil]['$include?'](self.$recvr())['$!']()
          }; return nil; })())) {
            return compile_default.$call();};
          temp = self.$scope().$new_temp();
          scope_variables = $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect();
          self.$push("" + "(" + (temp) + " = ", self.$expr(self.$arglist()));
          self.$push("" + ", typeof Opal.compile === 'function' ? eval(Opal.compile(" + (temp));
          self.$push(", {scope_variables: ", scope_variables);
          self.$push("" + ", arity_check: " + (self.$compiler()['$arity_check?']()) + ", file: '(eval)', eval: true})) : ");
          return self.$push("" + "self.$eval(" + (temp) + "))");}, $CallNode$49.$$s = self, $CallNode$49.$$arity = 1, $CallNode$49));
        $send(self, 'add_special', ["binding"], ($CallNode$50 = function(){var self = $CallNode$50.$$s == null ? this : $CallNode$50.$$s;

          
          self.$push("Opal.Binding.$new(");
          self.$push("  function($code, $value) {");
          self.$push("    if (typeof $value === 'undefined') {");
          self.$push("      return eval($code);");
          self.$push("    }");
          self.$push("    else {");
          self.$push("      return eval($code + ' = $value');");
          self.$push("    }");
          self.$push("  },");
          self.$push("  ", $send(self.$scope().$scope_locals(), 'map', [], "to_s".$to_proc()).$inspect(), ",");
          self.$push("  self,");
          self.$push("  ", self.$source_location());
          return self.$push(")");}, $CallNode$50.$$s = self, $CallNode$50.$$arity = 0, $CallNode$50));
        
        Opal.def(self, '$push_nesting?', $CallNode_push_nesting$ques$51 = function() {
          var self = this, recv = nil, $ret_or_12 = nil, $ret_or_13 = nil, $ret_or_14 = nil;

          
          recv = self.$children().$first();
          if ($truthy(($ret_or_12 = self.$children().$size()['$=='](2)))) {
            
            if ($truthy(($ret_or_13 = recv['$nil?']()))) {
              return $ret_or_13
            } else {
              
              if ($truthy(($ret_or_14 = recv.$type()['$==']("const")))) {
                return recv.$children().$last()['$==']("Module")
              } else {
                return $ret_or_14
              };
            };
          } else {
            return $ret_or_12
          };
        }, $CallNode_push_nesting$ques$51.$$arity = 0);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DependencyResolver');

          var $nesting = [self].concat($parent_nesting), $DependencyResolver_initialize$52, $DependencyResolver_resolve$53, $DependencyResolver_handle_part$54, $DependencyResolver_expand_path$56;

          self.$$prototype.sexp = self.$$prototype.compiler = nil;
          
          
          Opal.def(self, '$initialize', $DependencyResolver_initialize$52 = function $$initialize(compiler, sexp) {
            var self = this;

            
            self.compiler = compiler;
            return (self.sexp = sexp);
          }, $DependencyResolver_initialize$52.$$arity = 2);
          
          Opal.def(self, '$resolve', $DependencyResolver_resolve$53 = function $$resolve() {
            var self = this;

            return self.$handle_part(self.sexp)
          }, $DependencyResolver_resolve$53.$$arity = 0);
          
          Opal.def(self, '$handle_part', $DependencyResolver_handle_part$54 = function $$handle_part(sexp) {
            var $a, $b, $$55, self = this, type = nil, recv = nil, meth = nil, args = nil, parts = nil, $ret_or_15 = nil, $ret_or_16 = nil, msg = nil, $case = nil;

            
            type = sexp.$type();
            if (type['$==']("str")) {
              return sexp.$children()['$[]'](0)
            } else if (type['$==']("send")) {
              
              $b = sexp.$children(), $a = Opal.to_ary($b), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $b;
              parts = $send(args, 'map', [], ($$55 = function(s){var self = $$55.$$s == null ? this : $$55.$$s;

                
                
                if (s == null) {
                  s = nil;
                };
                return self.$handle_part(s);}, $$55.$$s = self, $$55.$$arity = 1, $$55));
              if ($truthy((function() {if ($truthy(($ret_or_15 = (function() {if ($truthy(($ret_or_16 = recv['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))))) {
                return recv.$type()['$==']("const")
              } else {
                return $ret_or_16
              }; return nil; })()))) {
                return recv.$children().$last()['$==']("File")
              } else {
                return $ret_or_15
              }; return nil; })())) {
                if (meth['$==']("expand_path")) {
                  return $send(self, 'expand_path', Opal.to_a(parts))
                } else if (meth['$==']("join")) {
                  return self.$expand_path(parts.$join("/"))
                } else if (meth['$==']("dirname")) {
                  return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))}};};
            msg = "Cannot handle dynamic require";
            return (function() {$case = self.compiler.$dynamic_require_severity();
            if ("error"['$===']($case)) {return self.compiler.$error(msg, self.sexp.$line())}
            else if ("warning"['$===']($case)) {return self.compiler.$warning(msg, self.sexp.$line())}
            else { return nil }})();
          }, $DependencyResolver_handle_part$54.$$arity = 1);
          return (Opal.def(self, '$expand_path', $DependencyResolver_expand_path$56 = function $$expand_path(path, base) {
            var $$57, self = this;

            
            
            if (base == null) {
              base = "";
            };
            return $send(((("" + (base)) + "/") + (path)).$split("/"), 'each_with_object', [[]], ($$57 = function(part, p){var self = $$57.$$s == null ? this : $$57.$$s;

              
              
              if (part == null) {
                part = nil;
              };
              
              if (p == null) {
                p = nil;
              };
              if (part['$==']("")) {
                return nil
              } else if (part['$==']("..")) {
                return p.$pop()
              } else {
                return p['$<<'](part)
              };}, $$57.$$s = self, $$57.$$arity = 2, $$57)).$join("/");
          }, $DependencyResolver_expand_path$56.$$arity = -2), nil) && 'expand_path';
        })($nesting[0], null, $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/csend"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$helper', '$conditional_send', '$recv', '$receiver_sexp', '$push', '$compile_method_name', '$compile_arguments', '$compile_block_pass']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CSendNode');

        var $nesting = [self].concat($parent_nesting), $CSendNode_default_compile$1;

        
        self.$handle("csend");
        return (Opal.def(self, '$default_compile', $CSendNode_default_compile$1 = function $$default_compile() {
          var $$2, self = this;

          
          self.$helper("send");
          return $send(self, 'conditional_send', [self.$recv(self.$receiver_sexp())], ($$2 = function(receiver_temp){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (receiver_temp == null) {
              receiver_temp = nil;
            };
            self.$push("$send(", receiver_temp);
            self.$compile_method_name();
            self.$compile_arguments();
            self.$compile_block_pass();
            return self.$push(")");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $CSendNode_default_compile$1.$$arity = 0), nil) && 'default_compile';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/call_special"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$recv', '$recvr', '$expr', '$property', '$value', '$<<', '$default_compile', '$meth', '$receiver_sexp', '$method_jsid', '$compile_arguments', '$iter', '$s', '$lhs', '$rhs', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrNode_compile$1;

        
        self.$handle("jsattr");
        self.$children("recvr", "property");
        return (Opal.def(self, '$compile', $JsAttrNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "]")
        }, $JsAttrNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrAsgnNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrAsgnNode_compile$2;

        
        self.$handle("jsattrasgn");
        self.$children("recvr", "property", "value");
        return (Opal.def(self, '$compile', $JsAttrAsgnNode_compile$2 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "] = ", self.$expr(self.$value()))
        }, $JsAttrAsgnNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsCallNode');

        var $nesting = [self].concat($parent_nesting), $JsCallNode_initialize$3, $JsCallNode_compile$4, $JsCallNode_method_jsid$5, $JsCallNode_compile_using_send$6;

        self.$$prototype.iter = self.$$prototype.arglist = nil;
        
        self.$handle("jscall");
        
        Opal.def(self, '$initialize', $JsCallNode_initialize$3 = function $$initialize($a) {
          var $post_args, $iter = $JsCallNode_initialize$3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $JsCallNode_initialize$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $JsCallNode_initialize$3, false, true), 'initialize', $zuper, $iter);
          if ($truthy(self.iter)) {
            self.arglist = self.arglist['$<<'](self.iter)};
          return (self.iter = nil);
        }, $JsCallNode_initialize$3.$$arity = -1);
        
        Opal.def(self, '$compile', $JsCallNode_compile$4 = function $$compile() {
          var self = this;

          return self.$default_compile()
        }, $JsCallNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $JsCallNode_method_jsid$5 = function $$method_jsid() {
          var self = this;

          return "" + "." + (self.$meth())
        }, $JsCallNode_method_jsid$5.$$arity = 0);
        return (Opal.def(self, '$compile_using_send', $JsCallNode_compile_using_send$6 = function $$compile_using_send() {
          var self = this;

          
          self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), ".apply(null");
          self.$compile_arguments();
          if ($truthy(self.$iter())) {
            self.$push(".concat(", self.$expr(self.$iter()), ")")};
          return self.$push(")");
        }, $JsCallNode_compile_using_send$6.$$arity = 0), nil) && 'compile_using_send';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Match3Node');

        var $nesting = [self].concat($parent_nesting), $Match3Node_compile$7;

        self.$$prototype.level = nil;
        
        self.$handle("match_with_lvasgn");
        self.$children("lhs", "rhs");
        return (Opal.def(self, '$compile', $Match3Node_compile$7 = function $$compile() {
          var self = this, sexp = nil;

          
          sexp = self.$s("send", self.$lhs(), "=~", self.$rhs());
          return self.$push(self.$process(sexp, self.level));
        }, $Match3Node_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/scope"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$-', '$==', '$top?', '$top_scope', '$parent', '$iter?', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$|', '$scope_locals', '$has_temp?', '$pop', '$next_temp', '$loop', '$succ', '$uses_block!', '$identify!', '$compact', '$name', '$scope_name', '$mid', '$unique_temp', '$add_scope_temp', '$def?', '$lambda?', '$type', '$nil?', '$rescue_else_sexp', '$last', '$class', '$collect_refinements_temps', '$add_scope_local', '$new_refinements_temp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $ScopeNode_initialize$1, $ScopeNode_in_scope$2, $ScopeNode_class_scope$ques$4, $ScopeNode_class$ques$5, $ScopeNode_module$ques$6, $ScopeNode_sclass$ques$7, $ScopeNode_top$ques$8, $ScopeNode_top_scope$9, $ScopeNode_iter$ques$10, $ScopeNode_def$ques$11, $ScopeNode_lambda$ques$12, $ScopeNode_is_lambda$excl$13, $ScopeNode_defines_lambda$14, $ScopeNode_lambda_definition$ques$15, $ScopeNode_def_in_class$ques$16, $ScopeNode_to_vars$17, $ScopeNode_add_scope_ivar$22, $ScopeNode_add_scope_gvar$23, $ScopeNode_add_proto_ivar$24, $ScopeNode_add_arg$25, $ScopeNode_add_scope_local$26, $ScopeNode_has_local$ques$27, $ScopeNode_scope_locals$28, $ScopeNode_add_scope_temp$29, $ScopeNode_has_temp$ques$30, $ScopeNode_new_temp$31, $ScopeNode_next_temp$32, $ScopeNode_queue_temp$34, $ScopeNode_push_while$35, $ScopeNode_pop_while$36, $ScopeNode_in_while$ques$37, $ScopeNode_uses_block$excl$38, $ScopeNode_identify$excl$39, $ScopeNode_find_parent_def$40, $ScopeNode_super_chain$41, $ScopeNode_uses_block$ques$42, $ScopeNode_has_rescue_else$ques$43, $ScopeNode_in_rescue$44, $ScopeNode_current_rescue$45, $ScopeNode_in_resbody$46, $ScopeNode_in_resbody$ques$47, $ScopeNode_in_ensure$48, $ScopeNode_in_ensure$ques$49, $ScopeNode_gen_retry_id$50, $ScopeNode_accepts_using$ques$51, $ScopeNode_collect_refinements_temps$52, $ScopeNode_new_refinements_temp$53, $ScopeNode_refinements_temp$54;

        self.$$prototype.type = self.$$prototype.is_lambda = self.$$prototype.lambda_definition = self.$$prototype.defs = self.$$prototype.parent = self.$$prototype.temps = self.$$prototype.locals = self.$$prototype.compiler = self.$$prototype.proto_ivars = self.$$prototype.ivars = self.$$prototype.gvars = self.$$prototype.args = self.$$prototype.queue = self.$$prototype.while_stack = self.$$prototype.identity = self.$$prototype.uses_block = self.$$prototype.rescues = self.$$prototype.in_resbody = self.$$prototype.in_ensure = self.$$prototype.next_retry_id = self.$$prototype.refinements_temp = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("uses_super");
        self.$attr_accessor("uses_zuper");
        self.$attr_accessor("catch_return", "has_break", "has_retry");
        self.$attr_accessor("rescue_else_sexp");
        
        Opal.def(self, '$initialize', $ScopeNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ScopeNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ScopeNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $ScopeNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, $ScopeNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$in_scope', $ScopeNode_in_scope$2 = function $$in_scope() {
          var $$3, $iter = $ScopeNode_in_scope$2.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ScopeNode_in_scope$2.$$p = null;
          return $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;
            if (self.parent == null) self.parent = nil;

            
            self.parent = self.$compiler().$scope();
            
            $writer = [self];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            Opal.yield1($yield, self);
            
            $writer = [self.parent];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$3.$$s = self, $$3.$$arity = 0, $$3))
        }, $ScopeNode_in_scope$2.$$arity = 0);
        
        Opal.def(self, '$class_scope?', $ScopeNode_class_scope$ques$4 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("class")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("module")
          }
        }, $ScopeNode_class_scope$ques$4.$$arity = 0);
        
        Opal.def(self, '$class?', $ScopeNode_class$ques$5 = function() {
          var self = this;

          return self.type['$==']("class")
        }, $ScopeNode_class$ques$5.$$arity = 0);
        
        Opal.def(self, '$module?', $ScopeNode_module$ques$6 = function() {
          var self = this;

          return self.type['$==']("module")
        }, $ScopeNode_module$ques$6.$$arity = 0);
        
        Opal.def(self, '$sclass?', $ScopeNode_sclass$ques$7 = function() {
          var self = this;

          return self.type['$==']("sclass")
        }, $ScopeNode_sclass$ques$7.$$arity = 0);
        
        Opal.def(self, '$top?', $ScopeNode_top$ques$8 = function() {
          var self = this;

          return self.type['$==']("top")
        }, $ScopeNode_top$ques$8.$$arity = 0);
        
        Opal.def(self, '$top_scope', $ScopeNode_top_scope$9 = function $$top_scope() {
          var self = this;

          if ($truthy(self['$top?']())) {
            return self
          } else {
            return self.$parent().$top_scope()
          }
        }, $ScopeNode_top_scope$9.$$arity = 0);
        
        Opal.def(self, '$iter?', $ScopeNode_iter$ques$10 = function() {
          var self = this;

          return self.type['$==']("iter")
        }, $ScopeNode_iter$ques$10.$$arity = 0);
        
        Opal.def(self, '$def?', $ScopeNode_def$ques$11 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.type['$==']("def")))) {
            return $ret_or_2
          } else {
            return self.type['$==']("defs")
          }
        }, $ScopeNode_def$ques$11.$$arity = 0);
        
        Opal.def(self, '$lambda?', $ScopeNode_lambda$ques$12 = function() {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$iter?']()))) {
            return self.is_lambda
          } else {
            return $ret_or_3
          }
        }, $ScopeNode_lambda$ques$12.$$arity = 0);
        
        Opal.def(self, '$is_lambda!', $ScopeNode_is_lambda$excl$13 = function() {
          var self = this;

          return (self.is_lambda = true)
        }, $ScopeNode_is_lambda$excl$13.$$arity = 0);
        
        Opal.def(self, '$defines_lambda', $ScopeNode_defines_lambda$14 = function $$defines_lambda() {
          var $iter = $ScopeNode_defines_lambda$14.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ScopeNode_defines_lambda$14.$$p = null;
          
          self.lambda_definition = true;
          Opal.yieldX($yield, []);
          return (self.lambda_definition = false);
        }, $ScopeNode_defines_lambda$14.$$arity = 0);
        
        Opal.def(self, '$lambda_definition?', $ScopeNode_lambda_definition$ques$15 = function() {
          var self = this;

          return self.lambda_definition
        }, $ScopeNode_lambda_definition$ques$15.$$arity = 0);
        
        Opal.def(self, '$def_in_class?', $ScopeNode_def_in_class$ques$16 = function() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil;

          if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self.defs['$!']()))) {
            return self.type['$==']("def")
          } else {
            return $ret_or_6
          }; return nil; })()))) {
            return self.parent
          } else {
            return $ret_or_5
          }; return nil; })()))) {
            return self.parent['$class?']()
          } else {
            return $ret_or_4
          }
        }, $ScopeNode_def_in_class$ques$16.$$arity = 0);
        
        Opal.def(self, '$to_vars', $ScopeNode_to_vars$17 = function $$to_vars() {
          var $$18, $$19, $$20, $$21, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, $ret_or_7 = nil, pvars = nil, result = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', Opal.to_a($send(self.locals, 'map', [], ($$18 = function(l){var self = $$18.$$s == null ? this : $$18.$$s;

            
            
            if (l == null) {
              l = nil;
            };
            return "" + (l) + " = nil";}, $$18.$$s = self, $$18.$$arity = 1, $$18))));
          iv = $send(self.$ivars(), 'map', [], ($$19 = function(ivar){var self = $$19.$$s == null ? this : $$19.$$s;

            
            
            if (ivar == null) {
              ivar = nil;
            };
            return "" + "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";}, $$19.$$s = self, $$19.$$arity = 1, $$19));
          gv = $send(self.$gvars(), 'map', [], ($$20 = function(gvar){var self = $$20.$$s == null ? this : $$20.$$s;

            
            
            if (gvar == null) {
              gvar = nil;
            };
            return "" + "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          indent = self.compiler.$parser_indent();
          str = (function() {if ($truthy(vars['$empty?']())) {
            return ""
          } else {
            return "" + "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ($truthy(self.$ivars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ($truthy(self.$gvars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ($truthy((function() {if ($truthy(($ret_or_7 = self['$class?']()))) {
            return self.proto_ivars['$empty?']()['$!']()
          } else {
            return $ret_or_7
          }; return nil; })())) {
            
            pvars = $send(self.proto_ivars, 'map', [], ($$21 = function(i){var self = $$21.$$s == null ? this : $$21.$$s;

              
              
              if (i == null) {
                i = nil;
              };
              return "" + "self.$$prototype" + (i);}, $$21.$$s = self, $$21.$$arity = 1, $$21)).$join(" = ");
            result = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          } else {
            result = str
          };
          return self.$fragment(result);
        }, $ScopeNode_to_vars$17.$$arity = 0);
        
        Opal.def(self, '$add_scope_ivar', $ScopeNode_add_scope_ivar$22 = function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_scope_ivar$22.$$arity = 1);
        
        Opal.def(self, '$add_scope_gvar', $ScopeNode_add_scope_gvar$23 = function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        }, $ScopeNode_add_scope_gvar$23.$$arity = 1);
        
        Opal.def(self, '$add_proto_ivar', $ScopeNode_add_proto_ivar$24 = function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_proto_ivar$24.$$arity = 1);
        
        Opal.def(self, '$add_arg', $ScopeNode_add_arg$25 = function $$add_arg(arg) {
          var self = this;

          
          if ($truthy(self.args['$include?'](arg))) {
          } else {
            self.args['$<<'](arg)
          };
          return arg;
        }, $ScopeNode_add_arg$25.$$arity = 1);
        
        Opal.def(self, '$add_scope_local', $ScopeNode_add_scope_local$26 = function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil};
          return self.locals['$<<'](local);
        }, $ScopeNode_add_scope_local$26.$$arity = 1);
        
        Opal.def(self, '$has_local?', $ScopeNode_has_local$ques$27 = function(local) {
          var self = this, $ret_or_8 = nil, $ret_or_9 = nil, $ret_or_10 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_8 = (function() {if ($truthy(($ret_or_9 = self.locals['$include?'](local)))) {
            return $ret_or_9
          } else {
            return self.args['$include?'](local)
          }; return nil; })()))) {
            return $ret_or_8
          } else {
            return self.temps['$include?'](local)
          }; return nil; })())) {
            return true};
          if ($truthy((function() {if ($truthy(($ret_or_10 = self.parent))) {
            return self.type['$==']("iter")
          } else {
            return $ret_or_10
          }; return nil; })())) {
            return self.parent['$has_local?'](local)};
          return false;
        }, $ScopeNode_has_local$ques$27.$$arity = 1);
        
        Opal.def(self, '$scope_locals', $ScopeNode_scope_locals$28 = function $$scope_locals() {
          var self = this, $ret_or_11 = nil;

          return self.locals['$|'](self.args)['$|']((function() {if ($truthy((function() {if ($truthy(($ret_or_11 = self.parent))) {
            return self.type['$==']("iter")
          } else {
            return $ret_or_11
          }; return nil; })())) {
            return self.parent.$scope_locals()
          } else {
            return []
          }; return nil; })())
        }, $ScopeNode_scope_locals$28.$$arity = 0);
        
        Opal.def(self, '$add_scope_temp', $ScopeNode_add_scope_temp$29 = function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil};
          return self.temps.$push(tmp);
        }, $ScopeNode_add_scope_temp$29.$$arity = 1);
        
        Opal.def(self, '$has_temp?', $ScopeNode_has_temp$ques$30 = function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        }, $ScopeNode_has_temp$ques$30.$$arity = 1);
        
        Opal.def(self, '$new_temp', $ScopeNode_new_temp$31 = function $$new_temp() {
          var self = this, tmp = nil;

          
          if ($truthy(self.queue['$empty?']())) {
          } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, $ScopeNode_new_temp$31.$$arity = 0);
        
        Opal.def(self, '$next_temp', $ScopeNode_next_temp$32 = function $$next_temp() {
          var $$33, self = this, tmp = nil;

          
          tmp = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$33 = function(){var self = $$33.$$s == null ? this : $$33.$$s;
            if (self.unique == null) self.unique = nil;

            
            tmp = "" + "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              
              Opal.brk(nil, $brk)
            };}, $$33.$$s = self, $$33.$$brk = $brk, $$33.$$arity = 0, $$33))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return tmp;
        }, $ScopeNode_next_temp$32.$$arity = 0);
        
        Opal.def(self, '$queue_temp', $ScopeNode_queue_temp$34 = function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        }, $ScopeNode_queue_temp$34.$$arity = 1);
        
        Opal.def(self, '$push_while', $ScopeNode_push_while$35 = function $$push_while() {
          var self = this, info = nil;

          
          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, $ScopeNode_push_while$35.$$arity = 0);
        
        Opal.def(self, '$pop_while', $ScopeNode_pop_while$36 = function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        }, $ScopeNode_pop_while$36.$$arity = 0);
        
        Opal.def(self, '$in_while?', $ScopeNode_in_while$ques$37 = function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        }, $ScopeNode_in_while$ques$37.$$arity = 0);
        
        Opal.def(self, '$uses_block!', $ScopeNode_uses_block$excl$38 = function() {
          var self = this, $ret_or_12 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_12 = self.type['$==']("iter")))) {
            return self.parent
          } else {
            return $ret_or_12
          }; return nil; })())) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        }, $ScopeNode_uses_block$excl$38.$$arity = 0);
        
        Opal.def(self, '$identify!', $ScopeNode_identify$excl$39 = function(name) {
          var self = this, $ret_or_13 = nil, $ret_or_14 = nil, $ret_or_15 = nil;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(self.identity)) {
            return self.identity};
          name = (function() {if ($truthy(($ret_or_13 = name))) {
            return $ret_or_13
          } else {
            return [(function() {if ($truthy(($ret_or_14 = self.$parent()))) {
              
              if ($truthy(($ret_or_15 = self.$parent().$name()))) {
                return $ret_or_15
              } else {
                return self.$parent().$scope_name()
              };
            } else {
              return $ret_or_14
            }; return nil; })(), self.$mid()].$compact().$join("_")
          }; return nil; })();
          self.identity = self.compiler.$unique_temp(name);
          if ($truthy(self.parent)) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        }, $ScopeNode_identify$excl$39.$$arity = -1);
        self.$attr_reader("identity");
        
        Opal.def(self, '$find_parent_def', $ScopeNode_find_parent_def$40 = function $$find_parent_def() {
          var $a, self = this, scope = nil, $ret_or_16 = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
            if ($truthy((function() {if ($truthy(($ret_or_16 = scope['$def?']()))) {
              return $ret_or_16
            } else {
              return scope['$lambda?']()
            }; return nil; })())) {
              return scope}
          };
          return nil;
        }, $ScopeNode_find_parent_def$40.$$arity = 0);
        
        Opal.def(self, '$super_chain', $ScopeNode_super_chain$41 = function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
            if (scope.$type()['$==']("iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()};
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "" + "'" + (scope.$mid()) + "'";
              break;;
            } else {
              break;
            }
          };
          return [chain, defn, mid];
        }, $ScopeNode_super_chain$41.$$arity = 0);
        
        Opal.def(self, '$uses_block?', $ScopeNode_uses_block$ques$42 = function() {
          var self = this;

          return self.uses_block
        }, $ScopeNode_uses_block$ques$42.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $ScopeNode_has_rescue_else$ques$43 = function() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        }, $ScopeNode_has_rescue_else$ques$43.$$arity = 0);
        
        Opal.def(self, '$in_rescue', $ScopeNode_in_rescue$44 = function $$in_rescue(node) {
          var $iter = $ScopeNode_in_rescue$44.$$p, $yield = $iter || nil, self = this, $ret_or_17 = nil, result = nil;

          if ($iter) $ScopeNode_in_rescue$44.$$p = null;
          
          self.rescues = (function() {if ($truthy(($ret_or_17 = self.rescues))) {
            return $ret_or_17
          } else {
            return []
          }; return nil; })();
          self.rescues.$push(node);
          result = Opal.yieldX($yield, []);
          self.rescues.$pop();
          return result;
        }, $ScopeNode_in_rescue$44.$$arity = 1);
        
        Opal.def(self, '$current_rescue', $ScopeNode_current_rescue$45 = function $$current_rescue() {
          var self = this;

          return self.rescues.$last()
        }, $ScopeNode_current_rescue$45.$$arity = 0);
        
        Opal.def(self, '$in_resbody', $ScopeNode_in_resbody$46 = function $$in_resbody() {
          var $iter = $ScopeNode_in_resbody$46.$$p, $yield = $iter || nil, self = this, result = nil;

          if ($iter) $ScopeNode_in_resbody$46.$$p = null;
          
          if (($yield !== nil)) {
          } else {
            return nil
          };
          self.in_resbody = true;
          result = Opal.yieldX($yield, []);
          self.in_resbody = false;
          return result;
        }, $ScopeNode_in_resbody$46.$$arity = 0);
        
        Opal.def(self, '$in_resbody?', $ScopeNode_in_resbody$ques$47 = function() {
          var self = this;

          return self.in_resbody
        }, $ScopeNode_in_resbody$ques$47.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $ScopeNode_in_ensure$48 = function $$in_ensure() {
          var $iter = $ScopeNode_in_ensure$48.$$p, $yield = $iter || nil, self = this, result = nil;

          if ($iter) $ScopeNode_in_ensure$48.$$p = null;
          
          if (($yield !== nil)) {
          } else {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        }, $ScopeNode_in_ensure$48.$$arity = 0);
        
        Opal.def(self, '$in_ensure?', $ScopeNode_in_ensure$ques$49 = function() {
          var self = this;

          return self.in_ensure
        }, $ScopeNode_in_ensure$ques$49.$$arity = 0);
        
        Opal.def(self, '$gen_retry_id', $ScopeNode_gen_retry_id$50 = function $$gen_retry_id() {
          var self = this, $ret_or_18 = nil;

          
          self.next_retry_id = (function() {if ($truthy(($ret_or_18 = self.next_retry_id))) {
            return $ret_or_18
          } else {
            return "retry_0"
          }; return nil; })();
          return (self.next_retry_id = self.next_retry_id.$succ());
        }, $ScopeNode_gen_retry_id$50.$$arity = 0);
        
        Opal.def(self, '$accepts_using?', $ScopeNode_accepts_using$ques$51 = function() {
          var self = this;

          return [$$($nesting, 'TopNode'), $$($nesting, 'ModuleNode'), $$($nesting, 'ClassNode'), $$($nesting, 'IterNode')]['$include?'](self.$class())
        }, $ScopeNode_accepts_using$ques$51.$$arity = 0);
        
        Opal.def(self, '$collect_refinements_temps', $ScopeNode_collect_refinements_temps$52 = function $$collect_refinements_temps(temps) {
          var self = this;

          
          
          if (temps == null) {
            temps = [];
          };
          if ($truthy(self.refinements_temp)) {
            temps['$<<'](self.refinements_temp)};
          if ($truthy(self.$parent())) {
            return self.$parent().$collect_refinements_temps(temps)};
          return temps;
        }, $ScopeNode_collect_refinements_temps$52.$$arity = -1);
        
        Opal.def(self, '$new_refinements_temp', $ScopeNode_new_refinements_temp$53 = function $$new_refinements_temp() {
          var self = this, var$ = nil;

          
          var$ = self.$compiler().$unique_temp("$refn");
          self.$add_scope_local(var$);
          return var$;
        }, $ScopeNode_new_refinements_temp$53.$$arity = 0);
        return (Opal.def(self, '$refinements_temp', $ScopeNode_refinements_temp$54 = function $$refinements_temp() {
          var $a, self = this, prev = nil, curr = nil;

          
          $a = [self.refinements_temp, self.$new_refinements_temp()], (prev = $a[0]), (curr = $a[1]), $a;
          self.refinements_temp = curr;
          return [prev, curr];
        }, $ScopeNode_refinements_temp$54.$$arity = 0), nil) && 'refinements_temp';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/module"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$compile_body', '$private', '$cid', '$nil?', '$expr', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$s', '$empty_line', '$to_vars']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ModuleNode');

        var $nesting = [self].concat($parent_nesting), $ModuleNode_compile$1, $ModuleNode_name_and_base$3, $ModuleNode_compile_body$4;

        
        self.$handle("module");
        self.$children("cid", "body");
        
        Opal.def(self, '$compile', $ModuleNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("module");
          self.$push("(function($base, $parent_nesting) {");
          self.$line("" + "  var self = $module($base, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;

            
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$compile_body();}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", $nesting)");
        }, $ModuleNode_compile$1.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$name_and_base', $ModuleNode_name_and_base$3 = function $$name_and_base() {
          var $a, $b, self = this, base = nil, name = nil;

          
          $b = self.$cid().$children(), $a = Opal.to_ary($b), (base = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(base['$nil?']())) {
            return [name, "$nesting[0]"]
          } else {
            return [name, self.$expr(base)]
          };
        }, $ModuleNode_name_and_base$3.$$arity = 0);
        return (Opal.def(self, '$compile_body', $ModuleNode_compile_body$4 = function $$compile_body() {
          var self = this, body_code = nil, $ret_or_1 = nil;

          
          self.$add_temp("$nesting = [self].concat($parent_nesting)");
          body_code = self.$stmt(self.$compiler().$returns((function() {if ($truthy(($ret_or_1 = self.$body()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })()));
          self.$empty_line();
          self.$line(self.$scope().$to_vars());
          return self.$line(body_code);
        }, $ModuleNode_compile_body$4.$$arity = 0), nil) && 'compile_body';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/class"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$compile_body', '$super_code', '$sup', '$expr']);
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassNode');

        var $nesting = [self].concat($parent_nesting), $ClassNode_compile$1, $ClassNode_super_code$3;

        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        Opal.def(self, '$compile', $ClassNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          self.$push("(function($base, $super, $parent_nesting) {");
          self.$line("" + "  var self = $klass($base, $super, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil;

            
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$compile_body();}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", ", self.$super_code(), ", $nesting)");
        }, $ClassNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$super_code', $ClassNode_super_code$3 = function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        }, $ClassNode_super_code$3.$$arity = 0), nil) && 'super_code';
      })($nesting[0], $$($nesting, 'ModuleNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SingletonClassNode');

        var $nesting = [self].concat($parent_nesting), $SingletonClassNode_compile$1;

        
        self.$handle("sclass");
        self.$children("object", "body");
        return (Opal.def(self, '$compile', $SingletonClassNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_stmt = nil;

            
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), $nesting)");
        }, $SingletonClassNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_arg', '$scope', '$name', '$push', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ArgNode');

          var $nesting = [self].concat($parent_nesting), $ArgNode_compile$1;

          
          self.$handle("arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ArgNode_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$add_arg(self.$name());
            return self.$push(self.$name().$to_s());
          }, $ArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/arity_check"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$new', '$args_node', '$args', '$optargs', '$restarg', '$postargs', '$kwargs', '$kwoptargs', '$kwrestarg', '$kwnilarg', '$arity', '$arity=', '$scope', '$-', '$arity_check?', '$compiler', '$empty?', '$arity_checks', '$helper', '$inspect', '$to_s', '$mid', '$line', '$push', '$join', '$compact', '$size', '$all_args', '$!', '$-@', '$<', '$+', '$>', '$<<', '$any?', '$has_only_optional_kwargs?', '$negative_arity', '$positive_arity', '$select', '$include?', '$type', '$has_required_kwargs?', '$all?', '$==', '$def?', '$class_scope?', '$top?', '$parent', '$class?', '$name', '$module?', '$identity']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $ArityCheckNode_initialize$1, $ArityCheckNode_compile$2, $ArityCheckNode_kwargs$3, $ArityCheckNode_all_args$4, $ArityCheckNode_arity_checks$5, $ArityCheckNode_arity$6, $ArityCheckNode_negative_arity$7, $ArityCheckNode_positive_arity$9, $ArityCheckNode_has_only_optional_kwargs$ques$10, $ArityCheckNode_has_required_kwargs$ques$12;

        self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.all_args = self.$$prototype.args = self.$$prototype.optargs = self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        Opal.def(self, '$initialize', $ArityCheckNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ArityCheckNode_initialize$1.$$p, $yield = $iter || nil, self = this, arguments$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ArityCheckNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $ArityCheckNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          arguments$ = $$$($$($nesting, 'Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          self.kwrestarg = arguments$.$kwrestarg();
          return (self.kwnilarg = arguments$.$kwnilarg());
        }, $ArityCheckNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile', $ArityCheckNode_compile$2 = function $$compile() {
          var self = this, $writer = nil, meth = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            self.$helper("ac");
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push("" + " if (" + (self.$arity_checks().$join(" || ")) + ") { $ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        }, $ArityCheckNode_compile$2.$$arity = 0);
        
        Opal.def(self, '$kwargs', $ArityCheckNode_kwargs$3 = function $$kwargs() {
          var self = this;

          return [].concat(Opal.to_a(self.kwargs)).concat(Opal.to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        }, $ArityCheckNode_kwargs$3.$$arity = 0);
        
        Opal.def(self, '$all_args', $ArityCheckNode_all_args$4 = function $$all_args() {
          var self = this, $ret_or_1 = nil;

          return (self.all_args = (function() {if ($truthy(($ret_or_1 = self.all_args))) {
            return $ret_or_1
          } else {
            return [].concat(Opal.to_a(self.args)).concat(Opal.to_a(self.optargs)).concat([self.restarg]).concat(Opal.to_a(self.postargs)).concat(Opal.to_a(self.$kwargs())).$compact()
          }; return nil; })())
        }, $ArityCheckNode_all_args$4.$$arity = 0);
        
        Opal.def(self, '$arity_checks', $ArityCheckNode_arity_checks$5 = function $$arity_checks() {
          var $a, self = this, arity = nil, $ret_or_2 = nil, $ret_or_3 = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks};
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.optargs['$empty?']()['$!']()))) {
            return $ret_or_3
          } else {
            return self.$kwargs()['$empty?']()['$!']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            return self.restarg
          }; return nil; })())) {
            arity = $rb_minus(arity['$-@'](), 1)};
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("" + "$arity < " + (min_arity))};
            if ($truthy(self.restarg)) {
            } else {
              self.arity_checks['$<<']("" + "$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("" + "$arity !== " + (arity))
          };
          return self.arity_checks;
        }, $ArityCheckNode_arity_checks$5.$$arity = 0);
        
        Opal.def(self, '$arity', $ArityCheckNode_arity$6 = function $$arity() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.restarg))) {
            return $ret_or_5
          } else {
            return self.optargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_4
          } else {
            return self['$has_only_optional_kwargs?']()
          }; return nil; })())) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        }, $ArityCheckNode_arity$6.$$arity = 0);
        
        Opal.def(self, '$negative_arity', $ArityCheckNode_negative_arity$7 = function $$negative_arity() {
          var $$8, self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (arg == null) {
              arg = nil;
            };
            return ["arg", "mlhs"]['$include?'](arg.$type());}, $$8.$$s = self, $$8.$$arity = 1, $$8));
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)};
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, $ArityCheckNode_negative_arity$7.$$arity = 0);
        
        Opal.def(self, '$positive_arity', $ArityCheckNode_positive_arity$9 = function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)};
          return result;
        }, $ArityCheckNode_positive_arity$9.$$arity = 0);
        
        Opal.def(self, '$has_only_optional_kwargs?', $ArityCheckNode_has_only_optional_kwargs$ques$10 = function() {
          var $$11, self = this, $ret_or_6 = nil;

          if ($truthy(($ret_or_6 = self.$kwargs()['$any?']()))) {
            return $send(self.$kwargs(), 'all?', [], ($$11 = function(arg){var self = $$11.$$s == null ? this : $$11.$$s;

              
              
              if (arg == null) {
                arg = nil;
              };
              return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());}, $$11.$$s = self, $$11.$$arity = 1, $$11))
          } else {
            return $ret_or_6
          }
        }, $ArityCheckNode_has_only_optional_kwargs$ques$10.$$arity = 0);
        return (Opal.def(self, '$has_required_kwargs?', $ArityCheckNode_has_required_kwargs$ques$12 = function() {
          var $$13, self = this;

          return $send(self.$kwargs(), 'any?', [], ($$13 = function(arg){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("kwarg");}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $ArityCheckNode_has_required_kwargs$ques$12.$$arity = 0), nil) && 'has_required_kwargs?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $IterArityCheckNode_compile$14;

        
        self.$handle("iter_arity_check");
        return (Opal.def(self, '$compile', $IterArityCheckNode_compile$14 = function $$compile() {
          var $a, self = this, $writer = nil, parent_scope = nil, $ret_or_7 = nil, $ret_or_8 = nil, context = nil, identity = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy((function() {if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = parent_scope['$def?']()))) {
              return $ret_or_8
            } else {
              return parent_scope['$class_scope?']()
            }; return nil; })()))) {
              return $ret_or_7
            } else {
              return parent_scope['$top?']()
            }; return nil; })()))) {
              parent_scope = parent_scope.$parent()
            };
            context = (function() {if ($truthy(parent_scope['$top?']())) {
              return "'<main>'"
            } else if ($truthy(parent_scope['$def?']())) {
              return "" + "'" + (parent_scope.$mid()) + "'"
            } else if ($truthy(parent_scope['$class?']())) {
              return "" + "'<class:" + (parent_scope.$name()) + ">'"
            } else if ($truthy(parent_scope['$module?']())) {
              return "" + "'<module:" + (parent_scope.$name()) + ">'"
            } else {
              return nil
            }; return nil; })();
            identity = self.$scope().$identity();
            self.$line("" + "if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("" + "  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        }, $IterArityCheckNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ArityCheckNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/ensure_kwargs_are_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$helper', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'EnsureKwargsAreKwargs');

          var $nesting = [self].concat($parent_nesting), $EnsureKwargsAreKwargs_compile$1;

          
          self.$handle("ensure_kwargs_are_kwargs");
          return (Opal.def(self, '$compile', $EnsureKwargsAreKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$helper("hash2");
            self.$line("if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("} else if (!$kwargs.$$is_hash) {");
            self.$line("  throw Opal.ArgumentError.$new('expected kwargs');");
            return self.$line("}");
          }, $EnsureKwargsAreKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_block_arg"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$uses_block!', '$scope', '$add_arg', '$name', '$block_name=', '$-', '$identity', '$block_name', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractBlockarg');

          var $nesting = [self].concat($parent_nesting), $ExtractBlockarg_compile$1;

          
          self.$handle("extract_blockarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractBlockarg_compile$1 = function $$compile() {
            var self = this, $writer = nil, scope_name = nil, yielder = nil;

            
            self.$scope()['$uses_block!']();
            self.$scope().$add_arg(self.$name());
            
            $writer = [self.$name()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            scope_name = self.$scope().$identity();
            yielder = self.$scope().$block_name();
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          }, $ExtractBlockarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_kwarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwarg");
          self.$children("lvar_name");
          return (Opal.def(self, '$compile', $ExtractKwarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + "if (!Opal.hasOwnProperty.call($kwargs.$$smap, '" + (key_name) + "')) {");
            self.$line("" + "  throw Opal.ArgumentError.$new('missing keyword: " + (key_name) + "');");
            self.$line("}");
            return self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
          }, $ExtractKwarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_kwargs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$add_temp', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwargs');

          var $nesting = [self].concat($parent_nesting), $ExtractKwargs_compile$1;

          
          self.$handle("extract_kwargs");
          return (Opal.def(self, '$compile', $ExtractKwargs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$kwargs");
            return self.$line("$kwargs = Opal.extract_kwargs($post_args)");
          }, $ExtractKwargs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_kwoptarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]', '$meta', '$<<', '$used_kwargs', '$scope', '$add_temp', '$lvar_name', '$line', '$inspect', '$to_s', '$==', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwoptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwoptarg_compile$1;

          self.$$prototype.sexp = nil;
          
          self.$handle("extract_kwoptarg");
          self.$children("lvar_name", "default_value");
          return (Opal.def(self, '$compile', $ExtractKwoptarg_compile$1 = function $$compile() {
            var self = this, key_name = nil;

            
            key_name = self.sexp.$meta()['$[]']("arg_name");
            self.$scope().$used_kwargs()['$<<'](key_name);
            self.$add_temp(self.$lvar_name());
            self.$line("" + (self.$lvar_name()) + " = $kwargs.$$smap[" + (key_name.$to_s().$inspect()) + "];");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$lvar_name()) + " == null) {");
            self.$line("" + "  " + (self.$lvar_name()) + " = ", self.$expr(self.$default_value()));
            return self.$line("}");
          }, $ExtractKwoptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_kwrestarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$line', '$used_kwargs', '$map', '$scope', '$join']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractKwrestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractKwrestarg_compile$1, $ExtractKwrestarg_used_kwargs$2;

          
          self.$handle("extract_kwrestarg");
          self.$children("name");
          
          Opal.def(self, '$compile', $ExtractKwrestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              return self.$line("" + (self.$name()) + " = Opal.kwrestargs($kwargs, " + (self.$used_kwargs()) + ");");
            } else {
              return nil
            }
          }, $ExtractKwrestarg_compile$1.$$arity = 0);
          return (Opal.def(self, '$used_kwargs', $ExtractKwrestarg_used_kwargs$2 = function $$used_kwargs() {
            var $$3, self = this, args = nil;

            
            args = $send(self.$scope().$used_kwargs(), 'map', [], ($$3 = function(arg_name){var self = $$3.$$s == null ? this : $$3.$$s;

              
              
              if (arg_name == null) {
                arg_name = nil;
              };
              return "" + "'" + (arg_name) + "': true";}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "{" + (args.$join(",")) + "}";
          }, $ExtractKwrestarg_used_kwargs$2.$$arity = 0), nil) && 'used_kwargs';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$==', '$[]', '$default_value', '$line', '$name', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractOptargNode');

          var $nesting = [self].concat($parent_nesting), $ExtractOptargNode_compile$1;

          
          self.$handle("extract_optarg");
          self.$children("name", "default_value");
          return (Opal.def(self, '$compile', $ExtractOptargNode_compile$1 = function $$compile() {
            var self = this;

            
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractOptargNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_post_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostArg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostArg_compile$1;

          
          self.$handle("extract_post_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $ExtractPostArg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + (self.$name()) + " = $post_args[0];");
            self.$line("$post_args.splice(0, 1);");
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil");
            return self.$line("}");
          }, $ExtractPostArg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_post_optarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line', '$args_to_keep', '$==', '$[]', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostOptarg_compile$1;

          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractPostOptarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + "if ($post_args.length > " + (self.$args_to_keep()) + ") {");
            self.$line("" + "  " + (self.$name()) + " = $post_args[0];");
            self.$line("  $post_args.splice(0, 1);");
            self.$line("}");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractPostOptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/extract_restarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name', '$add_temp', '$==', '$args_to_keep', '$line', '$!=']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractRestarg');

          var $nesting = [self].concat($parent_nesting), $ExtractRestarg_compile$1;

          
          self.$handle("extract_restarg");
          self.$children("name", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractRestarg_compile$1 = function $$compile() {
            var self = this;

            if ($truthy(self.$name())) {
              
              self.$add_temp(self.$name());
              if (self.$args_to_keep()['$=='](0)) {
                return self.$line("" + (self.$name()) + " = $post_args;")
              } else {
                return self.$line("" + (self.$name()) + " = $post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
              };
            } else if ($truthy(self.$args_to_keep()['$!='](0))) {
              return self.$line("" + "$post_args.splice(0, $post_args.length - " + (self.$args_to_keep()) + ");")
            } else {
              return nil
            }
          }, $ExtractRestarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/fake_arg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$next_temp', '$scope', '$add_arg', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'FakeArgNode');

          var $nesting = [self].concat($parent_nesting), $FakeArgNode_compile$1;

          
          self.$handle("fake_arg");
          return (Opal.def(self, '$compile', $FakeArgNode_compile$1 = function $$compile() {
            var self = this, name = nil;

            
            name = self.$scope().$next_temp();
            self.$scope().$add_arg(name);
            return self.$push(name);
          }, $FakeArgNode_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/initialize_iterarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$line', '$name']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeIterarg');

          var $nesting = [self].concat($parent_nesting), $InitializeIterarg_compile$1;

          
          self.$handle("initialize_iter_arg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeIterarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = nil;");
            return self.$line("}");
          }, $InitializeIterarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/initialize_shadowarg"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$<<', '$locals', '$scope', '$name', '$add_arg', '$line']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'InitializeShadowarg');

          var $nesting = [self].concat($parent_nesting), $InitializeShadowarg_compile$1;

          
          self.$handle("initialize_shadowarg");
          self.$children("name");
          return (Opal.def(self, '$compile', $InitializeShadowarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$scope().$locals()['$<<'](self.$name());
            self.$scope().$add_arg(self.$name());
            return self.$line("" + (self.$name()) + " = nil;");
          }, $InitializeShadowarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/parameters"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$children', '$map', '$public_send', '$type', '$join', '$compact', '$==']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parameters');

          var $nesting = [self].concat($parent_nesting), $Parameters_initialize$1, $Parameters_to_code$2, $Parameters_on_arg$4, $Parameters_on_mlhs$5, $Parameters_on_optarg$6, $Parameters_on_restarg$7, $Parameters_on_kwarg$8, $Parameters_on_kwoptarg$9, $Parameters_on_kwrestarg$10, $Parameters_on_blockarg$11, $Parameters_on_kwnilarg$12, $Parameters_on_shadowarg$13;

          self.$$prototype.args = nil;
          
          
          Opal.def(self, '$initialize', $Parameters_initialize$1 = function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          }, $Parameters_initialize$1.$$arity = 1);
          
          Opal.def(self, '$to_code', $Parameters_to_code$2 = function $$to_code() {
            var $$3, self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], ($$3 = function(arg){var self = $$3.$$s == null ? this : $$3.$$s;

              
              
              if (arg == null) {
                arg = nil;
              };
              return $send(self, 'public_send', ["" + "on_" + (arg.$type())].concat(Opal.to_a(arg)));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          }, $Parameters_to_code$2.$$arity = 0);
          
          Opal.def(self, '$on_arg', $Parameters_on_arg$4 = function $$on_arg(arg_name) {
            var self = this;

            return "" + "['req', '" + (arg_name) + "']"
          }, $Parameters_on_arg$4.$$arity = 1);
          
          Opal.def(self, '$on_mlhs', $Parameters_on_mlhs$5 = function $$on_mlhs($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return "['req']";
          }, $Parameters_on_mlhs$5.$$arity = -1);
          
          Opal.def(self, '$on_optarg', $Parameters_on_optarg$6 = function $$on_optarg(arg_name, _default_value) {
            var self = this;

            return "" + "['opt', '" + (arg_name) + "']"
          }, $Parameters_on_optarg$6.$$arity = 2);
          
          Opal.def(self, '$on_restarg', $Parameters_on_restarg$7 = function $$on_restarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              
              if (arg_name['$==']("fwd_rest_arg")) {
                arg_name = "*"};
              return "" + "['rest', '" + (arg_name) + "']";
            } else {
              return "['rest']"
            };
          }, $Parameters_on_restarg$7.$$arity = -1);
          
          Opal.def(self, '$on_kwarg', $Parameters_on_kwarg$8 = function $$on_kwarg(arg_name) {
            var self = this;

            return "" + "['keyreq', '" + (arg_name) + "']"
          }, $Parameters_on_kwarg$8.$$arity = 1);
          
          Opal.def(self, '$on_kwoptarg', $Parameters_on_kwoptarg$9 = function $$on_kwoptarg(arg_name, _default_value) {
            var self = this;

            return "" + "['key', '" + (arg_name) + "']"
          }, $Parameters_on_kwoptarg$9.$$arity = 2);
          
          Opal.def(self, '$on_kwrestarg', $Parameters_on_kwrestarg$10 = function $$on_kwrestarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          }, $Parameters_on_kwrestarg$10.$$arity = -1);
          
          Opal.def(self, '$on_blockarg', $Parameters_on_blockarg$11 = function $$on_blockarg(arg_name) {
            var self = this;

            
            if (arg_name['$==']("fwd_block_arg")) {
              arg_name = "&"};
            return "" + "['block', '" + (arg_name) + "']";
          }, $Parameters_on_blockarg$11.$$arity = 1);
          
          Opal.def(self, '$on_kwnilarg', $Parameters_on_kwnilarg$12 = function $$on_kwnilarg() {
            var self = this;

            return "['nokey']"
          }, $Parameters_on_kwnilarg$12.$$arity = 0);
          return (Opal.def(self, '$on_shadowarg', $Parameters_on_shadowarg$13 = function $$on_shadowarg(_arg_name) {
            var self = this;

            return nil
          }, $Parameters_on_shadowarg$13.$$arity = 1), nil) && 'on_shadowarg';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args/prepare_post_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$line', '$offset']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PreparePostArgs');

          var $nesting = [self].concat($parent_nesting), $PreparePostArgs_compile$1;

          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return (Opal.def(self, '$compile', $PreparePostArgs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            return self.$line("" + "$post_args = Opal.slice.call(arguments, " + (self.$offset()) + ", arguments.length)");
          }, $PreparePostArgs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/args"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each_with_index', '$children', '$multiple_underscore?', '$[]', '$[]=', '$-', '$+', '$>', '$s', '$type', '$!=', '$push', '$process', '$==', '$count', '$start_with?', '$to_s', '$first']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/args/arg");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/args/ensure_kwargs_are_kwargs");
  self.$require("opal/nodes/args/extract_block_arg");
  self.$require("opal/nodes/args/extract_kwarg");
  self.$require("opal/nodes/args/extract_kwargs");
  self.$require("opal/nodes/args/extract_kwoptarg");
  self.$require("opal/nodes/args/extract_kwrestarg");
  self.$require("opal/nodes/args/extract_optarg");
  self.$require("opal/nodes/args/extract_post_arg");
  self.$require("opal/nodes/args/extract_post_optarg");
  self.$require("opal/nodes/args/extract_restarg");
  self.$require("opal/nodes/args/fake_arg");
  self.$require("opal/nodes/args/initialize_iterarg");
  self.$require("opal/nodes/args/initialize_shadowarg");
  self.$require("opal/nodes/args/parameters");
  self.$require("opal/nodes/args/prepare_post_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArgsNode');

        var $nesting = [self].concat($parent_nesting), $ArgsNode_compile$1, $ArgsNode_multiple_underscore$ques$3;

        
        self.$handle("args");
        
        Opal.def(self, '$compile', $ArgsNode_compile$1 = function $$compile() {
          var $$2, self = this, same_arg_counter = nil;

          
          same_arg_counter = $hash2([], {});
          return $send(self.$children(), 'each_with_index', [], ($$2 = function(arg, idx){var self = $$2.$$s == null ? this : $$2.$$s, $ret_or_1 = nil, $writer = nil;

            
            
            if (arg == null) {
              arg = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(self['$multiple_underscore?'](arg))) {
              
              if ($truthy(($ret_or_1 = same_arg_counter['$[]'](arg)))) {
                $ret_or_1
              } else {
                
                $writer = [arg, 0];
                $send(same_arg_counter, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              
              $writer = [arg, $rb_plus(same_arg_counter['$[]'](arg), 1)];
              $send(same_arg_counter, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy($rb_gt(same_arg_counter['$[]'](arg), 1))) {
                arg = self.$s(arg.$type(), "" + (arg.$children()['$[]'](0)) + "_$" + (same_arg_counter['$[]'](arg)))};};
            if ($truthy(idx['$!='](0))) {
              self.$push(", ")};
            return self.$push(self.$process(arg));}, $$2.$$s = self, $$2.$$arity = 2, $$2));
        }, $ArgsNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$multiple_underscore?', $ArgsNode_multiple_underscore$ques$3 = function(arg) {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = arg.$type()['$==']("arg")))) {
            return arg.$children().$count()['$=='](1)
          } else {
            return $ret_or_4
          }; return nil; })()))) {
            return arg.$children().$first().$to_s()['$start_with?']("_")
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return $rb_gt(self.$children().$count(arg), 1)
          } else {
            return $ret_or_2
          }
        }, $ArgsNode_multiple_underscore$ques$3.$$arity = 1), nil) && 'multiple_underscore?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/node_with_args"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$[]', '$meta', '$s', '$original_args', '$push', '$process', '$arity_check_node', '$uses_block?', '$scope', '$identity', '$block_name', '$add_temp', '$line', '$to_code', '$new']);
  
  self.$require("opal/nodes/scope");
  self.$require("opal/nodes/args/parameters");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeWithArgs');

        var $nesting = [self].concat($parent_nesting), $NodeWithArgs_initialize$1, $NodeWithArgs_arity_check_node$2, $NodeWithArgs_compile_arity_check$3, $NodeWithArgs_compile_block_arg$4, $NodeWithArgs_parameters_code$5;

        self.$$prototype.sexp = nil;
        
        self.$attr_reader("used_kwargs");
        self.$attr_accessor("arity");
        self.$attr_reader("original_args");
        
        Opal.def(self, '$initialize', $NodeWithArgs_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $NodeWithArgs_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $NodeWithArgs_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $NodeWithArgs_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.original_args = self.sexp.$meta()['$[]']("original_args");
          self.used_kwargs = [];
          return (self.arity = 0);
        }, $NodeWithArgs_initialize$1.$$arity = -1);
        
        Opal.def(self, '$arity_check_node', $NodeWithArgs_arity_check_node$2 = function $$arity_check_node() {
          var self = this;

          return self.$s("arity_check", self.$original_args())
        }, $NodeWithArgs_arity_check_node$2.$$arity = 0);
        
        Opal.def(self, '$compile_arity_check', $NodeWithArgs_compile_arity_check$3 = function $$compile_arity_check() {
          var self = this;

          return self.$push(self.$process(self.$arity_check_node()))
        }, $NodeWithArgs_compile_arity_check$3.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $NodeWithArgs_compile_block_arg$4 = function $$compile_block_arg() {
          var self = this, scope_name = nil, yielder = nil, $ret_or_1 = nil;

          if ($truthy(self.$scope()['$uses_block?']())) {
            
            scope_name = self.$scope().$identity();
            yielder = (function() {if ($truthy(($ret_or_1 = self.$scope().$block_name()))) {
              return $ret_or_1
            } else {
              return "$yield"
            }; return nil; })();
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $NodeWithArgs_compile_block_arg$4.$$arity = 0);
        return (Opal.def(self, '$parameters_code', $NodeWithArgs_parameters_code$5 = function $$parameters_code() {
          var self = this;

          return $$$($$($nesting, 'Args'), 'Parameters').$new(self.$original_args()).$to_code()
        }, $NodeWithArgs_parameters_code$5.$$arity = 0), nil) && 'parameters_code';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/iter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$lambda_definition?', '$scope', '$is_lambda!', '$in_scope', '$identify!', '$add_temp', '$process', '$inline_args', '$compile_arity_check', '$stmt', '$returned_body', '$to_vars', '$line', '$catch_return', '$unshift', '$push', '$contains_break?', '$arity', '$arity_check?', '$compiler', '$parameters_code', '$has_top_level_mlhs_arg?', '$has_trailing_comma_in_args?', '$block_arg', '$block_name=', '$-', '$each', '$args', '$first', '$==', '$<<', '$updated', '$body', '$returns', '$s', '$any?', '$original_args', '$type', '$loc', '$expression', '$source', '$match', '$new', '$found_break?']);
  
  self.$require("opal/nodes/node_with_args");
  self.$require("opal/rewriters/break_finder");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterNode');

        var $nesting = [self].concat($parent_nesting), $IterNode_compile$1, $IterNode_compile_block_arg$3, $IterNode_extract_underscore_args$4, $IterNode_returned_body$6, $IterNode_has_top_level_mlhs_arg$ques$7, $IterNode_has_trailing_comma_in_args$ques$9, $IterNode_arity_check_node$10, $IterNode_contains_break$ques$11;

        self.$$prototype.sexp = nil;
        
        self.$handle("iter");
        self.$children("inline_args", "body");
        
        Opal.def(self, '$compile', $IterNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, to_vars = nil, identity = nil, body_code = nil;

          
          if ($truthy(self.$scope()['$lambda_definition?']())) {
            self['$is_lambda!']()};
          inline_params = nil;
          to_vars = (identity = (body_code = nil));
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            
            identity = self.$scope()['$identify!']();
            self.$add_temp("" + "self = " + (identity) + ".$$s == null ? this : " + (identity) + ".$$s");
            inline_params = self.$process(self.$inline_args());
            self.$compile_arity_check();
            body_code = self.$stmt(self.$returned_body());
            to_vars = self.$scope().$to_vars();
            self.$line(body_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$unshift(to_vars);
          self.$unshift("" + "(" + (identity) + " = function(", inline_params, "){");
          self.$push("" + "}, " + (identity) + ".$$s = self,");
          if ($truthy(self['$contains_break?']())) {
            self.$push("" + " " + (identity) + ".$$brk = $brk,")};
          self.$push("" + " " + (identity) + ".$$arity = " + (self.$arity()) + ",");
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + " " + (identity) + ".$$parameters = " + (self.$parameters_code()) + ",")};
          if ($truthy(self['$has_top_level_mlhs_arg?']())) {
            self.$push("" + " " + (identity) + ".$$has_top_level_mlhs_arg = true,")};
          if ($truthy(self['$has_trailing_comma_in_args?']())) {
            self.$push("" + " " + (identity) + ".$$has_trailing_comma_in_args = true,")};
          return self.$push("" + " " + (identity) + ")");
        }, $IterNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $IterNode_compile_block_arg$3 = function $$compile_block_arg() {
          var self = this, $writer = nil, scope_name = nil;

          if ($truthy(self.$block_arg())) {
            
            
            $writer = [self.$block_arg()];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$scope().$add_temp(self.$block_arg());
            scope_name = self.$scope()['$identify!']();
            self.$line("" + (self.$block_arg()) + " = " + (scope_name) + ".$$p || nil;");
            return self.$line("" + "if (" + (self.$block_arg()) + ") " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $IterNode_compile_block_arg$3.$$arity = 0);
        
        Opal.def(self, '$extract_underscore_args', $IterNode_extract_underscore_args$4 = function $$extract_underscore_args() {
          var $$5, self = this, valid_args = nil, caught_blank_argument = nil;

          
          valid_args = [];
          caught_blank_argument = false;
          $send(self.$args().$children(), 'each', [], ($$5 = function(arg){var self = $$5.$$s == null ? this : $$5.$$s, arg_name = nil;

            
            
            if (arg == null) {
              arg = nil;
            };
            arg_name = arg.$children().$first();
            if (arg_name['$==']("_")) {
              if ($truthy(caught_blank_argument)) {
                return nil
              } else {
                
                caught_blank_argument = true;
                return valid_args['$<<'](arg);
              }
            } else {
              return valid_args['$<<'](arg)
            };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          return (self.sexp = self.sexp.$updated(nil, [self.$args().$updated(nil, valid_args), self.$body()]));
        }, $IterNode_extract_underscore_args$4.$$arity = 0);
        
        Opal.def(self, '$returned_body', $IterNode_returned_body$6 = function $$returned_body() {
          var self = this, $ret_or_1 = nil;

          return self.$compiler().$returns((function() {if ($truthy(($ret_or_1 = self.$body()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })())
        }, $IterNode_returned_body$6.$$arity = 0);
        
        Opal.def(self, '$has_top_level_mlhs_arg?', $IterNode_has_top_level_mlhs_arg$ques$7 = function() {
          var $$8, self = this;

          return $send(self.$original_args().$children(), 'any?', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("mlhs");}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $IterNode_has_top_level_mlhs_arg$ques$7.$$arity = 0);
        
        Opal.def(self, '$has_trailing_comma_in_args?', $IterNode_has_trailing_comma_in_args$ques$9 = function() {
          var self = this, $ret_or_2 = nil, args_source = nil;

          if ($truthy((function() {if ($truthy(($ret_or_2 = self.$original_args().$loc()))) {
            return self.$original_args().$loc().$expression()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            
            args_source = self.$original_args().$loc().$expression().$source();
            return args_source.$match(/,\s*\|/);
          } else {
            return nil
          }
        }, $IterNode_has_trailing_comma_in_args$ques$9.$$arity = 0);
        
        Opal.def(self, '$arity_check_node', $IterNode_arity_check_node$10 = function $$arity_check_node() {
          var self = this;

          return self.$s("iter_arity_check", self.$original_args())
        }, $IterNode_arity_check_node$10.$$arity = 0);
        return (Opal.def(self, '$contains_break?', $IterNode_contains_break$ques$11 = function() {
          var self = this, finder = nil;

          
          finder = $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'BreakFinder').$new();
          finder.$process(self.sexp);
          return finder['$found_break?']();
        }, $IterNode_contains_break$ques$11.$$arity = 0), nil) && 'contains_break?';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/def"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_scope', '$mid', '$mid=', '$scope', '$-', '$==', '$type', '$defs=', '$identify!', '$identity', '$block_name=', '$process', '$inline_args', '$stmt', '$returns', '$compiler', '$stmts', '$compile_block_arg', '$add_temp', '$compile_arity_check', '$uses_zuper', '$prepare_super', '$unshift', '$current_indent', '$to_vars', '$line', '$catch_return', '$push', '$valid_name?', '$arity', '$arity_check?', '$parameters_code', '$parse_comments?', '$comments_code', '$enable_source_location?', '$source_location', '$wrap_with_definition', '$wrap', '$expr?', '$+', '$join', '$map', '$comments', '$inspect', '$text', '$add_local']);
  
  self.$require("opal/nodes/node_with_args");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefNode');

        var $nesting = [self].concat($parent_nesting), $DefNode_compile$1, $DefNode_wrap_with_definition$3, $DefNode_comments_code$4, $DefNode_prepare_super$6;

        
        self.$handle("def");
        self.$children("mid", "inline_args", "stmts");
        
        Opal.def(self, '$compile', $DefNode_compile$1 = function $$compile() {
          var $$2, self = this, inline_params = nil, scope_name = nil, function_name = nil;

          
          inline_params = nil;
          scope_name = nil;
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, stmt_code = nil;
            if (self.sexp == null) self.sexp = nil;

            
            
            $writer = [self.$mid()];
            $send(self.$scope(), 'mid=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (self.sexp.$type()['$==']("defs")) {
              
              $writer = [true];
              $send(self.$scope(), 'defs=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            self.$scope()['$identify!']();
            scope_name = self.$scope().$identity();
            
            $writer = ["$yield"];
            $send(self.$scope(), 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            inline_params = self.$process(self.$inline_args());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$compile_block_arg();
            self.$add_temp("self = this");
            self.$compile_arity_check();
            if ($truthy(self.$scope().$uses_zuper())) {
              self.$prepare_super()};
            self.$unshift("" + "\n" + (self.$current_indent()), self.$scope().$to_vars());
            self.$line(stmt_code);
            if ($truthy(self.$scope().$catch_return())) {
              
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          function_name = (function() {if ($truthy(self['$valid_name?'](self.$mid()))) {
            return "" + " $$" + (self.$mid())
          } else {
            return ""
          }; return nil; })();
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("" + "function" + (function_name) + "(");
          if ($truthy(scope_name)) {
            self.$unshift("" + (scope_name) + " = ")};
          self.$line("}");
          self.$push("" + ", " + (scope_name) + ".$$arity = " + (self.$arity()));
          if ($truthy(self.$compiler()['$arity_check?']())) {
            self.$push("" + ", " + (scope_name) + ".$$parameters = " + (self.$parameters_code()))};
          if ($truthy(self.$compiler()['$parse_comments?']())) {
            self.$push("" + ", " + (scope_name) + ".$$comments = " + (self.$comments_code()))};
          if ($truthy(self.$compiler()['$enable_source_location?']())) {
            self.$push("" + ", " + (scope_name) + ".$$source_location = " + (self.$source_location()))};
          return self.$wrap_with_definition();
        }, $DefNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$wrap_with_definition', $DefNode_wrap_with_definition$3 = function $$wrap_with_definition() {
          var self = this;

          
          self.$wrap("" + "Opal.def(self, '$" + (self.$mid()) + "', ", ")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return self.$unshift("" + "\n" + (self.$current_indent()))
          };
        }, $DefNode_wrap_with_definition$3.$$arity = 0);
        
        Opal.def(self, '$comments_code', $DefNode_comments_code$4 = function $$comments_code() {
          var $$5, self = this;

          return $rb_plus($rb_plus("[", $send(self.$comments(), 'map', [], ($$5 = function(comment){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (comment == null) {
              comment = nil;
            };
            return comment.$text().$inspect();}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$join(", ")), "]")
        }, $DefNode_comments_code$4.$$arity = 0);
        return (Opal.def(self, '$prepare_super', $DefNode_prepare_super$6 = function $$prepare_super() {
          var self = this;

          
          self.$add_local("$zuper");
          self.$add_local("$zuper_i");
          self.$add_local("$zuper_ii");
          self.$line("// Prepare super implicit arguments");
          self.$line("for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {");
          self.$line("  $zuper[$zuper_i] = arguments[$zuper_i];");
          return self.$line("}");
        }, $DefNode_prepare_super$6.$$arity = 0), nil) && 'prepare_super';
      })($nesting[0], $$($nesting, 'NodeWithArgs'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/defs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$unshift', '$expr', '$recvr', '$mid', '$push', '$expr?', '$wrap']);
  
  self.$require("opal/nodes/def");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefsNode');

        var $nesting = [self].concat($parent_nesting), $DefsNode_wrap_with_definition$1;

        
        self.$handle("defs");
        self.$children("recvr", "mid", "inline_args", "stmts");
        return (Opal.def(self, '$wrap_with_definition', $DefsNode_wrap_with_definition$1 = function $$wrap_with_definition() {
          var self = this;

          
          self.$unshift("Opal.defs(", self.$expr(self.$recvr()), "" + ", '$" + (self.$mid()) + "', ");
          self.$push(")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return nil
          };
        }, $DefsNode_wrap_with_definition$1.$$arity = 0), nil) && 'wrap_with_definition';
      })($nesting[0], $$($nesting, 'DefNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/if"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?', '$helper', '$new_temp', '$top_scope', '$excl', '$from', '$to']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $IfNode_compile$1, $IfNode_truthy$4, $IfNode_falsy$5, $IfNode_needs_wrapper$ques$6;

        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        Opal.def(self, '$compile', $IfNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this, truthy = nil, falsy = nil;

          
          truthy = self.$truthy();
          falsy = self.$falsy();
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if ($truthy(truthy)) {
            $send(self, 'indent', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

              return self.$line(self.$stmt(truthy))}, $$2.$$s = self, $$2.$$arity = 0, $$2))};
          if ($truthy(falsy)) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

                return self.$line(self.$stmt(falsy))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
              self.$line("}");
            }
          } else {
            self.$push("}")
          };
          if ($truthy(self['$needs_wrapper?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $IfNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$truthy', $IfNode_truthy$4 = function $$truthy() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns((function() {if ($truthy(($ret_or_1 = self.$true_body()))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else {
            return self.$true_body()
          }
        }, $IfNode_truthy$4.$$arity = 0);
        
        Opal.def(self, '$falsy', $IfNode_falsy$5 = function $$falsy() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns((function() {if ($truthy(($ret_or_2 = self.$false_body()))) {
              return $ret_or_2
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else {
            return self.$false_body()
          }
        }, $IfNode_falsy$5.$$arity = 0);
        return (Opal.def(self, '$needs_wrapper?', $IfNode_needs_wrapper$ques$6 = function() {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$expr?']()))) {
            return $ret_or_3
          } else {
            return self['$recv?']()
          }
        }, $IfNode_needs_wrapper$ques$6.$$arity = 0), nil) && 'needs_wrapper?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IFlipFlop');

        var $nesting = [self].concat($parent_nesting), $IFlipFlop_excl$7, $IFlipFlop_compile$8;

        
        self.$handle("iflipflop");
        self.$children("from", "to");
        
        Opal.def(self, '$excl', $IFlipFlop_excl$7 = function $$excl() {
          var self = this;

          return ""
        }, $IFlipFlop_excl$7.$$arity = 0);
        return (Opal.def(self, '$compile', $IFlipFlop_compile$8 = function $$compile() {
          var self = this, fun_name = nil, ff = nil;

          
          self.$helper("truthy");
          fun_name = self.$top_scope().$new_temp();
          ff = "" + (fun_name) + ".$$ff";
          self.$push("" + "(typeof " + (fun_name) + " === 'undefined' ? (" + (fun_name) + " = function(from, to){");
          self.$push("" + "  if (typeof " + (ff) + " === 'undefined') " + (ff) + " = false;");
          self.$push("" + "  var retval = " + (ff) + ";");
          self.$push("" + "  if (!" + (ff) + ") {");
          self.$push("" + "    " + (ff) + " = retval = $truthy(from());");
          self.$push("  }");
          self.$push("" + "  " + (self.$excl()) + "if (" + (ff) + ") {");
          self.$push("" + "    if ($truthy(to())) " + (ff) + " = false;");
          self.$push("  }");
          self.$push("  return retval;");
          self.$push("" + "}) : " + (fun_name) + ")(");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$from())), " },");
          self.$push("  function() { ", self.$stmt(self.$compiler().$returns(self.$to())), " }");
          return self.$push(")");
        }, $IFlipFlop_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EFlipFlop');

        var $nesting = [self].concat($parent_nesting), $EFlipFlop_excl$9;

        
        self.$handle("eflipflop");
        return (Opal.def(self, '$excl', $EFlipFlop_excl$9 = function $$excl() {
          var self = this;

          return "else "
        }, $EFlipFlop_excl$9.$$arity = 0), nil) && 'excl';
      })($nesting[0], $$($nesting, 'IFlipFlop'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/logic"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$in_while?', '$push', '$iter?', '$scope', '$expr_or_nil', '$value', '$error', '$size', '$children', '$===', '$s', '$first', '$compile_while', '$compile_iter', '$[]', '$while_loop', '$stmt?', '$line', '$break_val', '$nil?', '$expr', '$[]=', '$-', '$helper', '$identity', '$==', '$empty_splat?', '$recv', '$>', '$!', '$lambda?', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NextNode');

        var $nesting = [self].concat($parent_nesting), $NextNode_compile$1, $NextNode_value$2;

        
        self.$handle("next");
        
        Opal.def(self, '$compile', $NextNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$push("continue;")
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push("return ", self.$expr_or_nil(self.$value()), ";")
          } else {
            return self.$error("Invalid next")
          }
        }, $NextNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$value', $NextNode_value$2 = function $$value() {
          var self = this, $case = nil;

          return (function() {$case = self.$children().$size();
          if ((0)['$===']($case)) {return self.$s("nil")}
          else if ((1)['$===']($case)) {return self.$children().$first()}
          else {return $send(self, 's', ["array"].concat(Opal.to_a(self.$children())))}})()
        }, $NextNode_value$2.$$arity = 0), nil) && 'value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakNode');

        var $nesting = [self].concat($parent_nesting), $BreakNode_compile$3, $BreakNode_compile_while$4, $BreakNode_compile_iter$5, $BreakNode_break_val$6;

        
        self.$handle("break");
        self.$children("value");
        
        Opal.def(self, '$compile', $BreakNode_compile$3 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          }
        }, $BreakNode_compile$3.$$arity = 0);
        
        Opal.def(self, '$compile_while', $BreakNode_compile_while$4 = function $$compile_while() {
          var self = this;

          if ($truthy(self.$while_loop()['$[]']("closure"))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
          } else {
            return self.$push("break;")
          }
        }, $BreakNode_compile_while$4.$$arity = 0);
        
        Opal.def(self, '$compile_iter', $BreakNode_compile_iter$5 = function $$compile_iter() {
          var self = this;

          
          if ($truthy(self['$stmt?']())) {
          } else {
            self.$error("break must be used as a statement")
          };
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, $BreakNode_compile_iter$5.$$arity = 0);
        return (Opal.def(self, '$break_val', $BreakNode_break_val$6 = function $$break_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else {
            return self.$expr(self.$value())
          }
        }, $BreakNode_break_val$6.$$arity = 0), nil) && 'break_val';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RedoNode');

        var $nesting = [self].concat($parent_nesting), $RedoNode_compile$7, $RedoNode_compile_while$8, $RedoNode_compile_iter$9;

        
        self.$handle("redo");
        
        Opal.def(self, '$compile', $RedoNode_compile$7 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$push("REDO()")
          }
        }, $RedoNode_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_while', $RedoNode_compile_while$8 = function $$compile_while() {
          var self = this, $writer = nil;

          
          
          $writer = ["use_redo", true];
          $send(self.$while_loop(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true; continue;");
        }, $RedoNode_compile_while$8.$$arity = 0);
        return (Opal.def(self, '$compile_iter', $RedoNode_compile_iter$9 = function $$compile_iter() {
          var self = this;

          
          self.$helper("slice");
          return self.$push("" + "return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }, $RedoNode_compile_iter$9.$$arity = 0), nil) && 'compile_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SplatNode');

        var $nesting = [self].concat($parent_nesting), $SplatNode_empty_splat$ques$10, $SplatNode_compile$11;

        
        self.$handle("splat");
        self.$children("value");
        
        Opal.def(self, '$empty_splat?', $SplatNode_empty_splat$ques$10 = function() {
          var self = this;

          return self.$value()['$=='](self.$s("array"))
        }, $SplatNode_empty_splat$ques$10.$$arity = 0);
        return (Opal.def(self, '$compile', $SplatNode_compile$11 = function $$compile() {
          var self = this;

          if ($truthy(self['$empty_splat?']())) {
            return self.$push("[]")
          } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          }
        }, $SplatNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnNode');

        var $nesting = [self].concat($parent_nesting), $ReturnNode_return_val$12, $ReturnNode_return_in_iter$ques$13, $ReturnNode_return_expr_in_def$ques$14, $ReturnNode_scope_to_catch_return$15, $ReturnNode_compile$16;

        
        self.$handle("return");
        self.$children("value");
        
        Opal.def(self, '$return_val', $ReturnNode_return_val$12 = function $$return_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else if ($truthy($rb_gt(self.$children().$size(), 1))) {
            return self.$expr($send(self, 's', ["array"].concat(Opal.to_a(self.$children()))))
          } else {
            return self.$expr(self.$value())
          }
        }, $ReturnNode_return_val$12.$$arity = 0);
        
        Opal.def(self, '$return_in_iter?', $ReturnNode_return_in_iter$ques$13 = function() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, parent_def = nil;

          if ($truthy((function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.$scope()['$iter?']()))) {
            return self.$scope()['$lambda?']()['$!']()
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            return (parent_def = self.$scope().$find_parent_def())
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return parent_def
          } else {
            return nil
          }
        }, $ReturnNode_return_in_iter$ques$13.$$arity = 0);
        
        Opal.def(self, '$return_expr_in_def?', $ReturnNode_return_expr_in_def$ques$14 = function() {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_3 = self['$expr?']()))) {
            
            if ($truthy(($ret_or_4 = self.$scope()['$def?']()))) {
              return $ret_or_4
            } else {
              return self.$scope()['$lambda?']()
            };
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return self.$scope()
          } else {
            return nil
          }
        }, $ReturnNode_return_expr_in_def$ques$14.$$arity = 0);
        
        Opal.def(self, '$scope_to_catch_return', $ReturnNode_scope_to_catch_return$15 = function $$scope_to_catch_return() {
          var self = this, $ret_or_5 = nil;

          if ($truthy(($ret_or_5 = self['$return_in_iter?']()))) {
            return $ret_or_5
          } else {
            return self['$return_expr_in_def?']()
          }
        }, $ReturnNode_scope_to_catch_return$15.$$arity = 0);
        return (Opal.def(self, '$compile', $ReturnNode_compile$16 = function $$compile() {
          var self = this, def_scope = nil, $writer = nil;

          if ($truthy((def_scope = self.$scope_to_catch_return()))) {
            
            
            $writer = [true];
            $send(def_scope, 'catch_return=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ($truthy(self['$stmt?']())) {
            return self.$push("return ", self.$return_val())
          } else {
            return self.$error("void value expression: cannot return as an expression")
          }
        }, $ReturnNode_compile$16.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSReturnNode');

        var $nesting = [self].concat($parent_nesting), $JSReturnNode_compile$17;

        
        self.$handle("js_return");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSReturnNode_compile$17 = function $$compile() {
          var self = this;

          
          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, $JSReturnNode_compile$17.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSTempNode');

        var $nesting = [self].concat($parent_nesting), $JSTempNode_compile$18;

        
        self.$handle("js_tmp");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSTempNode_compile$18 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s())
        }, $JSTempNode_compile$18.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockPassNode');

        var $nesting = [self].concat($parent_nesting), $BlockPassNode_compile$19;

        
        self.$handle("block_pass");
        self.$children("value");
        return (Opal.def(self, '$compile', $BlockPassNode_compile$19 = function $$compile() {
          var self = this;

          return self.$push(self.$expr(self.$s("send", self.$value(), "to_proc", self.$s("arglist"))))
        }, $BlockPassNode_compile$19.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/definitions"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $range = Opal.range, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$children', '$each', '$line', '$expr', '$type', '$new_name', '$===', '$helper', '$inspect', '$[]', '$to_s', '$first', '$old_name', '$push', '$error', '$empty?', '$stmt?', '$compile_children', '$simple_children?', '$compile_inline_children', '$>', '$size', '$wrap', '$==', '$returned_children', '$+', '$returns', '$compiler', '$s', '$process', '$freeze', '$none?', '$include?', '$map', '$each_with_index', '$reject', '$to_proc']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UndefNode');

        var $nesting = [self].concat($parent_nesting), $UndefNode_compile$1;

        
        self.$handle("undef");
        self.$children("value");
        return (Opal.def(self, '$compile', $UndefNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return self.$line("Opal.udef(self, '$' + ", self.$expr(child), ");");}, $$2.$$s = self, $$2.$$arity = 1, $$2))
        }, $UndefNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AliasNode');

        var $nesting = [self].concat($parent_nesting), $AliasNode_compile$3;

        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return (Opal.def(self, '$compile', $AliasNode_compile$3 = function $$compile() {
          var self = this, $case = nil, new_name_str = nil, old_name_str = nil;

          return (function() {$case = self.$new_name().$type();
          if ("gvar"['$===']($case)) {
          self.$helper("alias_gvar");
          new_name_str = self.$new_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
          old_name_str = self.$old_name().$children().$first().$to_s()['$[]']($range(1, -1, false)).$inspect();
          return self.$push("$alias_gvar(", new_name_str, ", ", old_name_str, ")");}
          else if ("dsym"['$===']($case) || "sym"['$===']($case)) {
          self.$helper("alias");
          return self.$push("$alias(self, ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")");}
          else {return self.$error("" + "Opal doesn't know yet how to alias with " + (self.$new_name().$type()))}})()
        }, $AliasNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $BeginNode_compile$4, $BeginNode_returned_children$5, $BeginNode_compile_children$6, $BeginNode_simple_children$ques$8, $BeginNode_compile_inline_children$10;

        self.$$prototype.level = self.$$prototype.returned_children = nil;
        
        self.$handle("begin");
        
        Opal.def(self, '$compile', $BeginNode_compile$4 = function $$compile() {
          var self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")};
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if (self.$children().$size()['$=='](1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            self.$compile_children(self.$returned_children(), self.level);
            return self.$wrap("(function() {", "})()");
          };
        }, $BeginNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$returned_children', $BeginNode_returned_children$5 = function $$returned_children() {
          var $a, $b, self = this, $ret_or_1 = nil, rest = nil, last_child = nil;

          return (self.returned_children = (function() {if ($truthy(($ret_or_1 = self.returned_children))) {
            return $ret_or_1
          } else {
            
            $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last_child = ($a[$b] == null ? nil : $a[$b])), $a;
            if ($truthy(last_child)) {
              return $rb_plus(rest, [self.$compiler().$returns(last_child)])
            } else {
              return [self.$s("nil")]
            };
          }; return nil; })())
        }, $BeginNode_returned_children$5.$$arity = 0);
        
        Opal.def(self, '$compile_children', $BeginNode_compile_children$6 = function $$compile_children(children, level) {
          var $$7, self = this;

          return $send(children, 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return self.$line(self.$process(child, level), ";");}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        }, $BeginNode_compile_children$6.$$arity = 2);
        Opal.const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        Opal.def(self, '$simple_children?', $BeginNode_simple_children$ques$8 = function() {
          var $$9, self = this;

          return $send(self.$children(), 'none?', [], ($$9 = function(child){var self = $$9.$$s == null ? this : $$9.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return $$($nesting, 'COMPLEX_CHILDREN')['$include?'](child.$type());}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $BeginNode_simple_children$ques$8.$$arity = 0);
        return (Opal.def(self, '$compile_inline_children', $BeginNode_compile_inline_children$10 = function $$compile_inline_children(children, level) {
          var $$11, $$12, self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return self.$process(child, level);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], ($$12 = function(child, idx){var self = $$12.$$s == null ? this : $$12.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(child);}, $$12.$$s = self, $$12.$$arity = 2, $$12));
        }, $BeginNode_compile_inline_children$10.$$arity = 2), nil) && 'compile_inline_children';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwBeginNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("kwbegin")
      })($nesting[0], $$($nesting, 'BeginNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/yield"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$block_name=', '$-', '$yields_single_arg?', '$children', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseYieldNode');

        var $nesting = [self].concat($parent_nesting), $BaseYieldNode_compile_call$1, $BaseYieldNode_find_yielding_scope$2, $BaseYieldNode_yields_single_arg$ques$3, $BaseYieldNode_uses_splat$ques$4;

        
        
        Opal.def(self, '$compile_call', $BaseYieldNode_compile_call$1 = function $$compile_call() {
          var self = this, yielding_scope = nil, $ret_or_1 = nil, $writer = nil, block_name = nil;

          
          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          if ($truthy(($ret_or_1 = yielding_scope.$block_name()))) {
            $ret_or_1
          } else {
            
            $writer = ["$yield"];
            $send(yielding_scope, 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          block_name = yielding_scope.$block_name();
          if ($truthy(self['$yields_single_arg?'](self.$children()))) {
            
            self.$push(self.$expr(self.$children().$first()));
            return self.$wrap("" + "Opal.yield1(" + (block_name) + ", ", ")");
          } else {
            
            self.$push(self.$expr($send(self, 's', ["arglist"].concat(Opal.to_a(self.$children())))));
            if ($truthy(self['$uses_splat?'](self.$children()))) {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", ", ")")
            } else {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, $BaseYieldNode_compile_call$1.$$arity = 0);
        
        Opal.def(self, '$find_yielding_scope', $BaseYieldNode_find_yielding_scope$2 = function $$find_yielding_scope() {
          var $a, self = this, working = nil, $ret_or_2 = nil;

          
          working = self.$scope();
          while ($truthy(working)) {
            
            if ($truthy((function() {if ($truthy(($ret_or_2 = working.$block_name()))) {
              return $ret_or_2
            } else {
              return working['$def?']()
            }; return nil; })())) {
              break;};
            working = working.$parent();
          };
          return working;
        }, $BaseYieldNode_find_yielding_scope$2.$$arity = 0);
        
        Opal.def(self, '$yields_single_arg?', $BaseYieldNode_yields_single_arg$ques$3 = function(children) {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$uses_splat?'](children)['$!']()))) {
            return children.$size()['$=='](1)
          } else {
            return $ret_or_3
          }
        }, $BaseYieldNode_yields_single_arg$ques$3.$$arity = 1);
        return (Opal.def(self, '$uses_splat?', $BaseYieldNode_uses_splat$ques$4 = function(children) {
          var $$5, self = this;

          return $send(children, 'any?', [], ($$5 = function(child){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$==']("splat");}, $$5.$$s = self, $$5.$$arity = 1, $$5))
        }, $BaseYieldNode_uses_splat$ques$4.$$arity = 1), nil) && 'uses_splat?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'YieldNode');

        var $nesting = [self].concat($parent_nesting), $YieldNode_compile$6;

        
        self.$handle("yield");
        return (Opal.def(self, '$compile', $YieldNode_compile$6 = function $$compile() {
          var self = this;

          return self.$compile_call()
        }, $YieldNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableYieldNode');

        var $nesting = [self].concat($parent_nesting), $ReturnableYieldNode_compile$7;

        
        self.$handle("returnable_yield");
        return (Opal.def(self, '$compile', $ReturnableYieldNode_compile$7 = function $$compile() {
          var self = this;

          
          self.$compile_call();
          return self.$wrap("return ", ";");
        }, $ReturnableYieldNode_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/rescue"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_ensure', '$line', '$stmt', '$body_sexp', '$indent', '$has_rescue_else?', '$unshift', '$rescue_else_code', '$process', '$compiler', '$ensr_sexp', '$wrap_in_closure?', '$wrap', '$returns', '$begn', '$ensr', '$s', '$recv?', '$expr?', '$rescue_else_sexp', '$scope', '$stmt?', '$detect', '$[]', '$!=', '$type', '$rescue_else_sexp=', '$-', '$handle_rescue_else_manually?', '$in_rescue', '$body_code', '$each_with_index', '$==', '$retry_id', '$nil?', '$body', '$!', '$in_ensure?', '$gen_retry_id', '$attr_reader', '$expr', '$klasses', '$lvar', '$updated', '$in_resbody', '$rescue_body', '$klasses_sexp', '$in_resbody?', '$error', '$current_rescue']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EnsureNode');

        var $nesting = [self].concat($parent_nesting), $EnsureNode_compile$1, $EnsureNode_body_sexp$6, $EnsureNode_ensr_sexp$7, $EnsureNode_wrap_in_closure$ques$8, $EnsureNode_rescue_else_code$9;

        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        Opal.def(self, '$compile', $EnsureNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this;

          
          self.$push("try {");
          $send(self, 'in_ensure', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$line(self.$stmt(self.$body_sexp()))}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line("} finally {");
          $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $$4;
            if (self.level == null) self.level = nil;

            if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s, $$5;

                
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
                return self.$line("})();");}, $$4.$$s = self, $$4.$$arity = 0, $$4));
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, $$3.$$s = self, $$3.$$arity = 0, $$3));
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() { ", "; })()")
          } else {
            return nil
          };
        }, $EnsureNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$body_sexp', $EnsureNode_body_sexp$6 = function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        }, $EnsureNode_body_sexp$6.$$arity = 0);
        
        Opal.def(self, '$ensr_sexp', $EnsureNode_ensr_sexp$7 = function $$ensr_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$ensr()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }
        }, $EnsureNode_ensr_sexp$7.$$arity = 0);
        
        Opal.def(self, '$wrap_in_closure?', $EnsureNode_wrap_in_closure$ques$8 = function() {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self['$recv?']()))) {
            return $ret_or_3
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            return self['$has_rescue_else?']()
          }
        }, $EnsureNode_wrap_in_closure$ques$8.$$arity = 0);
        return (Opal.def(self, '$rescue_else_code', $EnsureNode_rescue_else_code$9 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $EnsureNode_rescue_else_code$9.$$arity = 0), nil) && 'rescue_else_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueNode');

        var $nesting = [self].concat($parent_nesting), $RescueNode_compile$10, $RescueNode_body_code$18, $RescueNode_rescue_else_code$19, $RescueNode_handle_rescue_else_manually$ques$20, $RescueNode_gen_retry_id$21;

        self.$$prototype.retry_id = nil;
        
        self.$handle("rescue");
        self.$children("body");
        
        Opal.def(self, '$compile', $RescueNode_compile$10 = function $$compile() {
          var $$11, $$12, self = this, $writer = nil, _has_rescue_handlers = nil, $ret_or_6 = nil;

          
          
          $writer = [$send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], ($$11 = function(sexp){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_4 = nil;

            
            
            if (sexp == null) {
              sexp = nil;
            };
            if ($truthy(($ret_or_4 = sexp))) {
              return sexp.$type()['$!=']("resbody")
            } else {
              return $ret_or_4
            };}, $$11.$$s = self, $$11.$$arity = 1, $$11))];
          $send(self.$scope(), 'rescue_else_sexp=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")};
          $send(self, 'in_rescue', [self], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s, $$13, $$14, $$16;

            
            self.$push("try {");
            $send(self, 'indent', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;

              return self.$line(self.$stmt(self.$body_code()))}, $$13.$$s = self, $$13.$$arity = 0, $$13));
            self.$line("} catch ($err) {");
            $send(self, 'indent', [], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s, $$15;

              
              if ($truthy(self['$has_rescue_else?']())) {
                self.$line("$no_errors = false;")};
              $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], ($$15 = function(child, idx){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_5 = nil;
                if (self.level == null) self.level = nil;

                
                
                if (child == null) {
                  child = nil;
                };
                
                if (idx == null) {
                  idx = nil;
                };
                if ($truthy((function() {if ($truthy(($ret_or_5 = child))) {
                  return child.$type()['$==']("resbody")
                } else {
                  return $ret_or_5
                }; return nil; })())) {
                } else {
                  return nil;
                };
                _has_rescue_handlers = true;
                if (idx['$=='](0)) {
                } else {
                  self.$push(" else ")
                };
                return self.$line(self.$process(child, self.level));}, $$15.$$s = self, $$15.$$arity = 2, $$15));
              return self.$push(" else { throw $err; }");}, $$14.$$s = self, $$14.$$arity = 0, $$14));
            self.$line("}");
            if ($truthy(self['$handle_rescue_else_manually?']())) {
              
              self.$push("finally {");
              $send(self, 'indent', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

                
                self.$line("if ($no_errors) { ");
                $send(self, 'indent', [], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;

                  return self.$line(self.$stmt(self.$rescue_else_code()))}, $$17.$$s = self, $$17.$$arity = 0, $$17));
                return self.$line("}");}, $$16.$$s = self, $$16.$$arity = 0, $$16));
              self.$push("}");};
            if ($truthy(self.$retry_id())) {
              return self.$wrap("" + (self.$retry_id()) + ": do { ", " break; } while(1)")
            } else {
              return nil
            };}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          if ($truthy((function() {if ($truthy(($ret_or_6 = self['$expr?']()))) {
            return $ret_or_6
          } else {
            return self['$recv?']()
          }; return nil; })())) {
            return self.$wrap("(function() { ", "})()")
          } else {
            return nil
          };
        }, $RescueNode_compile$10.$$arity = 0);
        
        Opal.def(self, '$body_code', $RescueNode_body_code$18 = function $$body_code() {
          var self = this, body_code = nil, $ret_or_7 = nil;

          
          body_code = (function() {if ($truthy((function() {if ($truthy(($ret_or_7 = self.$body()['$nil?']()))) {
            return $ret_or_7
          } else {
            return self.$body().$type()['$==']("resbody")
          }; return nil; })())) {
            return self.$s("nil")
          } else {
            return self.$body()
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $RescueNode_body_code$18.$$arity = 0);
        
        Opal.def(self, '$rescue_else_code', $RescueNode_rescue_else_code$19 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $RescueNode_rescue_else_code$19.$$arity = 0);
        
        Opal.def(self, '$handle_rescue_else_manually?', $RescueNode_handle_rescue_else_manually$ques$20 = function() {
          var self = this, $ret_or_8 = nil;

          if ($truthy(($ret_or_8 = self['$in_ensure?']()['$!']()))) {
            return self['$has_rescue_else?']()
          } else {
            return $ret_or_8
          }
        }, $RescueNode_handle_rescue_else_manually$ques$20.$$arity = 0);
        
        Opal.def(self, '$gen_retry_id', $RescueNode_gen_retry_id$21 = function $$gen_retry_id() {
          var self = this, $ret_or_9 = nil;

          return (self.retry_id = (function() {if ($truthy(($ret_or_9 = self.retry_id))) {
            return $ret_or_9
          } else {
            return self.$scope().$gen_retry_id()
          }; return nil; })())
        }, $RescueNode_gen_retry_id$21.$$arity = 0);
        return self.$attr_reader("retry_id");
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ResBodyNode');

        var $nesting = [self].concat($parent_nesting), $ResBodyNode_compile$22, $ResBodyNode_klasses$26, $ResBodyNode_rescue_body$27;

        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        Opal.def(self, '$compile', $ResBodyNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s, $$24;

            
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar().$updated(nil, [].concat(Opal.to_a(self.$lvar().$children())).concat([self.$s("js_tmp", "$err")]))))};
            self.$line("try {");
            $send(self, 'indent', [], ($$24 = function(){var self = $$24.$$s == null ? this : $$24.$$s, $$25;

              return $send(self, 'in_resbody', [], ($$25 = function(){var self = $$25.$$s == null ? this : $$25.$$s;

                return self.$line(self.$stmt(self.$rescue_body()))}, $$25.$$s = self, $$25.$$arity = 0, $$25))}, $$24.$$s = self, $$24.$$arity = 0, $$24));
            return self.$line("} finally { Opal.pop_exception(); }");}, $$23.$$s = self, $$23.$$arity = 0, $$23));
          return self.$line("}");
        }, $ResBodyNode_compile$22.$$arity = 0);
        
        Opal.def(self, '$klasses', $ResBodyNode_klasses$26 = function $$klasses() {
          var self = this, $ret_or_10 = nil;

          if ($truthy(($ret_or_10 = self.$klasses_sexp()))) {
            return $ret_or_10
          } else {
            return self.$s("array", self.$s("const", nil, "StandardError"))
          }
        }, $ResBodyNode_klasses$26.$$arity = 0);
        return (Opal.def(self, '$rescue_body', $ResBodyNode_rescue_body$27 = function $$rescue_body() {
          var self = this, body_code = nil, $ret_or_11 = nil;

          
          body_code = (function() {if ($truthy(($ret_or_11 = self.$body()))) {
            return $ret_or_11
          } else {
            return self.$s("nil")
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $ResBodyNode_rescue_body$27.$$arity = 0), nil) && 'rescue_body';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RetryNode');

        var $nesting = [self].concat($parent_nesting), $RetryNode_compile$28;

        
        self.$handle("retry");
        return (Opal.def(self, '$compile', $RetryNode_compile$28 = function $$compile() {
          var self = this;

          
          if ($truthy(self['$in_resbody?']())) {
          } else {
            self.$error("Invalid retry")
          };
          return self.$push("" + "continue " + (self.$scope().$current_rescue().$gen_retry_id()));
        }, $RetryNode_compile$28.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/case"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$compiler', '$compile_code', '$needs_closure?', '$wrap', '$condition', '$[]=', '$case_stmt', '$-', '$add_local', '$push', '$expr', '$each_with_index', '$case_parts', '$line', '$type', '$===', '$returns', '$==', '$stmt', '$!', '$stmt?', '$[]', '$when_checks', '$js_truthy', '$s', '$process', '$body_code', '$last']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CaseNode');

        var $nesting = [self].concat($parent_nesting), $CaseNode_compile$1, $CaseNode_compile_code$3, $CaseNode_needs_closure$ques$5, $CaseNode_case_parts$6, $CaseNode_case_stmt$7;

        
        self.$handle("case");
        self.$children("condition");
        
        Opal.def(self, '$compile', $CaseNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$compiler(), 'in_case', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            
            self.$compile_code();
            if ($truthy(self['$needs_closure?']())) {
              return self.$wrap("(function() {", "})()")
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $CaseNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_code', $CaseNode_compile_code$3 = function $$compile_code() {
          var $$4, self = this, handled_else = nil, $writer = nil, $ret_or_1 = nil;

          
          handled_else = false;
          if ($truthy(self.$condition())) {
            
            
            $writer = ["cond", true];
            $send(self.$case_stmt(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_local("$case");
            self.$push("$case = ", self.$expr(self.$condition()), ";");};
          $send(self.$case_parts(), 'each_with_index', [], ($$4 = function(wen, idx){var self = $$4.$$s == null ? this : $$4.$$s, $case = nil;

            
            
            if (wen == null) {
              wen = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(wen)) {
            } else {
              return nil;
            };
            self.$line();
            return (function() {$case = wen.$type();
            if ("when"['$===']($case)) {
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            if (idx['$=='](0)) {
            } else {
              self.$push("else ")
            };
            return self.$push(self.$stmt(wen));}
            else {
            handled_else = true;
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            return self.$push("else {", self.$stmt(wen), "}");}})();}, $$4.$$s = self, $$4.$$arity = 2, $$4));
          if ($truthy((function() {if ($truthy(($ret_or_1 = self['$needs_closure?']()))) {
            return handled_else['$!']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            self.$line();
            return self.$push("else { return nil }");
          } else {
            return nil
          };
        }, $CaseNode_compile_code$3.$$arity = 0);
        
        Opal.def(self, '$needs_closure?', $CaseNode_needs_closure$ques$5 = function() {
          var self = this;

          return self['$stmt?']()['$!']()
        }, $CaseNode_needs_closure$ques$5.$$arity = 0);
        
        Opal.def(self, '$case_parts', $CaseNode_case_parts$6 = function $$case_parts() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false))
        }, $CaseNode_case_parts$6.$$arity = 0);
        return (Opal.def(self, '$case_stmt', $CaseNode_case_stmt$7 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $CaseNode_case_stmt$7.$$arity = 0), nil) && 'case_stmt';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhenNode');

        var $nesting = [self].concat($parent_nesting), $WhenNode_compile$8, $WhenNode_when_checks$10, $WhenNode_case_stmt$11, $WhenNode_body_code$12;

        self.$$prototype.level = nil;
        
        self.$handle("when");
        self.$children("whens", "body");
        
        Opal.def(self, '$compile', $WhenNode_compile$8 = function $$compile() {
          var $$9, self = this;

          
          self.$push("if (");
          $send(self.$when_checks(), 'each_with_index', [], ($$9 = function(check, idx){var self = $$9.$$s == null ? this : $$9.$$s, call = nil;

            
            
            if (check == null) {
              check = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              
              self.$push("(function($splt) { for (var i = 0, ii = $splt.length; i < ii; i++) {");
              if ($truthy(self.$case_stmt()['$[]']("cond"))) {
                self.$push("if ($splt[i]['$===']($case)) { return true; }")
              } else {
                self.$push("if (", self.$js_truthy(check), ")) { return true; }")
              };
              return self.$push("} return false; })(", self.$expr(check.$children()['$[]'](0)), ")");
            } else if ($truthy(self.$case_stmt()['$[]']("cond"))) {
              
              call = self.$s("send", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
            } else {
              return self.$push(self.$js_truthy(check))
            };}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        }, $WhenNode_compile$8.$$arity = 0);
        
        Opal.def(self, '$when_checks', $WhenNode_when_checks$10 = function $$when_checks() {
          var self = this;

          return self.$children()['$[]']($range(0, -2, false))
        }, $WhenNode_when_checks$10.$$arity = 0);
        
        Opal.def(self, '$case_stmt', $WhenNode_case_stmt$11 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $WhenNode_case_stmt$11.$$arity = 0);
        return (Opal.def(self, '$body_code', $WhenNode_body_code$12 = function $$body_code() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.$children().$last()))) {
            return $ret_or_2
          } else {
            return self.$s("nil")
          }
        }, $WhenNode_body_code$12.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/super"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $slice = Opal.slice, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include?', '$type', '$s', '$helper', '$push', '$compile_receiver', '$compile_method_body', '$compile_method_name', '$compile_arguments', '$compile_block_pass', '$private', '$def?', '$scope', '$find_parent_def', '$to_s', '$mid', '$def_scope', '$identify!', '$method_id', '$def_scope_identity', '$defined_check_param', '$allow_stubs', '$super_chain', '$join', '$map', '$implicit_arguments_param', '$super_method_invocation', '$iter?', '$super_block_invocation', '$raise', '$handle', '$wrap', '$uses_block!', '$compile_using_send', '$==', '$iter', '$uses_zuper=', '$-', '$block_name', '$!', '$<<', '$empty?', '$children', '$arglist', '$expr', '$===']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseSuperNode');

        var $nesting = [self].concat($parent_nesting), $BaseSuperNode_initialize$1, $BaseSuperNode_compile_using_send$2, $BaseSuperNode_def_scope$3, $BaseSuperNode_defined_check_param$4, $BaseSuperNode_implicit_arguments_param$5, $BaseSuperNode_method_id$6, $BaseSuperNode_def_scope_identity$7, $BaseSuperNode_allow_stubs$8, $BaseSuperNode_super_method_invocation$9, $BaseSuperNode_super_block_invocation$10, $BaseSuperNode_compile_method_body$12, $BaseSuperNode_compile_method_name$13;

        self.$$prototype.sexp = self.$$prototype.def_scope = nil;
        
        
        Opal.def(self, '$initialize', $BaseSuperNode_initialize$1 = function $$initialize($a) {
          var $post_args, $b, $c, $iter = $BaseSuperNode_initialize$1.$$p, $yield = $iter || nil, self = this, args = nil, rest = nil, last_child = nil, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BaseSuperNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $BaseSuperNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          args = [].concat(Opal.to_a(self.sexp));
          $b = [].concat(Opal.to_a(args)), $c = $b.length - 1, $c = ($c < 0) ? 0 : $c, (rest = $slice.call($b, 0, $c)), (last_child = ($b[$c] == null ? nil : $b[$c])), $b;
          if ($truthy((function() {if ($truthy(($ret_or_1 = last_child))) {
            return ["iter", "block_pass"]['$include?'](last_child.$type())
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            self.iter = last_child;
            args = rest;
          } else {
            self.iter = self.$s("js_tmp", "null")
          };
          self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(args)));
          return (self.recvr = self.$s("self"));
        }, $BaseSuperNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile_using_send', $BaseSuperNode_compile_using_send$2 = function $$compile_using_send() {
          var self = this;

          
          self.$helper("send2");
          self.$push("$send2(");
          self.$compile_receiver();
          self.$compile_method_body();
          self.$compile_method_name();
          self.$compile_arguments();
          self.$compile_block_pass();
          return self.$push(")");
        }, $BaseSuperNode_compile_using_send$2.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$def_scope', $BaseSuperNode_def_scope$3 = function $$def_scope() {
          var self = this, $ret_or_2 = nil;

          return (self.def_scope = (function() {if ($truthy(($ret_or_2 = self.def_scope))) {
            return $ret_or_2
          } else if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()
          } else {
            return self.$scope().$find_parent_def()
          }; return nil; })())
        }, $BaseSuperNode_def_scope$3.$$arity = 0);
        
        Opal.def(self, '$defined_check_param', $BaseSuperNode_defined_check_param$4 = function $$defined_check_param() {
          var self = this;

          return "false"
        }, $BaseSuperNode_defined_check_param$4.$$arity = 0);
        
        Opal.def(self, '$implicit_arguments_param', $BaseSuperNode_implicit_arguments_param$5 = function $$implicit_arguments_param() {
          var self = this;

          return "false"
        }, $BaseSuperNode_implicit_arguments_param$5.$$arity = 0);
        
        Opal.def(self, '$method_id', $BaseSuperNode_method_id$6 = function $$method_id() {
          var self = this;

          return self.$def_scope().$mid().$to_s()
        }, $BaseSuperNode_method_id$6.$$arity = 0);
        
        Opal.def(self, '$def_scope_identity', $BaseSuperNode_def_scope_identity$7 = function $$def_scope_identity() {
          var self = this;

          return self.$def_scope()['$identify!'](self.$def_scope().$mid())
        }, $BaseSuperNode_def_scope_identity$7.$$arity = 0);
        
        Opal.def(self, '$allow_stubs', $BaseSuperNode_allow_stubs$8 = function $$allow_stubs() {
          var self = this;

          return "true"
        }, $BaseSuperNode_allow_stubs$8.$$arity = 0);
        
        Opal.def(self, '$super_method_invocation', $BaseSuperNode_super_method_invocation$9 = function $$super_method_invocation() {
          var self = this;

          
          self.$helper("find_super");
          return "" + "$find_super(self, '" + (self.$method_id()) + "', " + (self.$def_scope_identity()) + ", " + (self.$defined_check_param()) + ", " + (self.$allow_stubs()) + ")";
        }, $BaseSuperNode_super_method_invocation$9.$$arity = 0);
        
        Opal.def(self, '$super_block_invocation', $BaseSuperNode_super_block_invocation$10 = function $$super_block_invocation() {
          var $a, $b, $$11, self = this, chain = nil, cur_defn = nil, mid = nil, trys = nil;

          
          self.$helper("find_block_super");
          $b = self.$scope().$super_chain(), $a = Opal.to_ary($b), (chain = ($a[0] == null ? nil : $a[0])), (cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
          trys = $send(chain, 'map', [], ($$11 = function(c){var self = $$11.$$s == null ? this : $$11.$$s;

            
            
            if (c == null) {
              c = nil;
            };
            return "" + (c) + ".$$def";}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$join(" || ");
          return "" + "$find_block_super(self, " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), " + (self.$defined_check_param()) + ", " + (self.$implicit_arguments_param()) + ")";
        }, $BaseSuperNode_super_block_invocation$10.$$arity = 0);
        
        Opal.def(self, '$compile_method_body', $BaseSuperNode_compile_method_body$12 = function $$compile_method_body() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$scope()['$def?']())) {
            return self.$push(self.$super_method_invocation())
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push(self.$super_block_invocation())
          } else {
            return self.$raise("super must be called from method body or block")
          };
        }, $BaseSuperNode_compile_method_body$12.$$arity = 0);
        return (Opal.def(self, '$compile_method_name', $BaseSuperNode_compile_method_name$13 = function $$compile_method_name() {
          var $a, $b, self = this, _chain = nil, _cur_defn = nil, mid = nil;

          if ($truthy(self.$scope()['$def?']())) {
            return self.$push("" + ", '" + (self.$method_id()) + "'")
          } else if ($truthy(self.$scope()['$iter?']())) {
            
            $b = self.$scope().$super_chain(), $a = Opal.to_ary($b), (_chain = ($a[0] == null ? nil : $a[0])), (_cur_defn = ($a[1] == null ? nil : $a[1])), (mid = ($a[2] == null ? nil : $a[2])), $b;
            return self.$push("" + ", " + (mid));
          } else {
            return nil
          }
        }, $BaseSuperNode_compile_method_name$13.$$arity = 0), nil) && 'compile_method_name';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedSuperNode');

        var $nesting = [self].concat($parent_nesting), $DefinedSuperNode_allow_stubs$14, $DefinedSuperNode_defined_check_param$15, $DefinedSuperNode_compile$16;

        
        self.$handle("defined_super");
        
        Opal.def(self, '$allow_stubs', $DefinedSuperNode_allow_stubs$14 = function $$allow_stubs() {
          var self = this;

          return "false"
        }, $DefinedSuperNode_allow_stubs$14.$$arity = 0);
        
        Opal.def(self, '$defined_check_param', $DefinedSuperNode_defined_check_param$15 = function $$defined_check_param() {
          var self = this;

          return "true"
        }, $DefinedSuperNode_defined_check_param$15.$$arity = 0);
        return (Opal.def(self, '$compile', $DefinedSuperNode_compile$16 = function $$compile() {
          var self = this;

          
          self.$compile_receiver();
          self.$compile_method_body();
          return self.$wrap("((", ") != null ? \"super\" : nil)");
        }, $DefinedSuperNode_compile$16.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SuperNode');

        var $nesting = [self].concat($parent_nesting), $SuperNode_initialize$17, $SuperNode_compile$18;

        
        self.$handle("super");
        
        Opal.def(self, '$initialize', $SuperNode_initialize$17 = function $$initialize($a) {
          var $post_args, $iter = $SuperNode_initialize$17.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SuperNode_initialize$17.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $SuperNode_initialize$17, false, true), 'initialize', $zuper, $iter);
          if ($truthy(self.$scope()['$def?']())) {
            return self.$scope()['$uses_block!']()
          } else {
            return nil
          };
        }, $SuperNode_initialize$17.$$arity = -1);
        return (Opal.def(self, '$compile', $SuperNode_compile$18 = function $$compile() {
          var self = this;

          return self.$compile_using_send()
        }, $SuperNode_compile$18.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseSuperNode'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ZsuperNode');

        var $nesting = [self].concat($parent_nesting), $ZsuperNode_implicit_arguments_param$19, $ZsuperNode_initialize$20, $ZsuperNode_compile$21, $ZsuperNode_compile_arguments$22, $ZsuperNode_block_name$23;

        
        self.$handle("zsuper");
        
        Opal.def(self, '$implicit_arguments_param', $ZsuperNode_implicit_arguments_param$19 = function $$implicit_arguments_param() {
          var self = this;

          return "true"
        }, $ZsuperNode_implicit_arguments_param$19.$$arity = 0);
        
        Opal.def(self, '$initialize', $ZsuperNode_initialize$20 = function $$initialize($a) {
          var $post_args, $iter = $ZsuperNode_initialize$20.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ZsuperNode_initialize$20.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $ZsuperNode_initialize$20, false, true), 'initialize', $zuper, $iter);
          if (self.$iter().$type()['$==']("iter")) {
            return nil
          } else {
            
            self.$scope()['$uses_block!']();
            return (self.iter = self.$s("js_tmp", "$iter"));
          };
        }, $ZsuperNode_initialize$20.$$arity = -1);
        
        Opal.def(self, '$compile', $ZsuperNode_compile$21 = function $$compile() {
          var self = this, $writer = nil, implicit_args = nil, $ret_or_3 = nil, block_pass = nil;

          
          if ($truthy(self.$def_scope())) {
            
            
            $writer = [true];
            $send(self.$def_scope(), 'uses_zuper=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            implicit_args = [self.$s("js_tmp", "$zuper")];
            if ($truthy((function() {if ($truthy(($ret_or_3 = self.$block_name()))) {
              return self.$iter()['$!']()
            } else {
              return $ret_or_3
            }; return nil; })())) {
              
              block_pass = self.$s("block_pass", self.$s("lvar", self.$block_name()));
              implicit_args['$<<'](block_pass);};
            self.arglist = $send(self, 's', ["arglist"].concat(Opal.to_a(implicit_args)));};
          return self.$compile_using_send();
        }, $ZsuperNode_compile$21.$$arity = 0);
        
        Opal.def(self, '$compile_arguments', $ZsuperNode_compile_arguments$22 = function $$compile_arguments() {
          var self = this;

          
          self.$push(", ");
          if ($truthy(self.$arglist().$children()['$empty?']())) {
            return self.$push("[]")
          } else {
            return self.$push(self.$expr(self.$arglist()))
          };
        }, $ZsuperNode_compile_arguments$22.$$arity = 0);
        return (Opal.def(self, '$block_name', $ZsuperNode_block_name$23 = function $$block_name() {
          var self = this, $case = nil;

          return (function() {$case = self.$def_scope();
          if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'IterNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else if ($$$($$$($$($nesting, 'Opal'), 'Nodes'), 'DefNode')['$===']($case)) {return self.$def_scope().$block_name()}
          else {return self.$raise("" + "Don't know what to do with super in the scope " + (self.$def_scope()))}})()
        }, $ZsuperNode_block_name$23.$$arity = 0), nil) && 'block_name';
      })($nesting[0], $$($nesting, 'SuperNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'VERSION', "1.3.0.dev")
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/top"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$use_strict?', '$compiler', '$line', '$stmt', '$stmts', '$is_a?', '$eval?', '$add_temp', '$add_used_helpers', '$add_used_operators', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$inspect', '$module_name', '$file', '$esm?', '$returns', '$body', '$irb?', '$each', '$to_a', '$helpers', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content']);
  
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $TopNode_compile$1, $TopNode_opening$3, $TopNode_closing$4, $TopNode_stmts$5, $TopNode_compile_irb_vars$6, $TopNode_add_used_helpers$7, $TopNode_add_used_operators$9, $TopNode_compile_method_stubs$11, $TopNode_compile_end_construct$13, $TopNode_version_comment$14;

        
        self.$handle("top");
        self.$children("body");
        
        Opal.def(self, '$compile', $TopNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push(self.$version_comment());
          self.$opening();
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_code = nil;

            
            if ($truthy(self.$compiler()['$use_strict?']())) {
              self.$line("\"use strict\";")};
            body_code = self.$stmt(self.$stmts());
            if ($truthy(body_code['$is_a?']($$($nesting, 'Array')))) {
            } else {
              body_code = [body_code]
            };
            if ($truthy(self.$compiler()['$eval?']())) {
              self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
            } else {
              
              self.$add_temp("self = Opal.top");
              self.$add_temp("$nesting = []");
            };
            self.$add_temp("nil = Opal.nil");
            self.$add_temp("$$$ = Opal.$$$");
            self.$add_temp("$$ = Opal.$$");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$closing();
        }, $TopNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$opening', $TopNode_opening$3 = function $$opening() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("" + "Opal.modules[" + ($$$($$($nesting, 'Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()) + "] = function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("(function(Opal, self) {")
          } else if ($truthy(self.$compiler()['$esm?']())) {
            return self.$line("export default (function(Opal) {")
          } else {
            return self.$line("(function(Opal) {")
          }
        }, $TopNode_opening$3.$$arity = 0);
        
        Opal.def(self, '$closing', $TopNode_closing$4 = function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("};\n")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self)")
          } else {
            return self.$line("})(Opal);\n")
          }
        }, $TopNode_closing$4.$$arity = 0);
        
        Opal.def(self, '$stmts', $TopNode_stmts$5 = function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        }, $TopNode_stmts$5.$$arity = 0);
        
        Opal.def(self, '$compile_irb_vars', $TopNode_compile_irb_vars$6 = function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        }, $TopNode_compile_irb_vars$6.$$arity = 0);
        
        Opal.def(self, '$add_used_helpers', $TopNode_add_used_helpers$7 = function $$add_used_helpers() {
          var $$8, self = this;

          return $send(self.$compiler().$helpers().$to_a(), 'each', [], ($$8 = function(h){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (h == null) {
              h = nil;
            };
            return self.$add_temp("" + "$" + (h) + " = Opal." + (h));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $TopNode_add_used_helpers$7.$$arity = 0);
        
        Opal.def(self, '$add_used_operators', $TopNode_add_used_operators$9 = function $$add_used_operators() {
          var $$10, self = this, operators = nil;

          
          operators = self.$compiler().$operator_helpers().$to_a();
          return $send(operators, 'each', [], ($$10 = function(op){var self = $$10.$$s == null ? this : $$10.$$s, name = nil;

            
            
            if (op == null) {
              op = nil;
            };
            name = $$$($$$($$($nesting, 'Nodes'), 'CallNode'), 'OPERATORS')['$[]'](op);
            self.$line("" + "function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("" + "  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $TopNode_add_used_operators$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_stubs', $TopNode_compile_method_stubs$11 = function $$compile_method_stubs() {
          var $$12, self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], ($$12 = function(k){var self = $$12.$$s == null ? this : $$12.$$s;

              
              
              if (k == null) {
                k = nil;
              };
              return "" + "'$" + (k) + "'";}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join(", ");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("" + "Opal.add_stubs([" + (stubs) + "]);")
            };
          } else {
            return nil
          }
        }, $TopNode_compile_method_stubs$11.$$arity = 0);
        
        Opal.def(self, '$compile_end_construct', $TopNode_compile_end_construct$13 = function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("" + "$__END__.$read = function() { return " + (content.$inspect()) + "; };");
          } else {
            return nil
          }
        }, $TopNode_compile_end_construct$13.$$arity = 0);
        return (Opal.def(self, '$version_comment', $TopNode_version_comment$14 = function $$version_comment() {
          var self = this;

          return "" + "/* Generated by Opal " + ($$$($$($nesting, 'Opal'), 'VERSION')) + " */"
        }, $TopNode_version_comment$14.$$arity = 0), nil) && 'version_comment';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/while"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$js_truthy', '$test', '$with_temp', '$in_while', '$compiler', '$wrap_in_closure?', '$[]=', '$while_loop', '$-', '$indent', '$stmt', '$body', '$uses_redo?', '$compile_with_redo', '$compile_without_redo', '$wrap', '$private', '$push', '$compile_while', '$while_open', '$while_close', '$line', '$[]', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhileNode');

        var $nesting = [self].concat($parent_nesting), $WhileNode_compile$1, $WhileNode_compile_with_redo$5, $WhileNode_compile_without_redo$6, $WhileNode_compile_while$7, $WhileNode_while_open$9, $WhileNode_while_close$10, $WhileNode_uses_redo$ques$11, $WhileNode_wrap_in_closure$ques$12;

        
        self.$handle("while");
        self.$children("test", "body");
        
        Opal.def(self, '$compile', $WhileNode_compile$1 = function $$compile() {
          var $$2, self = this, test_code = nil;

          
          test_code = self.$js_truthy(self.$test());
          $send(self, 'with_temp', [], ($$2 = function(redo_var){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

            
            
            if (redo_var == null) {
              redo_var = nil;
            };
            return $send(self.$compiler(), 'in_while', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $$4, $writer = nil, body_code = nil;

              
              if ($truthy(self['$wrap_in_closure?']())) {
                
                $writer = ["closure", true];
                $send(self.$while_loop(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = ["redo_var", redo_var];
              $send(self.$while_loop(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              body_code = $send(self, 'indent', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

                return self.$stmt(self.$body())}, $$4.$$s = self, $$4.$$arity = 0, $$4));
              if ($truthy(self['$uses_redo?']())) {
                return self.$compile_with_redo(test_code, body_code, redo_var)
              } else {
                return self.$compile_without_redo(test_code, body_code)
              };}, $$3.$$s = self, $$3.$$arity = 0, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $WhileNode_compile$1.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$compile_with_redo', $WhileNode_compile_with_redo$5 = function $$compile_with_redo(test_code, body_code, redo_var) {
          var self = this;

          
          self.$push("" + (redo_var) + " = false; ");
          return self.$compile_while([redo_var, " || ", test_code], ["" + (redo_var) + " = false;", body_code]);
        }, $WhileNode_compile_with_redo$5.$$arity = 3);
        
        Opal.def(self, '$compile_without_redo', $WhileNode_compile_without_redo$6 = function $$compile_without_redo(test_code, body_code) {
          var self = this;

          return self.$compile_while([test_code], [body_code])
        }, $WhileNode_compile_without_redo$6.$$arity = 2);
        
        Opal.def(self, '$compile_while', $WhileNode_compile_while$7 = function $$compile_while(test_code, body_code) {
          var $$8, self = this;

          
          $send(self, 'push', [self.$while_open()].concat(Opal.to_a(test_code)).concat([self.$while_close()]));
          $send(self, 'indent', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

            return $send(self, 'line', Opal.to_a(body_code))}, $$8.$$s = self, $$8.$$arity = 0, $$8));
          return self.$line("}");
        }, $WhileNode_compile_while$7.$$arity = 2);
        
        Opal.def(self, '$while_open', $WhileNode_while_open$9 = function $$while_open() {
          var self = this;

          return "while ("
        }, $WhileNode_while_open$9.$$arity = 0);
        
        Opal.def(self, '$while_close', $WhileNode_while_close$10 = function $$while_close() {
          var self = this;

          return ") {"
        }, $WhileNode_while_close$10.$$arity = 0);
        
        Opal.def(self, '$uses_redo?', $WhileNode_uses_redo$ques$11 = function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo")
        }, $WhileNode_uses_redo$ques$11.$$arity = 0);
        return (Opal.def(self, '$wrap_in_closure?', $WhileNode_wrap_in_closure$ques$12 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        }, $WhileNode_wrap_in_closure$ques$12.$$arity = 0), nil) && 'wrap_in_closure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilNode');

        var $nesting = [self].concat($parent_nesting), $UntilNode_while_open$13, $UntilNode_while_close$14;

        
        self.$handle("until");
        self.$private();
        
        Opal.def(self, '$while_open', $UntilNode_while_open$13 = function $$while_open() {
          var self = this;

          return "while (!("
        }, $UntilNode_while_open$13.$$arity = 0);
        return (Opal.def(self, '$while_close', $UntilNode_while_close$14 = function $$while_close() {
          var self = this;

          return ")) {"
        }, $UntilNode_while_close$14.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhilePostNode');

        var $nesting = [self].concat($parent_nesting), $WhilePostNode_compile_while$15, $WhilePostNode_while_close$17;

        
        self.$handle("while_post");
        self.$private();
        
        Opal.def(self, '$compile_while', $WhilePostNode_compile_while$15 = function $$compile_while(test_code, body_code) {
          var $$16, self = this;

          
          self.$push("do {");
          $send(self, 'indent', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

            return $send(self, 'line', Opal.to_a(body_code))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
          return $send(self, 'line', ["} ", self.$while_open()].concat(Opal.to_a(test_code)).concat([self.$while_close()]));
        }, $WhilePostNode_compile_while$15.$$arity = 2);
        return (Opal.def(self, '$while_close', $WhilePostNode_while_close$17 = function $$while_close() {
          var self = this;

          return ");"
        }, $WhilePostNode_while_close$17.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilPostNode');

        var $nesting = [self].concat($parent_nesting), $UntilPostNode_while_open$18, $UntilPostNode_while_close$19;

        
        self.$handle("until_post");
        self.$private();
        
        Opal.def(self, '$while_open', $UntilPostNode_while_open$18 = function $$while_open() {
          var self = this;

          return "while(!("
        }, $UntilPostNode_while_open$18.$$arity = 0);
        return (Opal.def(self, '$while_close', $UntilPostNode_while_close$19 = function $$while_close() {
          var self = this;

          return "));"
        }, $UntilPostNode_while_close$19.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhilePostNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/hash"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$attr_accessor', '$each', '$children', '$type', '$===', '$<<', '$[]', '$all?', '$keys', '$include?', '$has_kwsplat', '$compile_merge', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$==', '$empty?', '$expr', '$s', '$each_with_index', '$push', '$wrap', '$times', '$size', '$inspect', '$to_s', '$values', '$[]=', '$-', '$join', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HashNode');

        var $nesting = [self].concat($parent_nesting), $HashNode_initialize$1, $HashNode_simple_keys$ques$3, $HashNode_compile$5, $HashNode_compile_merge$6, $HashNode_compile_hash$9, $HashNode_compile_hash2$11;

        
        self.$handle("hash");
        self.$attr_accessor("has_kwsplat", "keys", "values");
        
        Opal.def(self, '$initialize', $HashNode_initialize$1 = function $$initialize($a) {
          var $post_args, $$2, $iter = $HashNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $HashNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, $find_super(self, 'initialize', $HashNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.has_kwsplat = false;
          self.keys = [];
          self.values = [];
          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil;
            if (self.keys == null) self.keys = nil;
            if (self.values == null) self.values = nil;

            
            
            if (child == null) {
              child = nil;
            };
            return (function() {$case = child.$type();
            if ("kwsplat"['$===']($case)) {return (self.has_kwsplat = true)}
            else if ("pair"['$===']($case)) {
            self.keys['$<<'](child.$children()['$[]'](0));
            return self.values['$<<'](child.$children()['$[]'](1));}
            else { return nil }})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $HashNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$simple_keys?', $HashNode_simple_keys$ques$3 = function() {
          var $$4, self = this;

          return $send(self.$keys(), 'all?', [], ($$4 = function(key){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (key == null) {
              key = nil;
            };
            return ["sym", "str"]['$include?'](key.$type());}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        }, $HashNode_simple_keys$ques$3.$$arity = 0);
        
        Opal.def(self, '$compile', $HashNode_compile$5 = function $$compile() {
          var self = this;

          if ($truthy(self.$has_kwsplat())) {
            return self.$compile_merge()
          } else if ($truthy(self['$simple_keys?']())) {
            return self.$compile_hash2()
          } else {
            return self.$compile_hash()
          }
        }, $HashNode_compile$5.$$arity = 0);
        
        Opal.def(self, '$compile_merge', $HashNode_compile_merge$6 = function $$compile_merge() {
          var $a, $$7, $$8, self = this, result = nil, seq = nil;

          
          self.$helper("hash");
          $a = [[], []], (result = $a[0]), (seq = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            if (child.$type()['$==']("kwsplat")) {
              
              if ($truthy(seq['$empty?']())) {
              } else {
                result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return (seq = []);
            } else {
              return seq['$<<'](child)
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          if ($truthy(seq['$empty?']())) {
          } else {
            result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
          };
          return $send(result, 'each_with_index', [], ($$8 = function(fragment, idx){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (fragment == null) {
              fragment = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
              return self.$push(fragment)
            } else {
              return self.$push(".$merge(", fragment, ")")
            };}, $$8.$$s = self, $$8.$$arity = 2, $$8));
        }, $HashNode_compile_merge$6.$$arity = 0);
        
        Opal.def(self, '$compile_hash', $HashNode_compile_hash$9 = function $$compile_hash() {
          var $$10, self = this;

          
          self.$helper("hash");
          $send(self.$children(), 'each_with_index', [], ($$10 = function(pair, idx){var self = $$10.$$s == null ? this : $$10.$$s, $a, $b, key = nil, value = nil;

            
            
            if (pair == null) {
              pair = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            $b = pair.$children(), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(key), ", ", self.$expr(value));}, $$10.$$s = self, $$10.$$arity = 2, $$10));
          return self.$wrap("$hash(", ")");
        }, $HashNode_compile_hash$9.$$arity = 0);
        return (Opal.def(self, '$compile_hash2', $HashNode_compile_hash2$11 = function $$compile_hash2() {
          var $a, $$12, $$13, self = this, hash_obj = nil, hash_keys = nil;

          
          $a = [$hash2([], {}), []], (hash_obj = $a[0]), (hash_keys = $a[1]), $a;
          self.$helper("hash2");
          $send(self.$keys().$size(), 'times', [], ($$12 = function(idx){var self = $$12.$$s == null ? this : $$12.$$s, key = nil, $writer = nil;

            
            
            if (idx == null) {
              idx = nil;
            };
            key = self.$keys()['$[]'](idx).$children()['$[]'](0).$to_s().$inspect();
            if ($truthy(hash_obj['$include?'](key))) {
            } else {
              hash_keys['$<<'](key)
            };
            
            $writer = [key, self.$expr(self.$values()['$[]'](idx))];
            $send(hash_obj, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$12.$$s = self, $$12.$$arity = 1, $$12));
          $send(hash_keys, 'each_with_index', [], ($$13 = function(key, idx){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          return self.$wrap("" + "$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, $HashNode_compile_hash2$11.$$arity = 0), nil) && 'compile_hash2';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwSplatNode');

        var $nesting = [self].concat($parent_nesting), $KwSplatNode_compile$14;

        
        self.$handle("kwsplat");
        self.$children("value");
        return (Opal.def(self, '$compile', $KwSplatNode_compile$14 = function $$compile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")")
        }, $KwSplatNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArrayNode');

        var $nesting = [self].concat($parent_nesting), $ArrayNode_compile$1;

        
        self.$handle("array");
        return (Opal.def(self, '$compile', $ArrayNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("[]")};
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, splat = nil, part = nil;

            
            
            if (child == null) {
              child = nil;
            };
            splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, $ArrayNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/defined"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $slice = Opal.slice, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$==', '$size', '$[]', '$compile_defined_send', '$wrap', '$compile_defined_ivar', '$compile_defined_super', '$compile_defined_yield', '$compile_defined_xstr', '$compile_defined_const', '$compile_defined_cvar', '$compile_defined_gvar', '$compile_defined_back_ref', '$compile_defined_nth_ref', '$compile_defined_array', '$respond_to?', '$__send__', '$new_temp', '$scope', '$expr', '$wrap_with_try_catch', '$mid_to_jsid', '$compile_defined', '$compile_send_recv_doesnt_raise', '$each', '$s', '$uses_block!', '$block_name', '$find_parent_def', '$nil?', '$class_variable_owner', '$helper', '$include?', '$each_with_index']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedNode');

        var $nesting = [self].concat($parent_nesting), $DefinedNode_compile$1, $DefinedNode_compile_defined$2, $DefinedNode_wrap_with_try_catch$3, $DefinedNode_compile_send_recv_doesnt_raise$4, $DefinedNode_compile_defined_send$5, $DefinedNode_compile_defined_ivar$7, $DefinedNode_compile_defined_super$8, $DefinedNode_compile_defined_yield$9, $DefinedNode_compile_defined_xstr$10, $DefinedNode_compile_defined_const$11, $DefinedNode_compile_defined_cvar$12, $DefinedNode_compile_defined_gvar$13, $DefinedNode_compile_defined_back_ref$14, $DefinedNode_compile_defined_nth_ref$15, $DefinedNode_compile_defined_array$16;

        
        self.$handle("defined?");
        self.$children("value");
        
        Opal.def(self, '$compile', $DefinedNode_compile$1 = function $$compile() {
          var self = this, $case = nil, $ret_or_1 = nil;

          return (function() {$case = self.$value().$type();
          if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(self.$value().$type().$to_s().$inspect())}
          else if ("lvasgn"['$===']($case) || "ivasgn"['$===']($case) || "gvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "op_asgn"['$===']($case) || "or_asgn"['$===']($case) || "and_asgn"['$===']($case)) {return self.$push("'assignment'")}
          else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}
          else if ("begin"['$===']($case)) {if ($truthy((function() {if ($truthy(($ret_or_1 = self.$value().$children().$size()['$=='](1)))) {
            return self.$value().$children()['$[]'](0).$type()['$==']("masgn")
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return self.$push("'assignment'")
          } else {
            return self.$push("'expression'")
          }}
          else if ("send"['$===']($case)) {
          self.$compile_defined_send(self.$value());
          return self.$wrap("(", " ? 'method' : nil)");}
          else if ("ivar"['$===']($case)) {
          self.$compile_defined_ivar(self.$value());
          return self.$wrap("(", " ? 'instance-variable' : nil)");}
          else if ("zsuper"['$===']($case) || "super"['$===']($case)) {return self.$compile_defined_super()}
          else if ("yield"['$===']($case)) {
          self.$compile_defined_yield();
          return self.$wrap("(", " ? 'yield' : nil)");}
          else if ("xstr"['$===']($case)) {return self.$compile_defined_xstr(self.$value())}
          else if ("const"['$===']($case)) {
          self.$compile_defined_const(self.$value());
          return self.$wrap("(", " ? 'constant' : nil)");}
          else if ("cvar"['$===']($case)) {
          self.$compile_defined_cvar(self.$value());
          return self.$wrap("(", " ? 'class variable' : nil)");}
          else if ("gvar"['$===']($case)) {
          self.$compile_defined_gvar(self.$value());
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("back_ref"['$===']($case)) {
          self.$compile_defined_back_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("nth_ref"['$===']($case)) {
          self.$compile_defined_nth_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("array"['$===']($case)) {
          self.$compile_defined_array(self.$value());
          return self.$wrap("(", " ? 'expression' : nil)");}
          else {return self.$push("'expression'")}})()
        }, $DefinedNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_defined', $DefinedNode_compile_defined$2 = function $$compile_defined(node) {
          var self = this, type = nil, node_tmp = nil;

          
          type = node.$type();
          if ($truthy(self['$respond_to?']("" + "compile_defined_" + (type)))) {
            return self.$__send__("" + "compile_defined_" + (type), node)
          } else {
            
            node_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (node_tmp) + " = ", self.$expr(node), ")");
            return node_tmp;
          };
        }, $DefinedNode_compile_defined$2.$$arity = 1);
        
        Opal.def(self, '$wrap_with_try_catch', $DefinedNode_wrap_with_try_catch$3 = function $$wrap_with_try_catch(code) {
          var self = this, returning_tmp = nil;

          
          returning_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (returning_tmp) + " = (function() { try {");
          self.$push("" + "  return " + (code) + ";");
          self.$push("} catch ($err) {");
          self.$push("  if (Opal.rescue($err, [Opal.Exception])) {");
          self.$push("    try {");
          self.$push("      return false;");
          self.$push("    } finally { Opal.pop_exception() }");
          self.$push("  } else { throw $err; }");
          self.$push("}})())");
          return returning_tmp;
        }, $DefinedNode_wrap_with_try_catch$3.$$arity = 1);
        
        Opal.def(self, '$compile_send_recv_doesnt_raise', $DefinedNode_compile_send_recv_doesnt_raise$4 = function $$compile_send_recv_doesnt_raise(recv_code) {
          var self = this;

          return self.$wrap_with_try_catch(recv_code)
        }, $DefinedNode_compile_send_recv_doesnt_raise$4.$$arity = 1);
        
        Opal.def(self, '$compile_defined_send', $DefinedNode_compile_defined_send$5 = function $$compile_defined_send(node) {
          var $a, $$6, self = this, recv = nil, method_name = nil, args = nil, mid = nil, recv_code = nil, recv_tmp = nil, recv_value_tmp = nil, meth_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          mid = self.$mid_to_jsid(method_name.$to_s());
          if ($truthy(recv)) {
            
            recv_code = self.$compile_defined(recv);
            self.$push(" && ");
            if (recv.$type()['$==']("send")) {
              
              recv_code = self.$compile_send_recv_doesnt_raise(recv_code);
              self.$push(" && ");};
            recv_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (recv_tmp) + " = ", recv_code, "" + ", " + (recv_tmp) + ") && ");
          } else {
            recv_tmp = "self"
          };
          recv_value_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (recv_value_tmp) + " = " + (recv_tmp) + ") && ");
          meth_tmp = self.$scope().$new_temp();
          self.$push("" + "(((" + (meth_tmp) + " = " + (recv_value_tmp) + (mid) + ") && !" + (meth_tmp) + ".$$stub)");
          self.$push("" + " || " + (recv_value_tmp) + "['$respond_to_missing?']('" + (method_name) + "'))");
          $send(args, 'each', [], ($$6 = function(arg){var self = $$6.$$s == null ? this : $$6.$$s, $case = nil;

            
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("block_pass"['$===']($case)) {return nil}
            else {
            self.$push(" && ");
            return self.$compile_defined(arg);}})();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
          self.$wrap("(", ")");
          return "" + (meth_tmp) + "()";
        }, $DefinedNode_compile_defined_send$5.$$arity = 1);
        
        Opal.def(self, '$compile_defined_ivar', $DefinedNode_compile_defined_ivar$7 = function $$compile_defined_ivar(node) {
          var self = this, name = nil, tmp = nil;

          
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil)");
          return tmp;
        }, $DefinedNode_compile_defined_ivar$7.$$arity = 1);
        
        Opal.def(self, '$compile_defined_super', $DefinedNode_compile_defined_super$8 = function $$compile_defined_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super")))
        }, $DefinedNode_compile_defined_super$8.$$arity = 0);
        
        Opal.def(self, '$compile_defined_yield', $DefinedNode_compile_defined_yield$9 = function $$compile_defined_yield() {
          var self = this, block_name = nil, $ret_or_2 = nil;

          
          self.$scope()['$uses_block!']();
          block_name = (function() {if ($truthy(($ret_or_2 = self.$scope().$block_name()))) {
            return $ret_or_2
          } else {
            return self.$scope().$find_parent_def().$block_name()
          }; return nil; })();
          self.$push("" + "(" + (block_name) + " != null && " + (block_name) + " !== nil)");
          return block_name;
        }, $DefinedNode_compile_defined_yield$9.$$arity = 0);
        
        Opal.def(self, '$compile_defined_xstr', $DefinedNode_compile_defined_xstr$10 = function $$compile_defined_xstr(node) {
          var self = this;

          return self.$push("(typeof(", self.$expr(node), ") !== \"undefined\")")
        }, $DefinedNode_compile_defined_xstr$10.$$arity = 1);
        
        Opal.def(self, '$compile_defined_const', $DefinedNode_compile_defined_const$11 = function $$compile_defined_const(node) {
          var $a, self = this, const_scope = nil, const_name = nil, const_tmp = nil, const_scope_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (const_scope = ($a[0] == null ? nil : $a[0])), (const_name = ($a[1] == null ? nil : $a[1])), $a;
          const_tmp = self.$scope().$new_temp();
          if ($truthy(const_scope['$nil?']())) {
            self.$push("" + "(" + (const_tmp) + " = $$($nesting, '" + (const_name) + "', 'skip_raise'))")
          } else if (const_scope['$=='](self.$s("cbase"))) {
            self.$push("" + "(" + (const_tmp) + " = $$$('::', '" + (const_name) + "', 'skip_raise'))")
          } else {
            
            const_scope_tmp = self.$compile_defined(const_scope);
            self.$push("" + " && (" + (const_tmp) + " = $$$(" + (const_scope_tmp) + ", '" + (const_name) + "', 'skip_raise'))");
          };
          return const_tmp;
        }, $DefinedNode_compile_defined_const$11.$$arity = 1);
        
        Opal.def(self, '$compile_defined_cvar', $DefinedNode_compile_defined_cvar$12 = function $$compile_defined_cvar(node) {
          var $a, self = this, cvar_name = nil, _ = nil, cvar_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (cvar_name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          cvar_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (cvar_tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (cvar_name) + "'], " + (cvar_tmp) + " != null)");
          return cvar_tmp;
        }, $DefinedNode_compile_defined_cvar$12.$$arity = 1);
        
        Opal.def(self, '$compile_defined_gvar', $DefinedNode_compile_defined_gvar$13 = function $$compile_defined_gvar(node) {
          var self = this, name = nil, gvar_temp = nil;

          
          self.$helper("gvars");
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          gvar_temp = self.$scope().$new_temp();
          if ($truthy(["~", "!"]['$include?'](name))) {
            self.$push("" + "(" + (gvar_temp) + " = ", self.$expr(node), " || true)")
          } else {
            self.$push("" + "(" + (gvar_temp) + " = $gvars[" + (name.$inspect()) + "], " + (gvar_temp) + " != null)")
          };
          return gvar_temp;
        }, $DefinedNode_compile_defined_gvar$13.$$arity = 1);
        
        Opal.def(self, '$compile_defined_back_ref', $DefinedNode_compile_defined_back_ref$14 = function $$compile_defined_back_ref() {
          var self = this, back_ref_temp = nil;

          
          self.$helper("gvars");
          back_ref_temp = self.$scope().$new_temp();
          self.$push("" + "(" + (back_ref_temp) + " = $gvars['~'], " + (back_ref_temp) + " != null && " + (back_ref_temp) + " !== nil)");
          return back_ref_temp;
        }, $DefinedNode_compile_defined_back_ref$14.$$arity = 0);
        
        Opal.def(self, '$compile_defined_nth_ref', $DefinedNode_compile_defined_nth_ref$15 = function $$compile_defined_nth_ref() {
          var self = this, nth_ref_tmp = nil;

          
          self.$helper("gvars");
          nth_ref_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (nth_ref_tmp) + " = $gvars['~'], " + (nth_ref_tmp) + " != null && " + (nth_ref_tmp) + " != nil)");
          return nth_ref_tmp;
        }, $DefinedNode_compile_defined_nth_ref$15.$$arity = 0);
        return (Opal.def(self, '$compile_defined_array', $DefinedNode_compile_defined_array$16 = function $$compile_defined_array(node) {
          var $$17, self = this;

          return $send(node.$children(), 'each_with_index', [], ($$17 = function(child, idx){var self = $$17.$$s == null ? this : $$17.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" && ")
            };
            return self.$compile_defined(child);}, $$17.$$s = self, $$17.$$arity = 2, $$17))
        }, $DefinedNode_compile_defined_array$16.$$arity = 1), nil) && 'compile_defined_array';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/masgn"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$freeze', '$handle', '$children', '$new_temp', '$scope', '$==', '$type', '$rhs', '$push', '$expr', '$any?', '$size', '$compile_masgn', '$lhs', '$queue_temp', '$take_while', '$!=', '$drop', '$each_with_index', '$compile_assignment', '$empty?', '$shift', '$[]', '$helper', '$<<', '$dup', '$s', '$!', '$>=', '$updated', '$include?', '$+', '$last', '$raise']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MassAssignNode');

        var $nesting = [self].concat($parent_nesting), $MassAssignNode_compile$1, $MassAssignNode_compile_masgn$3, $MassAssignNode_compile_assignment$7;

        
        Opal.const_set($nesting[0], 'SIMPLE_ASSIGNMENT', ["lvasgn", "ivasgn", "lvar", "gvasgn", "cdecl", "casgn"].$freeze());
        self.$handle("masgn");
        self.$children("lhs", "rhs");
        
        Opal.def(self, '$compile', $MassAssignNode_compile$1 = function $$compile() {
          var $$2, self = this, array = nil, rhs_len = nil, retval = nil;

          
          array = self.$scope().$new_temp();
          if (self.$rhs().$type()['$==']("array")) {
            
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            rhs_len = (function() {if ($truthy($send(self.$rhs().$children(), 'any?', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s;

              
              
              if (c == null) {
                c = nil;
              };
              return c.$type()['$==']("splat");}, $$2.$$s = self, $$2.$$arity = 1, $$2)))) {
              return nil
            } else {
              return self.$rhs().$children().$size()
            }; return nil; })();
            self.$compile_masgn(self.$lhs().$children(), array, rhs_len);
            self.$push("" + ", " + (array));
          } else if (self.$rhs().$type()['$==']("begin")) {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          } else {
            
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()));
            self.$push("" + ", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push("" + ", " + (retval));
            self.$scope().$queue_temp(retval);
          };
          return self.$scope().$queue_temp(array);
        }, $MassAssignNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_masgn', $MassAssignNode_compile_masgn$3 = function $$compile_masgn(lhs_items, array, len) {
          var $$4, $$5, $$6, self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          pre_splat = $send(lhs_items, 'take_while', [], ($$4 = function(child){var self = $$4.$$s == null ? this : $$4.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$!=']("splat");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          post_splat = lhs_items.$drop(pre_splat.$size());
          $send(pre_splat, 'each_with_index', [], ($$5 = function(child, idx){var self = $$5.$$s == null ? this : $$5.$$s;

            
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return self.$compile_assignment(child, array, idx, len);}, $$5.$$s = self, $$5.$$arity = 2, $$5));
          if ($truthy(post_splat['$empty?']())) {
            return nil
          } else {
            
            splat = post_splat.$shift();
            if ($truthy(post_splat['$empty?']())) {
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
              } else {
                return nil
              }
            } else {
              
              tmp = self.$scope().$new_temp();
              self.$push("" + ", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push("" + ", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ($truthy((part = splat.$children()['$[]'](0)))) {
                
                self.$helper("slice");
                part = part.$dup()['$<<'](self.$s("js_tmp", "" + "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));};
              $send(post_splat, 'each_with_index', [], ($$6 = function(child, idx){var self = $$6.$$s == null ? this : $$6.$$s;

                
                
                if (child == null) {
                  child = nil;
                };
                
                if (idx == null) {
                  idx = nil;
                };
                if (idx['$=='](0)) {
                  return self.$compile_assignment(child, array, tmp)
                } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                };}, $$6.$$s = self, $$6.$$arity = 2, $$6));
              return self.$scope().$queue_temp(tmp);
            };
          };
        }, $MassAssignNode_compile_masgn$3.$$arity = -3);
        return (Opal.def(self, '$compile_assignment', $MassAssignNode_compile_assignment$7 = function $$compile_assignment(child, array, idx, len) {
          var self = this, assign = nil, $ret_or_1 = nil, part = nil, tmp = nil;

          
          
          if (len == null) {
            len = nil;
          };
          assign = (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = len['$!']()))) {
            return $ret_or_1
          } else {
            return $rb_ge(idx, len)
          }; return nil; })())) {
            return self.$s("js_tmp", "" + "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")
          } else {
            return self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")
          }; return nil; })();
          part = child.$updated();
          if ($truthy($$($nesting, 'SIMPLE_ASSIGNMENT')['$include?'](child.$type()))) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("send")) {
            part = part.$updated(nil, $rb_plus(part.$children(), [assign]))
          } else if (child.$type()['$==']("attrasgn")) {
            part.$last()['$<<'](assign)
          } else if (child.$type()['$==']("mlhs")) {
            
            tmp = self.$scope().$new_temp();
            self.$push("" + ", (" + (tmp) + " = Opal.to_ary(" + (assign.$children()['$[]'](0)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
          } else {
            self.$raise("" + "Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }, $MassAssignNode_compile_assignment$7.$$arity = -4), nil) && 'compile_assignment';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/arglist"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$each', '$children', '$==', '$type', '$expr', '$empty?', '$<<', '$fragment', '$push']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArglistNode');

        var $nesting = [self].concat($parent_nesting), $ArglistNode_compile$1;

        
        self.$handle("arglist");
        return (Opal.def(self, '$compile', $ArglistNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(current){var self = $$2.$$s == null ? this : $$2.$$s, splat = nil, arg = nil;

            
            
            if (current == null) {
              current = nil;
            };
            splat = current.$type()['$==']("splat");
            arg = self.$expr(current);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](arg)
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = work;
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code['$<<'](self.$fragment(".concat(["))['$<<'](join)['$<<'](self.$fragment("])"))
            };
          };
          return $send(self, 'push', Opal.to_a(code));
        }, $ArglistNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/x_string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $lambda = Opal.lambda;

  Opal.add_stubs(['$handle', '$unpack_return', '$children', '$strip_empty_children', '$single_line?', '$compile_single_line', '$each', '$compile_child', '$recv?', '$wrap', '$push', '$private', '$type', '$===', '$source', '$expression', '$loc', '$new', '$scope', '$expr', '$raise', '$shift', '$empty?', '$s', '$==', '$strip', '$=~', '$!', '$pop', '$extract_last_value', '$rstrip', '$expr?', '$end_with?', '$warning', '$compiler', '$line', '$[]', '$size', '$none?', '$first', '$dup', '$nil?', '$any?', '$last']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'XStringNode');

        var $nesting = [self].concat($parent_nesting), $XStringNode_compile$1, $XStringNode_compile_child$3, $XStringNode_compile_single_line$4, $XStringNode_extract_last_value$6, $XStringNode_single_line$ques$7, $XStringNode_unpack_return$9, $XStringNode_strip_empty_children$10;

        self.$$prototype.should_add_semicolon = self.$$prototype.returning = nil;
        
        self.$handle("xstr");
        
        Opal.def(self, '$compile', $XStringNode_compile$1 = function $$compile() {
          var $$2, self = this, unpacked_children = nil, stripped_children = nil;

          
          self.should_add_semicolon = false;
          unpacked_children = self.$unpack_return(self.$children());
          stripped_children = self.$strip_empty_children(unpacked_children);
          if ($truthy(self['$single_line?'](stripped_children))) {
            self.$compile_single_line(stripped_children)
          } else {
            $send(unpacked_children, 'each', [], ($$2 = function(c){var self = $$2.$$s == null ? this : $$2.$$s;

              
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$2.$$s = self, $$2.$$arity = 1, $$2))
          };
          if ($truthy(self['$recv?']())) {
            self.$wrap("(", ")")};
          if ($truthy(self.should_add_semicolon)) {
            return self.$push(";")
          } else {
            return nil
          };
        }, $XStringNode_compile$1.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$compile_child', $XStringNode_compile_child$3 = function $$compile_child(child) {
          var self = this, $case = nil, value = nil;

          return (function() {$case = child.$type();
          if ("str"['$===']($case)) {
          value = child.$loc().$expression().$source();
          return self.$push($$($nesting, 'Fragment').$new(value, self.$scope(), child));}
          else if ("begin"['$===']($case) || "gvar"['$===']($case) || "ivar"['$===']($case) || "nil"['$===']($case)) {return self.$push(self.$expr(child))}
          else {return self.$raise("" + "Unsupported xstr part: " + (child.$type()))}})()
        }, $XStringNode_compile_child$3.$$arity = 1);
        
        Opal.def(self, '$compile_single_line', $XStringNode_compile_single_line$4 = function $$compile_single_line(children) {
          var $$5, self = this, has_embeded_return = nil, first_child = nil, single_child = nil, $ret_or_1 = nil, first_value = nil, $ret_or_2 = nil, last_child = nil, $ret_or_3 = nil, last_value = nil;

          
          has_embeded_return = false;
          first_child = children.$shift();
          single_child = children['$empty?']();
          first_child = (function() {if ($truthy(($ret_or_1 = first_child))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })();
          if (first_child.$type()['$==']("str")) {
            
            first_value = first_child.$loc().$expression().$source().$strip();
            has_embeded_return = first_value['$=~'](/^return\b/);};
          if ($truthy((function() {if ($truthy(($ret_or_2 = self.returning))) {
            return has_embeded_return['$!']()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            self.$push("return ")};
          last_child = (function() {if ($truthy(($ret_or_3 = children.$pop()))) {
            return $ret_or_3
          } else {
            return first_child
          }; return nil; })();
          if (last_child.$type()['$==']("str")) {
            last_value = self.$extract_last_value(last_child)};
          if ($truthy(single_child)) {
          } else {
            
            self.should_add_semicolon = false;
            self.$compile_child(first_child);
            $send(children, 'each', [], ($$5 = function(c){var self = $$5.$$s == null ? this : $$5.$$s;

              
              
              if (c == null) {
                c = nil;
              };
              return self.$compile_child(c);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          };
          if (last_child.$type()['$==']("str")) {
            return self.$push($$($nesting, 'Fragment').$new(last_value, self.$scope(), last_child))
          } else {
            return self.$compile_child(last_child)
          };
        }, $XStringNode_compile_single_line$4.$$arity = 1);
        
        Opal.def(self, '$extract_last_value', $XStringNode_extract_last_value$6 = function $$extract_last_value(last_child) {
          var self = this, last_value = nil, $ret_or_4 = nil, $ret_or_5 = nil;

          
          last_value = last_child.$loc().$expression().$source().$rstrip();
          if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.returning))) {
            return $ret_or_5
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return last_value['$end_with?'](";")
          } else {
            return $ret_or_4
          }; return nil; })())) {
            
            self.$compiler().$warning("Removed semicolon ending x-string expression, interpreted as unintentional", last_child.$line());
            last_value = last_value['$[]']($range(0, -2, false));};
          if ($truthy(self.returning)) {
            self.should_add_semicolon = true};
          return last_value;
        }, $XStringNode_extract_last_value$6.$$arity = 1);
        
        Opal.def(self, '$single_line?', $XStringNode_single_line$ques$7 = function(children) {
          var $$8, self = this, $ret_or_6 = nil;

          if ($truthy(($ret_or_6 = children.$size()['$=='](1)))) {
            return $ret_or_6
          } else {
            return $send(children, 'none?', [], ($$8 = function(c){var self = $$8.$$s == null ? this : $$8.$$s, $ret_or_7 = nil;

              
              
              if (c == null) {
                c = nil;
              };
              if ($truthy(($ret_or_7 = c.$type()['$==']("str")))) {
                return c.$loc().$expression().$source()['$end_with?']("\n")
              } else {
                return $ret_or_7
              };}, $$8.$$s = self, $$8.$$arity = 1, $$8))
          }
        }, $XStringNode_single_line$ques$7.$$arity = 1);
        
        Opal.def(self, '$unpack_return', $XStringNode_unpack_return$9 = function $$unpack_return(children) {
          var self = this, first_child = nil;

          
          first_child = children.$first();
          self.returning = false;
          if (first_child.$type()['$==']("js_return")) {
            
            self.returning = true;
            children = first_child.$children();};
          return children;
        }, $XStringNode_unpack_return$9.$$arity = 1);
        return (Opal.def(self, '$strip_empty_children', $XStringNode_strip_empty_children$10 = function $$strip_empty_children(children) {
          var $$11, $a, self = this, empty_line = nil, $ret_or_10 = nil, $ret_or_11 = nil;

          
          children = children.$dup();
          empty_line = $lambda(($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_8 = nil, $ret_or_9 = nil;

            
            
            if (child == null) {
              child = nil;
            };
            if ($truthy(($ret_or_8 = child['$nil?']()))) {
              return $ret_or_8
            } else {
              
              if ($truthy(($ret_or_9 = child.$type()['$==']("str")))) {
                return child.$loc().$expression().$source().$rstrip()['$empty?']()
              } else {
                return $ret_or_9
              };
            };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          while ($truthy((function() {if ($truthy(($ret_or_10 = children['$any?']()))) {
            return empty_line['$[]'](children.$first())
          } else {
            return $ret_or_10
          }; return nil; })())) {
            children.$shift()
          };
          while ($truthy((function() {if ($truthy(($ret_or_11 = children['$any?']()))) {
            return empty_line['$[]'](children.$last())
          } else {
            return $ret_or_11
          }; return nil; })())) {
            children.$pop()
          };
          return children;
        }, $XStringNode_strip_empty_children$10.$$arity = 1), nil) && 'strip_empty_children';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes/lambda"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$helper', '$defines_lambda', '$scope', '$push', '$expr', '$iter']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LambdaNode');

        var $nesting = [self].concat($parent_nesting), $LambdaNode_compile$1;

        
        self.$handle("lambda");
        self.$children("iter");
        return (Opal.def(self, '$compile', $LambdaNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$helper("lambda");
          return $send(self.$scope(), 'defines_lambda', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$push("$lambda(", self.$expr(self.$iter()), ")")}, $$2.$$s = self, $$2.$$arity = 0, $$2));
        }, $LambdaNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/nodes"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/csend");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/args");
  self.$require("opal/nodes/args/arity_check");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/defs");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/case");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  self.$require("opal/nodes/arglist");
  self.$require("opal/nodes/x_string");
  return self.$require("opal/nodes/lambda");
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/eof_content"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$empty?', '$[]', '$last_token_position', '$drop_while', '$lines', '$==', '$join', '$private', '$last', '$end_pos']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $EofContent_initialize$1, $EofContent_eof$2, $EofContent_last_token_position$4;

      self.$$prototype.tokens = self.$$prototype.source = nil;
      
      Opal.const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      Opal.def(self, '$initialize', $EofContent_initialize$1 = function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      }, $EofContent_initialize$1.$$arity = 2);
      
      Opal.def(self, '$eof', $EofContent_eof$2 = function $$eof() {
        var $$3, self = this, eof_content = nil, $ret_or_1 = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil};
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if ($truthy(eof_content)) {
        } else {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], ($$3 = function(line){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (line == null) {
            line = nil;
          };
          return line['$==']("\n");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        if (eof_content['$[]'](0)['$==']("__END__\n")) {
          
          eof_content = (function() {if ($truthy(($ret_or_1 = eof_content['$[]']($range(1, -1, false))))) {
            return $ret_or_1
          } else {
            return []
          }; return nil; })();
          return eof_content.$join();
        } else if (eof_content['$=='](["__END__"])) {
          return ""
        } else {
          return nil
        };
      }, $EofContent_eof$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$last_token_position', $EofContent_last_token_position$4 = function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      }, $EofContent_last_token_position$4.$$arity = 0), nil) && 'last_token_position';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/errors"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$new', '$respond_to?', '$location', '$location=', '$-', '$diagnostic', '$diagnostic=', '$to_a', '$backtrace', '$unshift', '$to_s', '$set_backtrace', '$path', '$lineno', '$+', '$label', '$line', '$lineno=', '$source_line', '$label=', '$expression']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_opal_location_from_error$2, $Opal_add_opal_location_to_error$3;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GemNotFound');

      var $nesting = [self].concat($parent_nesting), $GemNotFound_initialize$1;

      
      self.$attr_reader("gem_name");
      return (Opal.def(self, '$initialize', $GemNotFound_initialize$1 = function $$initialize(gem_name) {
        var $iter = $GemNotFound_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $GemNotFound_initialize$1.$$p = null;
        
        self.gem_name = gem_name;
        return $send2(self, $find_super(self, 'initialize', $GemNotFound_initialize$1, false, true), 'initialize', ["" + "can't find gem " + (gem_name)], null);
      }, $GemNotFound_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompilationError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParsingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'CompilationError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'RewritingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'ParsingError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$$('::', 'SyntaxError'), $nesting);
    Opal.defs(self, '$opal_location_from_error', $Opal_opal_location_from_error$2 = function $$opal_location_from_error(error) {
      var self = this, opal_location = nil, $writer = nil;

      
      opal_location = $$($nesting, 'OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        
        $writer = [error.$location()];
        $send(opal_location, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        
        $writer = [error.$diagnostic()];
        $send(opal_location, 'diagnostic=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      return opal_location;
    }, $Opal_opal_location_from_error$2.$$arity = 1);
    Opal.defs(self, '$add_opal_location_to_error', $Opal_add_opal_location_to_error$3 = function $$add_opal_location_to_error(opal_location, error) {
      var self = this, backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    }, $Opal_add_opal_location_to_error$3.$$arity = 2);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      var $nesting = [self].concat($parent_nesting), $OpalBacktraceLocation_initialize$4, $OpalBacktraceLocation_to_s$5, $OpalBacktraceLocation_diagnostic$eq$6, $OpalBacktraceLocation_location$eq$7;

      
      self.$attr_accessor("path", "lineno", "label");
      
      Opal.def(self, '$initialize', $OpalBacktraceLocation_initialize$4 = function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        
        if (path == null) {
          path = nil;
        };
        
        if (lineno == null) {
          lineno = nil;
        };
        
        if (label == null) {
          label = nil;
        };
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, $OpalBacktraceLocation_initialize$4.$$arity = -1);
      
      Opal.def(self, '$to_s', $OpalBacktraceLocation_to_s$5 = function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, "" + ":" + (self.$lineno()))};
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "" + "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      }, $OpalBacktraceLocation_to_s$5.$$arity = 0);
      $alias(self, "line", "lineno");
      
      Opal.def(self, '$diagnostic=', $OpalBacktraceLocation_diagnostic$eq$6 = function(diagnostic) {
        var self = this, $writer = nil;

        
        if ($truthy(diagnostic)) {
        } else {
          return nil
        };
        
        $writer = [diagnostic.$location()];
        $send(self, 'location=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $OpalBacktraceLocation_diagnostic$eq$6.$$arity = 1);
      return (Opal.def(self, '$location=', $OpalBacktraceLocation_location$eq$7 = function(location) {
        var self = this, $writer = nil;

        
        if ($truthy(location)) {
        } else {
          return nil
        };
        
        $writer = [location.$line()];
        $send(self, 'lineno=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(location['$respond_to?']("source_line"))) {
          
          $writer = [location.$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(location['$respond_to?']("expression"))) {
          
          $writer = [location.$expression().$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $OpalBacktraceLocation_location$eq$7.$$arity = 1), nil) && 'location=';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/magic_comments"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$line', '$loc', '$take', '$each', '$>=', '$any?', '$scan', '$text', '$to_sym', '$===', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'MagicComments');

    var $nesting = [self].concat($parent_nesting), $MagicComments_parse$1;

    
    Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^# *(\w+) *: *(\S+.*?) *$/.$freeze());
    Opal.const_set($nesting[0], 'EMACS_MAGIC_COMMENT_RE', /^# *-\*- *(\w+) *: *(\S+.*?) *-\*- *$/.$freeze());
    return (Opal.defs(self, '$parse', $MagicComments_parse$1 = function $$parse(sexp, comments) {
      var $$2, self = this, flags = nil, first_line = nil;

      
      flags = $hash2([], {});
      if ($truthy(sexp)) {
        
        first_line = sexp.$loc().$line();
        comments = comments.$take(first_line);};
      $send(comments, 'each', [], ($$2 = function(comment){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $ret_or_1 = nil, $ret_or_2 = nil, parts = nil;

        
        
        if (comment == null) {
          comment = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_1 = first_line))) {
          return $rb_ge(comment.$loc().$line(), first_line)
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return nil;};
        if ($truthy((function() {if ($truthy(($ret_or_2 = (parts = comment.$text().$scan($$($nesting, 'MAGIC_COMMENT_RE')))['$any?']()))) {
          return $ret_or_2
        } else {
          return (parts = comment.$text().$scan($$($nesting, 'EMACS_MAGIC_COMMENT_RE')))['$any?']()
        }; return nil; })())) {
          return $send(parts, 'each', [], ($$3 = function(key, value){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil, $case = nil;

            
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            $writer = [key.$to_sym(), (function() {$case = value;
            if ("true"['$===']($case)) {return true}
            else if ("false"['$===']($case)) {return false}
            else {return value}})()];
            $send(flags, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      return flags;
    }, $MagicComments_parse$1.$$arity = 2), nil) && 'parse';
  })($$($nesting, 'Opal'), $nesting)
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/compiler"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$join', '$dirname', '$first', '$split', '$basename', '$to_s', '$cleanpath', '$Pathname', '$fetch', '$define_method', '$option_value', '$key?', '$[]', '$!', '$include?', '$raise', '$inspect', '$[]=', '$-', '$compiler_option', '$attr_reader', '$attr_accessor', '$parse', '$re_raise_with_location', '$flatten', '$process', '$end_with?', '$code', '$last', '$<<', '$fragment', '$s', '$map', '$to_proc', '$file', '$source=', '$default_parser', '$tokenize', '$associate_locations', '$eof', '$magic_comments', '$to_sym', '$strip', '$location=', '$opal_location_from_error', '$path=', '$label', '$lines', '$to_i', '$line', '$label=', '$message', '$set_backtrace', '$backtrace', '$add_opal_location_to_error', '$warn', '$empty?', '$gsub', '$+', '$start_with?', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$pop_while', '$in_while?', '$nil?', '$scope', '$handlers', '$type', '$compile_to_fragments', '$error', '$returns', '$===', '$updated', '$children', '$loc', '$uses_block!', '$block_name', '$find_parent_def', '$cache', '$source_map']);
  
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  self.$require("opal/eof_content");
  self.$require("opal/errors");
  self.$require("opal/magic_comments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_compile$1;

    
    Opal.defs(self, '$compile', $Opal_compile$1 = function $$compile(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $$($nesting, 'Compiler').$new(source, options).$compile();
    }, $Opal_compile$1.$$arity = -2);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Compiler');

      var $nesting = [self].concat($parent_nesting), $Compiler_module_name$2, $Compiler_compiler_option$3, $Compiler_option_value$5, $Compiler_initialize$6, $Compiler_compile$7, $Compiler_parse$9, $Compiler_source_map$11, $Compiler_helpers$12, $Compiler_operator_helpers$14, $Compiler_method_calls$15, $Compiler_error$16, $Compiler_re_raise_with_location$17, $Compiler_warning$18, $Compiler_parser_indent$19, $Compiler_s$20, $Compiler_fragment$21, $Compiler_unique_temp$22, $Compiler_helper$23, $Compiler_indent$24, $Compiler_with_temp$25, $Compiler_in_while$26, $Compiler_in_case$27, $Compiler_in_while$ques$28, $Compiler_process$29, $Compiler_handlers$30, $Compiler_requires$31, $Compiler_required_trees$32, $Compiler_returns$33, $Compiler_handle_block_given_call$35, $Compiler_marshal_dump$36, $Compiler_marshal_load$37;

      self.$$prototype.option_values = self.$$prototype.options = self.$$prototype.magic_comments = self.$$prototype.fragments = self.$$prototype.source = self.$$prototype.buffer = self.$$prototype.source_map = self.$$prototype.result = self.$$prototype.helpers = self.$$prototype.operator_helpers = self.$$prototype.method_calls = self.$$prototype.indent = self.$$prototype.unique = self.$$prototype.scope = self.$$prototype.case_stmt = self.$$prototype.handlers = self.$$prototype.requires = self.$$prototype.required_trees = nil;
      
      Opal.const_set($nesting[0], 'INDENT', "  ");
      Opal.const_set($nesting[0], 'COMPARE', ["<", ">", "<=", ">="].$freeze());
      Opal.defs(self, '$module_name', $Compiler_module_name$2 = function $$module_name(path) {
        var self = this;

        
        path = $$($nesting, 'File').$join($$($nesting, 'File').$dirname(path), $$($nesting, 'File').$basename(path).$split(".").$first());
        return self.$Pathname(path).$cleanpath().$to_s();
      }, $Compiler_module_name$2.$$arity = 1);
      Opal.defs(self, '$compiler_option', $Compiler_compiler_option$3 = function $$compiler_option(name, config) {
        var $$4, self = this, method_name = nil;

        
        
        if (config == null) {
          config = $hash2([], {});
        };
        method_name = config.$fetch("as", name);
        return $send(self, 'define_method', [method_name], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

          return self.$option_value(name, config)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      }, $Compiler_compiler_option$3.$$arity = -2);
      
      Opal.def(self, '$option_value', $Compiler_option_value$5 = function $$option_value(name, config) {
        var self = this, default_value = nil, valid_values = nil, magic_comment = nil, value = nil, $ret_or_1 = nil, $ret_or_2 = nil, $writer = nil;

        
        if ($truthy(self.option_values['$key?'](name))) {
          return self.option_values['$[]'](name)};
        default_value = config['$[]']("default");
        valid_values = config['$[]']("valid_values");
        magic_comment = config['$[]']("magic_comment");
        value = self.options.$fetch(name, default_value);
        if ($truthy((function() {if ($truthy(($ret_or_1 = magic_comment))) {
          return self.magic_comments['$key?'](name)
        } else {
          return $ret_or_1
        }; return nil; })())) {
          value = self.magic_comments.$fetch(name)};
        if ($truthy((function() {if ($truthy(($ret_or_2 = valid_values))) {
          return valid_values['$include?'](value)['$!']()
        } else {
          return $ret_or_2
        }; return nil; })())) {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ") + ("" + "(valid values: " + (valid_values.$inspect()) + ")"))};
        
        $writer = [name, value];
        $send(self.option_values, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $Compiler_option_value$5.$$arity = 2);
      self.$compiler_option("file", $hash2(["default"], {"default": "(file)"}));
      self.$compiler_option("method_missing", $hash2(["default", "as"], {"default": true, "as": "method_missing?"}));
      self.$compiler_option("arity_check", $hash2(["default", "as"], {"default": false, "as": "arity_check?"}));
      self.$compiler_option("freezing", $hash2(["default", "as"], {"default": true, "as": "freezing?"}));
      self.$compiler_option("irb", $hash2(["default", "as"], {"default": false, "as": "irb?"}));
      self.$compiler_option("dynamic_require_severity", $hash2(["default", "valid_values"], {"default": "ignore", "valid_values": ["error", "warning", "ignore"]}));
      self.$compiler_option("requirable", $hash2(["default", "as"], {"default": false, "as": "requirable?"}));
      self.$compiler_option("esm", $hash2(["default", "as"], {"default": false, "as": "esm?"}));
      self.$compiler_option("inline_operators", $hash2(["default", "as"], {"default": true, "as": "inline_operators?"}));
      self.$compiler_option("eval", $hash2(["default", "as"], {"default": false, "as": "eval?"}));
      self.$compiler_option("enable_source_location", $hash2(["default", "as"], {"default": false, "as": "enable_source_location?"}));
      self.$compiler_option("use_strict", $hash2(["default", "as", "magic_comment"], {"default": false, "as": "use_strict?", "magic_comment": true}));
      self.$compiler_option("parse_comments", $hash2(["default", "as"], {"default": false, "as": "parse_comments?"}));
      self.$compiler_option("scope_variables", $hash2(["default"], {"default": []}));
      self.$attr_reader("result");
      self.$attr_reader("fragments");
      self.$attr_accessor("scope");
      self.$attr_reader("case_stmt");
      self.$attr_reader("eof_content");
      self.$attr_reader("comments");
      self.$attr_reader("magic_comments");
      
      Opal.def(self, '$initialize', $Compiler_initialize$6 = function $$initialize(source, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        self.source = source;
        self.indent = "";
        self.unique = 0;
        self.options = options;
        self.comments = $$($nesting, 'Hash').$new([]);
        self.case_stmt = nil;
        self.option_values = $hash2([], {});
        return (self.magic_comments = $hash2([], {}));
      }, $Compiler_initialize$6.$$arity = -2);
      
      Opal.def(self, '$compile', $Compiler_compile$7 = function $$compile() {
        var $$8, self = this;

        
        self.$parse();
        self.fragments = $send(self, 're_raise_with_location', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.sexp == null) self.sexp = nil;

          return self.$process(self.sexp).$flatten()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
        if ($truthy(self.fragments.$last().$code()['$end_with?']("\n"))) {
        } else {
          self.fragments['$<<'](self.$fragment("\n", nil, self.$s("newline")))
        };
        return (self.result = $send(self.fragments, 'map', [], "code".$to_proc()).$join(""));
      }, $Compiler_compile$7.$$arity = 0);
      
      Opal.def(self, '$parse', $Compiler_parse$9 = function $$parse() {
        var $a, $b, $$10, self = this, $writer = nil, sexp = nil, comments = nil, tokens = nil, $ret_or_3 = nil;

        
        self.buffer = $$$($$$($$$('::', 'Opal'), 'Parser'), 'SourceBuffer').$new(self.$file(), 1);
        
        $writer = [self.source];
        $send(self.buffer, 'source=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.parser = $$$($$($nesting, 'Opal'), 'Parser').$default_parser();
        $b = $send(self, 're_raise_with_location', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;
          if (self.parser == null) self.parser = nil;
          if (self.buffer == null) self.buffer = nil;

          return self.parser.$tokenize(self.buffer)}, $$10.$$s = self, $$10.$$arity = 0, $$10)), $a = Opal.to_ary($b), (sexp = ($a[0] == null ? nil : $a[0])), (comments = ($a[1] == null ? nil : $a[1])), (tokens = ($a[2] == null ? nil : $a[2])), $b;
        self.sexp = self.$s("top", (function() {if ($truthy(($ret_or_3 = sexp))) {
          return $ret_or_3
        } else {
          return self.$s("nil")
        }; return nil; })());
        self.comments = $$$($$$($$$('::', 'Parser'), 'Source'), 'Comment').$associate_locations(sexp, comments);
        self.magic_comments = $$($nesting, 'MagicComments').$parse(sexp, comments);
        return (self.eof_content = $$($nesting, 'EofContent').$new(tokens, self.source).$eof());
      }, $Compiler_parse$9.$$arity = 0);
      
      Opal.def(self, '$source_map', $Compiler_source_map$11 = function $$source_map() {
        var self = this, $ret_or_4 = nil;

        if ($truthy(($ret_or_4 = self.source_map))) {
          return $ret_or_4
        } else {
          return $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'File').$new(self.fragments, self.$file(), self.source, self.result)
        }
      }, $Compiler_source_map$11.$$arity = 0);
      
      Opal.def(self, '$helpers', $Compiler_helpers$12 = function $$helpers() {
        var $$13, self = this, $ret_or_5 = nil;

        return (self.helpers = (function() {if ($truthy(($ret_or_5 = self.helpers))) {
          return $ret_or_5
        } else {
          return $$($nesting, 'Set').$new($send(self.$magic_comments()['$[]']("helpers").$to_s().$split(","), 'map', [], ($$13 = function(h){var self = $$13.$$s == null ? this : $$13.$$s;

            
            
            if (h == null) {
              h = nil;
            };
            return h.$strip().$to_sym();}, $$13.$$s = self, $$13.$$arity = 1, $$13)))
        }; return nil; })())
      }, $Compiler_helpers$12.$$arity = 0);
      
      Opal.def(self, '$operator_helpers', $Compiler_operator_helpers$14 = function $$operator_helpers() {
        var self = this, $ret_or_6 = nil;

        return (self.operator_helpers = (function() {if ($truthy(($ret_or_6 = self.operator_helpers))) {
          return $ret_or_6
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Compiler_operator_helpers$14.$$arity = 0);
      
      Opal.def(self, '$method_calls', $Compiler_method_calls$15 = function $$method_calls() {
        var self = this, $ret_or_7 = nil;

        return (self.method_calls = (function() {if ($truthy(($ret_or_7 = self.method_calls))) {
          return $ret_or_7
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Compiler_method_calls$15.$$arity = 0);
      
      Opal.def(self, '$error', $Compiler_error$16 = function $$error(msg, line) {
        var self = this, error = nil, $writer = nil;

        
        
        if (line == null) {
          line = nil;
        };
        error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(msg);
        
        $writer = [$$$($$($nesting, 'Opal'), 'OpalBacktraceLocation').$new(self.$file(), line)];
        $send(error, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$raise(error);
      }, $Compiler_error$16.$$arity = -2);
      
      Opal.def(self, '$re_raise_with_location', $Compiler_re_raise_with_location$17 = function $$re_raise_with_location() {
        var $iter = $Compiler_re_raise_with_location$17.$$p, $yield = $iter || nil, self = this, error = nil, opal_location = nil, $writer = nil, $ret_or_8 = nil, new_error = nil;

        if ($iter) $Compiler_re_raise_with_location$17.$$p = null;
        try {
          return Opal.yieldX($yield, []);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$$($$$('::', 'Opal'), 'SyntaxError')])) {(error = $err)
            try {
              
              opal_location = $$$('::', 'Opal').$opal_location_from_error(error);
              
              $writer = [self.$file()];
              $send(opal_location, 'path=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(($ret_or_8 = opal_location.$label()))) {
                $ret_or_8
              } else {
                
                $writer = [self.source.$lines()['$[]']($rb_minus(opal_location.$line().$to_i(), 1)).$strip()];
                $send(opal_location, 'label=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              new_error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(error.$message());
              new_error.$set_backtrace(error.$backtrace());
              $$$('::', 'Opal').$add_opal_location_to_error(opal_location, new_error);
              return self.$raise(new_error);
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $Compiler_re_raise_with_location$17.$$arity = 0);
      
      Opal.def(self, '$warning', $Compiler_warning$18 = function $$warning(msg, line) {
        var self = this;

        
        
        if (line == null) {
          line = nil;
        };
        return self.$warn("" + "warning: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, $Compiler_warning$18.$$arity = -2);
      
      Opal.def(self, '$parser_indent', $Compiler_parser_indent$19 = function $$parser_indent() {
        var self = this;

        return self.indent
      }, $Compiler_parser_indent$19.$$arity = 0);
      
      Opal.def(self, '$s', $Compiler_s$20 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children);
      }, $Compiler_s$20.$$arity = -2);
      
      Opal.def(self, '$fragment', $Compiler_fragment$21 = function $$fragment(str, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        return $$($nesting, 'Fragment').$new(str, scope, sexp);
      }, $Compiler_fragment$21.$$arity = -3);
      
      Opal.def(self, '$unique_temp', $Compiler_unique_temp$22 = function $$unique_temp(name) {
        var self = this, $ret_or_9 = nil, unique = nil;

        
        name = name.$to_s();
        if ($truthy((function() {if ($truthy(($ret_or_9 = name))) {
          return name['$empty?']()['$!']()
        } else {
          return $ret_or_9
        }; return nil; })())) {
          name = name.$to_s().$gsub("<=>", "$lt_eq_gt").$gsub("===", "$eq_eq_eq").$gsub("==", "$eq_eq").$gsub("=~", "$eq_tilde").$gsub("!~", "$excl_tilde").$gsub("!=", "$not_eq").$gsub("<=", "$lt_eq").$gsub(">=", "$gt_eq").$gsub("=", "$eq").$gsub("?", "$ques").$gsub("!", "$excl").$gsub("/", "$slash").$gsub("%", "$percent").$gsub("+", "$plus").$gsub("-", "$minus").$gsub("<", "$lt").$gsub(">", "$gt").$gsub(/[^\w\$]/, "$")};
        unique = (self.unique = $rb_plus(self.unique, 1));
        return "" + ((function() {if ($truthy(name['$start_with?']("$"))) {
          return nil
        } else {
          return "$"
        }; return nil; })()) + (name) + "$" + (unique);
      }, $Compiler_unique_temp$22.$$arity = 1);
      
      Opal.def(self, '$helper', $Compiler_helper$23 = function $$helper(name) {
        var self = this;

        return self.$helpers()['$<<'](name)
      }, $Compiler_helper$23.$$arity = 1);
      
      Opal.def(self, '$indent', $Compiler_indent$24 = function $$indent() {
        var $iter = $Compiler_indent$24.$$p, $yield = $iter || nil, self = this, indent = nil, res = nil;

        if ($iter) $Compiler_indent$24.$$p = null;
        
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $$($nesting, 'INDENT'));
        self.space = "" + "\n" + (self.indent);
        res = Opal.yieldX($yield, []);
        self.indent = indent;
        self.space = "" + "\n" + (self.indent);
        return res;
      }, $Compiler_indent$24.$$arity = 0);
      
      Opal.def(self, '$with_temp', $Compiler_with_temp$25 = function $$with_temp() {
        var $iter = $Compiler_with_temp$25.$$p, $yield = $iter || nil, self = this, tmp = nil, res = nil;

        if ($iter) $Compiler_with_temp$25.$$p = null;
        
        tmp = self.scope.$new_temp();
        res = Opal.yield1($yield, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, $Compiler_with_temp$25.$$arity = 0);
      
      Opal.def(self, '$in_while', $Compiler_in_while$26 = function $$in_while() {
        var $iter = $Compiler_in_while$26.$$p, $yield = $iter || nil, self = this, result = nil;

        if ($iter) $Compiler_in_while$26.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = Opal.yieldX($yield, []);
        self.scope.$pop_while();
        return result;
      }, $Compiler_in_while$26.$$arity = 0);
      
      Opal.def(self, '$in_case', $Compiler_in_case$27 = function $$in_case() {
        var $iter = $Compiler_in_case$27.$$p, $yield = $iter || nil, self = this, old = nil;

        if ($iter) $Compiler_in_case$27.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return (self.case_stmt = old);
      }, $Compiler_in_case$27.$$arity = 0);
      
      Opal.def(self, '$in_while?', $Compiler_in_while$ques$28 = function() {
        var self = this;

        return self.scope['$in_while?']()
      }, $Compiler_in_while$ques$28.$$arity = 0);
      
      Opal.def(self, '$process', $Compiler_process$29 = function $$process(sexp, level) {
        var self = this, handler = nil;

        
        
        if (level == null) {
          level = "expr";
        };
        if ($truthy(sexp['$nil?']())) {
          return self.$fragment("", self.$scope())};
        if ($truthy((handler = self.$handlers()['$[]'](sexp.$type())))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
        } else {
          return self.$error("" + "Unsupported sexp: " + (sexp.$type()))
        };
      }, $Compiler_process$29.$$arity = -2);
      
      Opal.def(self, '$handlers', $Compiler_handlers$30 = function $$handlers() {
        var self = this, $ret_or_10 = nil;

        return (self.handlers = (function() {if ($truthy(($ret_or_10 = self.handlers))) {
          return $ret_or_10
        } else {
          return $$$($$$($$($nesting, 'Opal'), 'Nodes'), 'Base').$handlers()
        }; return nil; })())
      }, $Compiler_handlers$30.$$arity = 0);
      
      Opal.def(self, '$requires', $Compiler_requires$31 = function $$requires() {
        var self = this, $ret_or_11 = nil;

        return (self.requires = (function() {if ($truthy(($ret_or_11 = self.requires))) {
          return $ret_or_11
        } else {
          return []
        }; return nil; })())
      }, $Compiler_requires$31.$$arity = 0);
      
      Opal.def(self, '$required_trees', $Compiler_required_trees$32 = function $$required_trees() {
        var self = this, $ret_or_12 = nil;

        return (self.required_trees = (function() {if ($truthy(($ret_or_12 = self.required_trees))) {
          return $ret_or_12
        } else {
          return []
        }; return nil; })())
      }, $Compiler_required_trees$32.$$arity = 0);
      
      Opal.def(self, '$returns', $Compiler_returns$33 = function $$returns(sexp) {
        var $a, $b, $$34, self = this, $case = nil, when_sexp = nil, then_sexp = nil, body_sexp = nil, resbodies = nil, else_sexp = nil, klass = nil, lvar = nil, body = nil, rescue_sexp = nil, ensure_body = nil, rest = nil, last = nil, cond = nil, true_body = nil, false_body = nil;

        
        if ($truthy(sexp)) {
        } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();
        if ("undef"['$===']($case)) {return self.$returns(self.$s("begin", sexp, self.$s("nil")))}
        else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case) || "retry"['$===']($case)) {return sexp}
        else if ("yield"['$===']($case)) {return sexp.$updated("returnable_yield", nil)}
        else if ("when"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_sexp = $slice.call($a, 0, $b)), (then_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(when_sexp)).concat([self.$returns(then_sexp)]));}
        else if ("rescue"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (body_sexp = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (resbodies = $slice.call($a, 1, $b)), (else_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        resbodies = $send(resbodies, 'map', [], ($$34 = function(resbody){var self = $$34.$$s == null ? this : $$34.$$s;

          
          
          if (resbody == null) {
            resbody = nil;
          };
          return self.$returns(resbody);}, $$34.$$s = self, $$34.$$arity = 1, $$34));
        if ($truthy(else_sexp)) {
          else_sexp = self.$returns(else_sexp)};
        return sexp.$updated(nil, [self.$returns(body_sexp)].concat(Opal.to_a(resbodies)).concat([else_sexp]));}
        else if ("resbody"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (klass = ($a[0] == null ? nil : $a[0])), (lvar = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [klass, lvar, self.$returns(body)]);}
        else if ("ensure"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (rescue_sexp = ($a[0] == null ? nil : $a[0])), (ensure_body = ($a[1] == null ? nil : $a[1])), $a;
        sexp = sexp.$updated(nil, [self.$returns(rescue_sexp), ensure_body]);
        return self.$s("js_return", sexp);}
        else if ("begin"['$===']($case) || "kwbegin"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(rest)).concat([self.$returns(last)]));}
        else if ("while"['$===']($case) || "until"['$===']($case) || "while_post"['$===']($case) || "until_post"['$===']($case)) {return sexp}
        else if ("return"['$===']($case) || "js_return"['$===']($case) || "returnable_yield"['$===']($case)) {return sexp}
        else if ("xstr"['$===']($case)) {return sexp.$updated(nil, [$send(self, 's', ["js_return"].concat(Opal.to_a(sexp.$children())))])}
        else if ("if"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (cond = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [cond, self.$returns(true_body), self.$returns(false_body)]);}
        else {return self.$s("js_return", sexp).$updated(nil, nil, $hash2(["location"], {"location": sexp.$loc()}))}})();
      }, $Compiler_returns$33.$$arity = 1);
      
      Opal.def(self, '$handle_block_given_call', $Compiler_handle_block_given_call$35 = function $$handle_block_given_call(sexp) {
        var self = this, $ret_or_13 = nil, scope = nil;

        
        self.scope['$uses_block!']();
        if ($truthy(self.scope.$block_name())) {
          return self.$fragment("" + "(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if ($truthy((function() {if ($truthy(($ret_or_13 = (scope = self.scope.$find_parent_def())))) {
          return scope.$block_name()
        } else {
          return $ret_or_13
        }; return nil; })())) {
          return self.$fragment("" + "(" + (scope.$block_name()) + " !== nil)", scope, sexp)
        } else {
          return self.$fragment("false", scope, sexp)
        };
      }, $Compiler_handle_block_given_call$35.$$arity = 1);
      
      Opal.def(self, '$marshal_dump', $Compiler_marshal_dump$36 = function $$marshal_dump() {
        var self = this, $ret_or_14 = nil;

        return [self.options, self.option_values, (self.source_map = (function() {if ($truthy(($ret_or_14 = self.source_map))) {
          return $ret_or_14
        } else {
          return self.$source_map().$cache()
        }; return nil; })()), self.magic_comments, self.result, self.required_trees, self.requires]
      }, $Compiler_marshal_dump$36.$$arity = 0);
      return (Opal.def(self, '$marshal_load', $Compiler_marshal_load$37 = function $$marshal_load(src) {
        var $a, $b, self = this;

        return $b = src, $a = Opal.to_ary($b), (self.options = ($a[0] == null ? nil : $a[0])), (self.option_values = ($a[1] == null ? nil : $a[1])), (self.source_map = ($a[2] == null ? nil : $a[2])), (self.magic_comments = ($a[3] == null ? nil : $a[3])), (self.result = ($a[4] == null ? nil : $a[4])), (self.required_trees = ($a[5] == null ? nil : $a[5])), (self.requires = ($a[6] == null ? nil : $a[6])), $b
      }, $Compiler_marshal_load$37.$$arity = 1), nil) && 'marshal_load';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal/erb"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$fix_quotes', '$find_contents', '$find_code', '$wrap_compiled', '$require_erb', '$prepared_source', '$gsub', '$+', '$last_match', '$=~', '$sub']);
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $ERB_compile$1;

      
      Opal.defs(self, '$compile', $ERB_compile$1 = function $$compile(source, file_name) {
        var self = this;

        
        
        if (file_name == null) {
          file_name = "(erb)";
        };
        return $$($nesting, 'Compiler').$new(source, file_name).$compile();
      }, $ERB_compile$1.$$arity = -2);
      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $Compiler_initialize$2, $Compiler_prepared_source$3, $Compiler_compile$4, $Compiler_fix_quotes$5, $Compiler_require_erb$6, $Compiler_find_contents$7, $Compiler_find_code$9, $Compiler_wrap_compiled$11;

        self.$$prototype.prepared_source = self.$$prototype.source = self.$$prototype.file_name = nil;
        
        Opal.const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/.$freeze());
        
        Opal.def(self, '$initialize', $Compiler_initialize$2 = function $$initialize(source, file_name) {
          var $a, self = this;

          
          
          if (file_name == null) {
            file_name = "(erb)";
          };
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, $Compiler_initialize$2.$$arity = -2);
        
        Opal.def(self, '$prepared_source', $Compiler_prepared_source$3 = function $$prepared_source() {
          var self = this, $ret_or_1 = nil, source = nil;

          return (self.prepared_source = (function() {if ($truthy(($ret_or_1 = self.prepared_source))) {
            return $ret_or_1
          } else {
            
            source = self.source;
            source = self.$fix_quotes(source);
            source = self.$find_contents(source);
            source = self.$find_code(source);
            source = self.$wrap_compiled(source);
            source = self.$require_erb(source);
            return source;
          }; return nil; })())
        }, $Compiler_prepared_source$3.$$arity = 0);
        
        Opal.def(self, '$compile', $Compiler_compile$4 = function $$compile() {
          var self = this;

          return $$($nesting, 'Opal').$compile(self.$prepared_source())
        }, $Compiler_compile$4.$$arity = 0);
        
        Opal.def(self, '$fix_quotes', $Compiler_fix_quotes$5 = function $$fix_quotes(result) {
          var self = this;

          return result.$gsub("\"", "\\\"")
        }, $Compiler_fix_quotes$5.$$arity = 1);
        
        Opal.def(self, '$require_erb', $Compiler_require_erb$6 = function $$require_erb(result) {
          var self = this;

          return $rb_plus("require \"erb\";", result)
        }, $Compiler_require_erb$6.$$arity = 1);
        
        Opal.def(self, '$find_contents', $Compiler_find_contents$7 = function $$find_contents(result) {
          var $$8, self = this;

          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, inner = nil;

            
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$($nesting, 'BLOCK_EXPR')))) {
              return "" + "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "" + "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, $$8.$$s = self, $$8.$$arity = 0, $$8))
        }, $Compiler_find_contents$7.$$arity = 1);
        
        Opal.def(self, '$find_code', $Compiler_find_code$9 = function $$find_code(result) {
          var $$10, self = this;

          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, inner = nil;

            
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "" + "\")\n" + (inner) + "\noutput_buffer.append(\"";}, $$10.$$s = self, $$10.$$arity = 0, $$10))
        }, $Compiler_find_code$9.$$arity = 1);
        return (Opal.def(self, '$wrap_compiled', $Compiler_wrap_compiled$11 = function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub(Opal.regexp(["\\.opalerb", $$($nesting, 'REGEXP_END')]), "");
          return "" + "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, $Compiler_wrap_compiled$11.$$arity = 1), nil) && 'wrap_compiled';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.3.0.dev */
Opal.modules["opal-parser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$coerce_to!', '$merge', '$js_eval']);
  
  self.$require("corelib/string/unpack");
  self.$require("opal/compiler");
  self.$require("opal/erb");
  self.$require("opal/version");
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_eval$1, $Kernel_require_remote$2;

    
    
    Opal.def(self, '$eval', $Kernel_eval$1 = function(str, binding, file, line) {
      var self = this, default_eval_options = nil, $ret_or_1 = nil, compiling_options = nil, code = nil;

      
      
      if (binding == null) {
        binding = nil;
      };
      
      if (file == null) {
        file = nil;
      };
      
      if (line == null) {
        line = nil;
      };
      str = $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_str");
      default_eval_options = $hash2(["file", "eval"], {"file": (function() {if ($truthy(($ret_or_1 = file))) {
        return $ret_or_1
      } else {
        return "(eval)"
      }; return nil; })(), "eval": true});
      compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
      code = Opal.compile(str, compiling_options);
      if ($truthy(binding)) {
        return binding.$js_eval(code)
      } else {
        
        return (function(self) {
          return eval(code);
        })(self)
      
      };
    }, $Kernel_eval$1.$$arity = -2);
    return (Opal.def(self, '$require_remote', $Kernel_require_remote$2 = function $$require_remote(url) {
      var $a, self = this;

      
      
      var r = new XMLHttpRequest();
      r.open("GET", url, false);
      r.send('');
    ;
      return ($a = r.responseText, typeof Opal.compile === 'function' ? eval(Opal.compile($a, {scope_variables: ["url"], arity_check: false, file: '(eval)', eval: true})) : self.$eval($a));
    }, $Kernel_require_remote$2.$$arity = 1), nil) && 'require_remote';
  })($nesting[0], $nesting);
  
  Opal.compile = function(str, options) {
    try {
      str = $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_str")
      if (options) options = Opal.hash(options);
      return Opal.Opal.$compile(str, options);
    }
    catch (e) {
      if (e.$$class === Opal.Opal.SyntaxError) {
        var err = Opal.SyntaxError.$new(e.message);
        err.$set_backtrace(e.$backtrace());
        throw(err);
      }
      else { throw e; }
    }
  };

  Opal['eval'] = function(str, options) {
   return eval(Opal.compile(str, options));
  };

  function run_ruby_scripts() {
    var tag, tags = document.getElementsByTagName('script');

    for (var i = 0, len = tags.length; i < len; i++) {
      tag = tags[i];
      if (tag.type === "text/ruby") {
        if (tag.src)       Opal.Kernel.$require_remote(tag.src);
        if (tag.innerHTML) Opal.Kernel.$eval(tag.innerHTML);
      }
    }
  }

  if (typeof(document) !== 'undefined') {
    if (window.addEventListener) {
      window.addEventListener('DOMContentLoaded', run_ruby_scripts, false);
    }
    else {
      window.attachEvent('onload', run_ruby_scripts);
    }
  }
;
};
