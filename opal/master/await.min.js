Opal.modules["promise/v2"]=function(Opal){var $nesting=[],nil=Opal.nil,$klass=Opal.klass,$def=Opal.def,$eqeq=Opal.eqeq,$send=Opal.send,$alias=Opal.alias,$truthy=Opal.truthy,$rb_gt=Opal.rb_gt,$rb_minus=Opal.rb_minus,$to_a=Opal.to_a,$eqeqeq=Opal.eqeqeq,$rb_plus=Opal.rb_plus;return Opal.add_stubs("instance_variable_set,Array,==,length,first,tap,attr_reader,!=,native?,raise,include?,any?,proc,call,nativity_check!,gen_tracing_proc,<<,there_can_be_only_one!,then,to_proc,fail,always,!,>,value,unshift,-,prev,trace,light_nativity_check!,nil?,resolved?,===,rejected?,map,when,new,rescue,resolve,reject,class,+,object_id,inspect"),function($base,$super,$parent_nesting){var self=$klass($base,Promise,"PromiseV2"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting),$proto=self.$$prototype;return $proto.type=$proto.next=$proto.realized=$proto.resolve_proc=$proto.reject_proc=$proto.value=nil,function(self,$parent_nesting){$def(self,"$allocate",(function(){var $a,ok=nil,fail=nil,prom=nil;return ok=($a=[nil,nil])[0],fail=$a[1],(prom=new this.$$constructor((function(_ok,_fail){ok=_ok,fail=_fail}))).$instance_variable_set("@type","opal"),prom.$instance_variable_set("@resolve_proc",ok),prom.$instance_variable_set("@reject_proc",fail),prom}),0),$def(self,"$when",(function($a){var promises,self=this;return promises=Opal.slice.call(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.all(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","when")}),1)}),-1),$def(self,"$all_resolved",(function($a){var promises,self=this;return promises=Opal.slice.call(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.allResolved(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","all_resolved")}),1)}),-1),$def(self,"$any",(function($a){var promises,self=this;return promises=Opal.slice.call(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.any(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","any")}),1)}),-1),$def(self,"$race",(function($a){var promises,self=this;return promises=Opal.slice.call(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.race(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","race")}),1)}),-1),$def(self,"$resolve",(function(value){return null==value&&(value=nil),$send(Promise.resolve(value),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","resolve"),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",value)}),1)}),-1),$def(self,"$reject",(function(value){return null==value&&(value=nil),$send(Promise.reject(value),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","reject"),prom.$instance_variable_set("@realized","reject"),prom.$instance_variable_set("@value",value)}),1)}),-1),$alias(self,"all","when"),$alias(self,"error","reject"),$alias(self,"value","resolve")}(Opal.get_singleton_class(self)),self.$attr_reader("prev","next"),$def(self,"$native?",(function(){return this.type["$!="]("opal")}),0),$def(self,"$nativity_check!",(function(){return $truthy(this["$native?"]())?this.$raise($$("ArgumentError"),"this promise is native to JavaScript"):nil}),0),$def(self,"$light_nativity_check!",(function(){return $truthy(["reject","resolve","trace","always","fail","then"]["$include?"](this.type))?nil:$truthy(this["$native?"]())?this.$raise($$("ArgumentError"),"this promise is native to JavaScript"):nil}),0),$def(self,"$there_can_be_only_one!",(function(){return $truthy(this.next)&&$truthy(this.next["$any?"]())?this.$raise($$("ArgumentError"),"a promise has already been chained"):nil}),0),$def(self,"$gen_tracing_proc",(function $$gen_tracing_proc(passing){var block=$$gen_tracing_proc.$$p||nil;return delete $$gen_tracing_proc.$$p,$send(this,"proc",[],(function(i){var res;return null==i&&(i=nil),res=passing.$call(i),Opal.yield1(block,res),res}),1)}),1),$def(self,"$resolve",(function(value){return null==value&&(value=nil),this["$nativity_check!"](),$truthy(this.realized)&&this.$raise($$("ArgumentError"),"this promise was already resolved"),this.value=value,this.realized="resolve",this.resolve_proc.$call(value),this}),-1),$def(self,"$reject",(function(value){return null==value&&(value=nil),this["$nativity_check!"](),$truthy(this.realized)&&this.$raise($$("ArgumentError"),"this promise was already resolved"),this.value=value,this.realized="reject",this.reject_proc.$call(value),this}),-1),$def(self,"$then",(function $$then(){var blk,$ret_or_1,block=$$then.$$p||nil,prom=nil;return delete $$then.$$p,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)}),1),(prom=this.then(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","then"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom}),0),$def(self,"$then!",(function $PromiseV2_then$excl$13(){var block=$PromiseV2_then$excl$13.$$p||nil;return delete $PromiseV2_then$excl$13.$$p,this["$there_can_be_only_one!"](),$send(this,"then",[],block.$to_proc())}),0),$def(self,"$fail",(function $$fail(){var blk,$ret_or_1,block=$$fail.$$p||nil,prom=nil;return delete $$fail.$$p,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)}),1),(prom=this.catch(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","fail"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom}),0),$def(self,"$fail!",(function $PromiseV2_fail$excl$15(){var block=$PromiseV2_fail$excl$15.$$p||nil;return delete $PromiseV2_fail$excl$15.$$p,this["$there_can_be_only_one!"](),$send(this,"fail",[],block.$to_proc())}),0),$def(self,"$always",(function $$always(){var blk,$ret_or_1,block=$$always.$$p||nil,prom=nil;return delete $$always.$$p,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)}),1),(prom=this.finally(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","always"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom}),0),$def(self,"$always!",(function $PromiseV2_always$excl$17(){var block=$PromiseV2_always$excl$17.$$p||nil;return delete $PromiseV2_always$excl$17.$$p,this["$there_can_be_only_one!"](),$send(this,"always",[],block.$to_proc())}),0),$def(self,"$trace",(function $$trace(depth){var block=$$trace.$$p||nil,prom=nil;return delete $$trace.$$p,null==depth&&(depth=nil),(prom=$send(this,"then",[],(function $$18(){var values=nil,$ret_or_1=nil,$ret_or_2=nil,val=nil;for(values=[],prom=null==$$18.$$s?this:$$18.$$s;$truthy($truthy($ret_or_1=prom)?$truthy($ret_or_2=depth["$!"]())?$ret_or_2:$rb_gt(depth,0):$ret_or_1);){val=nil;try{val=prom.$value()}catch($err){if(!Opal.rescue($err,[$$("ArgumentError")]))throw $err;try{val="native"}finally{Opal.pop_exception()}}values.$unshift(val),$truthy(depth)&&(depth=$rb_minus(depth,1)),prom=prom.$prev()}return Opal.yieldX(block,$to_a(values))}),{$$arity:0,$$s:this})).$instance_variable_set("@type","trace"),prom}),-1),$def(self,"$trace!",(function $PromiseV2_trace$excl$19($a){var args,block=$PromiseV2_trace$excl$19.$$p||nil,self=this;return delete $PromiseV2_trace$excl$19.$$p,args=Opal.slice.call(arguments),self["$there_can_be_only_one!"](),$send(self,"trace",$to_a(args),block.$to_proc())}),-1),$def(self,"$resolved?",(function(){return this["$light_nativity_check!"](),this.realized["$=="]("resolve")}),0),$def(self,"$rejected?",(function(){return this["$light_nativity_check!"](),this.realized["$=="]("reject")}),0),$def(self,"$realized?",(function(){return this["$light_nativity_check!"](),this.realized["$nil?"]()["$!"]()}),0),$def(self,"$value",(function(){return $truthy(this["$resolved?"]())?$eqeqeq($$("PromiseV2"),this.value)?this.value.$value():this.value:nil}),0),$def(self,"$error",(function(){return this["$light_nativity_check!"](),$truthy(this["$rejected?"]())?this.value:nil}),0),$def(self,"$and",(function($a){var $post_args,promises,self=this;return $post_args=Opal.slice.call(arguments),promises=$send(promises=$post_args,"map",[],(function(i){return null==i&&(i=nil),$eqeqeq($$("PromiseV2"),i)?i:$$("PromiseV2").$value(i)}),1),$send($send($$("PromiseV2"),"when",[self].concat($to_a(promises))),"then",[],(function(a,$b){var b;return null==a&&(a=nil),b=Opal.slice.call(arguments,1),[].concat($to_a(a)).concat($to_a(b))}),-2)}),-1),$def(self,"$initialize",(function $$initialize(){var block=$$initialize.$$p||nil;return delete $$initialize.$$p,block!==nil?Opal.yield1(block,this):nil}),0),$def(self,"$to_v1",(function(){var v1=nil;return v1=$$("PromiseV1").$new(),$send($send(this,"then",[],(function(i){return null==i&&(i=nil),v1.$resolve(i)}),1),"rescue",[],(function(i){return null==i&&(i=nil),v1.$reject(i)}),1),v1}),0),$def(self,"$inspect",(function(){var result=nil;return result="#<"+this.$class(),$truthy(this.type)?$truthy(["opal","resolve","reject"]["$include?"](this.type))||(result=$rb_plus(result,":"+this.type)):result=$rb_plus(result,":native"),$truthy(this.realized)&&(result=$rb_plus(result,":"+this.realized)),result=$rb_plus(result,"("+this.$object_id()+")"),$truthy(this.next)&&$truthy(this.next["$any?"]())&&(result=$rb_plus(result," >> "+this.next.$inspect())),$truthy(this.value)&&(result=$rb_plus(result,": "+this.value.$inspect())),result=$rb_plus(result,">")}),0),$alias(self,"catch","fail"),$alias(self,"catch!","fail!"),$alias(self,"do","then"),$alias(self,"do!","then!"),$alias(self,"ensure","always"),$alias(self,"ensure!","always!"),$alias(self,"finally","always"),$alias(self,"finally!","always!"),$alias(self,"reject!","reject"),$alias(self,"rescue","fail"),$alias(self,"rescue!","fail!"),$alias(self,"resolve!","resolve"),$alias(self,"to_n","itself"),$alias(self,"to_v2","itself")}($nesting[0],0,$nesting)},Opal.modules.await=function(Opal){var self=Opal.top,$nesting=[],nil=Opal.nil,$coerce_to=Opal.coerce_to,$truthy=Opal.truthy,$klass=Opal.klass,$rb_lt=Opal.rb_lt,$rb_plus=Opal.rb_plus,$def=Opal.def,$send=Opal.send,$module=Opal.module,$to_a=Opal.to_a,$gvars=Opal.gvars,$rb_times=Opal.rb_times,$alias=Opal.alias;Opal.add_stubs("warn,require,<,<<,[],+,map_await,to_proc,when,map,empty?,pop,call,new,proc,resolve,*,async?"),$truthy("warning"==Opal.config.experimental_features_severity)&&self.$warn("Await functionality is a technology preview, which means it may change its behavior in the future unless this warning is removed. If you are interested in this part, please make sure you track the async/await/promises tag on Opal issues: https://github.com/opal/opal/issues?q=label%3Aasync%2Fawait%2Fpromises");var AsyncFunction=Object.getPrototypeOf((async function(){})).constructor;return self.$require("promise/v2"),function($base,$super){var self=$klass($base,null,"Array");$def(self,"$map_await",(async function $$map_await(){var block=$$map_await.$$p||nil,i=nil,results=nil;for(delete $$map_await.$$p,i=0,results=[];$truthy($rb_lt(i,this.length));)results["$<<"](await Opal.yield1(block,this["$[]"](i))),i=$rb_plus(i,1);return results}),0),$def(self,"$each_await",(async function $$each_await(){var block=$$each_await.$$p||nil;return delete $$each_await.$$p,await $send(this,"map_await",[],block.$to_proc()),this}),0)}($nesting[0]),function($base,$parent_nesting){var self=$module($base,"Enumerable"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$each_async",(async function $$each_async(){var block=$$each_async.$$p||nil;return delete $$each_async.$$p,await $send($$("PromiseV2"),"when",$to_a($send(this,"map",[],block.$to_proc())))}),0)}($nesting[0],$nesting),function($base,$parent_nesting){var self=$module($base,"Kernel"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$exit",(async function(status){var $ret_or_1,block=nil;for(null==$gvars.__at_exit__&&($gvars.__at_exit__=nil),null==status&&(status=!0),$gvars.__at_exit__=$truthy($ret_or_1=$gvars.__at_exit__)?$ret_or_1:[];!$truthy($gvars.__at_exit__["$empty?"]());)block=$gvars.__at_exit__.$pop(),await block.$call();return status=status.$$is_boolean?status?0:1:$coerce_to(status,$$("Integer"),"to_int"),Opal.exit(status),nil}),-1),$def(self,"$sleep",(function(seconds){var prom=nil;return prom=$$("PromiseV2").$new(),setTimeout($send(this,"proc",[],(function(){return prom.$resolve()}),0),$rb_times(seconds,1e3)),prom}),1)}($nesting[0],$nesting),function($base){var self=$module($base,"Kernel");$alias(self,"await","itself")}($nesting[0]),function($base,$super){var self=$klass($base,null,"Proc");$def(self,"$async?",(function(){return this instanceof AsyncFunction}),0)}($nesting[0]),function($base,$super){var self=$klass($base,null,"Method");return self.$$prototype.method=nil,$def(self,"$async?",(function(){return this.method["$async?"]()}),0)}($nesting[0])};
