Opal.queue((function(Opal){var $freeze=Opal.freeze,$klass=Opal.klass,$slice=Opal.slice,$defs=Opal.defs,$hash2=Opal.hash2,$truthy=Opal.truthy,$eqeqeq=Opal.eqeqeq,$Kernel=Opal.Kernel,$send=Opal.send,$def=Opal.def,$eqeq=Opal.eqeq,$rb_lt=Opal.rb_lt,$rb_le=Opal.rb_le,$alias=Opal.alias,$module=Opal.module,$to_a=Opal.to_a,$nesting=[],nil=Opal.nil,$$$=Opal.$$$;return Opal.add_stubs("include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,enum_for,[],<<,replace,compare_by_identity,name,compare_by_identity?,delete,select,frozen?,freeze,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys,|,proper_subset?,subset?,proper_superset?,superset?,-,select!,collect!"),function($base,$super,$parent_nesting){var self=$klass("::",null,"Set"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);function is_set(set){$truthy(set["$is_a?"]($$$("Set")))||$Kernel.$raise($$$("ArgumentError"),"value must be a set")}self.$$prototype.hash=nil,self.$include($$$("Enumerable")),$defs(self,"$[]",(function($a){var ary,self=this;return ary=$slice.call(arguments),self.$new(ary)}),-1),$def(self,"$initialize",(function $$initialize(enum$){var block=$$initialize.$$p||nil;return $$initialize.$$p=null,null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($eqeqeq($$$("Enumerable"),enum$)||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],(function $$2(item){return null==item&&(item=nil),(null==$$2.$$s?this:$$2.$$s).$add(Opal.yield1(block,item))}),{$$arity:1,$$s:this}):this.$merge(enum$))}),-1),$def(self,"$dup",(function(){return this.$class().$new().$merge(this)}),0),$def(self,"$-",(function(enum$){return $truthy(enum$["$respond_to?"]("each"))||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)}),1),$def(self,"$inspect",(function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"}),0),$def(self,"$==",(function(other){return!!$truthy(this["$equal?"](other))||($truthy(other["$instance_of?"](this.$class()))?this.hash["$=="](other.$instance_variable_get("@hash")):!(!$truthy(other["$is_a?"]($$$("Set")))||!$eqeq(this.$size(),other.$size()))&&$send(other,"all?",[],(function $$5(o){var self=null==$$5.$$s?this:$$5.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)}),{$$arity:1,$$s:this}))}),1),$def(self,"$add",(function(o){return this.hash["$[]="](o,!0),this}),1),$def(self,"$classify",(function $$classify(){var block=$$classify.$$p||nil,result=nil;return $$classify.$$p=null,block===nil?this.$enum_for("classify"):(result=$send($$$("Hash"),"new",[],(function $$6(h,k){var $a;return null==h&&(h=nil),null==k&&(k=nil),$a=[k,(null==$$6.$$s?this:$$6.$$s).$class().$new()],$send(h,"[]=",$a),$a[$a.length-1]}),{$$arity:2,$$s:this}),$send(this,"each",[],(function(item){return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}),1),result)}),0),$def(self,"$collect!",(function $Set_collect$excl$8(){var block=$Set_collect$excl$8.$$p||nil,result=nil;return $Set_collect$excl$8.$$p=null,block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],(function(item){return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}),1),this.$replace(result))}),0),$def(self,"$compare_by_identity",(function(){return $truthy(this.hash["$respond_to?"]("compare_by_identity"))?(this.hash.$compare_by_identity(),this):this.$raise($$("NotImplementedError"),this.$class().$name()+"#compare_by_identity is not implemented")}),0),$def(self,"$compare_by_identity?",(function(){var $ret_or_1;return $truthy($ret_or_1=this.hash["$respond_to?"]("compare_by_identity?"))?this.hash["$compare_by_identity?"]():$ret_or_1}),0),$def(self,"$delete",(function(o){return this.hash.$delete(o),this}),1),$def(self,"$delete?",(function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil}),1),$def(self,"$delete_if",(function $$delete_if(){var $yield=$$delete_if.$$p||nil;return $$delete_if.$$p=null,$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],(function(o){return null==o&&(o=nil),Opal.yield1($yield,o)}),1),"each",[],(function $$14(o){var self=null==$$14.$$s?this:$$14.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}),{$$arity:1,$$s:this}),this)}),0),$def(self,"$freeze",(function(){return $truthy(this["$frozen?"]())?this:(this.hash.$freeze(),$freeze(this))}),0),$def(self,"$keep_if",(function $$keep_if(){var $yield=$$keep_if.$$p||nil;return $$keep_if.$$p=null,$yield===nil?this.$enum_for("keep_if"):($send($send(this,"reject",[],(function(o){return null==o&&(o=nil),Opal.yield1($yield,o)}),1),"each",[],(function $$16(o){var self=null==$$16.$$s?this:$$16.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}),{$$arity:1,$$s:this}),this)}),0),$def(self,"$reject!",(function $Set_reject$excl$17(){var before,block=$Set_reject$excl$17.$$p||nil;return $Set_reject$excl$17.$$p=null,block===nil?this.$enum_for("reject!"):(before=this.$size(),$send(this,"delete_if",[],block.$to_proc()),$eqeq(this.$size(),before)?nil:this)}),0),$def(self,"$select!",(function $Set_select$excl$18(){var before,block=$Set_select$excl$18.$$p||nil;return $Set_select$excl$18.$$p=null,block===nil?this.$enum_for("select!"):(before=this.$size(),$send(this,"keep_if",[],block.$to_proc()),$eqeq(this.$size(),before)?nil:this)}),0),$def(self,"$add?",(function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)}),1),$def(self,"$each",(function $$each(){var block=$$each.$$p||nil;return $$each.$$p=null,block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)}),0),$def(self,"$empty?",(function(){return this.hash["$empty?"]()}),0),$def(self,"$eql?",(function(other){return this.hash["$eql?"]($send(other,"instance_eval",[],(function $$22(){var self=null==$$22.$$s?this:$$22.$$s;return null==self.hash&&(self.hash=nil),self.hash}),{$$arity:0,$$s:this}))}),1),$def(self,"$clear",(function(){return this.hash.$clear(),this}),0),$def(self,"$include?",(function(o){return this.hash["$include?"](o)}),1),$def(self,"$merge",(function(enum$){return $send(enum$,"each",[],(function $$24(item){return null==item&&(item=nil),(null==$$24.$$s?this:$$24.$$s).$add(item)}),{$$arity:1,$$s:this}),this}),1),$def(self,"$replace",(function(enum$){return this.$clear(),this.$merge(enum$),this}),1),$def(self,"$size",(function(){return this.hash.$size()}),0),$def(self,"$subtract",(function(enum$){return $send(enum$,"each",[],(function $$25(item){return null==item&&(item=nil),(null==$$25.$$s?this:$$25.$$s).$delete(item)}),{$$arity:1,$$s:this}),this}),1),$def(self,"$|",(function(enum$){return $truthy(enum$["$respond_to?"]("each"))||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)}),1),$def(self,"$superset?",(function(set){return is_set(set),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],(function $$28(o){return null==o&&(o=nil),(null==$$28.$$s?this:$$28.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$proper_superset?",(function(set){return is_set(set),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],(function $$30(o){return null==o&&(o=nil),(null==$$30.$$s?this:$$30.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$subset?",(function(set){return is_set(set),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1)}),1),$def(self,"$proper_subset?",(function(set){return is_set(set),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1)}),1),$def(self,"$intersect?",(function(set){return is_set(set),$truthy($rb_lt(this.$size(),set.$size()))?$send(this,"any?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1):$send(set,"any?",[],(function $$37(o){return null==o&&(o=nil),(null==$$37.$$s?this:$$37.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$disjoint?",(function(set){return this["$intersect?"](set)["$!"]()}),1),$def(self,"$to_a",(function(){return this.hash.$keys()}),0),$alias(self,"+","|"),$alias(self,"<","proper_subset?"),$alias(self,"<<","add"),$alias(self,"<=","subset?"),$alias(self,">","proper_superset?"),$alias(self,">=","superset?"),$alias(self,"difference","-"),$alias(self,"filter!","select!"),$alias(self,"length","size"),$alias(self,"map!","collect!"),$alias(self,"member?","include?"),$alias(self,"union","|")}(0,0,$nesting),function($base,$parent_nesting){var self=$module("::","Enumerable"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $def(self,"$to_set",(function $$to_set($a,$b){var $post_args,klass,block=$$to_set.$$p||nil,self=this;return $$to_set.$$p=null,($post_args=$slice.call(arguments)).length>0&&(klass=$post_args.shift()),null==klass&&(klass=$$("Set")),$send(klass,"new",[self].concat($to_a($post_args)),block.$to_proc())}),-1)}(0,$nesting)}));
