Opal.modules["promise/v2"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$warn', '$instance_variable_set', '$Array', '$==', '$length', '$first', '$tap', '$attr_reader', '$!=', '$native?', '$raise', '$include?', '$any?', '$proc', '$call', '$nativity_check!', '$gen_tracing_proc', '$<<', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$!', '$>', '$value', '$unshift', '$-', '$prev', '$trace', '$light_nativity_check!', '$nil?', '$resolved?', '$===', '$rejected?', '$map', '$when', '$new', '$rescue', '$resolve', '$reject', '$class', '$+', '$object_id', '$inspect']);
  
  if ($truthy(Opal.config.experimental_features_severity == 'warning')) {
    self.$warn("" + "PromiseV2 is a technology preview, which means it may change its behavior " + "in the future until this warning is removed. If you are interested in this part, " + "please make sure you track the async/await/promises tag on Opal issues: " + "https://github.com/opal/opal/issues?q=label%3Aasync%2Fawait%2Fpromises")};
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'PromiseV2');

    var $nesting = [self].concat($parent_nesting), $PromiseV2_native$ques$14, $PromiseV2_nativity_check$excl$15, $PromiseV2_light_nativity_check$excl$16, $PromiseV2_there_can_be_only_one$excl$17, $PromiseV2_gen_tracing_proc$18, $PromiseV2_resolve$20, $PromiseV2_reject$21, $PromiseV2_then$22, $PromiseV2_then$excl$24, $PromiseV2_fail$25, $PromiseV2_fail$excl$27, $PromiseV2_always$28, $PromiseV2_always$excl$30, $PromiseV2_trace$31, $PromiseV2_trace$excl$33, $PromiseV2_resolved$ques$34, $PromiseV2_rejected$ques$35, $PromiseV2_realized$ques$36, $PromiseV2_value$37, $PromiseV2_error$38, $PromiseV2_and$39, $PromiseV2_initialize$42, $PromiseV2_to_v1$43, $PromiseV2_inspect$46;

    self.$$prototype.type = self.$$prototype.next = self.$$prototype.realized = self.$$prototype.resolve_proc = self.$$prototype.reject_proc = self.$$prototype.value = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1, $when$2, $all_resolved$4, $any$6, $race$8, $resolve$10, $reject$12;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var $a, self = this, ok = nil, fail = nil, prom = nil;

        
        $a = [nil, nil], (ok = $a[0]), (fail = $a[1]), $a;
        prom = new self.$$constructor(function(_ok, _fail) { ok = _ok; fail = _fail; });
        prom.$instance_variable_set("@type", "opal");
        prom.$instance_variable_set("@resolve_proc", ok);
        prom.$instance_variable_set("@reject_proc", fail);
        return prom;
      }, $allocate$1.$$arity = 0);
      
      Opal.def(self, '$when', $when$2 = function $$when($a) {
        var $post_args, promises, $$3, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        promises = $post_args;;
        promises = self.$Array((function() {if (promises.$length()['$=='](1)) {
          return promises.$first()
        } else {
          return promises
        }; return nil; })());
        return $send((Promise.all(promises)), 'tap', [], ($$3 = function(prom){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          return prom.$instance_variable_set("@type", "when");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      }, $when$2.$$arity = -1);
      $alias(self, "all", "when");
      
      Opal.def(self, '$all_resolved', $all_resolved$4 = function $$all_resolved($a) {
        var $post_args, promises, $$5, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        promises = $post_args;;
        promises = self.$Array((function() {if (promises.$length()['$=='](1)) {
          return promises.$first()
        } else {
          return promises
        }; return nil; })());
        return $send((Promise.allResolved(promises)), 'tap', [], ($$5 = function(prom){var self = $$5.$$s == null ? this : $$5.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          return prom.$instance_variable_set("@type", "all_resolved");}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      }, $all_resolved$4.$$arity = -1);
      
      Opal.def(self, '$any', $any$6 = function $$any($a) {
        var $post_args, promises, $$7, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        promises = $post_args;;
        promises = self.$Array((function() {if (promises.$length()['$=='](1)) {
          return promises.$first()
        } else {
          return promises
        }; return nil; })());
        return $send((Promise.any(promises)), 'tap', [], ($$7 = function(prom){var self = $$7.$$s == null ? this : $$7.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          return prom.$instance_variable_set("@type", "any");}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      }, $any$6.$$arity = -1);
      
      Opal.def(self, '$race', $race$8 = function $$race($a) {
        var $post_args, promises, $$9, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        promises = $post_args;;
        promises = self.$Array((function() {if (promises.$length()['$=='](1)) {
          return promises.$first()
        } else {
          return promises
        }; return nil; })());
        return $send((Promise.race(promises)), 'tap', [], ($$9 = function(prom){var self = $$9.$$s == null ? this : $$9.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          return prom.$instance_variable_set("@type", "race");}, $$9.$$s = self, $$9.$$arity = 1, $$9));
      }, $race$8.$$arity = -1);
      
      Opal.def(self, '$resolve', $resolve$10 = function $$resolve(value) {
        var $$11, self = this;

        
        
        if (value == null) {
          value = nil;
        };
        return $send((Promise.resolve(value)), 'tap', [], ($$11 = function(prom){var self = $$11.$$s == null ? this : $$11.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          prom.$instance_variable_set("@type", "resolve");
          prom.$instance_variable_set("@realized", "resolve");
          return prom.$instance_variable_set("@value", value);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
      }, $resolve$10.$$arity = -1);
      $alias(self, "value", "resolve");
      
      Opal.def(self, '$reject', $reject$12 = function $$reject(value) {
        var $$13, self = this;

        
        
        if (value == null) {
          value = nil;
        };
        return $send((Promise.reject(value)), 'tap', [], ($$13 = function(prom){var self = $$13.$$s == null ? this : $$13.$$s;

          
          
          if (prom == null) {
            prom = nil;
          };
          prom.$instance_variable_set("@type", "reject");
          prom.$instance_variable_set("@realized", "reject");
          return prom.$instance_variable_set("@value", value);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $reject$12.$$arity = -1);
      return $alias(self, "error", "reject");
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("prev", "next");
    
    Opal.def(self, '$native?', $PromiseV2_native$ques$14 = function() {
      var self = this;

      return self.type['$!=']("opal")
    }, $PromiseV2_native$ques$14.$$arity = 0);
    
    Opal.def(self, '$nativity_check!', $PromiseV2_nativity_check$excl$15 = function() {
      var self = this;

      if ($truthy(self['$native?']())) {
        return self.$raise($$($nesting, 'ArgumentError'), "this promise is native to JavaScript")
      } else {
        return nil
      }
    }, $PromiseV2_nativity_check$excl$15.$$arity = 0);
    
    Opal.def(self, '$light_nativity_check!', $PromiseV2_light_nativity_check$excl$16 = function() {
      var self = this;

      
      if ($truthy(["reject", "resolve", "trace", "always", "fail", "then"]['$include?'](self.type))) {
        return nil};
      if ($truthy(self['$native?']())) {
        return self.$raise($$($nesting, 'ArgumentError'), "this promise is native to JavaScript")
      } else {
        return nil
      };
    }, $PromiseV2_light_nativity_check$excl$16.$$arity = 0);
    
    Opal.def(self, '$there_can_be_only_one!', $PromiseV2_there_can_be_only_one$excl$17 = function() {
      var self = this, $ret_or_1 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = self.next))) {
        return self.next['$any?']()
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return self.$raise($$($nesting, 'ArgumentError'), "a promise has already been chained")
      } else {
        return nil
      }
    }, $PromiseV2_there_can_be_only_one$excl$17.$$arity = 0);
    
    Opal.def(self, '$gen_tracing_proc', $PromiseV2_gen_tracing_proc$18 = function $$gen_tracing_proc(passing) {
      var $iter = $PromiseV2_gen_tracing_proc$18.$$p, block = $iter || nil, $$19, self = this;

      if ($iter) $PromiseV2_gen_tracing_proc$18.$$p = null;
      
      
      if ($iter) $PromiseV2_gen_tracing_proc$18.$$p = null;;
      return $send(self, 'proc', [], ($$19 = function(i){var self = $$19.$$s == null ? this : $$19.$$s, res = nil;

        
        
        if (i == null) {
          i = nil;
        };
        res = passing.$call(i);
        Opal.yield1(block, res);
        return res;}, $$19.$$s = self, $$19.$$arity = 1, $$19));
    }, $PromiseV2_gen_tracing_proc$18.$$arity = 1);
    
    Opal.def(self, '$resolve', $PromiseV2_resolve$20 = function $$resolve(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self['$nativity_check!']();
      if ($truthy(self.realized)) {
        self.$raise($$($nesting, 'ArgumentError'), "this promise was already resolved")};
      self.value = value;
      self.realized = "resolve";
      self.resolve_proc.$call(value);
      return self;
    }, $PromiseV2_resolve$20.$$arity = -1);
    $alias(self, "resolve!", "resolve");
    
    Opal.def(self, '$reject', $PromiseV2_reject$21 = function $$reject(value) {
      var self = this;

      
      
      if (value == null) {
        value = nil;
      };
      self['$nativity_check!']();
      if ($truthy(self.realized)) {
        self.$raise($$($nesting, 'ArgumentError'), "this promise was already resolved")};
      self.value = value;
      self.realized = "reject";
      self.reject_proc.$call(value);
      return self;
    }, $PromiseV2_reject$21.$$arity = -1);
    $alias(self, "reject!", "reject");
    
    Opal.def(self, '$then', $PromiseV2_then$22 = function $$then() {
      var $iter = $PromiseV2_then$22.$$p, block = $iter || nil, $$23, self = this, prom = nil, blk = nil, $ret_or_2 = nil;

      if ($iter) $PromiseV2_then$22.$$p = null;
      
      
      if ($iter) $PromiseV2_then$22.$$p = null;;
      prom = nil;
      blk = $send(self, 'gen_tracing_proc', [block], ($$23 = function(val){var self = $$23.$$s == null ? this : $$23.$$s;

        
        
        if (val == null) {
          val = nil;
        };
        prom.$instance_variable_set("@realized", "resolve");
        return prom.$instance_variable_set("@value", val);}, $$23.$$s = self, $$23.$$arity = 1, $$23));
      prom = self.then(blk);
      prom.$instance_variable_set("@prev", self);
      prom.$instance_variable_set("@type", "then");
      (self.next = (function() {if ($truthy(($ret_or_2 = self.next))) {
        return $ret_or_2
      } else {
        return []
      }; return nil; })())['$<<'](prom);
      return prom;
    }, $PromiseV2_then$22.$$arity = 0);
    
    Opal.def(self, '$then!', $PromiseV2_then$excl$24 = function() {
      var $iter = $PromiseV2_then$excl$24.$$p, block = $iter || nil, self = this;

      if ($iter) $PromiseV2_then$excl$24.$$p = null;
      
      
      if ($iter) $PromiseV2_then$excl$24.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, $PromiseV2_then$excl$24.$$arity = 0);
    $alias(self, "do", "then");
    $alias(self, "do!", "then!");
    
    Opal.def(self, '$fail', $PromiseV2_fail$25 = function $$fail() {
      var $iter = $PromiseV2_fail$25.$$p, block = $iter || nil, $$26, self = this, prom = nil, blk = nil, $ret_or_3 = nil;

      if ($iter) $PromiseV2_fail$25.$$p = null;
      
      
      if ($iter) $PromiseV2_fail$25.$$p = null;;
      prom = nil;
      blk = $send(self, 'gen_tracing_proc', [block], ($$26 = function(val){var self = $$26.$$s == null ? this : $$26.$$s;

        
        
        if (val == null) {
          val = nil;
        };
        prom.$instance_variable_set("@realized", "resolve");
        return prom.$instance_variable_set("@value", val);}, $$26.$$s = self, $$26.$$arity = 1, $$26));
      prom = self.catch(blk);
      prom.$instance_variable_set("@prev", self);
      prom.$instance_variable_set("@type", "fail");
      (self.next = (function() {if ($truthy(($ret_or_3 = self.next))) {
        return $ret_or_3
      } else {
        return []
      }; return nil; })())['$<<'](prom);
      return prom;
    }, $PromiseV2_fail$25.$$arity = 0);
    
    Opal.def(self, '$fail!', $PromiseV2_fail$excl$27 = function() {
      var $iter = $PromiseV2_fail$excl$27.$$p, block = $iter || nil, self = this;

      if ($iter) $PromiseV2_fail$excl$27.$$p = null;
      
      
      if ($iter) $PromiseV2_fail$excl$27.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, $PromiseV2_fail$excl$27.$$arity = 0);
    $alias(self, "rescue", "fail");
    $alias(self, "catch", "fail");
    $alias(self, "rescue!", "fail!");
    $alias(self, "catch!", "fail!");
    
    Opal.def(self, '$always', $PromiseV2_always$28 = function $$always() {
      var $iter = $PromiseV2_always$28.$$p, block = $iter || nil, $$29, self = this, prom = nil, blk = nil, $ret_or_4 = nil;

      if ($iter) $PromiseV2_always$28.$$p = null;
      
      
      if ($iter) $PromiseV2_always$28.$$p = null;;
      prom = nil;
      blk = $send(self, 'gen_tracing_proc', [block], ($$29 = function(val){var self = $$29.$$s == null ? this : $$29.$$s;

        
        
        if (val == null) {
          val = nil;
        };
        prom.$instance_variable_set("@realized", "resolve");
        return prom.$instance_variable_set("@value", val);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
      prom = self.finally(blk);
      prom.$instance_variable_set("@prev", self);
      prom.$instance_variable_set("@type", "always");
      (self.next = (function() {if ($truthy(($ret_or_4 = self.next))) {
        return $ret_or_4
      } else {
        return []
      }; return nil; })())['$<<'](prom);
      return prom;
    }, $PromiseV2_always$28.$$arity = 0);
    
    Opal.def(self, '$always!', $PromiseV2_always$excl$30 = function() {
      var $iter = $PromiseV2_always$excl$30.$$p, block = $iter || nil, self = this;

      if ($iter) $PromiseV2_always$excl$30.$$p = null;
      
      
      if ($iter) $PromiseV2_always$excl$30.$$p = null;;
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, $PromiseV2_always$excl$30.$$arity = 0);
    $alias(self, "finally", "always");
    $alias(self, "ensure", "always");
    $alias(self, "finally!", "always!");
    $alias(self, "ensure!", "always!");
    
    Opal.def(self, '$trace', $PromiseV2_trace$31 = function $$trace(depth) {
      var $iter = $PromiseV2_trace$31.$$p, block = $iter || nil, $$32, self = this, prom = nil;

      if ($iter) $PromiseV2_trace$31.$$p = null;
      
      
      if ($iter) $PromiseV2_trace$31.$$p = null;;
      
      if (depth == null) {
        depth = nil;
      };
      prom = $send(self, 'then', [], ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s, $a, values = nil, $ret_or_5 = nil, $ret_or_6 = nil, val = nil;

        
        values = [];
        prom = self;
        while ($truthy((function() {if ($truthy(($ret_or_5 = prom))) {
          
          if ($truthy(($ret_or_6 = depth['$!']()))) {
            return $ret_or_6
          } else {
            return $rb_gt(depth, 0)
          };
        } else {
          return $ret_or_5
        }; return nil; })())) {
          
          val = nil;
          
          try {
            val = prom.$value()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
              try {
                val = "native"
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };;
          values.$unshift(val);
          if ($truthy(depth)) {
            depth = $rb_minus(depth, 1)};
          prom = prom.$prev();
        };
        return Opal.yieldX(block, Opal.to_a(values));;}, $$32.$$s = self, $$32.$$arity = 0, $$32));
      prom.$instance_variable_set("@type", "trace");
      return prom;
    }, $PromiseV2_trace$31.$$arity = -1);
    
    Opal.def(self, '$trace!', $PromiseV2_trace$excl$33 = function($a) {
      var $iter = $PromiseV2_trace$excl$33.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $PromiseV2_trace$excl$33.$$p = null;
      
      
      if ($iter) $PromiseV2_trace$excl$33.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, $PromiseV2_trace$excl$33.$$arity = -1);
    
    Opal.def(self, '$resolved?', $PromiseV2_resolved$ques$34 = function() {
      var self = this;

      
      self['$light_nativity_check!']();
      return self.realized['$==']("resolve");
    }, $PromiseV2_resolved$ques$34.$$arity = 0);
    
    Opal.def(self, '$rejected?', $PromiseV2_rejected$ques$35 = function() {
      var self = this;

      
      self['$light_nativity_check!']();
      return self.realized['$==']("reject");
    }, $PromiseV2_rejected$ques$35.$$arity = 0);
    
    Opal.def(self, '$realized?', $PromiseV2_realized$ques$36 = function() {
      var self = this;

      
      self['$light_nativity_check!']();
      return self.realized['$nil?']()['$!']();
    }, $PromiseV2_realized$ques$36.$$arity = 0);
    
    Opal.def(self, '$value', $PromiseV2_value$37 = function $$value() {
      var self = this;

      if ($truthy(self['$resolved?']())) {
        if ($truthy($$($nesting, 'PromiseV2')['$==='](self.value))) {
          return self.value.$value()
        } else {
          return self.value
        }
      } else {
        return nil
      }
    }, $PromiseV2_value$37.$$arity = 0);
    
    Opal.def(self, '$error', $PromiseV2_error$38 = function $$error() {
      var self = this;

      
      self['$light_nativity_check!']();
      if ($truthy(self['$rejected?']())) {
        return self.value
      } else {
        return nil
      };
    }, $PromiseV2_error$38.$$arity = 0);
    
    Opal.def(self, '$and', $PromiseV2_and$39 = function $$and($a) {
      var $post_args, promises, $$40, $$41, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      promises = $post_args;;
      promises = $send(promises, 'map', [], ($$40 = function(i){var self = $$40.$$s == null ? this : $$40.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        if ($truthy($$($nesting, 'PromiseV2')['$==='](i))) {
          return i
        } else {
          return $$($nesting, 'PromiseV2').$value(i)
        };}, $$40.$$s = self, $$40.$$arity = 1, $$40));
      return $send($send($$($nesting, 'PromiseV2'), 'when', [self].concat(Opal.to_a(promises))), 'then', [], ($$41 = function(a, $b){var self = $$41.$$s == null ? this : $$41.$$s, $post_args, b;

        
        
        if (a == null) {
          a = nil;
        };
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        b = $post_args;;
        return [].concat(Opal.to_a(a)).concat(Opal.to_a(b));}, $$41.$$s = self, $$41.$$arity = -2, $$41));
    }, $PromiseV2_and$39.$$arity = -1);
    
    Opal.def(self, '$initialize', $PromiseV2_initialize$42 = function $$initialize() {
      var $iter = $PromiseV2_initialize$42.$$p, block = $iter || nil, self = this;

      if ($iter) $PromiseV2_initialize$42.$$p = null;
      
      
      if ($iter) $PromiseV2_initialize$42.$$p = null;;
      if ((block !== nil)) {
        return Opal.yield1(block, self);
      } else {
        return nil
      };
    }, $PromiseV2_initialize$42.$$arity = 0);
    $alias(self, "to_v2", "itself");
    
    Opal.def(self, '$to_v1', $PromiseV2_to_v1$43 = function $$to_v1() {
      var $$44, $$45, self = this, v1 = nil;

      
      v1 = $$($nesting, 'PromiseV1').$new();
      $send($send(self, 'then', [], ($$44 = function(i){var self = $$44.$$s == null ? this : $$44.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return v1.$resolve(i);}, $$44.$$s = self, $$44.$$arity = 1, $$44)), 'rescue', [], ($$45 = function(i){var self = $$45.$$s == null ? this : $$45.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return v1.$reject(i);}, $$45.$$s = self, $$45.$$arity = 1, $$45));
      return v1;
    }, $PromiseV2_to_v1$43.$$arity = 0);
    $alias(self, "to_n", "itself");
    return (Opal.def(self, '$inspect', $PromiseV2_inspect$46 = function $$inspect() {
      var self = this, result = nil, $ret_or_7 = nil;

      
      result = "" + "#<" + (self.$class());
      if ($truthy(self.type)) {
        if ($truthy(["opal", "resolve", "reject"]['$include?'](self.type))) {
        } else {
          result = $rb_plus(result, "" + ":" + (self.type))
        }
      } else {
        result = $rb_plus(result, ":native")
      };
      if ($truthy(self.realized)) {
        result = $rb_plus(result, "" + ":" + (self.realized))};
      result = $rb_plus(result, "" + "(" + (self.$object_id()) + ")");
      if ($truthy((function() {if ($truthy(($ret_or_7 = self.next))) {
        return self.next['$any?']()
      } else {
        return $ret_or_7
      }; return nil; })())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      if ($truthy(self.value)) {
        result = $rb_plus(result, "" + ": " + (self.value.$inspect()))};
      result = $rb_plus(result, ">");
      return result;
    }, $PromiseV2_inspect$46.$$arity = 0), nil) && 'inspect';
  })($nesting[0], Promise, $nesting);
};

Opal.modules["await"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $coerce_to = Opal.coerce_to, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $module = Opal.module, $gvars = Opal.gvars, $alias = Opal.alias;

  Opal.add_stubs(['$warn', '$require', '$<', '$<<', '$[]', '$+', '$map_await', '$to_proc', '$when', '$map', '$empty?', '$pop', '$call', '$new', '$proc', '$resolve', '$*', '$async?']);
  
  if ($truthy(Opal.config.experimental_features_severity == 'warning')) {
    self.$warn("" + "Await functionality is a technology preview, which means it may change its behavior " + "in the future unless this warning is removed. If you are interested in this part, " + "please make sure you track the async/await/promises tag on Opal issues: " + "https://github.com/opal/opal/issues?q=label%3Aasync%2Fawait%2Fpromises")};
    var AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;;
  self.$require("promise/v2");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_map_await$1, $Array_each_await$2;

    
    
    Opal.def(self, '$map_await', $Array_map_await$1 = async function $$map_await() {
      var $iter = $Array_map_await$1.$$p, block = $iter || nil, $a, self = this, i = nil, results = nil;

      if ($iter) $Array_map_await$1.$$p = null;
      
      
      if ($iter) $Array_map_await$1.$$p = null;;
      i = 0;
      results = [];
      while ($truthy($rb_lt(i, self.length))) {
        
        results['$<<']((await (Opal.yield1(block, self['$[]'](i)))));
        i = $rb_plus(i, 1);
      };
      return results;
    }, $Array_map_await$1.$$arity = 0);
    return (Opal.def(self, '$each_await', $Array_each_await$2 = async function $$each_await() {
      var $iter = $Array_each_await$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_each_await$2.$$p = null;
      
      
      if ($iter) $Array_each_await$2.$$p = null;;
      (await ($send(self, 'map_await', [], block.$to_proc())));
      return self;
    }, $Array_each_await$2.$$arity = 0), nil) && 'each_await';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_each_async$3;

    return (Opal.def(self, '$each_async', $Enumerable_each_async$3 = async function $$each_async() {
      var $iter = $Enumerable_each_async$3.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_each_async$3.$$p = null;
      
      
      if ($iter) $Enumerable_each_async$3.$$p = null;;
      return (await ($send($$($nesting, 'PromiseV2'), 'when', Opal.to_a($send(self, 'map', [], block.$to_proc())))));
    }, $Enumerable_each_async$3.$$arity = 0), nil) && 'each_async'
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_exit$4, $Kernel_sleep$5;

    
    
    Opal.def(self, '$exit', $Kernel_exit$4 = async function $$exit(status) {
      var $a, self = this, $ret_or_1 = nil, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      
      
      if (status == null) {
        status = true;
      };
      $gvars.__at_exit__ = (function() {if ($truthy(($ret_or_1 = $gvars.__at_exit__))) {
        return $ret_or_1
      } else {
        return []
      }; return nil; })();
      while (!($truthy($gvars.__at_exit__['$empty?']()))) {
        
        block = $gvars.__at_exit__.$pop();
        (await (block.$call()));
      };
      
      if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else {
        status = $coerce_to(status, $$($nesting, 'Integer'), 'to_int')
      }

      Opal.exit(status);
    ;
      return nil;
    }, $Kernel_exit$4.$$arity = -1);
    return (Opal.def(self, '$sleep', $Kernel_sleep$5 = function $$sleep(seconds) {
      var $$6, self = this, prom = nil;

      
      prom = $$($nesting, 'PromiseV2').$new();
      setTimeout($send(self, 'proc', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

        return prom.$resolve()}, $$6.$$s = self, $$6.$$arity = 0, $$6)), $rb_times(seconds, 1000));
      return prom;
    }, $Kernel_sleep$5.$$arity = 1), nil) && 'sleep';
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting);

    return $alias(self, "await", "itself")
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_async$ques$7;

    return (Opal.def(self, '$async?', $Proc_async$ques$7 = function() {
      var self = this;

      return self instanceof AsyncFunction;
    }, $Proc_async$ques$7.$$arity = 0), nil) && 'async?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Method');

    var $nesting = [self].concat($parent_nesting), $Method_async$ques$8;

    self.$$prototype.method = nil;
    return (Opal.def(self, '$async?', $Method_async$ques$8 = function() {
      var self = this;

      return self.method['$async?']()
    }, $Method_async$ques$8.$$arity = 0), nil) && 'async?'
  })($nesting[0], null, $nesting);
};
