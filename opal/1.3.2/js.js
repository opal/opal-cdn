Opal.modules["js"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JS');

    var $nesting = [self].concat($parent_nesting), $JS_delete$1, $JS_global$2, $JS_in$3, $JS_instanceof$4, $JS_new$5, $JS_new$6, $JS_typeof$7, $JS_void$8, $JS_call$9, $JS_$$$10;

    
    
    Opal.def(self, '$delete', $JS_delete$1 = function(object, property) {
      var self = this;

      return delete object[property]
    }, $JS_delete$1.$$arity = 2);
    
    Opal.def(self, '$global', $JS_global$2 = function $$global() {
      var self = this;

      return Opal.global;
    }, $JS_global$2.$$arity = 0);
    
    Opal.def(self, '$in', $JS_in$3 = function(property, object) {
      var self = this;

      return property in object
    }, $JS_in$3.$$arity = 2);
    
    Opal.def(self, '$instanceof', $JS_instanceof$4 = function(value, func) {
      var self = this;

      return value instanceof func
    }, $JS_instanceof$4.$$arity = 2);
    if ($truthy(typeof Function.prototype.bind == 'function')) {
      
      Opal.def(self, '$new', $JS_new$5 = function(func, $a) {
        var $iter = $JS_new$5.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) $JS_new$5.$$p = null;
        
        
        if ($iter) $JS_new$5.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        args.$insert(0, this);
        if ($truthy(block)) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, $JS_new$5.$$arity = -2)
    } else {
      
      Opal.def(self, '$new', $JS_new$6 = function(func, $a) {
        var $iter = $JS_new$6.$$p, block = $iter || nil, $post_args, args, self = this, f = nil;

        if ($iter) $JS_new$6.$$p = null;
        
        
        if ($iter) $JS_new$6.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"] = func["prototype"];
        return new f();;
      }, $JS_new$6.$$arity = -2)
    };
    
    Opal.def(self, '$typeof', $JS_typeof$7 = function(value) {
      var self = this;

      return typeof value
    }, $JS_typeof$7.$$arity = 1);
    
    Opal.def(self, '$void', $JS_void$8 = function(expr) {
      var self = this;

      return void expr
    }, $JS_void$8.$$arity = 1);
    
    Opal.def(self, '$call', $JS_call$9 = function $$call(func, $a) {
      var $iter = $JS_call$9.$$p, block = $iter || nil, $post_args, args, self = this, g = nil;

      if ($iter) $JS_call$9.$$p = null;
      
      
      if ($iter) $JS_call$9.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      g = self.$global();
      if ($truthy(block)) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, $JS_call$9.$$arity = -2);
    $alias(self, "method_missing", "call");
    
    Opal.def(self, '$[]', $JS_$$$10 = function(name) {
      var self = this;

      return Opal.global[name]
    }, $JS_$$$10.$$arity = 1);
    return self.$extend(self);
  })($nesting[0], $nesting)
};
