Opal.modules["singleton"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send2 = Opal.send2, $find_super = Opal.find_super, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$class', '$__init__', '$instance_eval', '$new', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Singleton');

    var $nesting = [self].concat($parent_nesting), $Singleton_clone$1, $Singleton_dup$2;

    
    
    Opal.def(self, '$clone', $Singleton_clone$1 = function $$clone() {
      var self = this;

      return self.$raise($$($nesting, 'TypeError'), "" + "can't clone instance of singleton " + (self.$class()))
    }, $Singleton_clone$1.$$arity = 0);
    
    Opal.def(self, '$dup', $Singleton_dup$2 = function $$dup() {
      var self = this;

      return self.$raise($$($nesting, 'TypeError'), "" + "can't dup instance of singleton " + (self.$class()))
    }, $Singleton_dup$2.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'SingletonClassMethods');

      var $nesting = [self].concat($parent_nesting), $SingletonClassMethods_clone$3, $SingletonClassMethods_inherited$4;

      
      
      Opal.def(self, '$clone', $SingletonClassMethods_clone$3 = function $$clone() {
        var $iter = $SingletonClassMethods_clone$3.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SingletonClassMethods_clone$3.$$p = null;
        return $$($nesting, 'Singleton').$__init__($send2(self, $find_super(self, 'clone', $SingletonClassMethods_clone$3, false, true), 'clone', [], $iter))
      }, $SingletonClassMethods_clone$3.$$arity = 0);
      return (Opal.def(self, '$inherited', $SingletonClassMethods_inherited$4 = function $$inherited(sub_klass) {
        var $iter = $SingletonClassMethods_inherited$4.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SingletonClassMethods_inherited$4.$$p = null;
        
        $send2(self, $find_super(self, 'inherited', $SingletonClassMethods_inherited$4, false, true), 'inherited', [sub_klass], $iter);
        return $$($nesting, 'Singleton').$__init__(sub_klass);
      }, $SingletonClassMethods_inherited$4.$$arity = 1), nil) && 'inherited';
    })($nesting[0], $nesting);
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $__init__$5, $included$8;

      
      
      Opal.def(self, '$__init__', $__init__$5 = function $$__init__(klass) {
        var $$6, $instance$7, self = this;

        
        $send(klass, 'instance_eval', [], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;

          return (self.singleton__instance__ = nil)}, $$6.$$s = self, $$6.$$arity = 0, $$6));
        Opal.defs(klass, '$instance', $instance$7 = function $$instance() {
          var self = this;
          if (self.singleton__instance__ == null) self.singleton__instance__ = nil;

          
          if ($truthy(self.singleton__instance__)) {
            return self.singleton__instance__};
          return (self.singleton__instance__ = self.$new());
        }, $instance$7.$$arity = 0);
        return klass;
      }, $__init__$5.$$arity = 1);
      return (Opal.def(self, '$included', $included$8 = function $$included(klass) {
        var $iter = $included$8.$$p, $yield = $iter || nil, self = this;

        if ($iter) $included$8.$$p = null;
        
        $send2(self, $find_super(self, 'included', $included$8, false, true), 'included', [klass], $iter);
        klass.$extend($$($nesting, 'SingletonClassMethods'));
        return $$($nesting, 'Singleton').$__init__(klass);
      }, $included$8.$$arity = 1), nil) && 'included';
    })(Opal.get_singleton_class($$($nesting, 'Singleton')), $nesting);
  })($nesting[0], $nesting)
};
