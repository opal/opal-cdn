Opal.modules["observer"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$raise', '$new', '$to_s', '$[]=', '$-', '$delete', '$clear', '$size', '$each', '$send']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Observable');

    var $nesting = [self].concat($parent_nesting), $Observable_add_observer$1, $Observable_delete_observer$2, $Observable_delete_observers$3, $Observable_count_observers$4, $Observable_changed$5, $Observable_changed$ques$6, $Observable_notify_observers$7;

    
    
    Opal.def(self, '$add_observer', $Observable_add_observer$1 = function $$add_observer(observer, func) {
      var $a, self = this, $writer = nil;
      if (self.observer_peers == null) self.observer_peers = nil;

      
      
      if (func == null) {
        func = "update";
      };
      if ($truthy((($a = self['observer_peers'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
      } else {
        self.observer_peers = $hash2([], {})
      };
      if ($truthy(observer['$respond_to?'](func))) {
      } else {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "observer does not respond to `" + (func.$to_s()) + "'", func.$to_s()))
      };
      
      $writer = [observer, func];
      $send(self.observer_peers, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $Observable_add_observer$1.$$arity = -2);
    
    Opal.def(self, '$delete_observer', $Observable_delete_observer$2 = function $$delete_observer(observer) {
      var $a, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ($truthy((($a = self['observer_peers'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        return self.observer_peers.$delete(observer)
      } else {
        return nil
      }
    }, $Observable_delete_observer$2.$$arity = 1);
    
    Opal.def(self, '$delete_observers', $Observable_delete_observers$3 = function $$delete_observers() {
      var $a, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ($truthy((($a = self['observer_peers'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        return self.observer_peers.$clear()
      } else {
        return nil
      }
    }, $Observable_delete_observers$3.$$arity = 0);
    
    Opal.def(self, '$count_observers', $Observable_count_observers$4 = function $$count_observers() {
      var $a, self = this;
      if (self.observer_peers == null) self.observer_peers = nil;

      if ($truthy((($a = self['observer_peers'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        return self.observer_peers.$size()
      } else {
        return 0
      }
    }, $Observable_count_observers$4.$$arity = 0);
    
    Opal.def(self, '$changed', $Observable_changed$5 = function $$changed(state) {
      var self = this;

      
      
      if (state == null) {
        state = true;
      };
      return (self.observer_state = state);
    }, $Observable_changed$5.$$arity = -1);
    
    Opal.def(self, '$changed?', $Observable_changed$ques$6 = function() {
      var $a, self = this, $ret_or_1 = nil;
      if (self.observer_state == null) self.observer_state = nil;

      if ($truthy((function() {if ($truthy(($ret_or_1 = (($a = self['observer_state'], $a != null && $a !== nil) ? 'instance-variable' : nil)))) {
        return self.observer_state
      } else {
        return $ret_or_1
      }; return nil; })())) {
        return true
      } else {
        return false
      }
    }, $Observable_changed$ques$6.$$arity = 0);
    return (Opal.def(self, '$notify_observers', $Observable_notify_observers$7 = function $$notify_observers($a) {
      var $post_args, arg, $b, $c, $$8, self = this, $ret_or_2 = nil;
      if (self.observer_state == null) self.observer_state = nil;
      if (self.observer_peers == null) self.observer_peers = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      arg = $post_args;;
      if ($truthy((function() {if ($truthy(($ret_or_2 = (($b = self['observer_state'], $b != null && $b !== nil) ? 'instance-variable' : nil)))) {
        return self.observer_state
      } else {
        return $ret_or_2
      }; return nil; })())) {
        
        if ($truthy((($c = self['observer_peers'], $c != null && $c !== nil) ? 'instance-variable' : nil))) {
          $send(self.observer_peers, 'each', [], ($$8 = function(k, v){var self = $$8.$$s == null ? this : $$8.$$s;

            
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            return $send(k, 'send', [v].concat(Opal.to_a(arg)));}, $$8.$$s = self, $$8.$$arity = 2, $$8))};
        return (self.observer_state = false);
      } else {
        return nil
      };
    }, $Observable_notify_observers$7.$$arity = -1), nil) && 'notify_observers';
  })($nesting[0], $nesting)
};
