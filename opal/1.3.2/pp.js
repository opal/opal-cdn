Opal.modules["thread"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $alias = Opal.alias;

  Opal.add_stubs(['$allocate', '$core_initialize!', '$current', '$raise', '$[]', '$coerce_key_name', '$[]=', '$-', '$key?', '$keys', '$private', '$coerce_to!', '$clear', '$empty?', '$size', '$shift', '$push', '$each', '$to_proc', '$=~', '$last_match', '$to_i', '$inspect', '$attr_reader', '$locked?', '$lock', '$unlock']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ThreadError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Thread');

    var $nesting = [self].concat($parent_nesting), $Thread_current$1, $Thread_list$2, $Thread_initialize$3, $Thread_$$$4, $Thread_$$$eq$5, $Thread_key$ques$6, $Thread_keys$7, $Thread_thread_variable_get$8, $Thread_thread_variable_set$9, $Thread_thread_variable$ques$10, $Thread_thread_variables$11, $Thread_core_initialize$excl$12, $Thread_coerce_key_name$13;

    self.$$prototype.fiber_locals = self.$$prototype.thread_locals = nil;
    
    Opal.defs(self, '$current', $Thread_current$1 = function $$current() {
      var self = this;
      if (self.current == null) self.current = nil;

      
      if ($truthy(self.current)) {
      } else {
        
        self.current = self.$allocate();
        self.current['$core_initialize!']();
      };
      return self.current;
    }, $Thread_current$1.$$arity = 0);
    Opal.defs(self, '$list', $Thread_list$2 = function $$list() {
      var self = this;

      return [self.$current()]
    }, $Thread_list$2.$$arity = 0);
    
    Opal.def(self, '$initialize', $Thread_initialize$3 = function $$initialize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'NotImplementedError'), "Thread creation not available");
    }, $Thread_initialize$3.$$arity = -1);
    
    Opal.def(self, '$[]', $Thread_$$$4 = function(key) {
      var self = this;

      return self.fiber_locals['$[]'](self.$coerce_key_name(key))
    }, $Thread_$$$4.$$arity = 1);
    
    Opal.def(self, '$[]=', $Thread_$$$eq$5 = function(key, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$coerce_key_name(key), value];
      $send(self.fiber_locals, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $Thread_$$$eq$5.$$arity = 2);
    
    Opal.def(self, '$key?', $Thread_key$ques$6 = function(key) {
      var self = this;

      return self.fiber_locals['$key?'](self.$coerce_key_name(key))
    }, $Thread_key$ques$6.$$arity = 1);
    
    Opal.def(self, '$keys', $Thread_keys$7 = function $$keys() {
      var self = this;

      return self.fiber_locals.$keys()
    }, $Thread_keys$7.$$arity = 0);
    
    Opal.def(self, '$thread_variable_get', $Thread_thread_variable_get$8 = function $$thread_variable_get(key) {
      var self = this;

      return self.thread_locals['$[]'](self.$coerce_key_name(key))
    }, $Thread_thread_variable_get$8.$$arity = 1);
    
    Opal.def(self, '$thread_variable_set', $Thread_thread_variable_set$9 = function $$thread_variable_set(key, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$coerce_key_name(key), value];
      $send(self.thread_locals, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $Thread_thread_variable_set$9.$$arity = 2);
    
    Opal.def(self, '$thread_variable?', $Thread_thread_variable$ques$10 = function(key) {
      var self = this;

      return self.thread_locals['$key?'](self.$coerce_key_name(key))
    }, $Thread_thread_variable$ques$10.$$arity = 1);
    
    Opal.def(self, '$thread_variables', $Thread_thread_variables$11 = function $$thread_variables() {
      var self = this;

      return self.thread_locals.$keys()
    }, $Thread_thread_variables$11.$$arity = 0);
    self.$private();
    
    Opal.def(self, '$core_initialize!', $Thread_core_initialize$excl$12 = function() {
      var self = this;

      
      self.thread_locals = $hash2([], {});
      return (self.fiber_locals = $hash2([], {}));
    }, $Thread_core_initialize$excl$12.$$arity = 0);
    
    Opal.def(self, '$coerce_key_name', $Thread_coerce_key_name$13 = function $$coerce_key_name(key) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to!'](key, $$($nesting, 'String'), "to_s")
    }, $Thread_coerce_key_name$13.$$arity = 1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Queue');

      var $nesting = [self].concat($parent_nesting), $Queue_initialize$14, $Queue_clear$15, $Queue_empty$ques$16, $Queue_size$17, $Queue_pop$18, $Queue_push$19, $Queue_each$20;

      self.$$prototype.storage = nil;
      
      
      Opal.def(self, '$initialize', $Queue_initialize$14 = function $$initialize() {
        var self = this;

        return self.$clear()
      }, $Queue_initialize$14.$$arity = 0);
      
      Opal.def(self, '$clear', $Queue_clear$15 = function $$clear() {
        var self = this;

        return (self.storage = [])
      }, $Queue_clear$15.$$arity = 0);
      
      Opal.def(self, '$empty?', $Queue_empty$ques$16 = function() {
        var self = this;

        return self.storage['$empty?']()
      }, $Queue_empty$ques$16.$$arity = 0);
      
      Opal.def(self, '$size', $Queue_size$17 = function $$size() {
        var self = this;

        return self.storage.$size()
      }, $Queue_size$17.$$arity = 0);
      $alias(self, "length", "size");
      
      Opal.def(self, '$pop', $Queue_pop$18 = function $$pop(non_block) {
        var self = this;

        
        
        if (non_block == null) {
          non_block = false;
        };
        if ($truthy(self['$empty?']())) {
          
          if ($truthy(non_block)) {
            self.$raise($$($nesting, 'ThreadError'), "Queue empty")};
          self.$raise($$($nesting, 'ThreadError'), "Deadlock");};
        return self.storage.$shift();
      }, $Queue_pop$18.$$arity = -1);
      $alias(self, "shift", "pop");
      $alias(self, "deq", "pop");
      
      Opal.def(self, '$push', $Queue_push$19 = function $$push(value) {
        var self = this;

        return self.storage.$push(value)
      }, $Queue_push$19.$$arity = 1);
      $alias(self, "<<", "push");
      $alias(self, "enq", "push");
      return (Opal.def(self, '$each', $Queue_each$20 = function $$each() {
        var $iter = $Queue_each$20.$$p, block = $iter || nil, self = this;

        if ($iter) $Queue_each$20.$$p = null;
        
        
        if ($iter) $Queue_each$20.$$p = null;;
        return $send(self.storage, 'each', [], block.$to_proc());
      }, $Queue_each$20.$$arity = 0), nil) && 'each';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Backtrace');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Location');

        var $nesting = [self].concat($parent_nesting), $Location_initialize$21, $Location_to_s$22, $Location_inspect$23;

        self.$$prototype.label = self.$$prototype.str = nil;
        
        
        Opal.def(self, '$initialize', $Location_initialize$21 = function $$initialize(str) {
          var self = this, $ret_or_1 = nil;

          
          self.str = str;
          str['$=~'](/^(.*?):(\d+):(\d+):in `(.*?)'$/);
          self.path = $$($nesting, 'Regexp').$last_match(1);
          self.label = $$($nesting, 'Regexp').$last_match(4);
          self.lineno = $$($nesting, 'Regexp').$last_match(2).$to_i();
          self.label['$=~'](/(\w+)$/);
          return (self.base_label = (function() {if ($truthy(($ret_or_1 = $$($nesting, 'Regexp').$last_match(1)))) {
            return $ret_or_1
          } else {
            return self.label
          }; return nil; })());
        }, $Location_initialize$21.$$arity = 1);
        
        Opal.def(self, '$to_s', $Location_to_s$22 = function $$to_s() {
          var self = this;

          return self.str
        }, $Location_to_s$22.$$arity = 0);
        
        Opal.def(self, '$inspect', $Location_inspect$23 = function $$inspect() {
          var self = this;

          return self.str.$inspect()
        }, $Location_inspect$23.$$arity = 0);
        self.$attr_reader("base_label", "label", "lineno", "path");
        return $alias(self, "absolute_path", "path");
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'Queue', $$$($$($nesting, 'Thread'), 'Queue'));
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Mutex');

    var $nesting = [self].concat($parent_nesting), $Mutex_initialize$24, $Mutex_lock$25, $Mutex_locked$ques$26, $Mutex_owned$ques$27, $Mutex_try_lock$28, $Mutex_unlock$29, $Mutex_synchronize$30;

    self.$$prototype.locked = nil;
    
    
    Opal.def(self, '$initialize', $Mutex_initialize$24 = function $$initialize() {
      var self = this;

      return (self.locked = false)
    }, $Mutex_initialize$24.$$arity = 0);
    
    Opal.def(self, '$lock', $Mutex_lock$25 = function $$lock() {
      var self = this;

      
      if ($truthy(self.locked)) {
        self.$raise($$($nesting, 'ThreadError'), "Deadlock")};
      self.locked = true;
      return self;
    }, $Mutex_lock$25.$$arity = 0);
    
    Opal.def(self, '$locked?', $Mutex_locked$ques$26 = function() {
      var self = this;

      return self.locked
    }, $Mutex_locked$ques$26.$$arity = 0);
    
    Opal.def(self, '$owned?', $Mutex_owned$ques$27 = function() {
      var self = this;

      return self.locked
    }, $Mutex_owned$ques$27.$$arity = 0);
    
    Opal.def(self, '$try_lock', $Mutex_try_lock$28 = function $$try_lock() {
      var self = this;

      if ($truthy(self['$locked?']())) {
        return false
      } else {
        
        self.$lock();
        return true;
      }
    }, $Mutex_try_lock$28.$$arity = 0);
    
    Opal.def(self, '$unlock', $Mutex_unlock$29 = function $$unlock() {
      var self = this;

      
      if ($truthy(self.locked)) {
      } else {
        self.$raise($$($nesting, 'ThreadError'), "Mutex not locked")
      };
      self.locked = false;
      return self;
    }, $Mutex_unlock$29.$$arity = 0);
    return (Opal.def(self, '$synchronize', $Mutex_synchronize$30 = function $$synchronize() {
      var $iter = $Mutex_synchronize$30.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Mutex_synchronize$30.$$p = null;
      
      self.$lock();
      
      return (function() { try {
      return Opal.yieldX($yield, []);
      } finally {
        self.$unlock()
      }; })();;
    }, $Mutex_synchronize$30.$$arity = 0), nil) && 'synchronize';
  })($nesting[0], null, $nesting);
};

Opal.modules["stringio"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send2 = Opal.send2, $find_super = Opal.find_super, $alias = Opal.alias, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$call', '$close', '$attr_accessor', '$check_readable', '$==', '$length', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$check_writable', '$String', '$[]', '$eof?', '$write', '$read']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StringIO');

    var $nesting = [self].concat($parent_nesting), $StringIO_open$1, $StringIO_initialize$2, $StringIO_eof$ques$3, $StringIO_seek$4, $StringIO_tell$5, $StringIO_rewind$6, $StringIO_write$7, $StringIO_read$8, $StringIO_sysread$9;

    self.$$prototype.position = self.$$prototype.string = nil;
    
    Opal.defs(self, '$open', $StringIO_open$1 = function $$open(string, mode) {
      var $iter = $StringIO_open$1.$$p, block = $iter || nil, self = this, io = nil, res = nil;

      if ($iter) $StringIO_open$1.$$p = null;
      
      
      if ($iter) $StringIO_open$1.$$p = null;;
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = nil;
      };
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, $StringIO_open$1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.def(self, '$initialize', $StringIO_initialize$2 = function $$initialize(string, mode) {
      var $iter = $StringIO_initialize$2.$$p, $yield = $iter || nil, self = this;

      if ($iter) $StringIO_initialize$2.$$p = null;
      
      
      if (string == null) {
        string = "";
      };
      
      if (mode == null) {
        mode = "rw";
      };
      self.string = string;
      self.position = 0;
      return $send2(self, $find_super(self, 'initialize', $StringIO_initialize$2, false, true), 'initialize', [nil, mode], null);
    }, $StringIO_initialize$2.$$arity = -1);
    
    Opal.def(self, '$eof?', $StringIO_eof$ques$3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, $StringIO_eof$ques$3.$$arity = 0);
    $alias(self, "eof", "eof?");
    
    Opal.def(self, '$seek', $StringIO_seek$4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      
      
      if (whence == null) {
        whence = $$$($$($nesting, 'IO'), 'SEEK_SET');
      };
      self.read_buffer = "";
      $case = whence;
      if ($$$($$($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
      } else {
        self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if ($$$($$($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
      } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if ($$$($$($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
      } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, $StringIO_seek$4.$$arity = -2);
    
    Opal.def(self, '$tell', $StringIO_tell$5 = function $$tell() {
      var self = this;

      return self.position
    }, $StringIO_tell$5.$$arity = 0);
    $alias(self, "pos", "tell");
    $alias(self, "pos=", "seek");
    
    Opal.def(self, '$rewind', $StringIO_rewind$6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, $StringIO_rewind$6.$$arity = 0);
    
    Opal.def(self, '$write', $StringIO_write$7 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      self.read_buffer = "";
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
      } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, $StringIO_write$7.$$arity = 1);
    
    Opal.def(self, '$read', $StringIO_read$8 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      
      
      if (length == null) {
        length = nil;
      };
      
      if (outbuf == null) {
        outbuf = nil;
      };
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        if ($truthy($rb_gt(self.position, self.string.$length()))) {
          self.position = self.string.$length()};
        return str;
      } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
      } else {
        return string
      };
    }, $StringIO_read$8.$$arity = -1);
    
    Opal.def(self, '$sysread', $StringIO_sysread$9 = function $$sysread(length) {
      var self = this;

      
      self.$check_readable();
      return self.$read(length);
    }, $StringIO_sysread$9.$$arity = 1);
    return $alias(self, "readpartial", "read");
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

Opal.modules["prettyprint"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$dup', '$lambda', '$*', '$new', '$to_proc', '$flush', '$attr_reader', '$last', '$<', '$+', '$deq', '$empty?', '$breakables', '$shift', '$output', '$-', '$width', '$!', '$===', '$first', '$length', '$<<', '$add', '$break_outmost_groups', '$group', '$breakable', '$break?', '$call', '$text', '$group_sub', '$nest', '$depth', '$push', '$enq', '$pop', '$delete', '$each', '$clear', '$indent', '$current_group', '$newline', '$genspace', '$group_queue', '$[]', '$downto', '$slice!', '$break', '$[]=']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'PrettyPrint');

    var $nesting = [self].concat($parent_nesting), $PrettyPrint_format$1, $PrettyPrint_singleline_format$3, $PrettyPrint_initialize$4, $PrettyPrint_current_group$6, $PrettyPrint_break_outmost_groups$7, $PrettyPrint_text$8, $PrettyPrint_fill_breakable$9, $PrettyPrint_breakable$11, $PrettyPrint_group$12, $PrettyPrint_group_sub$15, $PrettyPrint_nest$16, $PrettyPrint_flush$17;

    self.$$prototype.group_stack = self.$$prototype.maxwidth = self.$$prototype.output_width = self.$$prototype.buffer_width = self.$$prototype.group_queue = self.$$prototype.buffer = self.$$prototype.output = self.$$prototype.newline = self.$$prototype.genspace = self.$$prototype.indent = nil;
    
    Opal.defs($$($nesting, 'PrettyPrint'), '$format', $PrettyPrint_format$1 = function $$format(output, maxwidth, newline, genspace) {
      var $$2, $iter = $PrettyPrint_format$1.$$p, $yield = $iter || nil, self = this, q = nil;

      if ($iter) $PrettyPrint_format$1.$$p = null;
      
      
      if (output == null) {
        output = "".$dup();
      };
      
      if (maxwidth == null) {
        maxwidth = 79;
      };
      
      if (newline == null) {
        newline = "\n";
      };
      
      if (genspace == null) {
        genspace = $send(self, 'lambda', [], ($$2 = function(n){var self = $$2.$$s == null ? this : $$2.$$s;

        
        
        if (n == null) {
          n = nil;
        };
        return $rb_times(" ", n);}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      };
      q = $send($$($nesting, 'PrettyPrint'), 'new', [output, maxwidth, newline], genspace.$to_proc());
      Opal.yield1($yield, q);
      q.$flush();
      return output;
    }, $PrettyPrint_format$1.$$arity = -1);
    Opal.defs($$($nesting, 'PrettyPrint'), '$singleline_format', $PrettyPrint_singleline_format$3 = function $$singleline_format(output, maxwidth, newline, genspace) {
      var $iter = $PrettyPrint_singleline_format$3.$$p, $yield = $iter || nil, self = this, q = nil;

      if ($iter) $PrettyPrint_singleline_format$3.$$p = null;
      
      
      if (output == null) {
        output = "".$dup();
      };
      
      if (maxwidth == null) {
        maxwidth = nil;
      };
      
      if (newline == null) {
        newline = nil;
      };
      
      if (genspace == null) {
        genspace = nil;
      };
      q = $$($nesting, 'SingleLine').$new(output);
      Opal.yield1($yield, q);
      return output;
    }, $PrettyPrint_singleline_format$3.$$arity = -1);
    
    Opal.def(self, '$initialize', $PrettyPrint_initialize$4 = function $$initialize(output, maxwidth, newline) {
      var $iter = $PrettyPrint_initialize$4.$$p, genspace = $iter || nil, $$5, self = this, $ret_or_1 = nil, root_group = nil;

      if ($iter) $PrettyPrint_initialize$4.$$p = null;
      
      
      if ($iter) $PrettyPrint_initialize$4.$$p = null;;
      
      if (output == null) {
        output = "".$dup();
      };
      
      if (maxwidth == null) {
        maxwidth = 79;
      };
      
      if (newline == null) {
        newline = "\n";
      };
      self.output = output;
      self.maxwidth = maxwidth;
      self.newline = newline;
      self.genspace = (function() {if ($truthy(($ret_or_1 = genspace))) {
        return $ret_or_1
      } else {
        return $send(self, 'lambda', [], ($$5 = function(n){var self = $$5.$$s == null ? this : $$5.$$s;

          
          
          if (n == null) {
            n = nil;
          };
          return $rb_times(" ", n);}, $$5.$$s = self, $$5.$$arity = 1, $$5))
      }; return nil; })();
      self.output_width = 0;
      self.buffer_width = 0;
      self.buffer = [];
      root_group = $$($nesting, 'Group').$new(0);
      self.group_stack = [root_group];
      self.group_queue = $$($nesting, 'GroupQueue').$new(root_group);
      return (self.indent = 0);
    }, $PrettyPrint_initialize$4.$$arity = -1);
    self.$attr_reader("output");
    self.$attr_reader("maxwidth");
    self.$attr_reader("newline");
    self.$attr_reader("genspace");
    self.$attr_reader("indent");
    self.$attr_reader("group_queue");
    
    Opal.def(self, '$current_group', $PrettyPrint_current_group$6 = function $$current_group() {
      var self = this;

      return self.group_stack.$last()
    }, $PrettyPrint_current_group$6.$$arity = 0);
    
    Opal.def(self, '$break_outmost_groups', $PrettyPrint_break_outmost_groups$7 = function $$break_outmost_groups() {
      var $a, $b, self = this, group = nil, data = nil, $ret_or_2 = nil, text = nil;

      while ($truthy($rb_lt(self.maxwidth, $rb_plus(self.output_width, self.buffer_width)))) {
        
        if ($truthy((group = self.group_queue.$deq()))) {
        } else {
          return nil
        };
        while (!($truthy(group.$breakables()['$empty?']()))) {
          
          data = self.buffer.$shift();
          self.output_width = data.$output(self.output, self.output_width);
          self.buffer_width = $rb_minus(self.buffer_width, data.$width());
        };
        while ($truthy((function() {if ($truthy(($ret_or_2 = self.buffer['$empty?']()['$!']()))) {
          return $$($nesting, 'Text')['$==='](self.buffer.$first())
        } else {
          return $ret_or_2
        }; return nil; })())) {
          
          text = self.buffer.$shift();
          self.output_width = text.$output(self.output, self.output_width);
          self.buffer_width = $rb_minus(self.buffer_width, text.$width());
        };
      }
    }, $PrettyPrint_break_outmost_groups$7.$$arity = 0);
    
    Opal.def(self, '$text', $PrettyPrint_text$8 = function $$text(obj, width) {
      var self = this, text = nil;

      
      
      if (width == null) {
        width = obj.$length();
      };
      if ($truthy(self.buffer['$empty?']())) {
        
        self.output['$<<'](obj);
        return (self.output_width = $rb_plus(self.output_width, width));
      } else {
        
        text = self.buffer.$last();
        if ($truthy($$($nesting, 'Text')['$==='](text))) {
        } else {
          
          text = $$($nesting, 'Text').$new();
          self.buffer['$<<'](text);
        };
        text.$add(obj, width);
        self.buffer_width = $rb_plus(self.buffer_width, width);
        return self.$break_outmost_groups();
      };
    }, $PrettyPrint_text$8.$$arity = -2);
    
    Opal.def(self, '$fill_breakable', $PrettyPrint_fill_breakable$9 = function $$fill_breakable(sep, width) {
      var $$10, self = this;

      
      
      if (sep == null) {
        sep = " ";
      };
      
      if (width == null) {
        width = sep.$length();
      };
      return $send(self, 'group', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;

        return self.$breakable(sep, width)}, $$10.$$s = self, $$10.$$arity = 0, $$10));
    }, $PrettyPrint_fill_breakable$9.$$arity = -1);
    
    Opal.def(self, '$breakable', $PrettyPrint_breakable$11 = function $$breakable(sep, width) {
      var self = this, group = nil;

      
      
      if (sep == null) {
        sep = " ";
      };
      
      if (width == null) {
        width = sep.$length();
      };
      group = self.group_stack.$last();
      if ($truthy(group['$break?']())) {
        
        self.$flush();
        self.output['$<<'](self.newline);
        self.output['$<<'](self.genspace.$call(self.indent));
        self.output_width = self.indent;
        return (self.buffer_width = 0);
      } else {
        
        self.buffer['$<<']($$($nesting, 'Breakable').$new(sep, width, self));
        self.buffer_width = $rb_plus(self.buffer_width, width);
        return self.$break_outmost_groups();
      };
    }, $PrettyPrint_breakable$11.$$arity = -1);
    
    Opal.def(self, '$group', $PrettyPrint_group$12 = function $$group(indent, open_obj, close_obj, open_width, close_width) {
      var $$13, $iter = $PrettyPrint_group$12.$$p, $yield = $iter || nil, self = this;

      if ($iter) $PrettyPrint_group$12.$$p = null;
      
      
      if (indent == null) {
        indent = 0;
      };
      
      if (open_obj == null) {
        open_obj = "";
      };
      
      if (close_obj == null) {
        close_obj = "";
      };
      
      if (open_width == null) {
        open_width = open_obj.$length();
      };
      
      if (close_width == null) {
        close_width = close_obj.$length();
      };
      self.$text(open_obj, open_width);
      $send(self, 'group_sub', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s, $$14;

        return $send(self, 'nest', [indent], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s;

          return Opal.yieldX($yield, []);}, $$14.$$s = self, $$14.$$arity = 0, $$14))}, $$13.$$s = self, $$13.$$arity = 0, $$13));
      return self.$text(close_obj, close_width);
    }, $PrettyPrint_group$12.$$arity = -1);
    
    Opal.def(self, '$group_sub', $PrettyPrint_group_sub$15 = function $$group_sub() {
      var $iter = $PrettyPrint_group_sub$15.$$p, $yield = $iter || nil, self = this, group = nil;

      if ($iter) $PrettyPrint_group_sub$15.$$p = null;
      
      group = $$($nesting, 'Group').$new($rb_plus(self.group_stack.$last().$depth(), 1));
      self.group_stack.$push(group);
      self.group_queue.$enq(group);
      
      return (function() { try {
      return Opal.yieldX($yield, []);
      } finally {
        (self.group_stack.$pop(), (function() {if ($truthy(group.$breakables()['$empty?']())) {
          return self.group_queue.$delete(group)
        } else {
          return nil
        }; return nil; })())
      }; })();;
    }, $PrettyPrint_group_sub$15.$$arity = 0);
    
    Opal.def(self, '$nest', $PrettyPrint_nest$16 = function $$nest(indent) {
      var $iter = $PrettyPrint_nest$16.$$p, $yield = $iter || nil, self = this;

      if ($iter) $PrettyPrint_nest$16.$$p = null;
      
      self.indent = $rb_plus(self.indent, indent);
      
      return (function() { try {
      return Opal.yieldX($yield, []);
      } finally {
        (self.indent = $rb_minus(self.indent, indent))
      }; })();;
    }, $PrettyPrint_nest$16.$$arity = 1);
    
    Opal.def(self, '$flush', $PrettyPrint_flush$17 = function $$flush() {
      var $$18, self = this;

      
      $send(self.buffer, 'each', [], ($$18 = function(data){var self = $$18.$$s == null ? this : $$18.$$s;
        if (self.output == null) self.output = nil;
        if (self.output_width == null) self.output_width = nil;

        
        
        if (data == null) {
          data = nil;
        };
        return (self.output_width = data.$output(self.output, self.output_width));}, $$18.$$s = self, $$18.$$arity = 1, $$18));
      self.buffer.$clear();
      return (self.buffer_width = 0);
    }, $PrettyPrint_flush$17.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Text');

      var $nesting = [self].concat($parent_nesting), $Text_initialize$19, $Text_output$20, $Text_add$22;

      self.$$prototype.objs = self.$$prototype.width = nil;
      
      
      Opal.def(self, '$initialize', $Text_initialize$19 = function $$initialize() {
        var self = this;

        
        self.objs = [];
        return (self.width = 0);
      }, $Text_initialize$19.$$arity = 0);
      self.$attr_reader("width");
      
      Opal.def(self, '$output', $Text_output$20 = function $$output(out, output_width) {
        var $$21, self = this;

        
        $send(self.objs, 'each', [], ($$21 = function(obj){var self = $$21.$$s == null ? this : $$21.$$s;

          
          
          if (obj == null) {
            obj = nil;
          };
          return out['$<<'](obj);}, $$21.$$s = self, $$21.$$arity = 1, $$21));
        return $rb_plus(output_width, self.width);
      }, $Text_output$20.$$arity = 2);
      return (Opal.def(self, '$add', $Text_add$22 = function $$add(obj, width) {
        var self = this;

        
        self.objs['$<<'](obj);
        return (self.width = $rb_plus(self.width, width));
      }, $Text_add$22.$$arity = 2), nil) && 'add';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Breakable');

      var $nesting = [self].concat($parent_nesting), $Breakable_initialize$23, $Breakable_output$24;

      self.$$prototype.group = self.$$prototype.pp = self.$$prototype.indent = self.$$prototype.obj = self.$$prototype.width = nil;
      
      
      Opal.def(self, '$initialize', $Breakable_initialize$23 = function $$initialize(sep, width, q) {
        var self = this;

        
        self.obj = sep;
        self.width = width;
        self.pp = q;
        self.indent = q.$indent();
        self.group = q.$current_group();
        return self.group.$breakables().$push(self);
      }, $Breakable_initialize$23.$$arity = 3);
      self.$attr_reader("obj");
      self.$attr_reader("width");
      self.$attr_reader("indent");
      return (Opal.def(self, '$output', $Breakable_output$24 = function $$output(out, output_width) {
        var self = this;

        
        self.group.$breakables().$shift();
        if ($truthy(self.group['$break?']())) {
          
          out['$<<'](self.pp.$newline());
          out['$<<'](self.pp.$genspace().$call(self.indent));
          return self.indent;
        } else {
          
          if ($truthy(self.group.$breakables()['$empty?']())) {
            self.pp.$group_queue().$delete(self.group)};
          out['$<<'](self.obj);
          return $rb_plus(output_width, self.width);
        };
      }, $Breakable_output$24.$$arity = 2), nil) && 'output';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Group');

      var $nesting = [self].concat($parent_nesting), $Group_initialize$25, $Group_break$26, $Group_break$ques$27, $Group_first$ques$28;

      self.$$prototype["break"] = nil;
      
      
      Opal.def(self, '$initialize', $Group_initialize$25 = function $$initialize(depth) {
        var self = this;

        
        self.depth = depth;
        self.breakables = [];
        return (self["break"] = false);
      }, $Group_initialize$25.$$arity = 1);
      self.$attr_reader("depth");
      self.$attr_reader("breakables");
      
      Opal.def(self, '$break', $Group_break$26 = function() {
        var self = this;

        return (self["break"] = true)
      }, $Group_break$26.$$arity = 0);
      
      Opal.def(self, '$break?', $Group_break$ques$27 = function() {
        var self = this;

        return self["break"]
      }, $Group_break$ques$27.$$arity = 0);
      return (Opal.def(self, '$first?', $Group_first$ques$28 = function() {
        var $a, self = this;

        if ($truthy((($a = self['first'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          return false
        } else {
          
          self.first = false;
          return true;
        }
      }, $Group_first$ques$28.$$arity = 0), nil) && 'first?';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GroupQueue');

      var $nesting = [self].concat($parent_nesting), $GroupQueue_initialize$29, $GroupQueue_enq$31, $GroupQueue_deq$32, $GroupQueue_delete$36;

      self.$$prototype.queue = nil;
      
      
      Opal.def(self, '$initialize', $GroupQueue_initialize$29 = function $$initialize($a) {
        var $post_args, groups, $$30, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        groups = $post_args;;
        self.queue = [];
        return $send(groups, 'each', [], ($$30 = function(g){var self = $$30.$$s == null ? this : $$30.$$s;

          
          
          if (g == null) {
            g = nil;
          };
          return self.$enq(g);}, $$30.$$s = self, $$30.$$arity = 1, $$30));
      }, $GroupQueue_initialize$29.$$arity = -1);
      
      Opal.def(self, '$enq', $GroupQueue_enq$31 = function $$enq(group) {
        var $a, self = this, depth = nil;

        
        depth = group.$depth();
        while (!($truthy($rb_lt(depth, self.queue.$length())))) {
          self.queue['$<<']([])
        };
        return self.queue['$[]'](depth)['$<<'](group);
      }, $GroupQueue_enq$31.$$arity = 1);
      
      Opal.def(self, '$deq', $GroupQueue_deq$32 = function $$deq() {try {

        var $$33, self = this;

        
        $send(self.queue, 'each', [], ($$33 = function(gs){var self = $$33.$$s == null ? this : $$33.$$s, $$34, $$35;

          
          
          if (gs == null) {
            gs = nil;
          };
          $send($rb_minus(gs.$length(), 1), 'downto', [0], ($$34 = function(i){var self = $$34.$$s == null ? this : $$34.$$s, group = nil;

            
            
            if (i == null) {
              i = nil;
            };
            if ($truthy(gs['$[]'](i).$breakables()['$empty?']())) {
              return nil
            } else {
              
              group = gs['$slice!'](i, 1).$first();
              group.$break();
              Opal.ret(group);
            };}, $$34.$$s = self, $$34.$$arity = 1, $$34));
          $send(gs, 'each', [], ($$35 = function(group){var self = $$35.$$s == null ? this : $$35.$$s;

            
            
            if (group == null) {
              group = nil;
            };
            return group.$break();}, $$35.$$s = self, $$35.$$arity = 1, $$35));
          return gs.$clear();}, $$33.$$s = self, $$33.$$arity = 1, $$33));
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $GroupQueue_deq$32.$$arity = 0);
      return (Opal.def(self, '$delete', $GroupQueue_delete$36 = function(group) {
        var self = this;

        return self.queue['$[]'](group.$depth()).$delete(group)
      }, $GroupQueue_delete$36.$$arity = 1), nil) && 'delete';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SingleLine');

      var $nesting = [self].concat($parent_nesting), $SingleLine_initialize$37, $SingleLine_text$38, $SingleLine_breakable$39, $SingleLine_nest$40, $SingleLine_group$41, $SingleLine_flush$42, $SingleLine_first$ques$43;

      self.$$prototype.output = self.$$prototype.first = nil;
      
      
      Opal.def(self, '$initialize', $SingleLine_initialize$37 = function $$initialize(output, maxwidth, newline) {
        var self = this;

        
        
        if (maxwidth == null) {
          maxwidth = nil;
        };
        
        if (newline == null) {
          newline = nil;
        };
        self.output = output;
        return (self.first = [true]);
      }, $SingleLine_initialize$37.$$arity = -2);
      
      Opal.def(self, '$text', $SingleLine_text$38 = function $$text(obj, width) {
        var self = this;

        
        
        if (width == null) {
          width = nil;
        };
        return self.output['$<<'](obj);
      }, $SingleLine_text$38.$$arity = -2);
      
      Opal.def(self, '$breakable', $SingleLine_breakable$39 = function $$breakable(sep, width) {
        var self = this;

        
        
        if (sep == null) {
          sep = " ";
        };
        
        if (width == null) {
          width = nil;
        };
        return self.output['$<<'](sep);
      }, $SingleLine_breakable$39.$$arity = -1);
      
      Opal.def(self, '$nest', $SingleLine_nest$40 = function $$nest(indent) {
        var $iter = $SingleLine_nest$40.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SingleLine_nest$40.$$p = null;
        return Opal.yieldX($yield, []);
      }, $SingleLine_nest$40.$$arity = 1);
      
      Opal.def(self, '$group', $SingleLine_group$41 = function $$group(indent, open_obj, close_obj, open_width, close_width) {
        var $iter = $SingleLine_group$41.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SingleLine_group$41.$$p = null;
        
        
        if (indent == null) {
          indent = nil;
        };
        
        if (open_obj == null) {
          open_obj = "";
        };
        
        if (close_obj == null) {
          close_obj = "";
        };
        
        if (open_width == null) {
          open_width = nil;
        };
        
        if (close_width == null) {
          close_width = nil;
        };
        self.first.$push(true);
        self.output['$<<'](open_obj);
        Opal.yieldX($yield, []);
        self.output['$<<'](close_obj);
        return self.first.$pop();
      }, $SingleLine_group$41.$$arity = -1);
      
      Opal.def(self, '$flush', $SingleLine_flush$42 = function $$flush() {
        var self = this;

        return nil
      }, $SingleLine_flush$42.$$arity = 0);
      return (Opal.def(self, '$first?', $SingleLine_first$ques$43 = function() {
        var self = this, result = nil, $writer = nil;

        
        result = self.first['$[]'](-1);
        
        $writer = [-1, false];
        $send(self.first, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return result;
      }, $SingleLine_first$ques$43.$$arity = 0), nil) && 'first?';
    })($nesting[0], null, $nesting);
  })($nesting[0], null, $nesting)
};

Opal.modules["pp"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var $$59, $$62, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $gvars = Opal.gvars, $send = Opal.send, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$guard_inspect_key', '$pp', '$flush', '$<<', '$bind_call', '$instance_method', '$to_proc', '$attr_accessor', '$==', '$[]', '$current', '$compare_by_identity', '$[]=', '$-', '$include?', '$delete', '$is_a?', '$__getobj__', '$check_inspect_key', '$group', '$pretty_print_cycle', '$push_inspect_key', '$pretty_print', '$sharing_detection', '$pop_inspect_key', '$+', '$name', '$class', '$chomp!', '$text', '$breakable', '$lambda', '$comma_breakable', '$__send__', '$call', '$object_address_group', '$seplist', '$pretty_print_instance_variables', '$===', '$to_s', '$instance_eval', '$include', '$!=', '$owner', '$inspect', '$!', '$respond_to?', '$pp_object', '$sort', '$instance_variables', '$raise', '$singleline_pp', '$dup', '$empty?', '$pp_hash', '$each', '$keys', '$sprintf', '$mcall', '$begin', '$exclude_end?', '$end', '$lines', '$>', '$size', '$named_captures', '$regexp', '$object_group', '$class_eval', '$string', '$<=', '$first', '$module_function']);
  
  self.$require("thread");
  self.$require("stringio");
  self.$require("prettyprint");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'PP');

    var $nesting = [self].concat($parent_nesting), $PP_pp$1, $PP_singleline_pp$3, $PP_mcall$5;

    
    Opal.defs($$($nesting, 'PP'), '$pp', $PP_pp$1 = function $$pp(obj, out, width) {
      var $$2, self = this, q = nil;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      if (out == null) {
        out = $gvars.stdout;
      };
      
      if (width == null) {
        width = 79;
      };
      q = $$($nesting, 'PP').$new(out, width);
      $send(q, 'guard_inspect_key', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

        return q.$pp(obj)}, $$2.$$s = self, $$2.$$arity = 0, $$2));
      q.$flush();
      return out['$<<']("\n");
    }, $PP_pp$1.$$arity = -2);
    Opal.defs($$($nesting, 'PP'), '$singleline_pp', $PP_singleline_pp$3 = function $$singleline_pp(obj, out) {
      var $$4, self = this, q = nil;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      if (out == null) {
        out = $gvars.stdout;
      };
      q = $$($nesting, 'SingleLine').$new(out);
      $send(q, 'guard_inspect_key', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

        return q.$pp(obj)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      q.$flush();
      return out;
    }, $PP_singleline_pp$3.$$arity = -2);
    Opal.defs($$($nesting, 'PP'), '$mcall', $PP_mcall$5 = function $$mcall(obj, mod, meth, $a) {
      var $iter = $PP_mcall$5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $PP_mcall$5.$$p = null;
      
      
      if ($iter) $PP_mcall$5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 3, arguments.length);
      
      args = $post_args;;
      return $send(mod.$instance_method(meth), 'bind_call', [obj].concat(Opal.to_a(args)), block.$to_proc());
    }, $PP_mcall$5.$$arity = -4);
    self.sharing_detection = false;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("sharing_detection")
    })(Opal.get_singleton_class(self), $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'PPMethods');

      var $nesting = [self].concat($parent_nesting), $PPMethods_guard_inspect_key$6, $PPMethods_check_inspect_key$7, $PPMethods_push_inspect_key$8, $PPMethods_pop_inspect_key$9, $PPMethods_pp$10, $PPMethods_object_group$13, $PPMethods_object_address_group$14, $PPMethods_comma_breakable$15, $PPMethods_seplist$16, $PPMethods_pp_object$19, $PPMethods_pp_hash$24;

      
      
      Opal.def(self, '$guard_inspect_key', $PPMethods_guard_inspect_key$6 = function $$guard_inspect_key() {
        var $iter = $PPMethods_guard_inspect_key$6.$$p, $yield = $iter || nil, self = this, $writer = nil, save = nil;

        if ($iter) $PPMethods_guard_inspect_key$6.$$p = null;
        
        if ($$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$=='](nil)) {
          
          $writer = ["__recursive_key__", $hash2([], {}).$compare_by_identity()];
          $send($$($nesting, 'Thread').$current(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect")['$=='](nil)) {
          
          $writer = ["inspect", $hash2([], {}).$compare_by_identity()];
          $send($$($nesting, 'Thread').$current()['$[]']("__recursive_key__"), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        save = $$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect");
        
        return (function() { try {
        
        
        $writer = ["inspect", $hash2([], {}).$compare_by_identity()];
        $send($$($nesting, 'Thread').$current()['$[]']("__recursive_key__"), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return Opal.yieldX($yield, []);;
        } finally {
          (($writer = ["inspect", save]), $send($$($nesting, 'Thread').$current()['$[]']("__recursive_key__"), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        }; })();;
      }, $PPMethods_guard_inspect_key$6.$$arity = 0);
      
      Opal.def(self, '$check_inspect_key', $PPMethods_check_inspect_key$7 = function $$check_inspect_key(id) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = $$($nesting, 'Thread').$current()['$[]']("__recursive_key__")))) {
          return $$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect")
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return $$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect")['$include?'](id)
        } else {
          return $ret_or_1
        }
      }, $PPMethods_check_inspect_key$7.$$arity = 1);
      
      Opal.def(self, '$push_inspect_key', $PPMethods_push_inspect_key$8 = function $$push_inspect_key(id) {
        var self = this, $writer = nil;

        
        $writer = [id, true];
        $send($$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect"), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $PPMethods_push_inspect_key$8.$$arity = 1);
      
      Opal.def(self, '$pop_inspect_key', $PPMethods_pop_inspect_key$9 = function $$pop_inspect_key(id) {
        var self = this;

        return $$($nesting, 'Thread').$current()['$[]']("__recursive_key__")['$[]']("inspect").$delete(id)
      }, $PPMethods_pop_inspect_key$9.$$arity = 1);
      
      Opal.def(self, '$pp', $PPMethods_pp$10 = function $$pp(obj) {
        var $a, $$11, $$12, self = this, $ret_or_3 = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_3 = (($a = $$$('::', 'Delegator', 'skip_raise')) ? 'constant' : nil)))) {
          return obj['$is_a?']($$$('::', 'Delegator'))
        } else {
          return $ret_or_3
        }; return nil; })())) {
          obj = obj.$__getobj__()};
        if ($truthy(self.$check_inspect_key(obj))) {
          
          $send(self, 'group', [], ($$11 = function(){var self = $$11.$$s == null ? this : $$11.$$s;

            return obj.$pretty_print_cycle(self)}, $$11.$$s = self, $$11.$$arity = 0, $$11));
          return nil;};
        
        return (function() { try {
        
        self.$push_inspect_key(obj);
        return $send(self, 'group', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

          return obj.$pretty_print(self)}, $$12.$$s = self, $$12.$$arity = 0, $$12));
        } finally {
          (function() {if ($truthy($$($nesting, 'PP').$sharing_detection())) {
            return nil
          } else {
            return self.$pop_inspect_key(obj)
          }; return nil; })()
        }; })();;
      }, $PPMethods_pp$10.$$arity = 1);
      
      Opal.def(self, '$object_group', $PPMethods_object_group$13 = function $$object_group(obj) {
        var $iter = $PPMethods_object_group$13.$$p, block = $iter || nil, self = this;

        if ($iter) $PPMethods_object_group$13.$$p = null;
        
        
        if ($iter) $PPMethods_object_group$13.$$p = null;;
        return $send(self, 'group', [1, $rb_plus("#<", obj.$class().$name()), ">"], block.$to_proc());
      }, $PPMethods_object_group$13.$$arity = 1);
      
      Opal.def(self, '$object_address_group', $PPMethods_object_address_group$14 = function $$object_address_group(obj) {
        var $iter = $PPMethods_object_address_group$14.$$p, block = $iter || nil, self = this, str = nil;

        if ($iter) $PPMethods_object_address_group$14.$$p = null;
        
        
        if ($iter) $PPMethods_object_address_group$14.$$p = null;;
        str = $$($nesting, 'Kernel').$instance_method("to_s").$bind_call(obj);
        str['$chomp!'](">");
        return $send(self, 'group', [1, str, ">"], block.$to_proc());
      }, $PPMethods_object_address_group$14.$$arity = 1);
      
      Opal.def(self, '$comma_breakable', $PPMethods_comma_breakable$15 = function $$comma_breakable() {
        var self = this;

        
        self.$text(",");
        return self.$breakable();
      }, $PPMethods_comma_breakable$15.$$arity = 0);
      
      Opal.def(self, '$seplist', $PPMethods_seplist$16 = function $$seplist(list, sep, iter_method) {
        var $$17, $$18, $iter = $PPMethods_seplist$16.$$p, $yield = $iter || nil, self = this, $ret_or_4 = nil, first = nil;

        if ($iter) $PPMethods_seplist$16.$$p = null;
        
        
        if (sep == null) {
          sep = nil;
        };
        
        if (iter_method == null) {
          iter_method = "each";
        };
        sep = (function() {if ($truthy(($ret_or_4 = sep))) {
          return $ret_or_4
        } else {
          return $send(self, 'lambda', [], ($$17 = function(){var self = $$17.$$s == null ? this : $$17.$$s;

            return self.$comma_breakable()}, $$17.$$s = self, $$17.$$arity = 0, $$17))
        }; return nil; })();
        first = true;
        return $send(list, '__send__', [iter_method], ($$18 = function($a){var self = $$18.$$s == null ? this : $$18.$$s, $post_args, v;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          v = $post_args;;
          if ($truthy(first)) {
            first = false
          } else {
            sep.$call()
          };
          return Opal.yieldX($yield, Opal.to_a(v));;}, $$18.$$s = self, $$18.$$arity = -1, $$18));
      }, $PPMethods_seplist$16.$$arity = -2);
      
      Opal.def(self, '$pp_object', $PPMethods_pp_object$19 = function $$pp_object(obj) {
        var $$20, self = this;

        return $send(self, 'object_address_group', [obj], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s, $$21, $$22;

          return $send(self, 'seplist', [obj.$pretty_print_instance_variables(), $send(self, 'lambda', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;

            return self.$text(",")}, $$21.$$s = self, $$21.$$arity = 0, $$21))], ($$22 = function(v){var self = $$22.$$s == null ? this : $$22.$$s, $$23;

            
            
            if (v == null) {
              v = nil;
            };
            self.$breakable();
            if ($truthy($$($nesting, 'Symbol')['$==='](v))) {
              v = v.$to_s()};
            self.$text(v);
            self.$text("=");
            return $send(self, 'group', [1], ($$23 = function(){var self = $$23.$$s == null ? this : $$23.$$s;

              
              self.$breakable("");
              return self.$pp(obj.$instance_eval(v));}, $$23.$$s = self, $$23.$$arity = 0, $$23));}, $$22.$$s = self, $$22.$$arity = 1, $$22))}, $$20.$$s = self, $$20.$$arity = 0, $$20))
      }, $PPMethods_pp_object$19.$$arity = 1);
      return (Opal.def(self, '$pp_hash', $PPMethods_pp_hash$24 = function $$pp_hash(obj) {
        var $$25, self = this;

        return $send(self, 'group', [1, "{", "}"], ($$25 = function(){var self = $$25.$$s == null ? this : $$25.$$s, $$26;

          return $send(self, 'seplist', [obj, nil, "each_pair"], ($$26 = function(k, v){var self = $$26.$$s == null ? this : $$26.$$s, $$27;

            
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            return $send(self, 'group', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s, $$28;

              
              self.$pp(k);
              self.$text("=>");
              return $send(self, 'group', [1], ($$28 = function(){var self = $$28.$$s == null ? this : $$28.$$s;

                
                self.$breakable("");
                return self.$pp(v);}, $$28.$$s = self, $$28.$$arity = 0, $$28));}, $$27.$$s = self, $$27.$$arity = 0, $$27));}, $$26.$$s = self, $$26.$$arity = 2, $$26))}, $$25.$$s = self, $$25.$$arity = 0, $$25))
      }, $PPMethods_pp_hash$24.$$arity = 1), nil) && 'pp_hash';
    })($nesting[0], $nesting);
    self.$include($$($nesting, 'PPMethods'));
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SingleLine');

      var $nesting = [self].concat($parent_nesting);

      return self.$include($$($nesting, 'PPMethods'))
    })($nesting[0], $$$($$($nesting, 'PrettyPrint'), 'SingleLine'), $nesting);
    return (function($base, $parent_nesting) {
      var self = $module($base, 'ObjectMixin');

      var $nesting = [self].concat($parent_nesting), $ObjectMixin_pretty_print$29, $ObjectMixin_pretty_print_cycle$30, $ObjectMixin_pretty_print_instance_variables$32, $ObjectMixin_pretty_print_inspect$33;

      
      
      Opal.def(self, '$pretty_print', $ObjectMixin_pretty_print$29 = function $$pretty_print(q) {
        var self = this, umethod_method = nil, inspect_method = nil, $ret_or_5 = nil, $ret_or_6 = nil;

        
        umethod_method = $$($nesting, 'Object').$instance_method("method");
        
        try {
          inspect_method = umethod_method.$bind_call(self, "inspect")
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
            try {
              nil
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        if ($truthy((function() {if ($truthy(($ret_or_5 = inspect_method))) {
          return inspect_method.$owner()['$!=']($$($nesting, 'Kernel'))
        } else {
          return $ret_or_5
        }; return nil; })())) {
          return q.$text(self.$inspect())
        } else if ($truthy((function() {if ($truthy(($ret_or_6 = inspect_method['$!']()))) {
          return self['$respond_to?']("inspect")
        } else {
          return $ret_or_6
        }; return nil; })())) {
          return q.$text(self.$inspect())
        } else {
          return q.$pp_object(self)
        };
      }, $ObjectMixin_pretty_print$29.$$arity = 1);
      
      Opal.def(self, '$pretty_print_cycle', $ObjectMixin_pretty_print_cycle$30 = function $$pretty_print_cycle(q) {
        var $$31, self = this;

        return $send(q, 'object_address_group', [self], ($$31 = function(){var self = $$31.$$s == null ? this : $$31.$$s;

          
          q.$breakable();
          return q.$text("...");}, $$31.$$s = self, $$31.$$arity = 0, $$31))
      }, $ObjectMixin_pretty_print_cycle$30.$$arity = 1);
      
      Opal.def(self, '$pretty_print_instance_variables', $ObjectMixin_pretty_print_instance_variables$32 = function $$pretty_print_instance_variables() {
        var self = this;

        return self.$instance_variables().$sort()
      }, $ObjectMixin_pretty_print_instance_variables$32.$$arity = 0);
      return (Opal.def(self, '$pretty_print_inspect', $ObjectMixin_pretty_print_inspect$33 = function $$pretty_print_inspect() {
        var self = this;

        
        if ($$($nesting, 'Object').$instance_method("method").$bind_call(self, "pretty_print").$owner()['$==']($$$($$($nesting, 'PP'), 'ObjectMixin'))) {
          self.$raise("" + "pretty_print is not overridden for " + (self.$class()))};
        return $$($nesting, 'PP').$singleline_pp(self, "".$dup());
      }, $ObjectMixin_pretty_print_inspect$33.$$arity = 0), nil) && 'pretty_print_inspect';
    })($nesting[0], $nesting);
  })($nesting[0], $$($nesting, 'PrettyPrint'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_pretty_print$34, $Array_pretty_print_cycle$37;

    
    
    Opal.def(self, '$pretty_print', $Array_pretty_print$34 = function $$pretty_print(q) {
      var $$35, self = this;

      return $send(q, 'group', [1, "[", "]"], ($$35 = function(){var self = $$35.$$s == null ? this : $$35.$$s, $$36;

        return $send(q, 'seplist', [self], ($$36 = function(v){var self = $$36.$$s == null ? this : $$36.$$s;

          
          
          if (v == null) {
            v = nil;
          };
          return q.$pp(v);}, $$36.$$s = self, $$36.$$arity = 1, $$36))}, $$35.$$s = self, $$35.$$arity = 0, $$35))
    }, $Array_pretty_print$34.$$arity = 1);
    return (Opal.def(self, '$pretty_print_cycle', $Array_pretty_print_cycle$37 = function $$pretty_print_cycle(q) {
      var self = this;

      return q.$text((function() {if ($truthy(self['$empty?']())) {
        return "[]"
      } else {
        return "[...]"
      }; return nil; })())
    }, $Array_pretty_print_cycle$37.$$arity = 1), nil) && 'pretty_print_cycle';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_pretty_print$38, $Hash_pretty_print_cycle$39;

    
    
    Opal.def(self, '$pretty_print', $Hash_pretty_print$38 = function $$pretty_print(q) {
      var self = this;

      return q.$pp_hash(self)
    }, $Hash_pretty_print$38.$$arity = 1);
    return (Opal.def(self, '$pretty_print_cycle', $Hash_pretty_print_cycle$39 = function $$pretty_print_cycle(q) {
      var self = this;

      return q.$text((function() {if ($truthy(self['$empty?']())) {
        return "{}"
      } else {
        return "{...}"
      }; return nil; })())
    }, $Hash_pretty_print_cycle$39.$$arity = 1), nil) && 'pretty_print_cycle';
  })($nesting[0], null, $nesting);
  (function(self, $parent_nesting) {
    var $nesting = [self].concat($parent_nesting), $pretty_print$40;

    return (Opal.def(self, '$pretty_print', $pretty_print$40 = function $$pretty_print(q) {
      var $$41, self = this, h = nil;

      
      h = $hash2([], {});
      $send($$($nesting, 'ENV').$keys().$sort(), 'each', [], ($$41 = function(k){var self = $$41.$$s == null ? this : $$41.$$s, $writer = nil;

        
        
        if (k == null) {
          k = nil;
        };
        $writer = [k, $$($nesting, 'ENV')['$[]'](k)];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$41.$$s = self, $$41.$$arity = 1, $$41));
      return q.$pp_hash(h);
    }, $pretty_print$40.$$arity = 1), nil) && 'pretty_print'
  })(Opal.get_singleton_class($$($nesting, 'ENV')), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_pretty_print$42, $Struct_pretty_print_cycle$47;

    
    
    Opal.def(self, '$pretty_print', $Struct_pretty_print$42 = function $$pretty_print(q) {
      var $$43, self = this;

      return $send(q, 'group', [1, self.$sprintf("#<struct %s", $$($nesting, 'PP').$mcall(self, $$($nesting, 'Kernel'), "class").$name()), ">"], ($$43 = function(){var self = $$43.$$s == null ? this : $$43.$$s, $$44, $$45;

        return $send(q, 'seplist', [$$($nesting, 'PP').$mcall(self, $$($nesting, 'Struct'), "members"), $send(self, 'lambda', [], ($$44 = function(){var self = $$44.$$s == null ? this : $$44.$$s;

          return q.$text(",")}, $$44.$$s = self, $$44.$$arity = 0, $$44))], ($$45 = function(member){var self = $$45.$$s == null ? this : $$45.$$s, $$46;

          
          
          if (member == null) {
            member = nil;
          };
          q.$breakable();
          q.$text(member.$to_s());
          q.$text("=");
          return $send(q, 'group', [1], ($$46 = function(){var self = $$46.$$s == null ? this : $$46.$$s;

            
            q.$breakable("");
            return q.$pp(self['$[]'](member));}, $$46.$$s = self, $$46.$$arity = 0, $$46));}, $$45.$$s = self, $$45.$$arity = 1, $$45))}, $$43.$$s = self, $$43.$$arity = 0, $$43))
    }, $Struct_pretty_print$42.$$arity = 1);
    return (Opal.def(self, '$pretty_print_cycle', $Struct_pretty_print_cycle$47 = function $$pretty_print_cycle(q) {
      var self = this;

      return q.$text(self.$sprintf("#<struct %s:...>", $$($nesting, 'PP').$mcall(self, $$($nesting, 'Kernel'), "class").$name()))
    }, $Struct_pretty_print_cycle$47.$$arity = 1), nil) && 'pretty_print_cycle';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Range');

    var $nesting = [self].concat($parent_nesting), $Range_pretty_print$48;

    return (Opal.def(self, '$pretty_print', $Range_pretty_print$48 = function $$pretty_print(q) {
      var self = this;

      
      q.$pp(self.$begin());
      q.$breakable("");
      q.$text((function() {if ($truthy(self['$exclude_end?']())) {
        return "..."
      } else {
        return ".."
      }; return nil; })());
      q.$breakable("");
      if ($truthy(self.$end())) {
        return q.$pp(self.$end())
      } else {
        return nil
      };
    }, $Range_pretty_print$48.$$arity = 1), nil) && 'pretty_print'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_pretty_print$49;

    return (Opal.def(self, '$pretty_print', $String_pretty_print$49 = function $$pretty_print(q) {
      var $$50, self = this, lines = nil;

      
      lines = self.$lines();
      if ($truthy($rb_gt(lines.$size(), 1))) {
        return $send(q, 'group', [0, "", ""], ($$50 = function(){var self = $$50.$$s == null ? this : $$50.$$s, $$51, $$52;

          return $send(q, 'seplist', [lines, $send(self, 'lambda', [], ($$51 = function(){var self = $$51.$$s == null ? this : $$51.$$s;

            
            q.$text(" +");
            return q.$breakable();}, $$51.$$s = self, $$51.$$arity = 0, $$51))], ($$52 = function(v){var self = $$52.$$s == null ? this : $$52.$$s;

            
            
            if (v == null) {
              v = nil;
            };
            return q.$pp(v);}, $$52.$$s = self, $$52.$$arity = 1, $$52))}, $$50.$$s = self, $$50.$$arity = 0, $$50))
      } else {
        return q.$text(self.$inspect())
      };
    }, $String_pretty_print$49.$$arity = 1), nil) && 'pretty_print'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_pretty_print$53;

    return (Opal.def(self, '$pretty_print', $MatchData_pretty_print$53 = function $$pretty_print(q) {
      var $$54, $$56, self = this, nc = nil;

      
      nc = [];
      $send(self.$regexp().$named_captures(), 'each', [], ($$54 = function(name, indexes){var self = $$54.$$s == null ? this : $$54.$$s, $$55;

        
        
        if (name == null) {
          name = nil;
        };
        
        if (indexes == null) {
          indexes = nil;
        };
        return $send(indexes, 'each', [], ($$55 = function(i){var self = $$55.$$s == null ? this : $$55.$$s, $writer = nil;

          
          
          if (i == null) {
            i = nil;
          };
          $writer = [i, name];
          $send(nc, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$55.$$s = self, $$55.$$arity = 1, $$55));}, $$54.$$s = self, $$54.$$arity = 2, $$54));
      return $send(q, 'object_group', [self], ($$56 = function(){var self = $$56.$$s == null ? this : $$56.$$s, $$57, $$58;

        
        q.$breakable();
        return $send(q, 'seplist', [Opal.Range.$new(0,self.$size(), true), $send(self, 'lambda', [], ($$57 = function(){var self = $$57.$$s == null ? this : $$57.$$s;

          return q.$breakable()}, $$57.$$s = self, $$57.$$arity = 0, $$57))], ($$58 = function(i){var self = $$58.$$s == null ? this : $$58.$$s;

          
          
          if (i == null) {
            i = nil;
          };
          if (i['$=='](0)) {
            return q.$pp(self['$[]'](i))
          } else {
            
            if ($truthy(nc['$[]'](i))) {
              q.$text(nc['$[]'](i))
            } else {
              q.$pp(i)
            };
            q.$text(":");
            return q.$pp(self['$[]'](i));
          };}, $$58.$$s = self, $$58.$$arity = 1, $$58));}, $$56.$$s = self, $$56.$$arity = 0, $$56));
    }, $MatchData_pretty_print$53.$$arity = 1), nil) && 'pretty_print'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting);

    return self.$include($$$($$($nesting, 'PP'), 'ObjectMixin'))
  })($nesting[0], $$($nesting, 'BasicObject'), $nesting);
  $send([$$($nesting, 'Numeric'), $$($nesting, 'Symbol'), $$($nesting, 'FalseClass'), $$($nesting, 'TrueClass'), $$($nesting, 'NilClass'), $$($nesting, 'Module')], 'each', [], ($$59 = function(c){var self = $$59.$$s == null ? this : $$59.$$s, $$60;

    
    
    if (c == null) {
      c = nil;
    };
    return $send(c, 'class_eval', [], ($$60 = function(){var self = $$60.$$s == null ? this : $$60.$$s, $pretty_print_cycle$61;

      return (Opal.def(self, '$pretty_print_cycle', $pretty_print_cycle$61 = function $$pretty_print_cycle(q) {
        var self = this;

        return q.$text(self.$inspect())
      }, $pretty_print_cycle$61.$$arity = 1), nil) && 'pretty_print_cycle'}, $$60.$$s = self, $$60.$$arity = 0, $$60));}, $$59.$$s = self, $$59.$$arity = 1, $$59));
  $send([$$($nesting, 'Numeric'), $$($nesting, 'FalseClass'), $$($nesting, 'TrueClass'), $$($nesting, 'Module')], 'each', [], ($$62 = function(c){var self = $$62.$$s == null ? this : $$62.$$s, $$63;

    
    
    if (c == null) {
      c = nil;
    };
    return $send(c, 'class_eval', [], ($$63 = function(){var self = $$63.$$s == null ? this : $$63.$$s, $pretty_print$64;

      return (Opal.def(self, '$pretty_print', $pretty_print$64 = function $$pretty_print(q) {
        var self = this;

        return q.$text(self.$inspect())
      }, $pretty_print$64.$$arity = 1), nil) && 'pretty_print'}, $$63.$$s = self, $$63.$$arity = 0, $$63));}, $$62.$$s = self, $$62.$$arity = 1, $$62));
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_pretty_inspect$65, $Kernel_pp$66;

    
    
    Opal.def(self, '$pretty_inspect', $Kernel_pretty_inspect$65 = function $$pretty_inspect() {
      var self = this;

      return $$($nesting, 'PP').$pp(self, $$($nesting, 'StringIO').$new()).$string()
    }, $Kernel_pretty_inspect$65.$$arity = 0);
    
    Opal.def(self, '$pp', $Kernel_pp$66 = function $$pp($a) {
      var $post_args, objs, $$67, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objs = $post_args;;
      $send(objs, 'each', [], ($$67 = function(obj){var self = $$67.$$s == null ? this : $$67.$$s;

        
        
        if (obj == null) {
          obj = nil;
        };
        return $$($nesting, 'PP').$pp(obj);}, $$67.$$s = self, $$67.$$arity = 1, $$67));
      if ($truthy($rb_le(objs.$size(), 1))) {
        return objs.$first()
      } else {
        return objs
      };
    }, $Kernel_pp$66.$$arity = -1);
    return self.$module_function("pp");
  })($nesting[0], $nesting);
};
