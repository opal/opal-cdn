Opal.modules.set=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.$$$,Opal.$$),$klass=Opal.klass,$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$alias=Opal.alias,$module=Opal.module;return Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$-","$enum_for","$[]","$<<","$replace","$delete","$select","$reject","$delete_if","$to_proc","$keep_if","$each_key","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$any?","$!","$intersect?","$keys"]),function($base,$super,$parent_nesting){var $Set_$$$1,$Set_initialize$2,$Set_dup$4,$Set_$minus$5,$Set_inspect$6,$Set_$eq_eq$7,$Set_add$9,$Set_classify$10,$Set_collect$excl$13,$Set_delete$15,$Set_delete$ques$16,$Set_delete_if$17,$Set_keep_if$20,$Set_reject$excl$23,$Set_select$excl$24,$Set_add$ques$25,$Set_each$26,$Set_empty$ques$27,$Set_eql$ques$28,$Set_clear$30,$Set_include$ques$31,$Set_merge$32,$Set_replace$34,$Set_size$35,$Set_subtract$36,$Set_$$38,$Set_superset$ques$39,$Set_proper_superset$ques$41,$Set_subset$ques$43,$Set_proper_subset$ques$45,$Set_intersect$ques$47,$Set_disjoint$ques$50,$Set_to_a$51,self=$klass($base,null,"Set"),$nesting=[self].concat($parent_nesting);self.$$prototype.hash=nil,self.$include($$($nesting,"Enumerable")),Opal.defs(self,"$[]",$Set_$$$1=function($a){var ary,self=this;return ary=Opal.slice.call(arguments,0,arguments.length),self.$new(ary)},$Set_$$$1.$$arity=-1),Opal.def(self,"$initialize",$Set_initialize$2=function(enum$){var $$3,$iter=$Set_initialize$2.$$p,block=$iter||nil;return $iter&&($Set_initialize$2.$$p=null),$iter&&($Set_initialize$2.$$p=null),null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($truthy($$($nesting,"Enumerable")["$==="](enum$))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],($$3=function(item){var self=null==$$3.$$s?this:$$3.$$s;return null==item&&(item=nil),self.$add(Opal.yield1(block,item))},$$3.$$s=this,$$3.$$arity=1,$$3)):this.$merge(enum$))},$Set_initialize$2.$$arity=-1),Opal.def(self,"$dup",$Set_dup$4=function(){return this.$class().$new().$merge(this)},$Set_dup$4.$$arity=0),Opal.def(self,"$-",$Set_$minus$5=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)},$Set_$minus$5.$$arity=1),$alias(self,"difference","-"),Opal.def(self,"$inspect",$Set_inspect$6=function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"},$Set_inspect$6.$$arity=0),Opal.def(self,"$==",$Set_$eq_eq$7=function(other){var $$8,self=this,$ret_or_1=nil;return!!$truthy(self["$equal?"](other))||($truthy(other["$instance_of?"](self.$class()))?self.hash["$=="](other.$instance_variable_get("@hash")):!!$truthy($truthy($ret_or_1=other["$is_a?"]($$($nesting,"Set")))?self.$size()["$=="](other.$size()):$ret_or_1)&&$send(other,"all?",[],($$8=function(o){var self=null==$$8.$$s?this:$$8.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)},$$8.$$s=self,$$8.$$arity=1,$$8)))},$Set_$eq_eq$7.$$arity=1),Opal.def(self,"$add",$Set_add$9=function(o){var $writer;return $writer=[o,!0],$send(this.hash,"[]=",Opal.to_a($writer)),$rb_minus($writer.length,1),this},$Set_add$9.$$arity=1),$alias(self,"<<","add"),Opal.def(self,"$classify",$Set_classify$10=function(){var $$11,$$12,$iter=$Set_classify$10.$$p,block=$iter||nil,result=nil;return $iter&&($Set_classify$10.$$p=null),$iter&&($Set_classify$10.$$p=null),block===nil?this.$enum_for("classify"):(result=$send($$($nesting,"Hash"),"new",[],($$11=function(h,k){var $writer,self=null==$$11.$$s?this:$$11.$$s;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,self.$class().$new()],$send(h,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$$11.$$s=this,$$11.$$arity=2,$$11)),$send(this,"each",[],(($$12=function(item){null==$$12.$$s||$$12.$$s;return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}).$$s=this,$$12.$$arity=1,$$12)),result)},$Set_classify$10.$$arity=0),Opal.def(self,"$collect!",$Set_collect$excl$13=function(){var $$14,$iter=$Set_collect$excl$13.$$p,block=$iter||nil,result=nil;return $iter&&($Set_collect$excl$13.$$p=null),$iter&&($Set_collect$excl$13.$$p=null),block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],(($$14=function(item){null==$$14.$$s||$$14.$$s;return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}).$$s=this,$$14.$$arity=1,$$14)),this.$replace(result))},$Set_collect$excl$13.$$arity=0),$alias(self,"map!","collect!"),Opal.def(self,"$delete",$Set_delete$15=function(o){return this.hash.$delete(o),this},$Set_delete$15.$$arity=1),Opal.def(self,"$delete?",$Set_delete$ques$16=function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil},$Set_delete$ques$16.$$arity=1),Opal.def(self,"$delete_if",$Set_delete_if$17=function(){var $$18,$$19,$iter=$Set_delete_if$17.$$p,$yield=$iter||nil;return $iter&&($Set_delete_if$17.$$p=null),$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],(($$18=function(o){null==$$18.$$s||$$18.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,$$18.$$arity=1,$$18)),"each",[],($$19=function(o){var self=null==$$19.$$s?this:$$19.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)},$$19.$$s=this,$$19.$$arity=1,$$19)),this)},$Set_delete_if$17.$$arity=0),Opal.def(self,"$keep_if",$Set_keep_if$20=function(){var $$21,$$22,$iter=$Set_keep_if$20.$$p,$yield=$iter||nil;return $iter&&($Set_keep_if$20.$$p=null),$yield===nil?this.$enum_for("keep_if"):($send($send(this,"reject",[],(($$21=function(o){null==$$21.$$s||$$21.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,$$21.$$arity=1,$$21)),"each",[],($$22=function(o){var self=null==$$22.$$s?this:$$22.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)},$$22.$$s=this,$$22.$$arity=1,$$22)),this)},$Set_keep_if$20.$$arity=0),Opal.def(self,"$reject!",$Set_reject$excl$23=function(){var before,$iter=$Set_reject$excl$23.$$p,block=$iter||nil;return $iter&&($Set_reject$excl$23.$$p=null),$iter&&($Set_reject$excl$23.$$p=null),block===nil?this.$enum_for("reject!"):(before=this.$size(),$send(this,"delete_if",[],block.$to_proc()),this.$size()["$=="](before)?nil:this)},$Set_reject$excl$23.$$arity=0),Opal.def(self,"$select!",$Set_select$excl$24=function(){var before,$iter=$Set_select$excl$24.$$p,block=$iter||nil;return $iter&&($Set_select$excl$24.$$p=null),$iter&&($Set_select$excl$24.$$p=null),block===nil?this.$enum_for("select!"):(before=this.$size(),$send(this,"keep_if",[],block.$to_proc()),this.$size()["$=="](before)?nil:this)},$Set_select$excl$24.$$arity=0),$alias(self,"filter!","select!"),Opal.def(self,"$add?",$Set_add$ques$25=function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)},$Set_add$ques$25.$$arity=1),Opal.def(self,"$each",$Set_each$26=function(){var $iter=$Set_each$26.$$p,block=$iter||nil;return $iter&&($Set_each$26.$$p=null),$iter&&($Set_each$26.$$p=null),block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)},$Set_each$26.$$arity=0),Opal.def(self,"$empty?",$Set_empty$ques$27=function(){return this.hash["$empty?"]()},$Set_empty$ques$27.$$arity=0),Opal.def(self,"$eql?",$Set_eql$ques$28=function(other){var $$29;return this.hash["$eql?"]($send(other,"instance_eval",[],($$29=function(){var self=null==$$29.$$s?this:$$29.$$s;return null==self.hash&&(self.hash=nil),self.hash},$$29.$$s=this,$$29.$$arity=0,$$29)))},$Set_eql$ques$28.$$arity=1),Opal.def(self,"$clear",$Set_clear$30=function(){return this.hash.$clear(),this},$Set_clear$30.$$arity=0),Opal.def(self,"$include?",$Set_include$ques$31=function(o){return this.hash["$include?"](o)},$Set_include$ques$31.$$arity=1),$alias(self,"member?","include?"),Opal.def(self,"$merge",$Set_merge$32=function(enum$){var $$33;return $send(enum$,"each",[],($$33=function(item){var self=null==$$33.$$s?this:$$33.$$s;return null==item&&(item=nil),self.$add(item)},$$33.$$s=this,$$33.$$arity=1,$$33)),this},$Set_merge$32.$$arity=1),Opal.def(self,"$replace",$Set_replace$34=function(enum$){return this.$clear(),this.$merge(enum$),this},$Set_replace$34.$$arity=1),Opal.def(self,"$size",$Set_size$35=function(){return this.hash.$size()},$Set_size$35.$$arity=0),$alias(self,"length","size"),Opal.def(self,"$subtract",$Set_subtract$36=function(enum$){var $$37;return $send(enum$,"each",[],($$37=function(item){var self=null==$$37.$$s?this:$$37.$$s;return null==item&&(item=nil),self.$delete(item)},$$37.$$s=this,$$37.$$arity=1,$$37)),this},$Set_subtract$36.$$arity=1),Opal.def(self,"$|",$Set_$$38=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)},$Set_$$38.$$arity=1),Opal.def(self,"$superset?",$Set_superset$ques$39=function(set){var $$40;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],($$40=function(o){var self=null==$$40.$$s?this:$$40.$$s;return null==o&&(o=nil),self["$include?"](o)},$$40.$$s=this,$$40.$$arity=1,$$40))},$Set_superset$ques$39.$$arity=1),$alias(self,">=","superset?"),Opal.def(self,"$proper_superset?",$Set_proper_superset$ques$41=function(set){var $$42;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],($$42=function(o){var self=null==$$42.$$s?this:$$42.$$s;return null==o&&(o=nil),self["$include?"](o)},$$42.$$s=this,$$42.$$arity=1,$$42))},$Set_proper_superset$ques$41.$$arity=1),$alias(self,">","proper_superset?"),Opal.def(self,"$subset?",$Set_subset$ques$43=function(set){var $$44;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],(($$44=function(o){null==$$44.$$s||$$44.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$44.$$arity=1,$$44))},$Set_subset$ques$43.$$arity=1),$alias(self,"<=","subset?"),Opal.def(self,"$proper_subset?",$Set_proper_subset$ques$45=function(set){var $$46;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],(($$46=function(o){null==$$46.$$s||$$46.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$46.$$arity=1,$$46))},$Set_proper_subset$ques$45.$$arity=1),$alias(self,"<","proper_subset?"),Opal.def(self,"$intersect?",$Set_intersect$ques$47=function(set){var $$48,$$49;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_lt(this.$size(),set.$size()))?$send(this,"any?",[],(($$48=function(o){null==$$48.$$s||$$48.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$48.$$arity=1,$$48)):$send(set,"any?",[],($$49=function(o){var self=null==$$49.$$s?this:$$49.$$s;return null==o&&(o=nil),self["$include?"](o)},$$49.$$s=this,$$49.$$arity=1,$$49))},$Set_intersect$ques$47.$$arity=1),Opal.def(self,"$disjoint?",$Set_disjoint$ques$50=function(set){return this["$intersect?"](set)["$!"]()},$Set_disjoint$ques$50.$$arity=1),$alias(self,"+","|"),$alias(self,"union","|"),Opal.def(self,"$to_a",$Set_to_a$51=function(){return this.hash.$keys()},$Set_to_a$51.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){var $Enumerable_to_set$52,self=$module($base,"Enumerable"),$nesting=[self].concat($parent_nesting);return Opal.def(self,"$to_set",$Enumerable_to_set$52=function($a,$b){var $post_args,klass,args,$iter=$Enumerable_to_set$52.$$p,block=$iter||nil,self=this;return $iter&&($Enumerable_to_set$52.$$p=null),$iter&&($Enumerable_to_set$52.$$p=null),($post_args=Opal.slice.call(arguments,0,arguments.length)).length>0&&(klass=$post_args[0],$post_args.splice(0,1)),null==klass&&(klass=$$($nesting,"Set")),args=$post_args,$send(klass,"new",[self].concat(Opal.to_a(args)),block.$to_proc())},$Enumerable_to_set$52.$$arity=-1),nil&&"to_set"}($nesting[0],$nesting)};
