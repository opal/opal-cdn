Opal.modules.thread=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$$=Opal.$$$,$$=Opal.$$,$klass=Opal.klass,$truthy=Opal.truthy,$send=Opal.send,$hash2=Opal.hash2,$alias=Opal.alias;return Opal.add_stubs(["$allocate","$core_initialize!","$current","$raise","$[]","$coerce_key_name","$[]=","$-","$key?","$keys","$private","$coerce_to!","$clear","$empty?","$size","$shift","$push","$each","$to_proc","$=~","$last_match","$to_i","$inspect","$attr_reader","$locked?","$lock","$unlock"]),function($base,$super,$parent_nesting){[$klass($base,$super,"ThreadError")].concat($parent_nesting)}($nesting[0],$$($nesting,"StandardError"),$nesting),function($base,$super,$parent_nesting){var $Thread_current$1,$Thread_list$2,$Thread_initialize$3,$Thread_$$$4,$Thread_$$$eq$5,$Thread_key$ques$6,$Thread_keys$7,$Thread_thread_variable_get$8,$Thread_thread_variable_set$9,$Thread_thread_variable$ques$10,$Thread_thread_variables$11,$Thread_core_initialize$excl$12,$Thread_coerce_key_name$13,self=$klass($base,null,"Thread"),$nesting=[self].concat($parent_nesting);self.$$prototype.fiber_locals=self.$$prototype.thread_locals=nil,Opal.defs(self,"$current",$Thread_current$1=function(){return null==this.current&&(this.current=nil),$truthy(this.current)||(this.current=this.$allocate(),this.current["$core_initialize!"]()),this.current},$Thread_current$1.$$arity=0),Opal.defs(self,"$list",$Thread_list$2=function(){return[this.$current()]},$Thread_list$2.$$arity=0),Opal.def(self,"$initialize",$Thread_initialize$3=function($a){var self=this;return Opal.slice.call(arguments,0,arguments.length),self.$raise($$($nesting,"NotImplementedError"),"Thread creation not available")},$Thread_initialize$3.$$arity=-1),Opal.def(self,"$[]",$Thread_$$$4=function(key){return this.fiber_locals["$[]"](this.$coerce_key_name(key))},$Thread_$$$4.$$arity=1),Opal.def(self,"$[]=",$Thread_$$$eq$5=function(key,value){var $writer;return $writer=[this.$coerce_key_name(key),value],$send(this.fiber_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$Thread_$$$eq$5.$$arity=2),Opal.def(self,"$key?",$Thread_key$ques$6=function(key){return this.fiber_locals["$key?"](this.$coerce_key_name(key))},$Thread_key$ques$6.$$arity=1),Opal.def(self,"$keys",$Thread_keys$7=function(){return this.fiber_locals.$keys()},$Thread_keys$7.$$arity=0),Opal.def(self,"$thread_variable_get",$Thread_thread_variable_get$8=function(key){return this.thread_locals["$[]"](this.$coerce_key_name(key))},$Thread_thread_variable_get$8.$$arity=1),Opal.def(self,"$thread_variable_set",$Thread_thread_variable_set$9=function(key,value){var $writer;return $writer=[this.$coerce_key_name(key),value],$send(this.thread_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$Thread_thread_variable_set$9.$$arity=2),Opal.def(self,"$thread_variable?",$Thread_thread_variable$ques$10=function(key){return this.thread_locals["$key?"](this.$coerce_key_name(key))},$Thread_thread_variable$ques$10.$$arity=1),Opal.def(self,"$thread_variables",$Thread_thread_variables$11=function(){return this.thread_locals.$keys()},$Thread_thread_variables$11.$$arity=0),self.$private(),Opal.def(self,"$core_initialize!",$Thread_core_initialize$excl$12=function(){return this.thread_locals=$hash2([],{}),this.fiber_locals=$hash2([],{})},$Thread_core_initialize$excl$12.$$arity=0),Opal.def(self,"$coerce_key_name",$Thread_coerce_key_name$13=function(key){return $$($nesting,"Opal")["$coerce_to!"](key,$$($nesting,"String"),"to_s")},$Thread_coerce_key_name$13.$$arity=1),function($base,$super,$parent_nesting){var $Queue_initialize$14,$Queue_clear$15,$Queue_empty$ques$16,$Queue_size$17,$Queue_pop$18,$Queue_push$19,$Queue_each$20,self=$klass($base,null,"Queue"),$nesting=[self].concat($parent_nesting);self.$$prototype.storage=nil,Opal.def(self,"$initialize",$Queue_initialize$14=function(){return this.$clear()},$Queue_initialize$14.$$arity=0),Opal.def(self,"$clear",$Queue_clear$15=function(){return this.storage=[]},$Queue_clear$15.$$arity=0),Opal.def(self,"$empty?",$Queue_empty$ques$16=function(){return this.storage["$empty?"]()},$Queue_empty$ques$16.$$arity=0),Opal.def(self,"$size",$Queue_size$17=function(){return this.storage.$size()},$Queue_size$17.$$arity=0),$alias(self,"length","size"),Opal.def(self,"$pop",$Queue_pop$18=function(non_block){return null==non_block&&(non_block=!1),$truthy(this["$empty?"]())&&($truthy(non_block)&&this.$raise($$($nesting,"ThreadError"),"Queue empty"),this.$raise($$($nesting,"ThreadError"),"Deadlock")),this.storage.$shift()},$Queue_pop$18.$$arity=-1),$alias(self,"shift","pop"),$alias(self,"deq","pop"),Opal.def(self,"$push",$Queue_push$19=function(value){return this.storage.$push(value)},$Queue_push$19.$$arity=1),$alias(self,"<<","push"),$alias(self,"enq","push"),Opal.def(self,"$each",$Queue_each$20=function(){var $iter=$Queue_each$20.$$p,block=$iter||nil;return $iter&&($Queue_each$20.$$p=null),$iter&&($Queue_each$20.$$p=null),$send(this.storage,"each",[],block.$to_proc())},$Queue_each$20.$$arity=0)}($nesting[0],0,$nesting),function($base,$super,$parent_nesting){var $nesting=[$klass($base,null,"Backtrace")].concat($parent_nesting);(function($base,$super,$parent_nesting){var $Location_initialize$21,$Location_to_s$22,$Location_inspect$23,self=$klass($base,null,"Location"),$nesting=[self].concat($parent_nesting);self.$$prototype.label=self.$$prototype.str=nil,Opal.def(self,"$initialize",$Location_initialize$21=function(str){var self=this,$ret_or_1=nil;return self.str=str,str["$=~"](/^(.*?):(\d+):(\d+):in `(.*?)'$/),self.path=$$($nesting,"Regexp").$last_match(1),self.label=$$($nesting,"Regexp").$last_match(4),self.lineno=$$($nesting,"Regexp").$last_match(2).$to_i(),self.label["$=~"](/(\w+)$/),self.base_label=$truthy($ret_or_1=$$($nesting,"Regexp").$last_match(1))?$ret_or_1:self.label},$Location_initialize$21.$$arity=1),Opal.def(self,"$to_s",$Location_to_s$22=function(){return this.str},$Location_to_s$22.$$arity=0),Opal.def(self,"$inspect",$Location_inspect$23=function(){return this.str.$inspect()},$Location_inspect$23.$$arity=0),self.$attr_reader("base_label","label","lineno","path"),$alias(self,"absolute_path","path")})($nesting[0],0,$nesting)}($nesting[0],0,$nesting)}($nesting[0],0,$nesting),Opal.const_set($nesting[0],"Queue",$$$($$($nesting,"Thread"),"Queue")),function($base,$super,$parent_nesting){var $Mutex_initialize$24,$Mutex_lock$25,$Mutex_locked$ques$26,$Mutex_owned$ques$27,$Mutex_try_lock$28,$Mutex_unlock$29,$Mutex_synchronize$30,self=$klass($base,null,"Mutex"),$nesting=[self].concat($parent_nesting);return self.$$prototype.locked=nil,Opal.def(self,"$initialize",$Mutex_initialize$24=function(){return this.locked=!1},$Mutex_initialize$24.$$arity=0),Opal.def(self,"$lock",$Mutex_lock$25=function(){return $truthy(this.locked)&&this.$raise($$($nesting,"ThreadError"),"Deadlock"),this.locked=!0,this},$Mutex_lock$25.$$arity=0),Opal.def(self,"$locked?",$Mutex_locked$ques$26=function(){return this.locked},$Mutex_locked$ques$26.$$arity=0),Opal.def(self,"$owned?",$Mutex_owned$ques$27=function(){return this.locked},$Mutex_owned$ques$27.$$arity=0),Opal.def(self,"$try_lock",$Mutex_try_lock$28=function(){return!$truthy(this["$locked?"]())&&(this.$lock(),!0)},$Mutex_try_lock$28.$$arity=0),Opal.def(self,"$unlock",$Mutex_unlock$29=function(){return $truthy(this.locked)||this.$raise($$($nesting,"ThreadError"),"Mutex not locked"),this.locked=!1,this},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$synchronize",$Mutex_synchronize$30=function(){var $iter=$Mutex_synchronize$30.$$p,$yield=$iter||nil,self=this;return $iter&&($Mutex_synchronize$30.$$p=null),self.$lock(),function(){try{return Opal.yieldX($yield,[])}finally{self.$unlock()}}()},$Mutex_synchronize$30.$$arity=0),nil&&"synchronize"}($nesting[0],0,$nesting)};
