Opal.modules.logger=function(Opal){function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$$=Opal.$$$,$$=Opal.$$,$klass=Opal.klass,$module=Opal.module,$send=Opal.send,$truthy=Opal.truthy;return Opal.add_stubs(["$include","$to_h","$map","$constants","$const_get","$to_s","$format","$chr","$strftime","$message_as_string","$===","$full_message","$inspect","$attr_reader","$attr_accessor","$new","$key","$upcase","$raise","$add","$to_proc","$<=","$<","$write","$call","$[]","$now"]),function($base,$super,$parent_nesting){var $Logger$1,$Logger_initialize$4,$Logger_level$eq$5,$Logger_info$6,$Logger_debug$7,$Logger_warn$8,$Logger_error$9,$Logger_fatal$10,$Logger_unknown$11,$Logger_info$ques$12,$Logger_debug$ques$13,$Logger_warn$ques$14,$Logger_error$ques$15,$Logger_fatal$ques$16,$Logger_add$17,self=$klass($base,null,"Logger"),$nesting=[self].concat($parent_nesting);return self.$$prototype.level=self.$$prototype.progname=self.$$prototype.pipe=self.$$prototype.formatter=nil,function($base,$parent_nesting){var $nesting=[$module($base,"Severity")].concat($parent_nesting);Opal.const_set($nesting[0],"DEBUG",0),Opal.const_set($nesting[0],"INFO",1),Opal.const_set($nesting[0],"WARN",2),Opal.const_set($nesting[0],"ERROR",3),Opal.const_set($nesting[0],"FATAL",4),Opal.const_set($nesting[0],"UNKNOWN",5)}($nesting[0],$nesting),self.$include($$($nesting,"Severity")),Opal.const_set($nesting[0],"SEVERITY_LABELS",$send($$($nesting,"Severity").$constants(),"map",[],($Logger$1=function(s){null==$Logger$1.$$s||$Logger$1.$$s;return null==s&&(s=nil),[$$($nesting,"Severity").$const_get(s),s.$to_s()]},$Logger$1.$$s=self,$Logger$1.$$arity=1,$Logger$1)).$to_h()),function($base,$super,$parent_nesting){var $Formatter_call$2,$Formatter_message_as_string$3,self=$klass($base,null,"Formatter"),$nesting=[self].concat($parent_nesting);Opal.const_set($nesting[0],"MESSAGE_FORMAT","%s, [%s] %5s -- %s: %s\n"),Opal.const_set($nesting[0],"DATE_TIME_FORMAT","%Y-%m-%dT%H:%M:%S.%6N"),Opal.def(self,"$call",$Formatter_call$2=function(severity,time,progname,msg){return this.$format($$($nesting,"MESSAGE_FORMAT"),severity.$chr(),time.$strftime($$($nesting,"DATE_TIME_FORMAT")),severity,progname,this.$message_as_string(msg))},$Formatter_call$2.$$arity=4),Opal.def(self,"$message_as_string",$Formatter_message_as_string$3=function(msg){var $case=nil;return $case=msg,$$$("::","String")["$==="]($case)?msg:$$$("::","Exception")["$==="]($case)?msg.$full_message():msg.$inspect()},$Formatter_message_as_string$3.$$arity=1)}($nesting[0],0,$nesting),self.$attr_reader("level"),self.$attr_accessor("progname"),self.$attr_accessor("formatter"),Opal.def(self,"$initialize",$Logger_initialize$4=function(pipe){return this.pipe=pipe,this.level=$$($nesting,"DEBUG"),this.formatter=$$($nesting,"Formatter").$new()},$Logger_initialize$4.$$arity=1),Opal.def(self,"$level=",$Logger_level$eq$5=function(severity){var level=nil;return $truthy($$$("::","Integer")["$==="](severity))?this.level=severity:$truthy(level=$$($nesting,"SEVERITY_LABELS").$key(severity.$to_s().$upcase()))?this.level=level:this.$raise($$($nesting,"ArgumentError"),"invalid log level: "+severity)},$Logger_level$eq$5.$$arity=1),Opal.def(self,"$info",$Logger_info$6=function(progname){var $iter=$Logger_info$6.$$p,block=$iter||nil;return $iter&&($Logger_info$6.$$p=null),$iter&&($Logger_info$6.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"INFO"),nil,progname],block.$to_proc())},$Logger_info$6.$$arity=-1),Opal.def(self,"$debug",$Logger_debug$7=function(progname){var $iter=$Logger_debug$7.$$p,block=$iter||nil;return $iter&&($Logger_debug$7.$$p=null),$iter&&($Logger_debug$7.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"DEBUG"),nil,progname],block.$to_proc())},$Logger_debug$7.$$arity=-1),Opal.def(self,"$warn",$Logger_warn$8=function(progname){var $iter=$Logger_warn$8.$$p,block=$iter||nil;return $iter&&($Logger_warn$8.$$p=null),$iter&&($Logger_warn$8.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"WARN"),nil,progname],block.$to_proc())},$Logger_warn$8.$$arity=-1),Opal.def(self,"$error",$Logger_error$9=function(progname){var $iter=$Logger_error$9.$$p,block=$iter||nil;return $iter&&($Logger_error$9.$$p=null),$iter&&($Logger_error$9.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"ERROR"),nil,progname],block.$to_proc())},$Logger_error$9.$$arity=-1),Opal.def(self,"$fatal",$Logger_fatal$10=function(progname){var $iter=$Logger_fatal$10.$$p,block=$iter||nil;return $iter&&($Logger_fatal$10.$$p=null),$iter&&($Logger_fatal$10.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"FATAL"),nil,progname],block.$to_proc())},$Logger_fatal$10.$$arity=-1),Opal.def(self,"$unknown",$Logger_unknown$11=function(progname){var $iter=$Logger_unknown$11.$$p,block=$iter||nil;return $iter&&($Logger_unknown$11.$$p=null),$iter&&($Logger_unknown$11.$$p=null),null==progname&&(progname=nil),$send(this,"add",[$$($nesting,"UNKNOWN"),nil,progname],block.$to_proc())},$Logger_unknown$11.$$arity=-1),Opal.def(self,"$info?",$Logger_info$ques$12=function(){return $rb_le(this.level,$$($nesting,"INFO"))},$Logger_info$ques$12.$$arity=0),Opal.def(self,"$debug?",$Logger_debug$ques$13=function(){return $rb_le(this.level,$$($nesting,"DEBUG"))},$Logger_debug$ques$13.$$arity=0),Opal.def(self,"$warn?",$Logger_warn$ques$14=function(){return $rb_le(this.level,$$($nesting,"WARN"))},$Logger_warn$ques$14.$$arity=0),Opal.def(self,"$error?",$Logger_error$ques$15=function(){return $rb_le(this.level,$$($nesting,"ERROR"))},$Logger_error$ques$15.$$arity=0),Opal.def(self,"$fatal?",$Logger_fatal$ques$16=function(){return $rb_le(this.level,$$($nesting,"FATAL"))},$Logger_fatal$ques$16.$$arity=0),Opal.def(self,"$add",$Logger_add$17=function(severity,message,progname){var lhs,rhs,$iter=$Logger_add$17.$$p,block=$iter||nil,self=this,$ret_or_1=nil,$ret_or_2=nil,$ret_or_3=nil;return $iter&&($Logger_add$17.$$p=null),$iter&&($Logger_add$17.$$p=null),null==message&&(message=nil),null==progname&&(progname=nil),$truthy((lhs=severity=$truthy($ret_or_1=severity)?$ret_or_1:$$($nesting,"UNKNOWN"),rhs=self.level,"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)))||(progname=$truthy($ret_or_2=progname)?$ret_or_2:self.progname,$truthy(message)||(block!==nil?message=Opal.yieldX(block,[]):(message=progname,progname=self.progname)),self.pipe.$write(self.formatter.$call($truthy($ret_or_3=$$($nesting,"SEVERITY_LABELS")["$[]"](severity))?$ret_or_3:"ANY",$$$("::","Time").$now(),progname,message))),!0},$Logger_add$17.$$arity=-2),nil&&"add"}($nesting[0],0,$nesting)};
