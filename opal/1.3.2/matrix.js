Opal.modules["e2mmap"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias, $hash2 = Opal.hash2, $gvars = Opal.gvars, $enc = Opal.enc;

  Opal.add_stubs(['$<', '$bind', '$module_eval', '$Raise', '$class', '$extend', '$def_e2message', '$def_exception', '$instance_eval', '$[]=', '$-', '$new', '$const_defined?', '$remove_const', '$const_set', '$e2mm_message', '$nil?', '$caller', '$=~', '$[]', '$quote', '$shift', '$raise', '$sprintf', '$Fail', '$inspect', '$each', '$ancestors']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Exception2MessageMapper');

    var $nesting = [self].concat($parent_nesting), $Exception2MessageMapper_extend_object$1, $Exception2MessageMapper_bind$2, $Exception2MessageMapper_Raise$6, $Exception2MessageMapper_def_e2message$7, $Exception2MessageMapper_def_exception$8, $Exception2MessageMapper_def_e2message$9, $Exception2MessageMapper_def_exception$11, $Exception2MessageMapper_Raise$14, $Exception2MessageMapper_e2mm_message$15;

    
    Opal.const_set($nesting[0], 'E2MM', $$($nesting, 'Exception2MessageMapper'));
    Opal.defs($$($nesting, 'E2MM'), '$extend_object', $Exception2MessageMapper_extend_object$1 = function $$extend_object(cl) {
      var $iter = $Exception2MessageMapper_extend_object$1.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Exception2MessageMapper_extend_object$1.$$p = null;
      
      $send2(self, $find_super(self, 'extend_object', $Exception2MessageMapper_extend_object$1, false, true), 'extend_object', [cl], $iter);
      if ($truthy($rb_lt(cl, $$($nesting, 'E2MM')))) {
        return nil
      } else {
        return cl.$bind(self)
      };
    }, $Exception2MessageMapper_extend_object$1.$$arity = 1);
    
    Opal.def(self, '$bind', $Exception2MessageMapper_bind$2 = function $$bind(cl) {
      var $$3, self = this;

      return $send(self, 'module_eval', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $Raise$4, $included$5;

        
        
        Opal.def(self, '$Raise', $Raise$4 = function $$Raise($a, $b) {
          var $post_args, err, rest, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          if ($post_args.length > 0) {
            err = $post_args[0];
            $post_args.splice(0, 1);
          }
          if (err == null) {
            err = nil;
          };
          
          rest = $post_args;;
          return $send($$($nesting, 'Exception2MessageMapper'), 'Raise', [self.$class(), err].concat(Opal.to_a(rest)));
        }, $Raise$4.$$arity = -1);
        $alias(self, "Fail", "Raise");
        (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting);

          
          
          Opal.udef(self, '$' + "included");;
          return nil;
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.defs(self, '$included', $included$5 = function $$included(mod) {
          var self = this;

          return mod.$extend($$($nesting, 'Exception2MessageMapper'))
        }, $included$5.$$arity = 1), nil) && 'included';}, $$3.$$s = self, $$3.$$arity = 0, $$3))
    }, $Exception2MessageMapper_bind$2.$$arity = 1);
    
    Opal.def(self, '$Raise', $Exception2MessageMapper_Raise$6 = function $$Raise($a, $b) {
      var $post_args, err, rest, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        err = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (err == null) {
        err = nil;
      };
      
      rest = $post_args;;
      return $send($$($nesting, 'E2MM'), 'Raise', [self, err].concat(Opal.to_a(rest)));
    }, $Exception2MessageMapper_Raise$6.$$arity = -1);
    $alias(self, "Fail", "Raise");
    $alias(self, "fail", "Raise");
    
    Opal.def(self, '$def_e2message', $Exception2MessageMapper_def_e2message$7 = function $$def_e2message(c, m) {
      var self = this;

      return $$($nesting, 'E2MM').$def_e2message(self, c, m)
    }, $Exception2MessageMapper_def_e2message$7.$$arity = 2);
    
    Opal.def(self, '$def_exception', $Exception2MessageMapper_def_exception$8 = function $$def_exception(n, m, s) {
      var self = this;

      
      
      if (s == null) {
        s = $$($nesting, 'StandardError');
      };
      return $$($nesting, 'E2MM').$def_exception(self, n, m, s);
    }, $Exception2MessageMapper_def_exception$8.$$arity = -3);
    self.MessageMap = $hash2([], {});
    Opal.defs($$($nesting, 'E2MM'), '$def_e2message', $Exception2MessageMapper_def_e2message$9 = function $$def_e2message(k, c, m) {
      var $$10, self = this;

      
      $send($$($nesting, 'E2MM'), 'instance_eval', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, $writer = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

        
        $writer = [[k, c], m];
        $send(self.MessageMap, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$10.$$s = self, $$10.$$arity = 0, $$10));
      return c;
    }, $Exception2MessageMapper_def_e2message$9.$$arity = 3);
    Opal.defs($$($nesting, 'E2MM'), '$def_exception', $Exception2MessageMapper_def_exception$11 = function $$def_exception(k, n, m, s) {
      var $$12, $$13, self = this, e = nil;

      
      
      if (s == null) {
        s = $$($nesting, 'StandardError');
      };
      e = $$($nesting, 'Class').$new(s);
      $send($$($nesting, 'E2MM'), 'instance_eval', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s, $writer = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

        
        $writer = [[k, e], m];
        $send(self.MessageMap, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$12.$$s = self, $$12.$$arity = 0, $$12));
      if ($truthy(k['$const_defined?'](n, false))) {
        $send(k, 'module_eval', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s;

          return self.$remove_const(n)}, $$13.$$s = self, $$13.$$arity = 0, $$13))};
      return k.$const_set(n, e);
    }, $Exception2MessageMapper_def_exception$11.$$arity = -4);
    Opal.defs($$($nesting, 'E2MM'), '$Raise', $Exception2MessageMapper_Raise$14 = function $$Raise($a, $b, $c) {
      var $post_args, klass, err, rest, self = this, form = nil, b = nil;
      if ($gvars["@"] == null) $gvars["@"] = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'E2MM');
      };
      
      if ($post_args.length > 0) {
        err = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (err == null) {
        err = nil;
      };
      
      rest = $post_args;;
      if ($truthy((form = self.$e2mm_message(klass, err)))) {
        
        b = (function() {if ($truthy($gvars["@"]['$nil?']())) {
          return self.$caller(1)
        } else {
          return $gvars["@"]
        }; return nil; })();
        if ($truthy(b['$[]'](0)['$=~'](Opal.regexp(["^", $$($nesting, 'Regexp').$quote($enc("./e2mmap.rb", "US-ASCII")), ":"])))) {
          b.$shift()};
        return self.$raise(err, $send(self, 'sprintf', [form].concat(Opal.to_a(rest))), b);
      } else {
        return $$($nesting, 'E2MM').$Fail($$($nesting, 'E2MM'), $$($nesting, 'ErrNotRegisteredException'), err.$inspect())
      };
    }, $Exception2MessageMapper_Raise$14.$$arity = -1);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return $alias(self, "Fail", "Raise")
    })(Opal.get_singleton_class($$($nesting, 'E2MM')), $nesting);
    Opal.defs($$($nesting, 'E2MM'), '$e2mm_message', $Exception2MessageMapper_e2mm_message$15 = function $$e2mm_message(klass, exp) {try {

      var $$16, self = this;

      
      $send(klass.$ancestors(), 'each', [], ($$16 = function(c){var self = $$16.$$s == null ? this : $$16.$$s, mes = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

        
        
        if (c == null) {
          c = nil;
        };
        if ($truthy((mes = self.MessageMap['$[]']([c, exp])))) {
          Opal.ret(mes)
        } else {
          return nil
        };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Exception2MessageMapper_e2mm_message$15.$$arity = 2);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return $alias(self, "message", "e2mm_message")
    })(Opal.get_singleton_class(self), $nesting);
    return $$($nesting, 'E2MM').$def_exception($$($nesting, 'E2MM'), "ErrNotRegisteredException", "not registered exception(%s)");
  })($nesting[0], $nesting)
};

Opal.modules["matrix/eigenvalue_decomposition"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $alias = Opal.alias;

  Opal.add_stubs(['$is_a?', '$raise', '$class', '$row_count', '$new', '$symmetric?', '$to_a', '$tridiagonalize', '$diagonalize', '$reduce_to_hessenberg', '$hessenberg_to_real_schur', '$send', '$transpose', '$build_eigenvectors', '$inverse', '$dup', '$each_with_index', '$==', '$Complex', '$[]', '$[]=', '$-', '$map', '$diagonal', '$eigenvalues', '$v', '$d', '$v_inv', '$alias_method', '$private', '$>', '$+', '$-@', '$abs', '$/', '$*', '$times', '$downto', '$sqrt', '$upto', '$!=', '$max', '$<', '$<=', '$hypot', '$>=', '$min', '$cdiv']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EigenvalueDecomposition');

      var $nesting = [self].concat($parent_nesting), $EigenvalueDecomposition_initialize$1, $EigenvalueDecomposition_eigenvector_matrix$3, $EigenvalueDecomposition_eigenvector_matrix_inv$4, $EigenvalueDecomposition_eigenvalues$5, $EigenvalueDecomposition_eigenvectors$7, $EigenvalueDecomposition_eigenvalue_matrix$9, $EigenvalueDecomposition_to_ary$10, $EigenvalueDecomposition_build_eigenvectors$11, $EigenvalueDecomposition_cdiv$16, $EigenvalueDecomposition_tridiagonalize$17, $EigenvalueDecomposition_diagonalize$37, $EigenvalueDecomposition_reduce_to_hessenberg$46, $EigenvalueDecomposition_hessenberg_to_real_schur$63;

      self.$$prototype.size = self.$$prototype.symmetric = self.$$prototype.d = self.$$prototype.e = self.$$prototype.v = self.$$prototype.h = nil;
      
      
      Opal.def(self, '$initialize', $EigenvalueDecomposition_initialize$1 = function $$initialize(a) {
        var $$2, self = this;

        
        if ($truthy(a['$is_a?']($$($nesting, 'Matrix')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected Matrix but got " + (a.$class()))
        };
        self.size = a.$row_count();
        self.d = $$($nesting, 'Array').$new(self.size, 0);
        self.e = $$($nesting, 'Array').$new(self.size, 0);
        if ($truthy((self.symmetric = a['$symmetric?']()))) {
          
          self.v = a.$to_a();
          self.$tridiagonalize();
          return self.$diagonalize();
        } else {
          
          self.v = $send($$($nesting, 'Array'), 'new', [self.size], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;
            if (self.size == null) self.size = nil;

            return $$($nesting, 'Array').$new(self.size, 0)}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.h = a.$to_a();
          self.ort = $$($nesting, 'Array').$new(self.size, 0);
          self.$reduce_to_hessenberg();
          return self.$hessenberg_to_real_schur();
        };
      }, $EigenvalueDecomposition_initialize$1.$$arity = 1);
      
      Opal.def(self, '$eigenvector_matrix', $EigenvalueDecomposition_eigenvector_matrix$3 = function $$eigenvector_matrix() {
        var self = this;

        return $$($nesting, 'Matrix').$send("new", self.$build_eigenvectors().$transpose())
      }, $EigenvalueDecomposition_eigenvector_matrix$3.$$arity = 0);
      $alias(self, "v", "eigenvector_matrix");
      
      Opal.def(self, '$eigenvector_matrix_inv', $EigenvalueDecomposition_eigenvector_matrix_inv$4 = function $$eigenvector_matrix_inv() {
        var self = this, r = nil;

        
        r = $$($nesting, 'Matrix').$send("new", self.$build_eigenvectors());
        if ($truthy(self.symmetric)) {
        } else {
          r = r.$transpose().$inverse()
        };
        return r;
      }, $EigenvalueDecomposition_eigenvector_matrix_inv$4.$$arity = 0);
      $alias(self, "v_inv", "eigenvector_matrix_inv");
      
      Opal.def(self, '$eigenvalues', $EigenvalueDecomposition_eigenvalues$5 = function $$eigenvalues() {
        var $$6, self = this, values = nil;

        
        values = self.d.$dup();
        $send(self.e, 'each_with_index', [], ($$6 = function(imag, i){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

          
          
          if (imag == null) {
            imag = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          if (imag['$=='](0)) {
            return nil
          } else {
            
            $writer = [i, self.$Complex(values['$[]'](i), imag)];
            $send(values, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };}, $$6.$$s = self, $$6.$$arity = 2, $$6));
        return values;
      }, $EigenvalueDecomposition_eigenvalues$5.$$arity = 0);
      
      Opal.def(self, '$eigenvectors', $EigenvalueDecomposition_eigenvectors$7 = function $$eigenvectors() {
        var $$8, self = this;

        return $send(self.$build_eigenvectors(), 'map', [], ($$8 = function(ev){var self = $$8.$$s == null ? this : $$8.$$s;

          
          
          if (ev == null) {
            ev = nil;
          };
          return $$($nesting, 'Vector').$send("new", ev);}, $$8.$$s = self, $$8.$$arity = 1, $$8))
      }, $EigenvalueDecomposition_eigenvectors$7.$$arity = 0);
      
      Opal.def(self, '$eigenvalue_matrix', $EigenvalueDecomposition_eigenvalue_matrix$9 = function $$eigenvalue_matrix() {
        var self = this;

        return $send($$($nesting, 'Matrix'), 'diagonal', Opal.to_a(self.$eigenvalues()))
      }, $EigenvalueDecomposition_eigenvalue_matrix$9.$$arity = 0);
      $alias(self, "d", "eigenvalue_matrix");
      
      Opal.def(self, '$to_ary', $EigenvalueDecomposition_to_ary$10 = function $$to_ary() {
        var self = this;

        return [self.$v(), self.$d(), self.$v_inv()]
      }, $EigenvalueDecomposition_to_ary$10.$$arity = 0);
      self.$alias_method("to_a", "to_ary");
      self.$private();
      
      Opal.def(self, '$build_eigenvectors', $EigenvalueDecomposition_build_eigenvectors$11 = function $$build_eigenvectors() {
        var $$12, self = this;

        return $send(self.e.$each_with_index(), 'map', [], ($$12 = function(imag, i){var self = $$12.$$s == null ? this : $$12.$$s, $$13, $$14, $$15;
          if (self.size == null) self.size = nil;

          
          
          if (imag == null) {
            imag = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          if (imag['$=='](0)) {
            return $send($$($nesting, 'Array'), 'new', [self.size], ($$13 = function(j){var self = $$13.$$s == null ? this : $$13.$$s;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              return self.v['$[]'](j)['$[]'](i);}, $$13.$$s = self, $$13.$$arity = 1, $$13))
          } else if ($truthy($rb_gt(imag, 0))) {
            return $send($$($nesting, 'Array'), 'new', [self.size], ($$14 = function(j){var self = $$14.$$s == null ? this : $$14.$$s;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              return self.$Complex(self.v['$[]'](j)['$[]'](i), self.v['$[]'](j)['$[]']($rb_plus(i, 1)));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          } else {
            return $send($$($nesting, 'Array'), 'new', [self.size], ($$15 = function(j){var self = $$15.$$s == null ? this : $$15.$$s;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              return self.$Complex(self.v['$[]'](j)['$[]']($rb_minus(i, 1)), self.v['$[]'](j)['$[]'](i)['$-@']());}, $$15.$$s = self, $$15.$$arity = 1, $$15))
          };}, $$12.$$s = self, $$12.$$arity = 2, $$12))
      }, $EigenvalueDecomposition_build_eigenvectors$11.$$arity = 0);
      
      Opal.def(self, '$cdiv', $EigenvalueDecomposition_cdiv$16 = function $$cdiv(xr, xi, yr, yi) {
        var self = this, r = nil, d = nil;

        if ($truthy($rb_gt(yr.$abs(), yi.$abs()))) {
          
          r = $rb_divide(yi, yr);
          d = $rb_plus(yr, $rb_times(r, yi));
          return [$rb_divide($rb_plus(xr, $rb_times(r, xi)), d), $rb_divide($rb_minus(xi, $rb_times(r, xr)), d)];
        } else {
          
          r = $rb_divide(yr, yi);
          d = $rb_plus(yi, $rb_times(r, yr));
          return [$rb_divide($rb_plus($rb_times(r, xr), xi), d), $rb_divide($rb_minus($rb_times(r, xi), xr), d)];
        }
      }, $EigenvalueDecomposition_cdiv$16.$$arity = 4);
      
      Opal.def(self, '$tridiagonalize', $EigenvalueDecomposition_tridiagonalize$17 = function $$tridiagonalize() {
        var $$18, $$19, $$30, $$36, self = this, $writer = nil;

        
        $send(self.size, 'times', [], ($$18 = function(j){var self = $$18.$$s == null ? this : $$18.$$s, $writer = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

          
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j)];
          $send(self.d, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        $send($rb_minus(self.size, 1), 'downto', [$rb_plus(0, 1)], ($$19 = function(i){var self = $$19.$$s == null ? this : $$19.$$s, $$20, $$21, $$22, $$23, $$24, $$26, $$27, $$28, scale = nil, h = nil, $writer = nil, f = nil, g = nil, hh = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;

          
          
          if (i == null) {
            i = nil;
          };
          scale = 0.0;
          h = 0.0;
          $send(i, 'times', [], ($$20 = function(k){var self = $$20.$$s == null ? this : $$20.$$s;
            if (self.d == null) self.d = nil;

            
            
            if (k == null) {
              k = nil;
            };
            return (scale = $rb_plus(scale, self.d['$[]'](k).$abs()));}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          if ($truthy(scale['$=='](0.0))) {
            
            
            $writer = [i, self.d['$[]']($rb_minus(i, 1))];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(i, 'times', [], ($$21 = function(j){var self = $$21.$$s == null ? this : $$21.$$s;
              if (self.v == null) self.v = nil;
              if (self.d == null) self.d = nil;

              
              
              if (j == null) {
                j = nil;
              };
              
              $writer = [j, self.v['$[]']($rb_minus(i, 1))['$[]'](j)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [j, 0.0];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [i, 0.0];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          } else {
            
            $send(i, 'times', [], ($$22 = function(k){var self = $$22.$$s == null ? this : $$22.$$s;
              if (self.d == null) self.d = nil;

              
              
              if (k == null) {
                k = nil;
              };
              
              $writer = [k, $rb_divide(self.d['$[]'](k), scale)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (h = $rb_plus(h, $rb_times(self.d['$[]'](k), self.d['$[]'](k))));}, $$22.$$s = self, $$22.$$arity = 1, $$22));
            f = self.d['$[]']($rb_minus(i, 1));
            g = $$($nesting, 'Math').$sqrt(h);
            if ($truthy($rb_gt(f, 0))) {
              g = g['$-@']()};
            
            $writer = [i, $rb_times(scale, g)];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            h = $rb_minus(h, $rb_times(f, g));
            
            $writer = [$rb_minus(i, 1), $rb_minus(f, g)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(i, 'times', [], ($$23 = function(j){var self = $$23.$$s == null ? this : $$23.$$s;
              if (self.e == null) self.e = nil;

              
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$23.$$s = self, $$23.$$arity = 1, $$23));
            $send(i, 'times', [], ($$24 = function(j){var self = $$24.$$s == null ? this : $$24.$$s, $$25;
              if (self.d == null) self.d = nil;
              if (self.v == null) self.v = nil;
              if (self.e == null) self.e = nil;

              
              
              if (j == null) {
                j = nil;
              };
              f = self.d['$[]'](j);
              
              $writer = [i, f];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              g = $rb_plus(self.e['$[]'](j), $rb_times(self.v['$[]'](j)['$[]'](j), f));
              $send($rb_plus(j, 1), 'upto', [$rb_minus(i, 1)], ($$25 = function(k){var self = $$25.$$s == null ? this : $$25.$$s;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;
                if (self.e == null) self.e = nil;

                
                
                if (k == null) {
                  k = nil;
                };
                g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]'](j), self.d['$[]'](k)));
                
                $writer = [k, $rb_plus(self.e['$[]'](k), $rb_times(self.v['$[]'](k)['$[]'](j), f))];
                $send(self.e, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$25.$$s = self, $$25.$$arity = 1, $$25));
              
              $writer = [j, g];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            f = 0.0;
            $send(i, 'times', [], ($$26 = function(j){var self = $$26.$$s == null ? this : $$26.$$s;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              
              if (j == null) {
                j = nil;
              };
              
              $writer = [j, $rb_divide(self.e['$[]'](j), h)];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (f = $rb_plus(f, $rb_times(self.e['$[]'](j), self.d['$[]'](j))));}, $$26.$$s = self, $$26.$$arity = 1, $$26));
            hh = $rb_divide(f, $rb_plus(h, h));
            $send(i, 'times', [], ($$27 = function(j){var self = $$27.$$s == null ? this : $$27.$$s;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, $rb_minus(self.e['$[]'](j), $rb_times(hh, self.d['$[]'](j)))];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$27.$$s = self, $$27.$$arity = 1, $$27));
            $send(i, 'times', [], ($$28 = function(j){var self = $$28.$$s == null ? this : $$28.$$s, $$29;
              if (self.d == null) self.d = nil;
              if (self.e == null) self.e = nil;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              f = self.d['$[]'](j);
              g = self.e['$[]'](j);
              $send(j, 'upto', [$rb_minus(i, 1)], ($$29 = function(k){var self = $$29.$$s == null ? this : $$29.$$s, $binary_op_recvr_tmp_3 = nil;
                if (self.v == null) self.v = nil;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;

                
                
                if (k == null) {
                  k = nil;
                };
                $binary_op_recvr_tmp_3 = self.v['$[]'](k);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_3['$[]'](j), $rb_plus($rb_times(f, self.e['$[]'](k)), $rb_times(g, self.d['$[]'](k))))];
                $send($binary_op_recvr_tmp_3, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$29.$$s = self, $$29.$$arity = 1, $$29));
              
              $writer = [j, self.v['$[]']($rb_minus(i, 1))['$[]'](j)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [j, 0.0];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$28.$$s = self, $$28.$$arity = 1, $$28));
          };
          
          $writer = [i, h];
          $send(self.d, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$19.$$s = self, $$19.$$arity = 1, $$19));
        $send((0), 'upto', [$rb_minus($rb_minus(self.size, 1), 1)], ($$30 = function(i){var self = $$30.$$s == null ? this : $$30.$$s, $$31, $$32, $$35, $writer = nil, h = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

          
          
          if (i == null) {
            i = nil;
          };
          
          $writer = [i, self.v['$[]'](i)['$[]'](i)];
          $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [i, 1.0];
          $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          h = self.d['$[]']($rb_plus(i, 1));
          if ($truthy(h['$!='](0.0))) {
            
            $send((0), 'upto', [i], ($$31 = function(k){var self = $$31.$$s == null ? this : $$31.$$s;
              if (self.v == null) self.v = nil;
              if (self.d == null) self.d = nil;

              
              
              if (k == null) {
                k = nil;
              };
              $writer = [k, $rb_divide(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), h)];
              $send(self.d, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$31.$$s = self, $$31.$$arity = 1, $$31));
            $send((0), 'upto', [i], ($$32 = function(j){var self = $$32.$$s == null ? this : $$32.$$s, $$33, $$34, g = nil;

              
              
              if (j == null) {
                j = nil;
              };
              g = 0.0;
              $send((0), 'upto', [i], ($$33 = function(k){var self = $$33.$$s == null ? this : $$33.$$s;
                if (self.v == null) self.v = nil;

                
                
                if (k == null) {
                  k = nil;
                };
                return (g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), self.v['$[]'](k)['$[]'](j))));}, $$33.$$s = self, $$33.$$arity = 1, $$33));
              return $send((0), 'upto', [i], ($$34 = function(k){var self = $$34.$$s == null ? this : $$34.$$s, $binary_op_recvr_tmp_4 = nil;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;

                
                
                if (k == null) {
                  k = nil;
                };
                $binary_op_recvr_tmp_4 = self.v['$[]'](k);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_4['$[]'](j), $rb_times(g, self.d['$[]'](k)))];
                $send($binary_op_recvr_tmp_4, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$34.$$s = self, $$34.$$arity = 1, $$34));}, $$32.$$s = self, $$32.$$arity = 1, $$32));};
          return $send((0), 'upto', [i], ($$35 = function(k){var self = $$35.$$s == null ? this : $$35.$$s;
            if (self.v == null) self.v = nil;

            
            
            if (k == null) {
              k = nil;
            };
            $writer = [$rb_plus(i, 1), 0.0];
            $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$35.$$s = self, $$35.$$arity = 1, $$35));}, $$30.$$s = self, $$30.$$arity = 1, $$30));
        $send(self.size, 'times', [], ($$36 = function(j){var self = $$36.$$s == null ? this : $$36.$$s, $writer = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

          
          
          if (j == null) {
            j = nil;
          };
          
          $writer = [j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j)];
          $send(self.d, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [j, 0.0];
          $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$36.$$s = self, $$36.$$arity = 1, $$36));
        
        $writer = [$rb_minus(self.size, 1), 1.0];
        $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [0, 0.0];
        $send(self.e, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $EigenvalueDecomposition_tridiagonalize$17.$$arity = 0);
      
      Opal.def(self, '$diagonalize', $EigenvalueDecomposition_diagonalize$37 = function $$diagonalize() {
        var $$38, $$39, $$43, self = this, $writer = nil, f = nil, tst1 = nil, eps = nil;

        
        $send((1), 'upto', [$rb_minus(self.size, 1)], ($$38 = function(i){var self = $$38.$$s == null ? this : $$38.$$s, $writer = nil;
          if (self.e == null) self.e = nil;

          
          
          if (i == null) {
            i = nil;
          };
          $writer = [$rb_minus(i, 1), self.e['$[]'](i)];
          $send(self.e, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$38.$$s = self, $$38.$$arity = 1, $$38));
        
        $writer = [$rb_minus(self.size, 1), 0.0];
        $send(self.e, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        f = 0.0;
        tst1 = 0.0;
        eps = $$$($$($nesting, 'Float'), 'EPSILON');
        $send(self.size, 'times', [], ($$39 = function(l){var self = $$39.$$s == null ? this : $$39.$$s, $a, $$40, $$41, m = nil, iter = nil, g = nil, p = nil, r = nil, dl1 = nil, h = nil, c = nil, c2 = nil, c3 = nil, el1 = nil, s = nil, s2 = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.size == null) self.size = nil;

          
          
          if (l == null) {
            l = nil;
          };
          tst1 = [tst1, $rb_plus(self.d['$[]'](l).$abs(), self.e['$[]'](l).$abs())].$max();
          m = l;
          while ($truthy($rb_lt(m, self.size))) {
            
            if ($truthy($rb_le(self.e['$[]'](m).$abs(), $rb_times(eps, tst1)))) {
              break;};
            m = $rb_plus(m, 1);
          };
          if ($truthy($rb_gt(m, l))) {
            
            iter = 0;
            do {
              
              iter = $rb_plus(iter, 1);
              g = self.d['$[]'](l);
              p = $rb_divide($rb_minus(self.d['$[]']($rb_plus(l, 1)), g), $rb_times(2.0, self.e['$[]'](l)));
              r = $$($nesting, 'Math').$hypot(p, 1.0);
              if ($truthy($rb_lt(p, 0))) {
                r = r['$-@']()};
              
              $writer = [l, $rb_divide(self.e['$[]'](l), $rb_plus(p, r))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(l, 1), $rb_times(self.e['$[]'](l), $rb_plus(p, r))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              dl1 = self.d['$[]']($rb_plus(l, 1));
              h = $rb_minus(g, self.d['$[]'](l));
              $send($rb_plus(l, 2), 'upto', [$rb_minus(self.size, 1)], ($$40 = function(i){var self = $$40.$$s == null ? this : $$40.$$s;
                if (self.d == null) self.d = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                $writer = [i, $rb_minus(self.d['$[]'](i), h)];
                $send(self.d, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$40.$$s = self, $$40.$$arity = 1, $$40));
              f = $rb_plus(f, h);
              p = self.d['$[]'](m);
              c = 1.0;
              c2 = c;
              c3 = c;
              el1 = self.e['$[]']($rb_plus(l, 1));
              s = 0.0;
              s2 = 0.0;
              $send($rb_minus(m, 1), 'downto', [l], ($$41 = function(i){var self = $$41.$$s == null ? this : $$41.$$s, $$42;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;
                if (self.size == null) self.size = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                c3 = c2;
                c2 = c;
                s2 = s;
                g = $rb_times(c, self.e['$[]'](i));
                h = $rb_times(c, p);
                r = $$($nesting, 'Math').$hypot(p, self.e['$[]'](i));
                
                $writer = [$rb_plus(i, 1), $rb_times(s, r)];
                $send(self.e, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                s = $rb_divide(self.e['$[]'](i), r);
                c = $rb_divide(p, r);
                p = $rb_minus($rb_times(c, self.d['$[]'](i)), $rb_times(s, g));
                
                $writer = [$rb_plus(i, 1), $rb_plus(h, $rb_times(s, $rb_plus($rb_times(c, g), $rb_times(s, self.d['$[]'](i)))))];
                $send(self.d, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                return $send(self.size, 'times', [], ($$42 = function(k){var self = $$42.$$s == null ? this : $$42.$$s;
                  if (self.v == null) self.v = nil;

                  
                  
                  if (k == null) {
                    k = nil;
                  };
                  h = self.v['$[]'](k)['$[]']($rb_plus(i, 1));
                  
                  $writer = [$rb_plus(i, 1), $rb_plus($rb_times(s, self.v['$[]'](k)['$[]'](i)), $rb_times(c, h))];
                  $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [i, $rb_minus($rb_times(c, self.v['$[]'](k)['$[]'](i)), $rb_times(s, h))];
                  $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$42.$$s = self, $$42.$$arity = 1, $$42));}, $$41.$$s = self, $$41.$$arity = 1, $$41));
              p = $rb_divide($rb_times($rb_times($rb_times($rb_times(s['$-@'](), s2), c3), el1), self.e['$[]'](l)), dl1);
              
              $writer = [l, $rb_times(s, p)];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [l, $rb_times(c, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } while ($truthy($rb_gt(self.e['$[]'](l).$abs(), $rb_times(eps, tst1))));;};
          
          $writer = [l, $rb_plus(self.d['$[]'](l), f)];
          $send(self.d, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [l, 0.0];
          $send(self.e, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, $$39.$$s = self, $$39.$$arity = 1, $$39));
        return $send((0), 'upto', [$rb_minus(self.size, 2)], ($$43 = function(i){var self = $$43.$$s == null ? this : $$43.$$s, $$44, $$45, k = nil, p = nil;
          if (self.d == null) self.d = nil;
          if (self.size == null) self.size = nil;

          
          
          if (i == null) {
            i = nil;
          };
          k = i;
          p = self.d['$[]'](i);
          $send($rb_plus(i, 1), 'upto', [$rb_minus(self.size, 1)], ($$44 = function(j){var self = $$44.$$s == null ? this : $$44.$$s;
            if (self.d == null) self.d = nil;

            
            
            if (j == null) {
              j = nil;
            };
            if ($truthy($rb_lt(self.d['$[]'](j), p))) {
              
              k = j;
              return (p = self.d['$[]'](j));
            } else {
              return nil
            };}, $$44.$$s = self, $$44.$$arity = 1, $$44));
          if ($truthy(k['$!='](i))) {
            
            
            $writer = [k, self.d['$[]'](i)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [i, p];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(self.size, 'times', [], ($$45 = function(j){var self = $$45.$$s == null ? this : $$45.$$s;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              p = self.v['$[]'](j)['$[]'](i);
              
              $writer = [i, self.v['$[]'](j)['$[]'](k)];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [k, p];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$45.$$s = self, $$45.$$arity = 1, $$45));
          } else {
            return nil
          };}, $$43.$$s = self, $$43.$$arity = 1, $$43));
      }, $EigenvalueDecomposition_diagonalize$37.$$arity = 0);
      
      Opal.def(self, '$reduce_to_hessenberg', $EigenvalueDecomposition_reduce_to_hessenberg$46 = function $$reduce_to_hessenberg() {
        var $$47, $$56, $$58, self = this, low = nil, high = nil;

        
        low = 0;
        high = $rb_minus(self.size, 1);
        $send($rb_plus(low, 1), 'upto', [$rb_minus(high, 1)], ($$47 = function(m){var self = $$47.$$s == null ? this : $$47.$$s, $$48, $$49, $$50, $$53, scale = nil, h = nil, g = nil, $writer = nil;
          if (self.ort == null) self.ort = nil;
          if (self.size == null) self.size = nil;
          if (self.h == null) self.h = nil;

          
          
          if (m == null) {
            m = nil;
          };
          scale = 0.0;
          $send(m, 'upto', [high], ($$48 = function(i){var self = $$48.$$s == null ? this : $$48.$$s;
            if (self.h == null) self.h = nil;

            
            
            if (i == null) {
              i = nil;
            };
            return (scale = $rb_plus(scale, self.h['$[]'](i)['$[]']($rb_minus(m, 1)).$abs()));}, $$48.$$s = self, $$48.$$arity = 1, $$48));
          if ($truthy(scale['$!='](0.0))) {
            
            h = 0.0;
            $send(high, 'downto', [m], ($$49 = function(i){var self = $$49.$$s == null ? this : $$49.$$s, $writer = nil;
              if (self.h == null) self.h = nil;
              if (self.ort == null) self.ort = nil;

              
              
              if (i == null) {
                i = nil;
              };
              
              $writer = [i, $rb_divide(self.h['$[]'](i)['$[]']($rb_minus(m, 1)), scale)];
              $send(self.ort, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (h = $rb_plus(h, $rb_times(self.ort['$[]'](i), self.ort['$[]'](i))));}, $$49.$$s = self, $$49.$$arity = 1, $$49));
            g = $$($nesting, 'Math').$sqrt(h);
            if ($truthy($rb_gt(self.ort['$[]'](m), 0))) {
              g = g['$-@']()};
            h = $rb_minus(h, $rb_times(self.ort['$[]'](m), g));
            
            $writer = [m, $rb_minus(self.ort['$[]'](m), g)];
            $send(self.ort, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(m, 'upto', [$rb_minus(self.size, 1)], ($$50 = function(j){var self = $$50.$$s == null ? this : $$50.$$s, $$51, $$52, f = nil;

              
              
              if (j == null) {
                j = nil;
              };
              f = 0.0;
              $send(high, 'downto', [m], ($$51 = function(i){var self = $$51.$$s == null ? this : $$51.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](i), self.h['$[]'](i)['$[]'](j))));}, $$51.$$s = self, $$51.$$arity = 1, $$51));
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], ($$52 = function(i){var self = $$52.$$s == null ? this : $$52.$$s, $binary_op_recvr_tmp_5 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_5 = self.h['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_5['$[]'](j), $rb_times(f, self.ort['$[]'](i)))];
                $send($binary_op_recvr_tmp_5, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$52.$$s = self, $$52.$$arity = 1, $$52));}, $$50.$$s = self, $$50.$$arity = 1, $$50));
            $send((0), 'upto', [high], ($$53 = function(i){var self = $$53.$$s == null ? this : $$53.$$s, $$54, $$55, f = nil;

              
              
              if (i == null) {
                i = nil;
              };
              f = 0.0;
              $send(high, 'downto', [m], ($$54 = function(j){var self = $$54.$$s == null ? this : $$54.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](j), self.h['$[]'](i)['$[]'](j))));}, $$54.$$s = self, $$54.$$arity = 1, $$54));
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], ($$55 = function(j){var self = $$55.$$s == null ? this : $$55.$$s, $binary_op_recvr_tmp_6 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_6 = self.h['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_6['$[]'](j), $rb_times(f, self.ort['$[]'](j)))];
                $send($binary_op_recvr_tmp_6, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$55.$$s = self, $$55.$$arity = 1, $$55));}, $$53.$$s = self, $$53.$$arity = 1, $$53));
            
            $writer = [m, $rb_times(scale, self.ort['$[]'](m))];
            $send(self.ort, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus(m, 1), $rb_times(scale, g)];
            $send(self.h['$[]'](m), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          } else {
            return nil
          };}, $$47.$$s = self, $$47.$$arity = 1, $$47));
        $send(self.size, 'times', [], ($$56 = function(i){var self = $$56.$$s == null ? this : $$56.$$s, $$57;
          if (self.size == null) self.size = nil;

          
          
          if (i == null) {
            i = nil;
          };
          return $send(self.size, 'times', [], ($$57 = function(j){var self = $$57.$$s == null ? this : $$57.$$s, $writer = nil;
            if (self.v == null) self.v = nil;

            
            
            if (j == null) {
              j = nil;
            };
            $writer = [j, (function() {if (i['$=='](j)) {
              return 1.0
            } else {
              return 0.0
            }; return nil; })()];
            $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$57.$$s = self, $$57.$$arity = 1, $$57));}, $$56.$$s = self, $$56.$$arity = 1, $$56));
        return $send($rb_minus(high, 1), 'downto', [$rb_plus(low, 1)], ($$58 = function(m){var self = $$58.$$s == null ? this : $$58.$$s, $$59, $$60;
          if (self.h == null) self.h = nil;

          
          
          if (m == null) {
            m = nil;
          };
          if ($truthy(self.h['$[]'](m)['$[]']($rb_minus(m, 1))['$!='](0.0))) {
            
            $send($rb_plus(m, 1), 'upto', [high], ($$59 = function(i){var self = $$59.$$s == null ? this : $$59.$$s, $writer = nil;
              if (self.h == null) self.h = nil;
              if (self.ort == null) self.ort = nil;

              
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, self.h['$[]'](i)['$[]']($rb_minus(m, 1))];
              $send(self.ort, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$59.$$s = self, $$59.$$arity = 1, $$59));
            return $send(m, 'upto', [high], ($$60 = function(j){var self = $$60.$$s == null ? this : $$60.$$s, $$61, $$62, g = nil;
              if (self.ort == null) self.ort = nil;
              if (self.h == null) self.h = nil;

              
              
              if (j == null) {
                j = nil;
              };
              g = 0.0;
              $send(m, 'upto', [high], ($$61 = function(i){var self = $$61.$$s == null ? this : $$61.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.v == null) self.v = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                return (g = $rb_plus(g, $rb_times(self.ort['$[]'](i), self.v['$[]'](i)['$[]'](j))));}, $$61.$$s = self, $$61.$$arity = 1, $$61));
              g = $rb_divide($rb_divide(g, self.ort['$[]'](m)), self.h['$[]'](m)['$[]']($rb_minus(m, 1)));
              return $send(m, 'upto', [high], ($$62 = function(i){var self = $$62.$$s == null ? this : $$62.$$s, $binary_op_recvr_tmp_7 = nil, $writer = nil;
                if (self.v == null) self.v = nil;
                if (self.ort == null) self.ort = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_7 = self.v['$[]'](i);
                
                $writer = [j, $rb_plus($binary_op_recvr_tmp_7['$[]'](j), $rb_times(g, self.ort['$[]'](i)))];
                $send($binary_op_recvr_tmp_7, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$62.$$s = self, $$62.$$arity = 1, $$62));}, $$60.$$s = self, $$60.$$arity = 1, $$60));
          } else {
            return nil
          };}, $$58.$$s = self, $$58.$$arity = 1, $$58));
      }, $EigenvalueDecomposition_reduce_to_hessenberg$46.$$arity = 0);
      return (Opal.def(self, '$hessenberg_to_real_schur', $EigenvalueDecomposition_hessenberg_to_real_schur$63 = function $$hessenberg_to_real_schur() {
        var $$64, $a, $b, $$66, $$67, $$68, $$69, $$70, $$71, $$72, $$76, $$83, $$85, self = this, nn = nil, n = nil, low = nil, high = nil, eps = nil, exshift = nil, p = nil, q = nil, r = nil, s = nil, z = nil, norm = nil, iter = nil, l = nil, $writer = nil, w = nil, x = nil, y = nil, m = nil;

        
        nn = self.size;
        n = $rb_minus(nn, 1);
        low = 0;
        high = $rb_minus(nn, 1);
        eps = $$$($$($nesting, 'Float'), 'EPSILON');
        exshift = 0.0;
        p = (q = (r = (s = (z = 0))));
        norm = 0.0;
        $send(nn, 'times', [], ($$64 = function(i){var self = $$64.$$s == null ? this : $$64.$$s, $$65, $ret_or_1 = nil, $writer = nil;
          if (self.h == null) self.h = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_1 = $rb_lt(i, low)))) {
            return $ret_or_1
          } else {
            return $rb_gt(i, high)
          }; return nil; })())) {
            
            
            $writer = [i, self.h['$[]'](i)['$[]'](i)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [i, 0.0];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          return $send([$rb_minus(i, 1), 0].$max(), 'upto', [$rb_minus(nn, 1)], ($$65 = function(j){var self = $$65.$$s == null ? this : $$65.$$s;
            if (self.h == null) self.h = nil;

            
            
            if (j == null) {
              j = nil;
            };
            return (norm = $rb_plus(norm, self.h['$[]'](i)['$[]'](j).$abs()));}, $$65.$$s = self, $$65.$$arity = 1, $$65));}, $$64.$$s = self, $$64.$$arity = 1, $$64));
        iter = 0;
        while ($truthy($rb_ge(n, low))) {
          
          l = n;
          while ($truthy($rb_gt(l, low))) {
            
            s = $rb_plus(self.h['$[]']($rb_minus(l, 1))['$[]']($rb_minus(l, 1)).$abs(), self.h['$[]'](l)['$[]'](l).$abs());
            if ($truthy(s['$=='](0.0))) {
              s = norm};
            if ($truthy($rb_lt(self.h['$[]'](l)['$[]']($rb_minus(l, 1)).$abs(), $rb_times(eps, s)))) {
              break;};
            l = $rb_minus(l, 1);
          };
          if ($truthy(l['$=='](n))) {
            
            
            $writer = [n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift)];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, self.h['$[]'](n)['$[]'](n)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, 0.0];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            n = $rb_minus(n, 1);
            iter = 0;
          } else if ($truthy(l['$==']($rb_minus(n, 1)))) {
            
            w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));
            p = $rb_divide($rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), self.h['$[]'](n)['$[]'](n)), 2.0);
            q = $rb_plus($rb_times(p, p), w);
            z = $$($nesting, 'Math').$sqrt(q.$abs());
            
            $writer = [n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift)];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus(n, 1), $rb_plus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), exshift)];
            $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            x = self.h['$[]'](n)['$[]'](n);
            if ($truthy($rb_ge(q, 0))) {
              
              if ($truthy($rb_ge(p, 0))) {
                z = $rb_plus(p, z)
              } else {
                z = $rb_minus(p, z)
              };
              
              $writer = [$rb_minus(n, 1), $rb_plus(x, z)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, self.d['$[]']($rb_minus(n, 1))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(z['$!='](0.0))) {
                
                $writer = [n, $rb_minus(x, $rb_divide(w, z))];
                $send(self.d, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = [$rb_minus(n, 1), 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              x = self.h['$[]'](n)['$[]']($rb_minus(n, 1));
              s = $rb_plus(x.$abs(), z.$abs());
              p = $rb_divide(x, s);
              q = $rb_divide(z, s);
              r = $$($nesting, 'Math').$sqrt($rb_plus($rb_times(p, p), $rb_times(q, q)));
              p = $rb_divide(p, r);
              q = $rb_divide(q, r);
              $send($rb_minus(n, 1), 'upto', [$rb_minus(nn, 1)], ($$66 = function(j){var self = $$66.$$s == null ? this : $$66.$$s;
                if (self.h == null) self.h = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                z = self.h['$[]']($rb_minus(n, 1))['$[]'](j);
                
                $writer = [j, $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](n)['$[]'](j)))];
                $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [j, $rb_minus($rb_times(q, self.h['$[]'](n)['$[]'](j)), $rb_times(p, z))];
                $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$66.$$s = self, $$66.$$arity = 1, $$66));
              $send((0), 'upto', [n], ($$67 = function(i){var self = $$67.$$s == null ? this : $$67.$$s;
                if (self.h == null) self.h = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                z = self.h['$[]'](i)['$[]']($rb_minus(n, 1));
                
                $writer = [$rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](i)['$[]'](n)))];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [n, $rb_minus($rb_times(q, self.h['$[]'](i)['$[]'](n)), $rb_times(p, z))];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$67.$$s = self, $$67.$$arity = 1, $$67));
              $send(low, 'upto', [high], ($$68 = function(i){var self = $$68.$$s == null ? this : $$68.$$s;
                if (self.v == null) self.v = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                z = self.v['$[]'](i)['$[]']($rb_minus(n, 1));
                
                $writer = [$rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.v['$[]'](i)['$[]'](n)))];
                $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [n, $rb_minus($rb_times(q, self.v['$[]'](i)['$[]'](n)), $rb_times(p, z))];
                $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$68.$$s = self, $$68.$$arity = 1, $$68));
            } else {
              
              
              $writer = [$rb_minus(n, 1), $rb_plus(x, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, $rb_plus(x, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_minus(n, 1), z];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, z['$-@']()];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            n = $rb_minus(n, 2);
            iter = 0;
          } else {
            
            x = self.h['$[]'](n)['$[]'](n);
            y = 0.0;
            w = 0.0;
            if ($truthy($rb_lt(l, n))) {
              
              y = self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1));
              w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));};
            if ($truthy(iter['$=='](10))) {
              
              exshift = $rb_plus(exshift, x);
              $send(low, 'upto', [n], ($$69 = function(i){var self = $$69.$$s == null ? this : $$69.$$s, $binary_op_recvr_tmp_8 = nil;
                if (self.h == null) self.h = nil;

                
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_8 = self.h['$[]'](i);
                
                $writer = [i, $rb_minus($binary_op_recvr_tmp_8['$[]'](i), x)];
                $send($binary_op_recvr_tmp_8, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$69.$$s = self, $$69.$$arity = 1, $$69));
              s = $rb_plus(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 2)).$abs());
              x = (y = $rb_times(0.75, s));
              w = $rb_times($rb_times(-0.4375, s), s);};
            if ($truthy(iter['$=='](30))) {
              
              s = $rb_divide($rb_minus(y, x), 2.0);
              s = $rb_times(s, $rb_plus(s, w));
              if ($truthy($rb_gt(s, 0))) {
                
                s = $$($nesting, 'Math').$sqrt(s);
                if ($truthy($rb_lt(y, x))) {
                  s = s['$-@']()};
                s = $rb_minus(x, $rb_divide(w, $rb_plus($rb_divide($rb_minus(y, x), 2.0), s)));
                $send(low, 'upto', [n], ($$70 = function(i){var self = $$70.$$s == null ? this : $$70.$$s, $binary_op_recvr_tmp_9 = nil;
                  if (self.h == null) self.h = nil;

                  
                  
                  if (i == null) {
                    i = nil;
                  };
                  $binary_op_recvr_tmp_9 = self.h['$[]'](i);
                  
                  $writer = [i, $rb_minus($binary_op_recvr_tmp_9['$[]'](i), s)];
                  $send($binary_op_recvr_tmp_9, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$70.$$s = self, $$70.$$arity = 1, $$70));
                exshift = $rb_plus(exshift, s);
                x = (y = (w = 0.964));};};
            iter = $rb_plus(iter, 1);
            m = $rb_minus(n, 2);
            while ($truthy($rb_ge(m, l))) {
              
              z = self.h['$[]'](m)['$[]'](m);
              r = $rb_minus(x, z);
              s = $rb_minus(y, z);
              p = $rb_plus($rb_divide($rb_minus($rb_times(r, s), w), self.h['$[]']($rb_plus(m, 1))['$[]'](m)), self.h['$[]'](m)['$[]']($rb_plus(m, 1)));
              q = $rb_minus($rb_minus($rb_minus(self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)), z), r), s);
              r = self.h['$[]']($rb_plus(m, 2))['$[]']($rb_plus(m, 1));
              s = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
              p = $rb_divide(p, s);
              q = $rb_divide(q, s);
              r = $rb_divide(r, s);
              if ($truthy(m['$=='](l))) {
                break;};
              if ($truthy($rb_lt($rb_times(self.h['$[]'](m)['$[]']($rb_minus(m, 1)).$abs(), $rb_plus(q.$abs(), r.$abs())), $rb_times(eps, $rb_times(p.$abs(), $rb_plus($rb_plus(self.h['$[]']($rb_minus(m, 1))['$[]']($rb_minus(m, 1)).$abs(), z.$abs()), self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)).$abs())))))) {
                break;};
              m = $rb_minus(m, 1);
            };
            $send($rb_plus(m, 2), 'upto', [n], ($$71 = function(i){var self = $$71.$$s == null ? this : $$71.$$s;
              if (self.h == null) self.h = nil;

              
              
              if (i == null) {
                i = nil;
              };
              
              $writer = [$rb_minus(i, 2), 0.0];
              $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy($rb_gt(i, $rb_plus(m, 2)))) {
                
                $writer = [$rb_minus(i, 3), 0.0];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, $$71.$$s = self, $$71.$$arity = 1, $$71));
            $send(m, 'upto', [$rb_minus(n, 1)], ($$72 = function(k){var self = $$72.$$s == null ? this : $$72.$$s, $$73, $$74, $$75, notlast = nil;
              if (self.h == null) self.h = nil;

              
              
              if (k == null) {
                k = nil;
              };
              notlast = k['$!=']($rb_minus(n, 1));
              if ($truthy(k['$!='](m))) {
                
                p = self.h['$[]'](k)['$[]']($rb_minus(k, 1));
                q = self.h['$[]']($rb_plus(k, 1))['$[]']($rb_minus(k, 1));
                r = (function() {if ($truthy(notlast)) {
                  return self.h['$[]']($rb_plus(k, 2))['$[]']($rb_minus(k, 1))
                } else {
                  return 0.0
                }; return nil; })();
                x = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
                if (x['$=='](0)) {
                  return nil;};
                p = $rb_divide(p, x);
                q = $rb_divide(q, x);
                r = $rb_divide(r, x);};
              s = $$($nesting, 'Math').$sqrt($rb_plus($rb_plus($rb_times(p, p), $rb_times(q, q)), $rb_times(r, r)));
              if ($truthy($rb_lt(p, 0))) {
                s = s['$-@']()};
              if ($truthy(s['$!='](0))) {
                
                if ($truthy(k['$!='](m))) {
                  
                  $writer = [$rb_minus(k, 1), $rb_times(s['$-@'](), x)];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else if ($truthy(l['$!='](m))) {
                  
                  $writer = [$rb_minus(k, 1), self.h['$[]'](k)['$[]']($rb_minus(k, 1))['$-@']()];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                p = $rb_plus(p, s);
                x = $rb_divide(p, s);
                y = $rb_divide(q, s);
                z = $rb_divide(r, s);
                q = $rb_divide(q, p);
                r = $rb_divide(r, p);
                $send(k, 'upto', [$rb_minus(nn, 1)], ($$73 = function(j){var self = $$73.$$s == null ? this : $$73.$$s;
                  if (self.h == null) self.h = nil;

                  
                  
                  if (j == null) {
                    j = nil;
                  };
                  p = $rb_plus(self.h['$[]'](k)['$[]'](j), $rb_times(q, self.h['$[]']($rb_plus(k, 1))['$[]'](j)));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(r, self.h['$[]']($rb_plus(k, 2))['$[]'](j)));
                    
                    $writer = [j, $rb_minus(self.h['$[]']($rb_plus(k, 2))['$[]'](j), $rb_times(p, z))];
                    $send(self.h['$[]']($rb_plus(k, 2)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [j, $rb_minus(self.h['$[]'](k)['$[]'](j), $rb_times(p, x))];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [j, $rb_minus(self.h['$[]']($rb_plus(k, 1))['$[]'](j), $rb_times(p, y))];
                  $send(self.h['$[]']($rb_plus(k, 1)), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$73.$$s = self, $$73.$$arity = 1, $$73));
                $send((0), 'upto', [[n, $rb_plus(k, 3)].$min()], ($$74 = function(i){var self = $$74.$$s == null ? this : $$74.$$s;
                  if (self.h == null) self.h = nil;

                  
                  
                  if (i == null) {
                    i = nil;
                  };
                  p = $rb_plus($rb_times(x, self.h['$[]'](i)['$[]'](k)), $rb_times(y, self.h['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.h['$[]'](i)['$[]']($rb_plus(k, 2))));
                    
                    $writer = [$rb_plus(k, 2), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r))];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [k, $rb_minus(self.h['$[]'](i)['$[]'](k), p)];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$rb_plus(k, 1), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$74.$$s = self, $$74.$$arity = 1, $$74));
                return $send(low, 'upto', [high], ($$75 = function(i){var self = $$75.$$s == null ? this : $$75.$$s;
                  if (self.v == null) self.v = nil;

                  
                  
                  if (i == null) {
                    i = nil;
                  };
                  p = $rb_plus($rb_times(x, self.v['$[]'](i)['$[]'](k)), $rb_times(y, self.v['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.v['$[]'](i)['$[]']($rb_plus(k, 2))));
                    
                    $writer = [$rb_plus(k, 2), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r))];
                    $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [k, $rb_minus(self.v['$[]'](i)['$[]'](k), p)];
                  $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$rb_plus(k, 1), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))];
                  $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$75.$$s = self, $$75.$$arity = 1, $$75));
              } else {
                return nil
              };}, $$72.$$s = self, $$72.$$arity = 1, $$72));
          };
        };
        if ($truthy(norm['$=='](0.0))) {
          return nil};
        $send($rb_minus(nn, 1), 'downto', [0], ($$76 = function(k){var self = $$76.$$s == null ? this : $$76.$$s, $$77, $c, $d, $$80, cdivr = nil, cdivi = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.h == null) self.h = nil;

          
          
          if (k == null) {
            k = nil;
          };
          p = self.d['$[]'](k);
          q = self.e['$[]'](k);
          if ($truthy(q['$=='](0))) {
            
            l = k;
            
            $writer = [k, 1.0];
            $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($rb_minus(k, 1), 'downto', [0], ($$77 = function(i){var self = $$77.$$s == null ? this : $$77.$$s, $$78, $$79, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              
              if (i == null) {
                i = nil;
              };
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              r = 0.0;
              $send(l, 'upto', [k], ($$78 = function(j){var self = $$78.$$s == null ? this : $$78.$$s;
                if (self.h == null) self.h = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                return (r = $rb_plus(r, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](k))));}, $$78.$$s = self, $$78.$$arity = 1, $$78));
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                return (s = r);
              } else {
                
                l = i;
                if ($truthy(self.e['$[]'](i)['$=='](0.0))) {
                  if ($truthy(w['$!='](0.0))) {
                    
                    $writer = [k, $rb_divide(r['$-@'](), w)];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [k, $rb_divide(r['$-@'](), $rb_times(eps, norm))];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  q = $rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i)));
                  t = $rb_divide($rb_minus($rb_times(x, s), $rb_times(z, r)), q);
                  
                  $writer = [k, t];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy($rb_gt(x.$abs(), z.$abs()))) {
                    
                    $writer = [k, $rb_divide($rb_minus(r['$-@'](), $rb_times(w, t)), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [k, $rb_divide($rb_minus(s['$-@'](), $rb_times(y, t)), z)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  };
                };
                t = self.h['$[]'](i)['$[]'](k).$abs();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [k], ($$79 = function(j){var self = $$79.$$s == null ? this : $$79.$$s;
                    if (self.h == null) self.h = nil;

                    
                    
                    if (j == null) {
                      j = nil;
                    };
                    $writer = [k, $rb_divide(self.h['$[]'](j)['$[]'](k), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];}, $$79.$$s = self, $$79.$$arity = 1, $$79))
                } else {
                  return nil
                };
              };}, $$77.$$s = self, $$77.$$arity = 1, $$77));
          } else if ($truthy($rb_lt(q, 0))) {
            
            l = $rb_minus(n, 1);
            if ($truthy($rb_gt(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]'](n).$abs()))) {
              
              
              $writer = [$rb_minus(n, 1), $rb_divide(q, self.h['$[]'](n)['$[]']($rb_minus(n, 1)))];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, $rb_divide($rb_minus(self.h['$[]'](n)['$[]'](n), p)['$-@'](), self.h['$[]'](n)['$[]']($rb_minus(n, 1)))];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else {
              
              $d = self.$cdiv(0.0, self.h['$[]']($rb_minus(n, 1))['$[]'](n)['$-@'](), $rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), p), q), $c = Opal.to_ary($d), (cdivr = ($c[0] == null ? nil : $c[0])), (cdivi = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [$rb_minus(n, 1), cdivr];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, cdivi];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            
            $writer = [$rb_minus(n, 1), 0.0];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, 1.0];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($rb_minus(n, 2), 'downto', [0], ($$80 = function(i){var self = $$80.$$s == null ? this : $$80.$$s, $$81, $e, $f, $$82, ra = nil, sa = nil, vr = nil, vi = nil, $ret_or_2 = nil, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              
              if (i == null) {
                i = nil;
              };
              ra = 0.0;
              sa = 0.0;
              $send(l, 'upto', [n], ($$81 = function(j){var self = $$81.$$s == null ? this : $$81.$$s;
                if (self.h == null) self.h = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                ra = $rb_plus(ra, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]']($rb_minus(n, 1))));
                return (sa = $rb_plus(sa, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](n))));}, $$81.$$s = self, $$81.$$arity = 1, $$81));
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                r = ra;
                return (s = sa);
              } else {
                
                l = i;
                if ($truthy(self.e['$[]'](i)['$=='](0))) {
                  
                  $f = self.$cdiv(ra['$-@'](), sa['$-@'](), w, q), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                  
                  $writer = [$rb_minus(n, 1), cdivr];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [n, cdivi];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  vr = $rb_minus($rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i))), $rb_times(q, q));
                  vi = $rb_times($rb_times($rb_minus(self.d['$[]'](i), p), 2.0), q);
                  if ($truthy((function() {if ($truthy(($ret_or_2 = vr['$=='](0.0)))) {
                    return vi['$=='](0.0)
                  } else {
                    return $ret_or_2
                  }; return nil; })())) {
                    vr = $rb_times($rb_times(eps, norm), $rb_plus($rb_plus($rb_plus($rb_plus(w.$abs(), q.$abs()), x.$abs()), y.$abs()), z.$abs()))};
                  $f = self.$cdiv($rb_plus($rb_minus($rb_times(x, r), $rb_times(z, ra)), $rb_times(q, sa)), $rb_minus($rb_minus($rb_times(x, s), $rb_times(z, sa)), $rb_times(q, ra)), vr, vi), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                  
                  $writer = [$rb_minus(n, 1), cdivr];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [n, cdivi];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy($rb_gt(x.$abs(), $rb_plus(z.$abs(), q.$abs())))) {
                    
                    
                    $writer = [$rb_minus(n, 1), $rb_divide($rb_plus($rb_minus(ra['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_times(q, self.h['$[]'](i)['$[]'](n))), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, $rb_divide($rb_minus($rb_minus(sa['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]'](n))), $rb_times(q, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  } else {
                    
                    $f = self.$cdiv($rb_minus(r['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_minus(s['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]'](n))), z, q), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                    
                    $writer = [$rb_minus(n, 1), cdivr];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, cdivi];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  };
                };
                t = [self.h['$[]'](i)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]'](i)['$[]'](n).$abs()].$max();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [n], ($$82 = function(j){var self = $$82.$$s == null ? this : $$82.$$s;
                    if (self.h == null) self.h = nil;

                    
                    
                    if (j == null) {
                      j = nil;
                    };
                    
                    $writer = [$rb_minus(n, 1), $rb_divide(self.h['$[]'](j)['$[]']($rb_minus(n, 1)), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, $rb_divide(self.h['$[]'](j)['$[]'](n), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, $$82.$$s = self, $$82.$$arity = 1, $$82))
                } else {
                  return nil
                };
              };}, $$80.$$s = self, $$80.$$arity = 1, $$80));
          } else {
            return nil
          };}, $$76.$$s = self, $$76.$$arity = 1, $$76));
        $send(nn, 'times', [], ($$83 = function(i){var self = $$83.$$s == null ? this : $$83.$$s, $$84, $ret_or_3 = nil;

          
          
          if (i == null) {
            i = nil;
          };
          if ($truthy((function() {if ($truthy(($ret_or_3 = $rb_lt(i, low)))) {
            return $ret_or_3
          } else {
            return $rb_gt(i, high)
          }; return nil; })())) {
            return $send(i, 'upto', [$rb_minus(nn, 1)], ($$84 = function(j){var self = $$84.$$s == null ? this : $$84.$$s;
              if (self.h == null) self.h = nil;
              if (self.v == null) self.v = nil;

              
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, self.h['$[]'](i)['$[]'](j)];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$84.$$s = self, $$84.$$arity = 1, $$84))
          } else {
            return nil
          };}, $$83.$$s = self, $$83.$$arity = 1, $$83));
        return $send($rb_minus(nn, 1), 'downto', [low], ($$85 = function(j){var self = $$85.$$s == null ? this : $$85.$$s, $$86;

          
          
          if (j == null) {
            j = nil;
          };
          return $send(low, 'upto', [high], ($$86 = function(i){var self = $$86.$$s == null ? this : $$86.$$s, $$87;
            if (self.v == null) self.v = nil;

            
            
            if (i == null) {
              i = nil;
            };
            z = 0.0;
            $send(low, 'upto', [[j, high].$min()], ($$87 = function(k){var self = $$87.$$s == null ? this : $$87.$$s;
              if (self.v == null) self.v = nil;
              if (self.h == null) self.h = nil;

              
              
              if (k == null) {
                k = nil;
              };
              return (z = $rb_plus(z, $rb_times(self.v['$[]'](i)['$[]'](k), self.h['$[]'](k)['$[]'](j))));}, $$87.$$s = self, $$87.$$arity = 1, $$87));
            
            $writer = [j, z];
            $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$86.$$s = self, $$86.$$arity = 1, $$86));}, $$85.$$s = self, $$85.$$arity = 1, $$85));
      }, $EigenvalueDecomposition_hessenberg_to_real_schur$63.$$arity = 0), nil) && 'hessenberg_to_real_schur';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["matrix/lup_decomposition"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$build', '$min', '$>', '$[]', '$==', '$<=', '$new', '$each_with_index', '$[]=', '$-', '$send', '$l', '$u', '$p', '$alias_method', '$attr_reader', '$times', '$!=', '$Raise', '$*', '$singular?', '$is_a?', '$row_count', '$column_count', '$map', '$to_a', '$row', '$upto', '$+', '$downto', '$quo', '$convert_to_array', '$size', '$values_at', '$elements', '$raise', '$class', '$abs', '$-@', '$<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'LUPDecomposition');

      var $nesting = [self].concat($parent_nesting), $LUPDecomposition_l$1, $LUPDecomposition_u$3, $LUPDecomposition_p$5, $LUPDecomposition_to_ary$8, $LUPDecomposition_singular$ques$9, $LUPDecomposition_det$11, $LUPDecomposition_solve$13, $LUPDecomposition_initialize$26;

      self.$$prototype.row_count = self.$$prototype.column_count = self.$$prototype.pivots = self.$$prototype.pivot_sign = nil;
      
      self.$include($$$($$($nesting, 'Matrix'), 'ConversionHelper'));
      
      Opal.def(self, '$l', $LUPDecomposition_l$1 = function $$l() {
        var $$2, self = this;

        return $send($$($nesting, 'Matrix'), 'build', [self.row_count, [self.column_count, self.row_count].$min()], ($$2 = function(i, j){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.lu == null) self.lu = nil;

          
          
          if (i == null) {
            i = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if ($truthy($rb_gt(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else if ($truthy(i['$=='](j))) {
            return 1
          } else {
            return 0
          };}, $$2.$$s = self, $$2.$$arity = 2, $$2))
      }, $LUPDecomposition_l$1.$$arity = 0);
      
      Opal.def(self, '$u', $LUPDecomposition_u$3 = function $$u() {
        var $$4, self = this;

        return $send($$($nesting, 'Matrix'), 'build', [[self.column_count, self.row_count].$min(), self.column_count], ($$4 = function(i, j){var self = $$4.$$s == null ? this : $$4.$$s;
          if (self.lu == null) self.lu = nil;

          
          
          if (i == null) {
            i = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if ($truthy($rb_le(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else {
            return 0
          };}, $$4.$$s = self, $$4.$$arity = 2, $$4))
      }, $LUPDecomposition_u$3.$$arity = 0);
      
      Opal.def(self, '$p', $LUPDecomposition_p$5 = function $$p() {
        var $$6, $$7, self = this, rows = nil;

        
        rows = $send($$($nesting, 'Array'), 'new', [self.row_count], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;
          if (self.row_count == null) self.row_count = nil;

          return $$($nesting, 'Array').$new(self.row_count, 0)}, $$6.$$s = self, $$6.$$arity = 0, $$6));
        $send(self.pivots, 'each_with_index', [], ($$7 = function(p, i){var self = $$7.$$s == null ? this : $$7.$$s, $writer = nil;

          
          
          if (p == null) {
            p = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          $writer = [p, 1];
          $send(rows['$[]'](i), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$7.$$s = self, $$7.$$arity = 2, $$7));
        return $$($nesting, 'Matrix').$send("new", rows, self.row_count);
      }, $LUPDecomposition_p$5.$$arity = 0);
      
      Opal.def(self, '$to_ary', $LUPDecomposition_to_ary$8 = function $$to_ary() {
        var self = this;

        return [self.$l(), self.$u(), self.$p()]
      }, $LUPDecomposition_to_ary$8.$$arity = 0);
      self.$alias_method("to_a", "to_ary");
      self.$attr_reader("pivots");
      
      Opal.def(self, '$singular?', $LUPDecomposition_singular$ques$9 = function() {try {

        var $$10, self = this;

        
        $send(self.column_count, 'times', [], ($$10 = function(j){var self = $$10.$$s == null ? this : $$10.$$s;
          if (self.lu == null) self.lu = nil;

          
          
          if (j == null) {
            j = nil;
          };
          if ($truthy(self.lu['$[]'](j)['$[]'](j)['$=='](0))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $LUPDecomposition_singular$ques$9.$$arity = 0);
      
      Opal.def(self, '$det', $LUPDecomposition_det$11 = function $$det() {
        var $$12, self = this, d = nil;

        
        if ($truthy(self.row_count['$!='](self.column_count))) {
          $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
        d = self.pivot_sign;
        $send(self.column_count, 'times', [], ($$12 = function(j){var self = $$12.$$s == null ? this : $$12.$$s;
          if (self.lu == null) self.lu = nil;

          
          
          if (j == null) {
            j = nil;
          };
          return (d = $rb_times(d, self.lu['$[]'](j)['$[]'](j)));}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        return d;
      }, $LUPDecomposition_det$11.$$arity = 0);
      self.$alias_method("determinant", "det");
      
      Opal.def(self, '$solve', $LUPDecomposition_solve$13 = function $$solve(b) {
        var $$14, $$15, $$18, $$22, $$24, self = this, nx = nil, m = nil;

        
        if ($truthy(self['$singular?']())) {
          $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrNotRegular'), "Matrix is singular.")};
        if ($truthy(b['$is_a?']($$($nesting, 'Matrix')))) {
          
          if ($truthy(b.$row_count()['$!='](self.row_count))) {
            $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
          nx = b.$column_count();
          m = $send(self.pivots, 'map', [], ($$14 = function(row){var self = $$14.$$s == null ? this : $$14.$$s;

            
            
            if (row == null) {
              row = nil;
            };
            return b.$row(row).$to_a();}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          $send(self.column_count, 'times', [], ($$15 = function(k){var self = $$15.$$s == null ? this : $$15.$$s, $$16;
            if (self.column_count == null) self.column_count = nil;

            
            
            if (k == null) {
              k = nil;
            };
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], ($$16 = function(i){var self = $$16.$$s == null ? this : $$16.$$s, $$17;

              
              
              if (i == null) {
                i = nil;
              };
              return $send(nx, 'times', [], ($$17 = function(j){var self = $$17.$$s == null ? this : $$17.$$s, $binary_op_recvr_tmp_10 = nil, $writer = nil;
                if (self.lu == null) self.lu = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_10 = m['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_10['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))];
                $send($binary_op_recvr_tmp_10, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$17.$$s = self, $$17.$$arity = 1, $$17));}, $$16.$$s = self, $$16.$$arity = 1, $$16));}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          $send($rb_minus(self.column_count, 1), 'downto', [0], ($$18 = function(k){var self = $$18.$$s == null ? this : $$18.$$s, $$19, $$20;

            
            
            if (k == null) {
              k = nil;
            };
            $send(nx, 'times', [], ($$19 = function(j){var self = $$19.$$s == null ? this : $$19.$$s, $writer = nil;
              if (self.lu == null) self.lu = nil;

              
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, m['$[]'](k)['$[]'](j).$quo(self.lu['$[]'](k)['$[]'](k))];
              $send(m['$[]'](k), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$19.$$s = self, $$19.$$arity = 1, $$19));
            return $send(k, 'times', [], ($$20 = function(i){var self = $$20.$$s == null ? this : $$20.$$s, $$21;

              
              
              if (i == null) {
                i = nil;
              };
              return $send(nx, 'times', [], ($$21 = function(j){var self = $$21.$$s == null ? this : $$21.$$s, $binary_op_recvr_tmp_11 = nil, $writer = nil;
                if (self.lu == null) self.lu = nil;

                
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_11 = m['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_11['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))];
                $send($binary_op_recvr_tmp_11, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$21.$$s = self, $$21.$$arity = 1, $$21));}, $$20.$$s = self, $$20.$$arity = 1, $$20));}, $$18.$$s = self, $$18.$$arity = 1, $$18));
          return $$($nesting, 'Matrix').$send("new", m, nx);
        } else {
          
          b = self.$convert_to_array(b);
          if ($truthy(b.$size()['$!='](self.row_count))) {
            $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
          m = $send(b, 'values_at', Opal.to_a(self.pivots));
          $send(self.column_count, 'times', [], ($$22 = function(k){var self = $$22.$$s == null ? this : $$22.$$s, $$23;
            if (self.column_count == null) self.column_count = nil;

            
            
            if (k == null) {
              k = nil;
            };
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], ($$23 = function(i){var self = $$23.$$s == null ? this : $$23.$$s, $writer = nil;
              if (self.lu == null) self.lu = nil;

              
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))];
              $send(m, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$23.$$s = self, $$23.$$arity = 1, $$23));}, $$22.$$s = self, $$22.$$arity = 1, $$22));
          $send($rb_minus(self.column_count, 1), 'downto', [0], ($$24 = function(k){var self = $$24.$$s == null ? this : $$24.$$s, $$25, $writer = nil;
            if (self.lu == null) self.lu = nil;

            
            
            if (k == null) {
              k = nil;
            };
            
            $writer = [k, m['$[]'](k).$quo(self.lu['$[]'](k)['$[]'](k))];
            $send(m, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(k, 'times', [], ($$25 = function(i){var self = $$25.$$s == null ? this : $$25.$$s;
              if (self.lu == null) self.lu = nil;

              
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))];
              $send(m, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$25.$$s = self, $$25.$$arity = 1, $$25));}, $$24.$$s = self, $$24.$$arity = 1, $$24));
          return $$($nesting, 'Vector').$elements(m, false);
        };
      }, $LUPDecomposition_solve$13.$$arity = 1);
      return (Opal.def(self, '$initialize', $LUPDecomposition_initialize$26 = function $$initialize(a) {
        var $$27, $$28, self = this, lu_col_j = nil;

        
        if ($truthy(a['$is_a?']($$($nesting, 'Matrix')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected Matrix but got " + (a.$class()))
        };
        self.lu = a.$to_a();
        self.row_count = a.$row_count();
        self.column_count = a.$column_count();
        self.pivots = $$($nesting, 'Array').$new(self.row_count);
        $send(self.row_count, 'times', [], ($$27 = function(i){var self = $$27.$$s == null ? this : $$27.$$s, $writer = nil;
          if (self.pivots == null) self.pivots = nil;

          
          
          if (i == null) {
            i = nil;
          };
          $writer = [i, i];
          $send(self.pivots, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$27.$$s = self, $$27.$$arity = 1, $$27));
        self.pivot_sign = 1;
        lu_col_j = $$($nesting, 'Array').$new(self.row_count);
        return $send(self.column_count, 'times', [], ($$28 = function(j){var self = $$28.$$s == null ? this : $$28.$$s, $$29, $$30, $$32, $$33, $$34, p = nil, k = nil, $writer = nil, $ret_or_1 = nil;
          if (self.row_count == null) self.row_count = nil;
          if (self.column_count == null) self.column_count = nil;
          if (self.pivots == null) self.pivots = nil;
          if (self.pivot_sign == null) self.pivot_sign = nil;
          if (self.lu == null) self.lu = nil;

          
          
          if (j == null) {
            j = nil;
          };
          $send(self.row_count, 'times', [], ($$29 = function(i){var self = $$29.$$s == null ? this : $$29.$$s, $writer = nil;
            if (self.lu == null) self.lu = nil;

            
            
            if (i == null) {
              i = nil;
            };
            $writer = [i, self.lu['$[]'](i)['$[]'](j)];
            $send(lu_col_j, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$29.$$s = self, $$29.$$arity = 1, $$29));
          $send(self.row_count, 'times', [], ($$30 = function(i){var self = $$30.$$s == null ? this : $$30.$$s, $$31, lu_row_i = nil, kmax = nil, s = nil, $writer = nil;
            if (self.lu == null) self.lu = nil;

            
            
            if (i == null) {
              i = nil;
            };
            lu_row_i = self.lu['$[]'](i);
            kmax = [i, j].$min();
            s = 0;
            $send(kmax, 'times', [], ($$31 = function(k){var self = $$31.$$s == null ? this : $$31.$$s;

              
              
              if (k == null) {
                k = nil;
              };
              return (s = $rb_plus(s, $rb_times(lu_row_i['$[]'](k), lu_col_j['$[]'](k))));}, $$31.$$s = self, $$31.$$arity = 1, $$31));
            
            $writer = [j, (($writer = [i, $rb_minus(lu_col_j['$[]'](i), s)]), $send(lu_col_j, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(lu_row_i, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$30.$$s = self, $$30.$$arity = 1, $$30));
          p = j;
          $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], ($$32 = function(i){var self = $$32.$$s == null ? this : $$32.$$s;

            
            
            if (i == null) {
              i = nil;
            };
            if ($truthy($rb_gt(lu_col_j['$[]'](i).$abs(), lu_col_j['$[]'](p).$abs()))) {
              return (p = i)
            } else {
              return nil
            };}, $$32.$$s = self, $$32.$$arity = 1, $$32));
          if ($truthy(p['$!='](j))) {
            
            $send(self.column_count, 'times', [], ($$33 = function(k){var self = $$33.$$s == null ? this : $$33.$$s, t = nil, $writer = nil;
              if (self.lu == null) self.lu = nil;

              
              
              if (k == null) {
                k = nil;
              };
              t = self.lu['$[]'](p)['$[]'](k);
              
              $writer = [k, self.lu['$[]'](j)['$[]'](k)];
              $send(self.lu['$[]'](p), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [k, t];
              $send(self.lu['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, $$33.$$s = self, $$33.$$arity = 1, $$33));
            k = self.pivots['$[]'](p);
            
            $writer = [p, self.pivots['$[]'](j)];
            $send(self.pivots, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [j, k];
            $send(self.pivots, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.pivot_sign = self.pivot_sign['$-@']();};
          if ($truthy((function() {if ($truthy(($ret_or_1 = $rb_lt(j, self.row_count)))) {
            return self.lu['$[]'](j)['$[]'](j)['$!='](0)
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], ($$34 = function(i){var self = $$34.$$s == null ? this : $$34.$$s;
              if (self.lu == null) self.lu = nil;

              
              
              if (i == null) {
                i = nil;
              };
              $writer = [j, self.lu['$[]'](i)['$[]'](j).$quo(self.lu['$[]'](j)['$[]'](j))];
              $send(self.lu['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$34.$$s = self, $$34.$$arity = 1, $$34))
          } else {
            return nil
          };}, $$28.$$s = self, $$28.$$arity = 1, $$28));
      }, $LUPDecomposition_initialize$26.$$arity = 1), nil) && 'initialize';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["matrix"] = function(Opal) {/* Generated by Opal 1.3.2 */
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $alias = Opal.alias, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$def_e2message', '$def_exception', '$include', '$autoload', '$private_class_method', '$attr_reader', '$protected', '$rows', '$convert_to_array', '$map!', '$size', '$[]', '$each', '$==', '$raise', '$new', '$transpose', '$coerce_to_int', '$<', '$to_enum', '$empty', '$[]=', '$-', '$diagonal', '$scalar', '$!=', '$*', '$coerce_to_matrix', '$map', '$send', '$to_proc', '$column_count', '$concat', '$row_count', '$each_with_index', '$+', '$empty?', '$method', '$first', '$Raise', '$combine', '$class', '$private', '$fetch', '$alias_method', '$elements', '$>=', '$-@', '$times', '$collect', '$new_matrix', '$===', '$upto', '$min', '$inspect', '$freeze', '$>', '$include?', '$last', '$pop', '$end', '$exclude_end?', '$<=', '$to_a', '$delete_at', '$square?', '$determinant', '$first_minor', '$**', '$build', '$cofactor', '$!', '$inject', '$with_index', '$all?', '$conj', '$singular?', '$eql?', '$hash', '$column_vector', '$column', '$apply_through_coercion', '$/', '$inverse', '$I', '$abs', '$quo', '$identity', '$loop', '$zero?', '$>>', '$eigensystem', '$+@', '$determinant_bareiss', '$find', '$warn', '$hstack', '$rank', '$round', '$vstack', '$real', '$imag', '$row', '$join', '$to_s', '$dup', '$to_ary', '$message', '$is_a?', '$coerce', '$length', '$public_send', '$kind_of?', '$respond_to?', '$__send__', '$coerce_to', '$count', '$independent?', '$collect2', '$each2', '$basis', '$laplace_expansion', '$sqrt', '$abs2', '$magnitude', '$acos', '$inner_product', '$row_vector']);
  
  self.$require("e2mmap.rb");
  (function($base, $parent_nesting) {
    var self = $module($base, 'ExceptionForMatrix');

    var $nesting = [self].concat($parent_nesting);

    
    self.$extend($$($nesting, 'Exception2MessageMapper'));
    self.$def_e2message($$($nesting, 'TypeError'), "wrong argument type %s (expected %s)");
    self.$def_e2message($$($nesting, 'ArgumentError'), "Wrong # of arguments(%d for %d)");
    self.$def_exception("ErrDimensionMismatch", "\#{self.name} dimension mismatch");
    self.$def_exception("ErrNotRegular", "Not Regular Matrix");
    self.$def_exception("ErrOperationNotDefined", "Operation(%s) can\\'t be defined: %s op %s");
    return self.$def_exception("ErrOperationNotImplemented", "Sorry, Operation(%s) not implemented: %s op %s");
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting), $Matrix_$$$1, $Matrix_rows$2, $Matrix_columns$5, $Matrix_build$6, $Matrix_diagonal$9, $Matrix_scalar$11, $Matrix_identity$12, $Matrix_zero$13, $Matrix_row_vector$15, $Matrix_column_vector$16, $Matrix_empty$17, $Matrix_vstack$18, $Matrix_hstack$20, $Matrix_combine$23, $Matrix_combine$28, $Matrix_initialize$29, $Matrix_new_matrix$30, $Matrix_$$$31, $Matrix_$$$eq$33, $Matrix_row_count$34, $Matrix_row$35, $Matrix_column$38, $Matrix_collect$41, $Matrix_each$43, $Matrix_each_with_index$57, $Matrix_index$72, $Matrix_minor$75, $Matrix_first_minor$77, $Matrix_cofactor$79, $Matrix_adjugate$80, $Matrix_laplace_expansion$82, $Matrix_diagonal$ques$84, $Matrix_empty$ques$85, $Matrix_hermitian$ques$86, $Matrix_lower_triangular$ques$88, $Matrix_normal$ques$89, $Matrix_orthogonal$ques$93, $Matrix_permutation$ques$97, $Matrix_real$ques$100, $Matrix_regular$ques$101, $Matrix_singular$ques$102, $Matrix_square$ques$103, $Matrix_symmetric$ques$104, $Matrix_antisymmetric$ques$106, $Matrix_unitary$ques$108, $Matrix_upper_triangular$ques$112, $Matrix_zero$ques$113, $Matrix_$eq_eq$114, $Matrix_eql$ques$115, $Matrix_clone$116, $Matrix_hash$117, $Matrix_$$118, $Matrix_$plus$124, $Matrix_$minus$127, $Matrix_$slash$130, $Matrix_hadamard_product$133, $Matrix_inverse$135, $Matrix_inverse_from$136, $Matrix_$$$144, $Matrix_$plus$$147, $Matrix_$minus$$148, $Matrix_determinant$150, $Matrix_determinant_bareiss$151, $Matrix_determinant_e$157, $Matrix_hstack$158, $Matrix_rank$159, $Matrix_rank_e$164, $Matrix_round$165, $Matrix_trace$167, $Matrix_transpose$169, $Matrix_vstack$170, $Matrix_eigensystem$171, $Matrix_lup$172, $Matrix_conjugate$173, $Matrix_imaginary$174, $Matrix_real$175, $Matrix_rect$176, $Matrix_coerce$177, $Matrix_row_vectors$178, $Matrix_column_vectors$180, $Matrix_to_matrix$182, $Matrix_to_a$183, $Matrix_elements_to_f$184, $Matrix_elements_to_i$185, $Matrix_elements_to_r$186, $Matrix_to_s$187, $Matrix_inspect$190;

    self.$$prototype.rows = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$include($$($nesting, 'ExceptionForMatrix'));
    self.$autoload("EigenvalueDecomposition", "matrix/eigenvalue_decomposition");
    self.$autoload("LUPDecomposition", "matrix/lup_decomposition");
    self.$private_class_method("new");
    self.$attr_reader("rows");
    self.$protected("rows");
    Opal.defs($$($nesting, 'Matrix'), '$[]', $Matrix_$$$1 = function($a) {
      var $post_args, rows, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      rows = $post_args;;
      return self.$rows(rows, false);
    }, $Matrix_$$$1.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$rows', $Matrix_rows$2 = function $$rows(rows, copy) {
      var $$3, $$4, self = this, size = nil, $ret_or_1 = nil;

      
      
      if (copy == null) {
        copy = true;
      };
      rows = self.$convert_to_array(rows, copy);
      $send(rows, 'map!', [], ($$3 = function(row){var self = $$3.$$s == null ? this : $$3.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        return self.$convert_to_array(row, copy);}, $$3.$$s = self, $$3.$$arity = 1, $$3));
      size = (function() {if ($truthy(($ret_or_1 = rows['$[]'](0)))) {
        return $ret_or_1
      } else {
        return []
      }; return nil; })().$size();
      $send(rows, 'each', [], ($$4 = function(row){var self = $$4.$$s == null ? this : $$4.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        if (row.$size()['$=='](size)) {
          return nil
        } else {
          return self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "row size differs (" + (row.$size()) + " should be " + (size) + ")")
        };}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      return self.$new(rows, size);
    }, $Matrix_rows$2.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$columns', $Matrix_columns$5 = function $$columns(columns) {
      var self = this;

      return self.$rows(columns, false).$transpose()
    }, $Matrix_columns$5.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$build', $Matrix_build$6 = function $$build(row_count, column_count) {
      var $$7, $iter = $Matrix_build$6.$$p, $yield = $iter || nil, self = this, $ret_or_2 = nil, rows = nil;

      if ($iter) $Matrix_build$6.$$p = null;
      
      
      if (column_count == null) {
        column_count = row_count;
      };
      row_count = $$($nesting, 'CoercionHelper').$coerce_to_int(row_count);
      column_count = $$($nesting, 'CoercionHelper').$coerce_to_int(column_count);
      if ($truthy((function() {if ($truthy(($ret_or_2 = $rb_lt(row_count, 0)))) {
        return $ret_or_2
      } else {
        return $rb_lt(column_count, 0)
      }; return nil; })())) {
        self.$raise($$($nesting, 'ArgumentError'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("build", row_count, column_count)
      };
      rows = $send($$($nesting, 'Array'), 'new', [row_count], ($$7 = function(i){var self = $$7.$$s == null ? this : $$7.$$s, $$8;

        
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [column_count], ($$8 = function(j){var self = $$8.$$s == null ? this : $$8.$$s;

          
          
          if (j == null) {
            j = nil;
          };
          return Opal.yieldX($yield, [i, j]);;}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      return self.$new(rows, column_count);
    }, $Matrix_build$6.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$diagonal', $Matrix_diagonal$9 = function $$diagonal($a) {
      var $post_args, values, $$10, self = this, size = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      values = $post_args;;
      size = values.$size();
      if (size['$=='](0)) {
        return $$($nesting, 'Matrix').$empty()};
      rows = $send($$($nesting, 'Array'), 'new', [size], ($$10 = function(j){var self = $$10.$$s == null ? this : $$10.$$s, row = nil, $writer = nil;

        
        
        if (j == null) {
          j = nil;
        };
        row = $$($nesting, 'Array').$new(size, 0);
        
        $writer = [j, values['$[]'](j)];
        $send(row, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return row;}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      return self.$new(rows);
    }, $Matrix_diagonal$9.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$scalar', $Matrix_scalar$11 = function $$scalar(n, value) {
      var self = this;

      return $send(self, 'diagonal', Opal.to_a($$($nesting, 'Array').$new(n, value)))
    }, $Matrix_scalar$11.$$arity = 2);
    Opal.defs($$($nesting, 'Matrix'), '$identity', $Matrix_identity$12 = function $$identity(n) {
      var self = this;

      return self.$scalar(n, 1)
    }, $Matrix_identity$12.$$arity = 1);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      $alias(self, "unit", "identity");
      return $alias(self, "I", "identity");
    })(Opal.get_singleton_class($$($nesting, 'Matrix')), $nesting);
    Opal.defs($$($nesting, 'Matrix'), '$zero', $Matrix_zero$13 = function $$zero(row_count, column_count) {
      var $$14, self = this, rows = nil;

      
      
      if (column_count == null) {
        column_count = row_count;
      };
      rows = $send($$($nesting, 'Array'), 'new', [row_count], ($$14 = function(){var self = $$14.$$s == null ? this : $$14.$$s;

        return $$($nesting, 'Array').$new(column_count, 0)}, $$14.$$s = self, $$14.$$arity = 0, $$14));
      return self.$new(rows, column_count);
    }, $Matrix_zero$13.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$row_vector', $Matrix_row_vector$15 = function $$row_vector(row) {
      var self = this;

      
      row = self.$convert_to_array(row);
      return self.$new([row]);
    }, $Matrix_row_vector$15.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$column_vector', $Matrix_column_vector$16 = function $$column_vector(column) {
      var self = this;

      
      column = self.$convert_to_array(column);
      return self.$new([column].$transpose(), 1);
    }, $Matrix_column_vector$16.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$empty', $Matrix_empty$17 = function $$empty(row_count, column_count) {
      var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

      
      
      if (row_count == null) {
        row_count = 0;
      };
      
      if (column_count == null) {
        column_count = 0;
      };
      if ($truthy((function() {if ($truthy(($ret_or_3 = column_count['$!='](0)))) {
        return row_count['$!='](0)
      } else {
        return $ret_or_3
      }; return nil; })())) {
        self.$raise($$($nesting, 'ArgumentError'), "One size must be 0")};
      if ($truthy((function() {if ($truthy(($ret_or_4 = $rb_lt(column_count, 0)))) {
        return $ret_or_4
      } else {
        return $rb_lt(row_count, 0)
      }; return nil; })())) {
        self.$raise($$($nesting, 'ArgumentError'), "Negative size")};
      return self.$new($rb_times([[]], row_count), column_count);
    }, $Matrix_empty$17.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$vstack', $Matrix_vstack$18 = function $$vstack(x, $a) {
      var $post_args, matrices, $$19, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      matrices = $post_args;;
      x = $$($nesting, 'CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      $send(matrices, 'each', [], ($$19 = function(m){var self = $$19.$$s == null ? this : $$19.$$s;

        
        
        if (m == null) {
          m = nil;
        };
        m = $$($nesting, 'CoercionHelper').$coerce_to_matrix(m);
        if ($truthy(m.$column_count()['$!='](x.$column_count()))) {
          self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "The given matrices must have " + (x.$column_count()) + " columns, but one has " + (m.$column_count()))};
        return result.$concat(m.$send("rows"));}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      return self.$new(result, x.$column_count());
    }, $Matrix_vstack$18.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$hstack', $Matrix_hstack$20 = function $$hstack(x, $a) {
      var $post_args, matrices, $$21, self = this, result = nil, total_column_count = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      matrices = $post_args;;
      x = $$($nesting, 'CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      total_column_count = x.$column_count();
      $send(matrices, 'each', [], ($$21 = function(m){var self = $$21.$$s == null ? this : $$21.$$s, $$22;

        
        
        if (m == null) {
          m = nil;
        };
        m = $$($nesting, 'CoercionHelper').$coerce_to_matrix(m);
        if ($truthy(m.$row_count()['$!='](x.$row_count()))) {
          self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "The given matrices must have " + (x.$row_count()) + " rows, but one has " + (m.$row_count()))};
        $send(result, 'each_with_index', [], ($$22 = function(row, i){var self = $$22.$$s == null ? this : $$22.$$s;

          
          
          if (row == null) {
            row = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          return row.$concat(m.$send("rows")['$[]'](i));}, $$22.$$s = self, $$22.$$arity = 2, $$22));
        return (total_column_count = $rb_plus(total_column_count, m.$column_count()));}, $$21.$$s = self, $$21.$$arity = 1, $$21));
      return self.$new(result, total_column_count);
    }, $Matrix_hstack$20.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$combine', $Matrix_combine$23 = function $$combine($a) {
      var $post_args, matrices, $$24, $$25, $iter = $Matrix_combine$23.$$p, $yield = $iter || nil, self = this, x = nil, rows = nil;

      if ($iter) $Matrix_combine$23.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      if (($yield !== nil)) {
      } else {
        return $send(self, 'to_enum', ["combine"].concat(Opal.to_a(matrices)))
      };
      if ($truthy(matrices['$empty?']())) {
        return $$($nesting, 'Matrix').$empty()};
      $send(matrices, 'map!', [], $$($nesting, 'CoercionHelper').$method("coerce_to_matrix").$to_proc());
      x = matrices.$first();
      $send(matrices, 'each', [], ($$24 = function(m){var self = $$24.$$s == null ? this : $$24.$$s, $ret_or_5 = nil;

        
        
        if (m == null) {
          m = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_5 = x.$row_count()['$=='](m.$row_count())))) {
          return x.$column_count()['$=='](m.$column_count())
        } else {
          return $ret_or_5
        }; return nil; })())) {
          return nil
        } else {
          return $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, $$24.$$s = self, $$24.$$arity = 1, $$24));
      rows = $send($$($nesting, 'Array'), 'new', [x.$row_count()], ($$25 = function(i){var self = $$25.$$s == null ? this : $$25.$$s, $$26;

        
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [x.$column_count()], ($$26 = function(j){var self = $$26.$$s == null ? this : $$26.$$s, $$27;

          
          
          if (j == null) {
            j = nil;
          };
          return Opal.yield1($yield, $send(matrices, 'map', [], ($$27 = function(m){var self = $$27.$$s == null ? this : $$27.$$s;

            
            
            if (m == null) {
              m = nil;
            };
            return m['$[]'](i, j);}, $$27.$$s = self, $$27.$$arity = 1, $$27)));;}, $$26.$$s = self, $$26.$$arity = 1, $$26));}, $$25.$$s = self, $$25.$$arity = 1, $$25));
      return self.$new(rows, x.$column_count());
    }, $Matrix_combine$23.$$arity = -1);
    
    Opal.def(self, '$combine', $Matrix_combine$28 = function $$combine($a) {
      var $iter = $Matrix_combine$28.$$p, block = $iter || nil, $post_args, matrices, self = this;

      if ($iter) $Matrix_combine$28.$$p = null;
      
      
      if ($iter) $Matrix_combine$28.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send($$($nesting, 'Matrix'), 'combine', [self].concat(Opal.to_a(matrices)), block.$to_proc());
    }, $Matrix_combine$28.$$arity = -1);
    
    Opal.def(self, '$initialize', $Matrix_initialize$29 = function $$initialize(rows, column_count) {
      var self = this;

      
      
      if (column_count == null) {
        column_count = rows['$[]'](0).$size();
      };
      self.rows = rows;
      return (self.column_count = column_count);
    }, $Matrix_initialize$29.$$arity = -2);
    
    Opal.def(self, '$new_matrix', $Matrix_new_matrix$30 = function $$new_matrix(rows, column_count) {
      var self = this;

      
      
      if (column_count == null) {
        column_count = rows['$[]'](0).$size();
      };
      return self.$class().$send("new", rows, column_count);
    }, $Matrix_new_matrix$30.$$arity = -2);
    self.$private("new_matrix");
    
    Opal.def(self, '$[]', $Matrix_$$$31 = function(i, j) {try {

      var $$32, self = this;

      return $send(self.rows, 'fetch', [i], ($$32 = function(){var self = $$32.$$s == null ? this : $$32.$$s;

        Opal.ret(nil)}, $$32.$$s = self, $$32.$$arity = 0, $$32))['$[]'](j)
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_$$$31.$$arity = 2);
    $alias(self, "element", "[]");
    $alias(self, "component", "[]");
    
    Opal.def(self, '$[]=', $Matrix_$$$eq$33 = function(i, j, v) {
      var self = this, $writer = nil;

      
      $writer = [j, v];
      $send(self.rows['$[]'](i), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $Matrix_$$$eq$33.$$arity = 3);
    $alias(self, "set_element", "[]=");
    $alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    Opal.def(self, '$row_count', $Matrix_row_count$34 = function $$row_count() {
      var self = this;

      return self.rows.$size()
    }, $Matrix_row_count$34.$$arity = 0);
    self.$alias_method("row_size", "row_count");
    self.$attr_reader("column_count");
    self.$alias_method("column_size", "column_count");
    
    Opal.def(self, '$row', $Matrix_row$35 = function $$row(i) {try {

      var $iter = $Matrix_row$35.$$p, block = $iter || nil, $$36, $$37, self = this;

      if ($iter) $Matrix_row$35.$$p = null;
      
      
      if ($iter) $Matrix_row$35.$$p = null;;
      if ((block !== nil)) {
        
        $send($send(self.rows, 'fetch', [i], ($$36 = function(){var self = $$36.$$s == null ? this : $$36.$$s;

          Opal.ret(self)}, $$36.$$s = self, $$36.$$arity = 0, $$36)), 'each', [], block.$to_proc());
        return self;
      } else {
        return $$($nesting, 'Vector').$elements($send(self.rows, 'fetch', [i], ($$37 = function(){var self = $$37.$$s == null ? this : $$37.$$s;

          Opal.ret(nil)}, $$37.$$s = self, $$37.$$arity = 0, $$37)))
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_row$35.$$arity = 1);
    
    Opal.def(self, '$column', $Matrix_column$38 = function $$column(j) {
      var $$39, $$40, $iter = $Matrix_column$38.$$p, $yield = $iter || nil, self = this, $ret_or_6 = nil, $ret_or_7 = nil, col = nil;

      if ($iter) $Matrix_column$38.$$p = null;
      if (($yield !== nil)) {
        
        if ($truthy((function() {if ($truthy(($ret_or_6 = $rb_ge(j, self.$column_count())))) {
          return $ret_or_6
        } else {
          return $rb_lt(j, self.$column_count()['$-@']())
        }; return nil; })())) {
          return self};
        $send(self.$row_count(), 'times', [], ($$39 = function(i){var self = $$39.$$s == null ? this : $$39.$$s;
          if (self.rows == null) self.rows = nil;

          
          
          if (i == null) {
            i = nil;
          };
          return Opal.yield1($yield, self.rows['$[]'](i)['$[]'](j));;}, $$39.$$s = self, $$39.$$arity = 1, $$39));
        return self;
      } else {
        
        if ($truthy((function() {if ($truthy(($ret_or_7 = $rb_ge(j, self.$column_count())))) {
          return $ret_or_7
        } else {
          return $rb_lt(j, self.$column_count()['$-@']())
        }; return nil; })())) {
          return nil};
        col = $send($$($nesting, 'Array'), 'new', [self.$row_count()], ($$40 = function(i){var self = $$40.$$s == null ? this : $$40.$$s;
          if (self.rows == null) self.rows = nil;

          
          
          if (i == null) {
            i = nil;
          };
          return self.rows['$[]'](i)['$[]'](j);}, $$40.$$s = self, $$40.$$arity = 1, $$40));
        return $$($nesting, 'Vector').$elements(col, false);
      }
    }, $Matrix_column$38.$$arity = 1);
    
    Opal.def(self, '$collect', $Matrix_collect$41 = function $$collect() {
      var $iter = $Matrix_collect$41.$$p, block = $iter || nil, $$42, self = this, rows = nil;

      if ($iter) $Matrix_collect$41.$$p = null;
      
      
      if ($iter) $Matrix_collect$41.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("collect")
      };
      rows = $send(self.rows, 'collect', [], ($$42 = function(row){var self = $$42.$$s == null ? this : $$42.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], block.$to_proc());}, $$42.$$s = self, $$42.$$arity = 1, $$42));
      return self.$new_matrix(rows, self.$column_count());
    }, $Matrix_collect$41.$$arity = 0);
    $alias(self, "map", "collect");
    
    Opal.def(self, '$each', $Matrix_each$43 = function $$each(which) {try {

      var $$44, $$45, $$47, $$49, $$51, $$53, $$55, $iter = $Matrix_each$43.$$p, $yield = $iter || nil, self = this, last = nil, $case = nil, block = nil;

      if ($iter) $Matrix_each$43.$$p = null;
      
      
      if (which == null) {
        which = "all";
      };
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      $case = which;
      if ("all"['$===']($case)) {
      block = $$($nesting, 'Proc').$new();
      $send(self.rows, 'each', [], ($$44 = function(row){var self = $$44.$$s == null ? this : $$44.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'each', [], block.$to_proc());}, $$44.$$s = self, $$44.$$arity = 1, $$44));}
      else if ("diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$45 = function(row, row_index){var self = $$45.$$s == null ? this : $$45.$$s, $$46;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return Opal.yield1($yield, $send(row, 'fetch', [row_index], ($$46 = function(){var self = $$46.$$s == null ? this : $$46.$$s;

          Opal.ret(self)}, $$46.$$s = self, $$46.$$arity = 0, $$46)));;}, $$45.$$s = self, $$45.$$arity = 2, $$45))}
      else if ("off_diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$47 = function(row, row_index){var self = $$47.$$s == null ? this : $$47.$$s, $$48;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(self.$column_count(), 'times', [], ($$48 = function(col_index){var self = $$48.$$s == null ? this : $$48.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          if (row_index['$=='](col_index)) {
            return nil
          } else {
            return Opal.yield1($yield, row['$[]'](col_index));
          };}, $$48.$$s = self, $$48.$$arity = 1, $$48));}, $$47.$$s = self, $$47.$$arity = 2, $$47))}
      else if ("lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$49 = function(row, row_index){var self = $$49.$$s == null ? this : $$49.$$s, $$50;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send((0), 'upto', [[row_index, last].$min()], ($$50 = function(col_index){var self = $$50.$$s == null ? this : $$50.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, $$50.$$s = self, $$50.$$arity = 1, $$50));}, $$49.$$s = self, $$49.$$arity = 2, $$49))}
      else if ("strict_lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$51 = function(row, row_index){var self = $$51.$$s == null ? this : $$51.$$s, $$52;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send([row_index, self.$column_count()].$min(), 'times', [], ($$52 = function(col_index){var self = $$52.$$s == null ? this : $$52.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, $$52.$$s = self, $$52.$$arity = 1, $$52));}, $$51.$$s = self, $$51.$$arity = 2, $$51))}
      else if ("strict_upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$53 = function(row, row_index){var self = $$53.$$s == null ? this : $$53.$$s, $$54;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send($rb_plus(row_index, 1), 'upto', [last], ($$54 = function(col_index){var self = $$54.$$s == null ? this : $$54.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, $$54.$$s = self, $$54.$$arity = 1, $$54));}, $$53.$$s = self, $$53.$$arity = 2, $$53))}
      else if ("upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$55 = function(row, row_index){var self = $$55.$$s == null ? this : $$55.$$s, $$56;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row_index, 'upto', [last], ($$56 = function(col_index){var self = $$56.$$s == null ? this : $$56.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, $$56.$$s = self, $$56.$$arity = 1, $$56));}, $$55.$$s = self, $$55.$$arity = 2, $$55))}
      else {self.$raise($$($nesting, 'ArgumentError'), "" + "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")};
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_each$43.$$arity = -1);
    
    Opal.def(self, '$each_with_index', $Matrix_each_with_index$57 = function $$each_with_index(which) {try {

      var $$58, $$60, $$62, $$64, $$66, $$68, $$70, $iter = $Matrix_each_with_index$57.$$p, $yield = $iter || nil, self = this, last = nil, $case = nil;

      if ($iter) $Matrix_each_with_index$57.$$p = null;
      
      
      if (which == null) {
        which = "all";
      };
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each_with_index", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      $case = which;
      if ("all"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$58 = function(row, row_index){var self = $$58.$$s == null ? this : $$58.$$s, $$59;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row, 'each_with_index', [], ($$59 = function(e, col_index){var self = $$59.$$s == null ? this : $$59.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [e, row_index, col_index]);;}, $$59.$$s = self, $$59.$$arity = 2, $$59));}, $$58.$$s = self, $$58.$$arity = 2, $$58))}
      else if ("diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$60 = function(row, row_index){var self = $$60.$$s == null ? this : $$60.$$s, $$61;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return Opal.yieldX($yield, [$send(row, 'fetch', [row_index], ($$61 = function(){var self = $$61.$$s == null ? this : $$61.$$s;

          Opal.ret(self)}, $$61.$$s = self, $$61.$$arity = 0, $$61)), row_index, row_index]);;}, $$60.$$s = self, $$60.$$arity = 2, $$60))}
      else if ("off_diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$62 = function(row, row_index){var self = $$62.$$s == null ? this : $$62.$$s, $$63;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(self.$column_count(), 'times', [], ($$63 = function(col_index){var self = $$63.$$s == null ? this : $$63.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          if (row_index['$=='](col_index)) {
            return nil
          } else {
            return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);
          };}, $$63.$$s = self, $$63.$$arity = 1, $$63));}, $$62.$$s = self, $$62.$$arity = 2, $$62))}
      else if ("lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$64 = function(row, row_index){var self = $$64.$$s == null ? this : $$64.$$s, $$65;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send((0), 'upto', [[row_index, last].$min()], ($$65 = function(col_index){var self = $$65.$$s == null ? this : $$65.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, $$65.$$s = self, $$65.$$arity = 1, $$65));}, $$64.$$s = self, $$64.$$arity = 2, $$64))}
      else if ("strict_lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$66 = function(row, row_index){var self = $$66.$$s == null ? this : $$66.$$s, $$67;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send([row_index, self.$column_count()].$min(), 'times', [], ($$67 = function(col_index){var self = $$67.$$s == null ? this : $$67.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, $$67.$$s = self, $$67.$$arity = 1, $$67));}, $$66.$$s = self, $$66.$$arity = 2, $$66))}
      else if ("strict_upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$68 = function(row, row_index){var self = $$68.$$s == null ? this : $$68.$$s, $$69;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send($rb_plus(row_index, 1), 'upto', [last], ($$69 = function(col_index){var self = $$69.$$s == null ? this : $$69.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, $$69.$$s = self, $$69.$$arity = 1, $$69));}, $$68.$$s = self, $$68.$$arity = 2, $$68))}
      else if ("upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], ($$70 = function(row, row_index){var self = $$70.$$s == null ? this : $$70.$$s, $$71;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row_index, 'upto', [last], ($$71 = function(col_index){var self = $$71.$$s == null ? this : $$71.$$s;

          
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, $$71.$$s = self, $$71.$$arity = 1, $$71));}, $$70.$$s = self, $$70.$$arity = 2, $$70))}
      else {self.$raise($$($nesting, 'ArgumentError'), "" + "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")};
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_each_with_index$57.$$arity = -1);
    Opal.const_set($nesting[0], 'SELECTORS', $hash2(["all", "diagonal", "off_diagonal", "lower", "strict_lower", "strict_upper", "upper"], {"all": true, "diagonal": true, "off_diagonal": true, "lower": true, "strict_lower": true, "strict_upper": true, "upper": true}).$freeze());
    
    Opal.def(self, '$index', $Matrix_index$72 = function $$index($a) {try {

      var $post_args, args, $$73, $$74, $iter = $Matrix_index$72.$$p, $yield = $iter || nil, self = this, which = nil, $ret_or_8 = nil, $ret_or_9 = nil, value = nil;

      if ($iter) $Matrix_index$72.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$size(), 2))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments(" + (args.$size()) + " for 0-2)")};
      which = (function() {if ($truthy((function() {if ($truthy(($ret_or_8 = args.$size()['$=='](2)))) {
        return $ret_or_8
      } else {
        return $$($nesting, 'SELECTORS')['$include?'](args.$last())
      }; return nil; })())) {
        return args.$pop()
      } else {
        return "all"
      }; return nil; })();
      if ($truthy((function() {if ($truthy(($ret_or_9 = ($yield !== nil)))) {
        return $ret_or_9
      } else {
        return args.$size()['$=='](1)
      }; return nil; })())) {
      } else {
        return $send(self, 'to_enum', ["find_index", which].concat(Opal.to_a(args)))
      };
      if (args.$size()['$=='](1)) {
        
        value = args.$first();
        $send(self, 'each_with_index', [which], ($$73 = function(e, row_index, col_index){var self = $$73.$$s == null ? this : $$73.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          
          if (row_index == null) {
            row_index = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          if (e['$=='](value)) {
            Opal.ret([row_index, col_index])
          } else {
            return nil
          };}, $$73.$$s = self, $$73.$$arity = 3, $$73));
      } else {
        $send(self, 'each_with_index', [which], ($$74 = function(e, row_index, col_index){var self = $$74.$$s == null ? this : $$74.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          
          if (row_index == null) {
            row_index = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          if ($truthy(Opal.yield1($yield, e))) {
            Opal.ret([row_index, col_index])
          } else {
            return nil
          };}, $$74.$$s = self, $$74.$$arity = 3, $$74))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_index$72.$$arity = -1);
    self.$alias_method("find_index", "index");
    
    Opal.def(self, '$minor', $Matrix_minor$75 = function $$minor($a) {
      var $post_args, param, $b, $c, $$76, self = this, $case = nil, row_range = nil, col_range = nil, from_row = nil, to_row = nil, size_row = nil, from_col = nil, to_col = nil, size_col = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      param = $post_args;;
      $case = param.$size();
      if ((2)['$===']($case)) {
      $c = param, $b = Opal.to_ary($c), (row_range = ($b[0] == null ? nil : $b[0])), (col_range = ($b[1] == null ? nil : $b[1])), $c;
      from_row = row_range.$first();
      if ($truthy($rb_lt(from_row, 0))) {
        from_row = $rb_plus(from_row, self.$row_count())};
      to_row = row_range.$end();
      if ($truthy($rb_lt(to_row, 0))) {
        to_row = $rb_plus(to_row, self.$row_count())};
      if ($truthy(row_range['$exclude_end?']())) {
      } else {
        to_row = $rb_plus(to_row, 1)
      };
      size_row = $rb_minus(to_row, from_row);
      from_col = col_range.$first();
      if ($truthy($rb_lt(from_col, 0))) {
        from_col = $rb_plus(from_col, self.$column_count())};
      to_col = col_range.$end();
      if ($truthy($rb_lt(to_col, 0))) {
        to_col = $rb_plus(to_col, self.$column_count())};
      if ($truthy(col_range['$exclude_end?']())) {
      } else {
        to_col = $rb_plus(to_col, 1)
      };
      size_col = $rb_minus(to_col, from_col);}
      else if ((4)['$===']($case)) {
      $c = param, $b = Opal.to_ary($c), (from_row = ($b[0] == null ? nil : $b[0])), (size_row = ($b[1] == null ? nil : $b[1])), (from_col = ($b[2] == null ? nil : $b[2])), (size_col = ($b[3] == null ? nil : $b[3])), $c;
      if ($truthy((function() {if ($truthy(($ret_or_10 = $rb_lt(size_row, 0)))) {
        return $ret_or_10
      } else {
        return $rb_lt(size_col, 0)
      }; return nil; })())) {
        return nil};
      if ($truthy($rb_lt(from_row, 0))) {
        from_row = $rb_plus(from_row, self.$row_count())};
      if ($truthy($rb_lt(from_col, 0))) {
        from_col = $rb_plus(from_col, self.$column_count())};}
      else {self.$raise($$($nesting, 'ArgumentError'), param.$inspect())};
      if ($truthy((function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = $rb_gt(from_row, self.$row_count())))) {
        return $ret_or_13
      } else {
        return $rb_gt(from_col, self.$column_count())
      }; return nil; })()))) {
        return $ret_or_12
      } else {
        return $rb_lt(from_row, 0)
      }; return nil; })()))) {
        return $ret_or_11
      } else {
        return $rb_lt(from_col, 0)
      }; return nil; })())) {
        return nil};
      rows = $send(self.rows['$[]'](from_row, size_row), 'collect', [], ($$76 = function(row){var self = $$76.$$s == null ? this : $$76.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        return row['$[]'](from_col, size_col);}, $$76.$$s = self, $$76.$$arity = 1, $$76));
      return self.$new_matrix(rows, [$rb_minus(self.$column_count(), from_col), size_col].$min());
    }, $Matrix_minor$75.$$arity = -1);
    
    Opal.def(self, '$first_minor', $Matrix_first_minor$77 = function $$first_minor(row, column) {
      var $$78, self = this, $ret_or_14 = nil, $ret_or_15 = nil, arrays = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "first_minor of empty matrix is not defined")};
      if ($truthy((function() {if ($truthy(($ret_or_14 = $rb_le(0, row)))) {
        return $rb_lt(row, self.$row_count())
      } else {
        return $ret_or_14
      }; return nil; })())) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid row (" + (row.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      if ($truthy((function() {if ($truthy(($ret_or_15 = $rb_le(0, column)))) {
        return $rb_lt(column, self.$column_count())
      } else {
        return $ret_or_15
      }; return nil; })())) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid column (" + (column.$inspect()) + " for 0.." + ($rb_minus(self.$column_count(), 1)) + ")")
      };
      arrays = self.$to_a();
      arrays.$delete_at(row);
      $send(arrays, 'each', [], ($$78 = function(array){var self = $$78.$$s == null ? this : $$78.$$s;

        
        
        if (array == null) {
          array = nil;
        };
        return array.$delete_at(column);}, $$78.$$s = self, $$78.$$arity = 1, $$78));
      return self.$new_matrix(arrays, $rb_minus(self.$column_count(), 1));
    }, $Matrix_first_minor$77.$$arity = 2);
    
    Opal.def(self, '$cofactor', $Matrix_cofactor$79 = function $$cofactor(row, column) {
      var self = this, det_of_minor = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "cofactor of empty matrix is not defined")};
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      det_of_minor = self.$first_minor(row, column).$determinant();
      return $rb_times(det_of_minor, (-1)['$**']($rb_plus(row, column)));
    }, $Matrix_cofactor$79.$$arity = 2);
    
    Opal.def(self, '$adjugate', $Matrix_adjugate$80 = function $$adjugate() {
      var $$81, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send($$($nesting, 'Matrix'), 'build', [self.$row_count(), self.$column_count()], ($$81 = function(row, column){var self = $$81.$$s == null ? this : $$81.$$s;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (column == null) {
          column = nil;
        };
        return self.$cofactor(column, row);}, $$81.$$s = self, $$81.$$arity = 2, $$81));
    }, $Matrix_adjugate$80.$$arity = 0);
    
    Opal.def(self, '$laplace_expansion', $Matrix_laplace_expansion$82 = function $$laplace_expansion($kwargs) {
      var row, column, $$83, self = this, num = nil, $ret_or_16 = nil, $ret_or_17 = nil, $ret_or_18 = nil, $ret_or_19 = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      row = $kwargs.$$smap["row"];
      if (row == null) {
        row = nil
      };
      
      column = $kwargs.$$smap["column"];
      if (column == null) {
        column = nil
      };
      num = (function() {if ($truthy(($ret_or_16 = row))) {
        return $ret_or_16
      } else {
        return column
      }; return nil; })();
      if ($truthy((function() {if ($truthy(($ret_or_17 = num['$!']()))) {
        return $ret_or_17
      } else {
        
        if ($truthy(($ret_or_18 = row))) {
          return column
        } else {
          return $ret_or_18
        };
      }; return nil; })())) {
        self.$raise($$($nesting, 'ArgumentError'), "exactly one the row or column arguments must be specified")};
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "laplace_expansion of empty matrix is not defined")};
      if ($truthy((function() {if ($truthy(($ret_or_19 = $rb_le(0, num)))) {
        return $rb_lt(num, self.$row_count())
      } else {
        return $ret_or_19
      }; return nil; })())) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid num (" + (num.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      return $send(self.$send((function() {if ($truthy(row)) {
        return "row"
      } else {
        return "column"
      }; return nil; })(), num).$map(), 'with_index', [], ($$83 = function(e, k){var self = $$83.$$s == null ? this : $$83.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        return $rb_times(e, $send(self, 'cofactor', Opal.to_a((function() {if ($truthy(row)) {
          return [num, k]
        } else {
          return [k, num]
        }; return nil; })())));}, $$83.$$s = self, $$83.$$arity = 2, $$83)).$inject("+");
    }, $Matrix_laplace_expansion$82.$$arity = -1);
    self.$alias_method("cofactor_expansion", "laplace_expansion");
    
    Opal.def(self, '$diagonal?', $Matrix_diagonal$ques$84 = function() {
      var self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(self.$each("off_diagonal"), 'all?', [], "zero?".$to_proc());
    }, $Matrix_diagonal$ques$84.$$arity = 0);
    
    Opal.def(self, '$empty?', $Matrix_empty$ques$85 = function() {
      var self = this, $ret_or_20 = nil;

      if ($truthy(($ret_or_20 = self.$column_count()['$=='](0)))) {
        return $ret_or_20
      } else {
        return self.$row_count()['$=='](0)
      }
    }, $Matrix_empty$ques$85.$$arity = 0);
    
    Opal.def(self, '$hermitian?', $Matrix_hermitian$ques$86 = function() {
      var $$87, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(self.$each_with_index("upper"), 'all?', [], ($$87 = function(e, row, col){var self = $$87.$$s == null ? this : $$87.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        return e['$=='](self.$rows()['$[]'](col)['$[]'](row).$conj());}, $$87.$$s = self, $$87.$$arity = 3, $$87));
    }, $Matrix_hermitian$ques$86.$$arity = 0);
    
    Opal.def(self, '$lower_triangular?', $Matrix_lower_triangular$ques$88 = function() {
      var self = this;

      return $send(self.$each("strict_upper"), 'all?', [], "zero?".$to_proc())
    }, $Matrix_lower_triangular$ques$88.$$arity = 0);
    
    Opal.def(self, '$normal?', $Matrix_normal$ques$89 = function() {try {

      var $$90, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], ($$90 = function(row_i, i){var self = $$90.$$s == null ? this : $$90.$$s, $$91;

        
        
        if (row_i == null) {
          row_i = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$rows(), 'each_with_index', [], ($$91 = function(row_j, j){var self = $$91.$$s == null ? this : $$91.$$s, $$92, s = nil;

          
          
          if (row_j == null) {
            row_j = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$rows(), 'each_with_index', [], ($$92 = function(row_k, k){var self = $$92.$$s == null ? this : $$92.$$s;

            
            
            if (row_k == null) {
              row_k = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_minus($rb_times(row_i['$[]'](k), row_j['$[]'](k).$conj()), $rb_times(row_k['$[]'](i).$conj(), row_k['$[]'](j)))));}, $$92.$$s = self, $$92.$$arity = 2, $$92));
          if (s['$=='](0)) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$91.$$s = self, $$91.$$arity = 2, $$91));}, $$90.$$s = self, $$90.$$arity = 2, $$90));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_normal$ques$89.$$arity = 0);
    
    Opal.def(self, '$orthogonal?', $Matrix_orthogonal$ques$93 = function() {try {

      var $$94, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], ($$94 = function(row, i){var self = $$94.$$s == null ? this : $$94.$$s, $$95;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$column_count(), 'times', [], ($$95 = function(j){var self = $$95.$$s == null ? this : $$95.$$s, $$96, s = nil;

          
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$row_count(), 'times', [], ($$96 = function(k){var self = $$96.$$s == null ? this : $$96.$$s;

            
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_times(row['$[]'](k), self.$rows()['$[]'](k)['$[]'](j))));}, $$96.$$s = self, $$96.$$arity = 1, $$96));
          if (s['$==']((function() {if (i['$=='](j)) {
            return 1
          } else {
            return 0
          }; return nil; })())) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$95.$$s = self, $$95.$$arity = 1, $$95));}, $$94.$$s = self, $$94.$$arity = 2, $$94));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_orthogonal$ques$93.$$arity = 0);
    
    Opal.def(self, '$permutation?', $Matrix_permutation$ques$97 = function() {try {

      var $$98, self = this, cols = nil;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      cols = $$($nesting, 'Array').$new(self.$column_count());
      $send(self.$rows(), 'each_with_index', [], ($$98 = function(row, i){var self = $$98.$$s == null ? this : $$98.$$s, $$99, found = nil;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        found = false;
        $send(row, 'each_with_index', [], ($$99 = function(e, j){var self = $$99.$$s == null ? this : $$99.$$s, $ret_or_21 = nil, $writer = nil;

          
          
          if (e == null) {
            e = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if (e['$=='](1)) {
            
            if ($truthy((function() {if ($truthy(($ret_or_21 = found))) {
              return $ret_or_21
            } else {
              return cols['$[]'](j)
            }; return nil; })())) {
              Opal.ret(false)};
            return (found = (($writer = [j, true]), $send(cols, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          } else if ($truthy(e['$!='](0))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$99.$$s = self, $$99.$$arity = 2, $$99));
        if ($truthy(found)) {
          return nil
        } else {
          Opal.ret(false)
        };}, $$98.$$s = self, $$98.$$arity = 2, $$98));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_permutation$ques$97.$$arity = 0);
    
    Opal.def(self, '$real?', $Matrix_real$ques$100 = function() {
      var self = this;

      return $send(self, 'all?', [], "real?".$to_proc())
    }, $Matrix_real$ques$100.$$arity = 0);
    
    Opal.def(self, '$regular?', $Matrix_regular$ques$101 = function() {
      var self = this;

      return self['$singular?']()['$!']()
    }, $Matrix_regular$ques$101.$$arity = 0);
    
    Opal.def(self, '$singular?', $Matrix_singular$ques$102 = function() {
      var self = this;

      return self.$determinant()['$=='](0)
    }, $Matrix_singular$ques$102.$$arity = 0);
    
    Opal.def(self, '$square?', $Matrix_square$ques$103 = function() {
      var self = this;

      return self.$column_count()['$=='](self.$row_count())
    }, $Matrix_square$ques$103.$$arity = 0);
    
    Opal.def(self, '$symmetric?', $Matrix_symmetric$ques$104 = function() {try {

      var $$105, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["strict_upper"], ($$105 = function(e, row, col){var self = $$105.$$s == null ? this : $$105.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        if ($truthy(e['$!='](self.$rows()['$[]'](col)['$[]'](row)))) {
          Opal.ret(false)
        } else {
          return nil
        };}, $$105.$$s = self, $$105.$$arity = 3, $$105));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_symmetric$ques$104.$$arity = 0);
    
    Opal.def(self, '$antisymmetric?', $Matrix_antisymmetric$ques$106 = function() {try {

      var $$107, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["upper"], ($$107 = function(e, row, col){var self = $$107.$$s == null ? this : $$107.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        if (e['$=='](self.$rows()['$[]'](col)['$[]'](row)['$-@']())) {
          return nil
        } else {
          Opal.ret(false)
        };}, $$107.$$s = self, $$107.$$arity = 3, $$107));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_antisymmetric$ques$106.$$arity = 0);
    
    Opal.def(self, '$unitary?', $Matrix_unitary$ques$108 = function() {try {

      var $$109, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], ($$109 = function(row, i){var self = $$109.$$s == null ? this : $$109.$$s, $$110;

        
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$column_count(), 'times', [], ($$110 = function(j){var self = $$110.$$s == null ? this : $$110.$$s, $$111, s = nil;

          
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$row_count(), 'times', [], ($$111 = function(k){var self = $$111.$$s == null ? this : $$111.$$s;

            
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_times(row['$[]'](k).$conj(), self.$rows()['$[]'](k)['$[]'](j))));}, $$111.$$s = self, $$111.$$arity = 1, $$111));
          if (s['$==']((function() {if (i['$=='](j)) {
            return 1
          } else {
            return 0
          }; return nil; })())) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$110.$$s = self, $$110.$$arity = 1, $$110));}, $$109.$$s = self, $$109.$$arity = 2, $$109));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_unitary$ques$108.$$arity = 0);
    
    Opal.def(self, '$upper_triangular?', $Matrix_upper_triangular$ques$112 = function() {
      var self = this;

      return $send(self.$each("strict_lower"), 'all?', [], "zero?".$to_proc())
    }, $Matrix_upper_triangular$ques$112.$$arity = 0);
    
    Opal.def(self, '$zero?', $Matrix_zero$ques$113 = function() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, $Matrix_zero$ques$113.$$arity = 0);
    
    Opal.def(self, '$==', $Matrix_$eq_eq$114 = function(other) {
      var self = this, $ret_or_22 = nil;

      
      if ($truthy((function() {if ($truthy(($ret_or_22 = $$($nesting, 'Matrix')['$==='](other)))) {
        return self.$column_count()['$=='](other.$column_count())
      } else {
        return $ret_or_22
      }; return nil; })())) {
      } else {
        return false
      };
      return self.$rows()['$=='](other.$rows());
    }, $Matrix_$eq_eq$114.$$arity = 1);
    
    Opal.def(self, '$eql?', $Matrix_eql$ques$115 = function(other) {
      var self = this, $ret_or_23 = nil;

      
      if ($truthy((function() {if ($truthy(($ret_or_23 = $$($nesting, 'Matrix')['$==='](other)))) {
        return self.$column_count()['$=='](other.$column_count())
      } else {
        return $ret_or_23
      }; return nil; })())) {
      } else {
        return false
      };
      return self.$rows()['$eql?'](other.$rows());
    }, $Matrix_eql$ques$115.$$arity = 1);
    
    Opal.def(self, '$clone', $Matrix_clone$116 = function $$clone() {
      var self = this;

      return self.$new_matrix($send(self.rows, 'map', [], "dup".$to_proc()), self.$column_count())
    }, $Matrix_clone$116.$$arity = 0);
    
    Opal.def(self, '$hash', $Matrix_hash$117 = function $$hash() {
      var self = this;

      return self.rows.$hash()
    }, $Matrix_hash$117.$$arity = 0);
    
    Opal.def(self, '$*', $Matrix_$$118 = function(m) {
      var $$119, $$121, self = this, $case = nil, rows = nil, r = nil;

      return (function() {$case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      rows = $send(self.rows, 'collect', [], ($$119 = function(row){var self = $$119.$$s == null ? this : $$119.$$s, $$120;

        
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], ($$120 = function(e){var self = $$120.$$s == null ? this : $$120.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          return $rb_times(e, m);}, $$120.$$s = self, $$120.$$arity = 1, $$120));}, $$119.$$s = self, $$119.$$arity = 1, $$119));
      return self.$new_matrix(rows, self.$column_count());}
      else if ($$($nesting, 'Vector')['$===']($case)) {
      m = self.$class().$column_vector(m);
      r = $rb_times(self, m);
      return r.$column(0);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {
      if ($truthy(self.$column_count()['$!='](m.$row_count()))) {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], ($$121 = function(i){var self = $$121.$$s == null ? this : $$121.$$s, $$122;

        
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [m.$column_count()], ($$122 = function(j){var self = $$122.$$s == null ? this : $$122.$$s, $$123;

          
          
          if (j == null) {
            j = nil;
          };
          return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], ($$123 = function(vij, k){var self = $$123.$$s == null ? this : $$123.$$s;

            
            
            if (vij == null) {
              vij = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            return $rb_plus(vij, $rb_times(self['$[]'](i, k), m['$[]'](k, j)));}, $$123.$$s = self, $$123.$$arity = 2, $$123));}, $$122.$$s = self, $$122.$$arity = 1, $$122));}, $$121.$$s = self, $$121.$$arity = 1, $$121));
      return self.$new_matrix(rows, m.$column_count());}
      else {return self.$apply_through_coercion(m, "*")}})()
    }, $Matrix_$$118.$$arity = 1);
    
    Opal.def(self, '$+', $Matrix_$plus$124 = function(m) {
      var $$125, self = this, $case = nil, $ret_or_24 = nil, rows = nil;

      
      $case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {$$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "+", self.$class(), m.$class())}
      else if ($$($nesting, 'Vector')['$===']($case)) {m = self.$class().$column_vector(m)}
      else if ($$($nesting, 'Matrix')['$===']($case)) {nil}
      else {return self.$apply_through_coercion(m, "+")};
      if ($truthy((function() {if ($truthy(($ret_or_24 = self.$row_count()['$=='](m.$row_count())))) {
        return self.$column_count()['$=='](m.$column_count())
      } else {
        return $ret_or_24
      }; return nil; })())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], ($$125 = function(i){var self = $$125.$$s == null ? this : $$125.$$s, $$126;

        
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [self.$column_count()], ($$126 = function(j){var self = $$126.$$s == null ? this : $$126.$$s;

          
          
          if (j == null) {
            j = nil;
          };
          return $rb_plus(self['$[]'](i, j), m['$[]'](i, j));}, $$126.$$s = self, $$126.$$arity = 1, $$126));}, $$125.$$s = self, $$125.$$arity = 1, $$125));
      return self.$new_matrix(rows, self.$column_count());
    }, $Matrix_$plus$124.$$arity = 1);
    
    Opal.def(self, '$-', $Matrix_$minus$127 = function(m) {
      var $$128, self = this, $case = nil, $ret_or_25 = nil, rows = nil;

      
      $case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {$$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "-", self.$class(), m.$class())}
      else if ($$($nesting, 'Vector')['$===']($case)) {m = self.$class().$column_vector(m)}
      else if ($$($nesting, 'Matrix')['$===']($case)) {nil}
      else {return self.$apply_through_coercion(m, "-")};
      if ($truthy((function() {if ($truthy(($ret_or_25 = self.$row_count()['$=='](m.$row_count())))) {
        return self.$column_count()['$=='](m.$column_count())
      } else {
        return $ret_or_25
      }; return nil; })())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], ($$128 = function(i){var self = $$128.$$s == null ? this : $$128.$$s, $$129;

        
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [self.$column_count()], ($$129 = function(j){var self = $$129.$$s == null ? this : $$129.$$s;

          
          
          if (j == null) {
            j = nil;
          };
          return $rb_minus(self['$[]'](i, j), m['$[]'](i, j));}, $$129.$$s = self, $$129.$$arity = 1, $$129));}, $$128.$$s = self, $$128.$$arity = 1, $$128));
      return self.$new_matrix(rows, self.$column_count());
    }, $Matrix_$minus$127.$$arity = 1);
    
    Opal.def(self, '$/', $Matrix_$slash$130 = function(other) {
      var $$131, self = this, $case = nil, rows = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      rows = $send(self.rows, 'collect', [], ($$131 = function(row){var self = $$131.$$s == null ? this : $$131.$$s, $$132;

        
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], ($$132 = function(e){var self = $$132.$$s == null ? this : $$132.$$s;

          
          
          if (e == null) {
            e = nil;
          };
          return $rb_divide(e, other);}, $$132.$$s = self, $$132.$$arity = 1, $$132));}, $$131.$$s = self, $$131.$$arity = 1, $$131));
      return self.$new_matrix(rows, self.$column_count());}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times(self, other.$inverse())}
      else {return self.$apply_through_coercion(other, "/")}})()
    }, $Matrix_$slash$130.$$arity = 1);
    
    Opal.def(self, '$hadamard_product', $Matrix_hadamard_product$133 = function $$hadamard_product(m) {
      var $$134, self = this;

      return $send(self, 'combine', [m], ($$134 = function(a, b){var self = $$134.$$s == null ? this : $$134.$$s;

        
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return $rb_times(a, b);}, $$134.$$s = self, $$134.$$arity = 2, $$134))
    }, $Matrix_hadamard_product$133.$$arity = 1);
    self.$alias_method("entrywise_product", "hadamard_product");
    
    Opal.def(self, '$inverse', $Matrix_inverse$135 = function $$inverse() {
      var self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return self.$class().$I(self.$row_count()).$send("inverse_from", self);
    }, $Matrix_inverse$135.$$arity = 0);
    $alias(self, "inv", "inverse");
    
    Opal.def(self, '$inverse_from', $Matrix_inverse_from$136 = function $$inverse_from(src) {
      var $$137, self = this, last = nil, a = nil;

      
      last = $rb_minus(self.$row_count(), 1);
      a = src.$to_a();
      $send((0), 'upto', [last], ($$137 = function(k){var self = $$137.$$s == null ? this : $$137.$$s, $$138, $a, $$139, $$142, $$143, i = nil, akk = nil;
        if (self.rows == null) self.rows = nil;

        
        
        if (k == null) {
          k = nil;
        };
        i = k;
        akk = a['$[]'](k)['$[]'](k).$abs();
        $send($rb_plus(k, 1), 'upto', [last], ($$138 = function(j){var self = $$138.$$s == null ? this : $$138.$$s, v = nil;

          
          
          if (j == null) {
            j = nil;
          };
          v = a['$[]'](j)['$[]'](k).$abs();
          if ($truthy($rb_gt(v, akk))) {
            
            i = j;
            return (akk = v);
          } else {
            return nil
          };}, $$138.$$s = self, $$138.$$arity = 1, $$138));
        if (akk['$=='](0)) {
          $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrNotRegular'))};
        if ($truthy(i['$!='](k))) {
          
          $a = [a['$[]'](k), a['$[]'](i)], a['$[]='](i, $a[0]), a['$[]='](k, $a[1]), $a;
          $a = [self.rows['$[]'](k), self.rows['$[]'](i)], self.rows['$[]='](i, $a[0]), self.rows['$[]='](k, $a[1]), $a;};
        akk = a['$[]'](k)['$[]'](k);
        $send((0), 'upto', [last], ($$139 = function(ii){var self = $$139.$$s == null ? this : $$139.$$s, $$140, $$141, q = nil, $writer = nil;

          
          
          if (ii == null) {
            ii = nil;
          };
          if (ii['$=='](k)) {
            return nil;};
          q = a['$[]'](ii)['$[]'](k).$quo(akk);
          
          $writer = [k, 0];
          $send(a['$[]'](ii), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $send($rb_plus(k, 1), 'upto', [last], ($$140 = function(j){var self = $$140.$$s == null ? this : $$140.$$s, $binary_op_recvr_tmp_1 = nil;

            
            
            if (j == null) {
              j = nil;
            };
            $binary_op_recvr_tmp_1 = a['$[]'](ii);
            
            $writer = [j, $rb_minus($binary_op_recvr_tmp_1['$[]'](j), $rb_times(a['$[]'](k)['$[]'](j), q))];
            $send($binary_op_recvr_tmp_1, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$140.$$s = self, $$140.$$arity = 1, $$140));
          return $send((0), 'upto', [last], ($$141 = function(j){var self = $$141.$$s == null ? this : $$141.$$s, $binary_op_recvr_tmp_2 = nil;
            if (self.rows == null) self.rows = nil;

            
            
            if (j == null) {
              j = nil;
            };
            $binary_op_recvr_tmp_2 = self.rows['$[]'](ii);
            
            $writer = [j, $rb_minus($binary_op_recvr_tmp_2['$[]'](j), $rb_times(self.rows['$[]'](k)['$[]'](j), q))];
            $send($binary_op_recvr_tmp_2, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$141.$$s = self, $$141.$$arity = 1, $$141));}, $$139.$$s = self, $$139.$$arity = 1, $$139));
        $send($rb_plus(k, 1), 'upto', [last], ($$142 = function(j){var self = $$142.$$s == null ? this : $$142.$$s, $writer = nil;

          
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, a['$[]'](k)['$[]'](j).$quo(akk)];
          $send(a['$[]'](k), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$142.$$s = self, $$142.$$arity = 1, $$142));
        return $send((0), 'upto', [last], ($$143 = function(j){var self = $$143.$$s == null ? this : $$143.$$s, $writer = nil;
          if (self.rows == null) self.rows = nil;

          
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, self.rows['$[]'](k)['$[]'](j).$quo(akk)];
          $send(self.rows['$[]'](k), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$143.$$s = self, $$143.$$arity = 1, $$143));}, $$137.$$s = self, $$137.$$arity = 1, $$137));
      return self;
    }, $Matrix_inverse_from$136.$$arity = 1);
    self.$private("inverse_from");
    
    Opal.def(self, '$**', $Matrix_$$$144 = function(other) {try {

      var $$145, $a, $b, $$146, self = this, $case = nil, x = nil, z = nil, v = nil, d = nil, v_inv = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Integer')['$===']($case)) {
      x = self;
      if ($truthy($rb_le(other, 0))) {
        
        x = self.$inverse();
        if (other['$=='](0)) {
          return self.$class().$identity(self.$column_count())};
        other = other['$-@']();};
      z = nil;
      return $send(self, 'loop', [], ($$145 = function(){var self = $$145.$$s == null ? this : $$145.$$s;

        
        if (other['$[]'](0)['$=='](1)) {
          z = (function() {if ($truthy(z)) {
            return $rb_times(z, x)
          } else {
            return x
          }; return nil; })()};
        if ($truthy((other = other['$>>'](1))['$zero?']())) {
          Opal.ret(z)};
        return (x = $rb_times(x, x));}, $$145.$$s = self, $$145.$$arity = 0, $$145));}
      else if ($$($nesting, 'Numeric')['$===']($case)) {
      $b = self.$eigensystem(), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (d = ($a[1] == null ? nil : $a[1])), (v_inv = ($a[2] == null ? nil : $a[2])), $b;
      return $rb_times($rb_times(v, $send(self.$class(), 'diagonal', Opal.to_a($send(d.$each("diagonal"), 'map', [], ($$146 = function(e){var self = $$146.$$s == null ? this : $$146.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return e['$**'](other);}, $$146.$$s = self, $$146.$$arity = 1, $$146))))), v_inv);}
      else {return $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "**", self.$class(), other.$class())}})()
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_$$$144.$$arity = 1);
    
    Opal.def(self, '$+@', $Matrix_$plus$$147 = function() {
      var self = this;

      return self
    }, $Matrix_$plus$$147.$$arity = 0);
    
    Opal.def(self, '$-@', $Matrix_$minus$$148 = function() {
      var $$149, self = this;

      return $send(self, 'collect', [], ($$149 = function(e){var self = $$149.$$s == null ? this : $$149.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return e['$-@']();}, $$149.$$s = self, $$149.$$arity = 1, $$149))
    }, $Matrix_$minus$$148.$$arity = 0);
    
    Opal.def(self, '$determinant', $Matrix_determinant$150 = function $$determinant() {
      var $a, $b, self = this, m = nil, $case = nil, m0 = nil, m1 = nil, m2 = nil, m3 = nil;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      m = self.rows;
      return (function() {$case = self.$row_count();
      if ((0)['$===']($case)) {return 1}
      else if ((1)['$===']($case)) {return m['$[]'](0)['$[]'](0)['$+@']()}
      else if ((2)['$===']($case)) {return $rb_minus($rb_times(m['$[]'](0)['$[]'](0)['$+@'](), m['$[]'](1)['$[]'](1)), $rb_times(m['$[]'](0)['$[]'](1), m['$[]'](1)['$[]'](0)))}
      else if ((3)['$===']($case)) {
      $b = m, $a = Opal.to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), $b;
      return $rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), $rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)));}
      else if ((4)['$===']($case)) {
      $b = m, $a = Opal.to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), (m3 = ($a[3] == null ? nil : $a[3])), $b;
      return $rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](3)), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](0)));}
      else {return self.$determinant_bareiss()}})();
    }, $Matrix_determinant$150.$$arity = 0);
    self.$alias_method("det", "determinant");
    
    Opal.def(self, '$determinant_bareiss', $Matrix_determinant_bareiss$151 = function $$determinant_bareiss() {try {

      var $$152, $$153, self = this, size = nil, last = nil, a = nil, no_pivot = nil, sign = nil, pivot = nil;

      
      size = self.$row_count();
      last = $rb_minus(size, 1);
      a = self.$to_a();
      no_pivot = $send($$($nesting, 'Proc'), 'new', [], ($$152 = function(){var self = $$152.$$s == null ? this : $$152.$$s;

        Opal.ret(0)}, $$152.$$s = self, $$152.$$arity = 0, $$152));
      sign = 1;
      pivot = 1;
      $send(size, 'times', [], ($$153 = function(k){var self = $$153.$$s == null ? this : $$153.$$s, $$154, $a, $$155, previous_pivot = nil, switch$ = nil;

        
        
        if (k == null) {
          k = nil;
        };
        previous_pivot = pivot;
        if ((pivot = a['$[]'](k)['$[]'](k))['$=='](0)) {
          
          switch$ = $send(Opal.Range.$new($rb_plus(k, 1),size, true), 'find', [no_pivot], ($$154 = function(row){var self = $$154.$$s == null ? this : $$154.$$s;

            
            
            if (row == null) {
              row = nil;
            };
            return a['$[]'](row)['$[]'](k)['$!='](0);}, $$154.$$s = self, $$154.$$arity = 1, $$154));
          $a = [a['$[]'](k), a['$[]'](switch$)], a['$[]='](switch$, $a[0]), a['$[]='](k, $a[1]), $a;
          pivot = a['$[]'](k)['$[]'](k);
          sign = sign['$-@']();};
        return $send($rb_plus(k, 1), 'upto', [last], ($$155 = function(i){var self = $$155.$$s == null ? this : $$155.$$s, $$156, ai = nil;

          
          
          if (i == null) {
            i = nil;
          };
          ai = a['$[]'](i);
          return $send($rb_plus(k, 1), 'upto', [last], ($$156 = function(j){var self = $$156.$$s == null ? this : $$156.$$s, $writer = nil;

            
            
            if (j == null) {
              j = nil;
            };
            $writer = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](k)['$[]'](j))), previous_pivot)];
            $send(ai, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$156.$$s = self, $$156.$$arity = 1, $$156));}, $$155.$$s = self, $$155.$$arity = 1, $$155));}, $$153.$$s = self, $$153.$$arity = 1, $$153));
      return $rb_times(sign, pivot);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Matrix_determinant_bareiss$151.$$arity = 0);
    self.$private("determinant_bareiss");
    
    Opal.def(self, '$determinant_e', $Matrix_determinant_e$157 = function $$determinant_e() {
      var self = this;

      
      self.$warn("Matrix#determinant_e is deprecated; use #determinant", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$determinant();
    }, $Matrix_determinant_e$157.$$arity = 0);
    $alias(self, "det_e", "determinant_e");
    
    Opal.def(self, '$hstack', $Matrix_hstack$158 = function $$hstack($a) {
      var $post_args, matrices, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send(self.$class(), 'hstack', [self].concat(Opal.to_a(matrices)));
    }, $Matrix_hstack$158.$$arity = -1);
    
    Opal.def(self, '$rank', $Matrix_rank$159 = function $$rank() {
      var $$160, self = this, a = nil, last_column = nil, last_row = nil, pivot_row = nil, previous_pivot = nil;

      
      a = self.$to_a();
      last_column = $rb_minus(self.$column_count(), 1);
      last_row = $rb_minus(self.$row_count(), 1);
      pivot_row = 0;
      previous_pivot = 1;
      $send((0), 'upto', [last_column], ($$160 = function(k){var self = $$160.$$s == null ? this : $$160.$$s, $$161, $a, $$162, switch_row = nil, pivot = nil;

        
        
        if (k == null) {
          k = nil;
        };
        switch_row = $send(Opal.Range.$new(pivot_row, last_row, false), 'find', [], ($$161 = function(row){var self = $$161.$$s == null ? this : $$161.$$s;

          
          
          if (row == null) {
            row = nil;
          };
          return a['$[]'](row)['$[]'](k)['$!='](0);}, $$161.$$s = self, $$161.$$arity = 1, $$161));
        if ($truthy(switch_row)) {
          
          if (pivot_row['$=='](switch_row)) {
          } else {
            $a = [a['$[]'](pivot_row), a['$[]'](switch_row)], a['$[]='](switch_row, $a[0]), a['$[]='](pivot_row, $a[1]), $a
          };
          pivot = a['$[]'](pivot_row)['$[]'](k);
          $send($rb_plus(pivot_row, 1), 'upto', [last_row], ($$162 = function(i){var self = $$162.$$s == null ? this : $$162.$$s, $$163, ai = nil;

            
            
            if (i == null) {
              i = nil;
            };
            ai = a['$[]'](i);
            return $send($rb_plus(k, 1), 'upto', [last_column], ($$163 = function(j){var self = $$163.$$s == null ? this : $$163.$$s, $writer = nil;

              
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](pivot_row)['$[]'](j))), previous_pivot)];
              $send(ai, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$163.$$s = self, $$163.$$arity = 1, $$163));}, $$162.$$s = self, $$162.$$arity = 1, $$162));
          pivot_row = $rb_plus(pivot_row, 1);
          return (previous_pivot = pivot);
        } else {
          return nil
        };}, $$160.$$s = self, $$160.$$arity = 1, $$160));
      return pivot_row;
    }, $Matrix_rank$159.$$arity = 0);
    
    Opal.def(self, '$rank_e', $Matrix_rank_e$164 = function $$rank_e() {
      var self = this;

      
      self.$warn("Matrix#rank_e is deprecated; use #rank", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$rank();
    }, $Matrix_rank_e$164.$$arity = 0);
    
    Opal.def(self, '$round', $Matrix_round$165 = function $$round(ndigits) {
      var $$166, self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return $send(self, 'map', [], ($$166 = function(e){var self = $$166.$$s == null ? this : $$166.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return e.$round(ndigits);}, $$166.$$s = self, $$166.$$arity = 1, $$166));
    }, $Matrix_round$165.$$arity = -1);
    
    Opal.def(self, '$trace', $Matrix_trace$167 = function $$trace() {
      var $$168, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], ($$168 = function(tr, i){var self = $$168.$$s == null ? this : $$168.$$s;
        if (self.rows == null) self.rows = nil;

        
        
        if (tr == null) {
          tr = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $rb_plus(tr, self.rows['$[]'](i)['$[]'](i));}, $$168.$$s = self, $$168.$$arity = 2, $$168));
    }, $Matrix_trace$167.$$arity = 0);
    $alias(self, "tr", "trace");
    
    Opal.def(self, '$transpose', $Matrix_transpose$169 = function $$transpose() {
      var self = this;

      
      if ($truthy(self.$row_count()['$zero?']())) {
        return self.$class().$empty(self.$column_count(), 0)};
      return self.$new_matrix(self.rows.$transpose(), self.$row_count());
    }, $Matrix_transpose$169.$$arity = 0);
    $alias(self, "t", "transpose");
    
    Opal.def(self, '$vstack', $Matrix_vstack$170 = function $$vstack($a) {
      var $post_args, matrices, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send(self.$class(), 'vstack', [self].concat(Opal.to_a(matrices)));
    }, $Matrix_vstack$170.$$arity = -1);
    
    Opal.def(self, '$eigensystem', $Matrix_eigensystem$171 = function $$eigensystem() {
      var self = this;

      return $$($nesting, 'EigenvalueDecomposition').$new(self)
    }, $Matrix_eigensystem$171.$$arity = 0);
    $alias(self, "eigen", "eigensystem");
    
    Opal.def(self, '$lup', $Matrix_lup$172 = function $$lup() {
      var self = this;

      return $$($nesting, 'LUPDecomposition').$new(self)
    }, $Matrix_lup$172.$$arity = 0);
    $alias(self, "lup_decomposition", "lup");
    
    Opal.def(self, '$conjugate', $Matrix_conjugate$173 = function $$conjugate() {
      var self = this;

      return $send(self, 'collect', [], "conjugate".$to_proc())
    }, $Matrix_conjugate$173.$$arity = 0);
    $alias(self, "conj", "conjugate");
    
    Opal.def(self, '$imaginary', $Matrix_imaginary$174 = function $$imaginary() {
      var self = this;

      return $send(self, 'collect', [], "imaginary".$to_proc())
    }, $Matrix_imaginary$174.$$arity = 0);
    $alias(self, "imag", "imaginary");
    
    Opal.def(self, '$real', $Matrix_real$175 = function $$real() {
      var self = this;

      return $send(self, 'collect', [], "real".$to_proc())
    }, $Matrix_real$175.$$arity = 0);
    
    Opal.def(self, '$rect', $Matrix_rect$176 = function $$rect() {
      var self = this;

      return [self.$real(), self.$imag()]
    }, $Matrix_rect$176.$$arity = 0);
    $alias(self, "rectangular", "rect");
    
    Opal.def(self, '$coerce', $Matrix_coerce$177 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {return [$$($nesting, 'Scalar').$new(other), self]}
      else {return self.$raise($$($nesting, 'TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))}})()
    }, $Matrix_coerce$177.$$arity = 1);
    
    Opal.def(self, '$row_vectors', $Matrix_row_vectors$178 = function $$row_vectors() {
      var $$179, self = this;

      return $send($$($nesting, 'Array'), 'new', [self.$row_count()], ($$179 = function(i){var self = $$179.$$s == null ? this : $$179.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return self.$row(i);}, $$179.$$s = self, $$179.$$arity = 1, $$179))
    }, $Matrix_row_vectors$178.$$arity = 0);
    
    Opal.def(self, '$column_vectors', $Matrix_column_vectors$180 = function $$column_vectors() {
      var $$181, self = this;

      return $send($$($nesting, 'Array'), 'new', [self.$column_count()], ($$181 = function(i){var self = $$181.$$s == null ? this : $$181.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return self.$column(i);}, $$181.$$s = self, $$181.$$arity = 1, $$181))
    }, $Matrix_column_vectors$180.$$arity = 0);
    
    Opal.def(self, '$to_matrix', $Matrix_to_matrix$182 = function $$to_matrix() {
      var self = this;

      return self
    }, $Matrix_to_matrix$182.$$arity = 0);
    
    Opal.def(self, '$to_a', $Matrix_to_a$183 = function $$to_a() {
      var self = this;

      return $send(self.rows, 'collect', [], "dup".$to_proc())
    }, $Matrix_to_a$183.$$arity = 0);
    
    Opal.def(self, '$elements_to_f', $Matrix_elements_to_f$184 = function $$elements_to_f() {
      var self = this;

      
      self.$warn("Matrix#elements_to_f is deprecated, use map(&:to_f)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, $Matrix_elements_to_f$184.$$arity = 0);
    
    Opal.def(self, '$elements_to_i', $Matrix_elements_to_i$185 = function $$elements_to_i() {
      var self = this;

      
      self.$warn("Matrix#elements_to_i is deprecated, use map(&:to_i)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, $Matrix_elements_to_i$185.$$arity = 0);
    
    Opal.def(self, '$elements_to_r', $Matrix_elements_to_r$186 = function $$elements_to_r() {
      var self = this;

      
      self.$warn("Matrix#elements_to_r is deprecated, use map(&:to_r)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, $Matrix_elements_to_r$186.$$arity = 0);
    
    Opal.def(self, '$to_s', $Matrix_to_s$187 = function $$to_s() {
      var $$188, self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return $rb_plus($rb_plus("" + (self.$class()) + "[", $send(self.rows, 'collect', [], ($$188 = function(row){var self = $$188.$$s == null ? this : $$188.$$s, $$189;

          
          
          if (row == null) {
            row = nil;
          };
          return $rb_plus($rb_plus("[", $send(row, 'collect', [], ($$189 = function(e){var self = $$189.$$s == null ? this : $$189.$$s;

            
            
            if (e == null) {
              e = nil;
            };
            return e.$to_s();}, $$189.$$s = self, $$189.$$arity = 1, $$189)).$join(", ")), "]");}, $$188.$$s = self, $$188.$$arity = 1, $$188)).$join(", ")), "]")
      }
    }, $Matrix_to_s$187.$$arity = 0);
    
    Opal.def(self, '$inspect', $Matrix_inspect$190 = function $$inspect() {
      var self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return "" + (self.$class()) + (self.rows.$inspect())
      }
    }, $Matrix_inspect$190.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'ConversionHelper');

      var $nesting = [self].concat($parent_nesting), $ConversionHelper_convert_to_array$191;

      
      
      Opal.def(self, '$convert_to_array', $ConversionHelper_convert_to_array$191 = function $$convert_to_array(obj, copy) {
        var self = this, $case = nil, converted = nil, e = nil;

        
        
        if (copy == null) {
          copy = false;
        };
        return (function() {$case = obj;
        if ($$($nesting, 'Array')['$===']($case)) {if ($truthy(copy)) {
          return obj.$dup()
        } else {
          return obj
        }}
        else if ($$($nesting, 'Vector')['$===']($case)) {return obj.$to_a()}
        else {
        
        try {
          converted = obj.$to_ary()
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
            try {
              self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (obj.$class()) + " into an Array (" + (e.$message()) + ")")
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        if ($truthy(converted['$is_a?']($$($nesting, 'Array')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + (obj.$class()) + "#to_ary should return an Array")
        };
        return converted;}})();
      }, $ConversionHelper_convert_to_array$191.$$arity = -2);
      return self.$private("convert_to_array");
    })($nesting[0], $nesting);
    self.$extend($$($nesting, 'ConversionHelper'));
    (function($base, $parent_nesting) {
      var self = $module($base, 'CoercionHelper');

      var $nesting = [self].concat($parent_nesting), $CoercionHelper_apply_through_coercion$192, $CoercionHelper_coerce_to$193, $CoercionHelper_coerce_to_int$194, $CoercionHelper_coerce_to_matrix$195;

      
      
      Opal.def(self, '$apply_through_coercion', $CoercionHelper_apply_through_coercion$192 = function $$apply_through_coercion(obj, oper) {
        var self = this, coercion = nil, $ret_or_26 = nil;

        try {
          
          coercion = obj.$coerce(self);
          if ($truthy((function() {if ($truthy(($ret_or_26 = coercion['$is_a?']($$($nesting, 'Array'))))) {
            return coercion.$length()['$=='](2)
          } else {
            return $ret_or_26
          }; return nil; })())) {
          } else {
            self.$raise($$($nesting, 'TypeError'))
          };
          return coercion['$[]'](0).$public_send(oper, coercion['$[]'](1));
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              return self.$raise($$($nesting, 'TypeError'), "" + (obj.$inspect()) + " can't be coerced into " + (self.$class()))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, $CoercionHelper_apply_through_coercion$192.$$arity = 2);
      self.$private("apply_through_coercion");
      Opal.defs(self, '$coerce_to', $CoercionHelper_coerce_to$193 = function $$coerce_to(obj, cls, meth) {
        var self = this, ret = nil, e = nil;

        
        if ($truthy(obj['$kind_of?'](cls))) {
          return obj};
        if ($truthy(obj['$respond_to?'](meth))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected a " + (cls) + " but got a " + (obj.$class()))
        };
        
        try {
          ret = obj.$__send__(meth)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {(e = $err)
            try {
              self.$raise($$($nesting, 'TypeError'), "" + ("" + "Coercion error: " + (obj.$inspect()) + "." + (meth) + " => " + (cls) + " failed:\n") + ("" + "(" + (e.$message()) + ")"))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        if ($truthy(ret['$kind_of?'](cls))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Coercion error: obj." + (meth) + " did NOT return a " + (cls) + " (was " + (ret.$class()) + ")")
        };
        return ret;
      }, $CoercionHelper_coerce_to$193.$$arity = 3);
      Opal.defs(self, '$coerce_to_int', $CoercionHelper_coerce_to_int$194 = function $$coerce_to_int(obj) {
        var self = this;

        return self.$coerce_to(obj, $$($nesting, 'Integer'), "to_int")
      }, $CoercionHelper_coerce_to_int$194.$$arity = 1);
      return (Opal.defs(self, '$coerce_to_matrix', $CoercionHelper_coerce_to_matrix$195 = function $$coerce_to_matrix(obj) {
        var self = this;

        return self.$coerce_to(obj, $$($nesting, 'Matrix'), "to_matrix")
      }, $CoercionHelper_coerce_to_matrix$195.$$arity = 1), nil) && 'coerce_to_matrix';
    })($nesting[0], $nesting);
    self.$include($$($nesting, 'CoercionHelper'));
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Scalar');

      var $nesting = [self].concat($parent_nesting), $Scalar_initialize$196, $Scalar_$plus$197, $Scalar_$minus$198, $Scalar_$$199, $Scalar_$slash$201, $Scalar_$$$202;

      self.$$prototype.value = nil;
      
      self.$include($$($nesting, 'ExceptionForMatrix'));
      self.$include($$($nesting, 'CoercionHelper'));
      
      Opal.def(self, '$initialize', $Scalar_initialize$196 = function $$initialize(value) {
        var self = this;

        return (self.value = value)
      }, $Scalar_initialize$196.$$arity = 1);
      
      Opal.def(self, '$+', $Scalar_$plus$197 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_plus(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "+", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "+")}})()
      }, $Scalar_$plus$197.$$arity = 1);
      
      Opal.def(self, '$-', $Scalar_$minus$198 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_minus(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "-", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "-")}})()
      }, $Scalar_$minus$198.$$arity = 1);
      
      Opal.def(self, '$*', $Scalar_$$199 = function(other) {
        var $$200, self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_times(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $send(other, 'collect', [], ($$200 = function(e){var self = $$200.$$s == null ? this : $$200.$$s;
          if (self.value == null) self.value = nil;

          
          
          if (e == null) {
            e = nil;
          };
          return $rb_times(self.value, e);}, $$200.$$s = self, $$200.$$arity = 1, $$200))}
        else {return self.$apply_through_coercion(other, "*")}})()
      }, $Scalar_$$199.$$arity = 1);
      
      Opal.def(self, '$/', $Scalar_$slash$201 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_divide(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "/", self.value.$class(), other.$class())}
        else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times(self, other.$inverse())}
        else {return self.$apply_through_coercion(other, "/")}})()
      }, $Scalar_$slash$201.$$arity = 1);
      return (Opal.def(self, '$**', $Scalar_$$$202 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new(self.value['$**'](other))}
        else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "**", self.value.$class(), other.$class())}
        else if ($$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotImplemented'), "**", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "**")}})()
      }, $Scalar_$$$202.$$arity = 1), nil) && '**';
    })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector');

    var $nesting = [self].concat($parent_nesting), $Vector_$$$203, $Vector_elements$204, $Vector_basis$205, $Vector_zero$206, $Vector_initialize$207, $Vector_$$$208, $Vector_$$$eq$209, $Vector_round$210, $Vector_size$212, $Vector_each$213, $Vector_each2$214, $Vector_collect2$216, $Vector_independent$ques$218, $Vector_independent$ques$220, $Vector_zero$ques$221, $Vector_$eq_eq$222, $Vector_eql$ques$223, $Vector_clone$224, $Vector_hash$225, $Vector_$$226, $Vector_$plus$228, $Vector_$minus$230, $Vector_$slash$232, $Vector_$plus$$234, $Vector_$minus$$235, $Vector_inner_product$237, $Vector_cross_product$239, $Vector_collect$242, $Vector_magnitude$243, $Vector_map2$245, $Vector_normalize$246, $Vector_angle_with$247, $Vector_covector$248, $Vector_to_a$249, $Vector_to_matrix$250, $Vector_elements_to_f$251, $Vector_elements_to_i$252, $Vector_elements_to_r$253, $Vector_coerce$254, $Vector_to_s$255, $Vector_inspect$256;

    self.$$prototype.elements = nil;
    
    self.$include($$($nesting, 'ExceptionForMatrix'));
    self.$include($$($nesting, 'Enumerable'));
    self.$include($$$($$($nesting, 'Matrix'), 'CoercionHelper'));
    self.$extend($$$($$($nesting, 'Matrix'), 'ConversionHelper'));
    self.$private_class_method("new");
    self.$attr_reader("elements");
    self.$protected("elements");
    Opal.defs($$($nesting, 'Vector'), '$[]', $Vector_$$$203 = function($a) {
      var $post_args, array, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      array = $post_args;;
      return self.$new(self.$convert_to_array(array, false));
    }, $Vector_$$$203.$$arity = -1);
    Opal.defs($$($nesting, 'Vector'), '$elements', $Vector_elements$204 = function $$elements(array, copy) {
      var self = this;

      
      
      if (copy == null) {
        copy = true;
      };
      return self.$new(self.$convert_to_array(array, copy));
    }, $Vector_elements$204.$$arity = -2);
    Opal.defs($$($nesting, 'Vector'), '$basis', $Vector_basis$205 = function $$basis($kwargs) {
      var size, index, self = this, $ret_or_27 = nil, array = nil, $writer = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'size')) {
        throw Opal.ArgumentError.$new('missing keyword: size');
      }
      size = $kwargs.$$smap["size"];;
      
      if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'index')) {
        throw Opal.ArgumentError.$new('missing keyword: index');
      }
      index = $kwargs.$$smap["index"];;
      if ($truthy($rb_lt(size, 1))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid size (" + (size) + " for 1..)")};
      if ($truthy((function() {if ($truthy(($ret_or_27 = $rb_le(0, index)))) {
        return $rb_lt(index, size)
      } else {
        return $ret_or_27
      }; return nil; })())) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid index (" + (index) + " for 0..." + (size) + ")")
      };
      array = $$($nesting, 'Array').$new(size, 0);
      
      $writer = [index, 1];
      $send(array, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self.$new(self.$convert_to_array(array, false));
    }, $Vector_basis$205.$$arity = 1);
    Opal.defs($$($nesting, 'Vector'), '$zero', $Vector_zero$206 = function $$zero(size) {
      var self = this, array = nil;

      
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid size (" + (size) + " for 0..)")};
      array = $$($nesting, 'Array').$new(size, 0);
      return self.$new(self.$convert_to_array(array, false));
    }, $Vector_zero$206.$$arity = 1);
    
    Opal.def(self, '$initialize', $Vector_initialize$207 = function $$initialize(array) {
      var self = this;

      return (self.elements = array)
    }, $Vector_initialize$207.$$arity = 1);
    
    Opal.def(self, '$[]', $Vector_$$$208 = function(i) {
      var self = this;

      return self.elements['$[]'](i)
    }, $Vector_$$$208.$$arity = 1);
    $alias(self, "element", "[]");
    $alias(self, "component", "[]");
    
    Opal.def(self, '$[]=', $Vector_$$$eq$209 = function(i, v) {
      var self = this, $writer = nil;

      
      $writer = [i, v];
      $send(self.elements, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $Vector_$$$eq$209.$$arity = 2);
    $alias(self, "set_element", "[]=");
    $alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    Opal.def(self, '$round', $Vector_round$210 = function $$round(ndigits) {
      var $$211, self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return $send(self, 'map', [], ($$211 = function(e){var self = $$211.$$s == null ? this : $$211.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return e.$round(ndigits);}, $$211.$$s = self, $$211.$$arity = 1, $$211));
    }, $Vector_round$210.$$arity = -1);
    
    Opal.def(self, '$size', $Vector_size$212 = function $$size() {
      var self = this;

      return self.elements.$size()
    }, $Vector_size$212.$$arity = 0);
    
    Opal.def(self, '$each', $Vector_each$213 = function $$each() {
      var $iter = $Vector_each$213.$$p, block = $iter || nil, self = this;

      if ($iter) $Vector_each$213.$$p = null;
      
      
      if ($iter) $Vector_each$213.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("each")
      };
      $send(self.elements, 'each', [], block.$to_proc());
      return self;
    }, $Vector_each$213.$$arity = 0);
    
    Opal.def(self, '$each2', $Vector_each2$214 = function $$each2(v) {
      var $$215, $iter = $Vector_each2$214.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Vector_each2$214.$$p = null;
      
      if ($truthy(v['$kind_of?']($$($nesting, 'Integer')))) {
        self.$raise($$($nesting, 'TypeError'), "Integer is not like Vector")};
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each2", v)
      };
      $send(self.$size(), 'times', [], ($$215 = function(i){var self = $$215.$$s == null ? this : $$215.$$s;
        if (self.elements == null) self.elements = nil;

        
        
        if (i == null) {
          i = nil;
        };
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, $$215.$$s = self, $$215.$$arity = 1, $$215));
      return self;
    }, $Vector_each2$214.$$arity = 1);
    
    Opal.def(self, '$collect2', $Vector_collect2$216 = function $$collect2(v) {
      var $$217, $iter = $Vector_collect2$216.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Vector_collect2$216.$$p = null;
      
      if ($truthy(v['$kind_of?']($$($nesting, 'Integer')))) {
        self.$raise($$($nesting, 'TypeError'), "Integer is not like Vector")};
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("collect2", v)
      };
      return $send($$($nesting, 'Array'), 'new', [self.$size()], ($$217 = function(i){var self = $$217.$$s == null ? this : $$217.$$s;
        if (self.elements == null) self.elements = nil;

        
        
        if (i == null) {
          i = nil;
        };
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, $$217.$$s = self, $$217.$$arity = 1, $$217));
    }, $Vector_collect2$216.$$arity = 1);
    Opal.defs($$($nesting, 'Vector'), '$independent?', $Vector_independent$ques$218 = function($a) {
      var $post_args, vs, $$219, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      $send(vs, 'each', [], ($$219 = function(v){var self = $$219.$$s == null ? this : $$219.$$s;

        
        
        if (v == null) {
          v = nil;
        };
        if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "expected Vector, got " + (v.$class()))
        };
        if (v.$size()['$=='](vs.$first().$size())) {
          return nil
        } else {
          return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, $$219.$$s = self, $$219.$$arity = 1, $$219));
      if ($truthy($rb_gt(vs.$count(), vs.$first().$size()))) {
        return false};
      return $send($$($nesting, 'Matrix'), '[]', Opal.to_a(vs)).$rank()['$eql?'](vs.$count());
    }, $Vector_independent$ques$218.$$arity = -1);
    
    Opal.def(self, '$independent?', $Vector_independent$ques$220 = function($a) {
      var $post_args, vs, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      return $send(self.$class(), 'independent?', [self].concat(Opal.to_a(vs)));
    }, $Vector_independent$ques$220.$$arity = -1);
    
    Opal.def(self, '$zero?', $Vector_zero$ques$221 = function() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, $Vector_zero$ques$221.$$arity = 0);
    
    Opal.def(self, '$==', $Vector_$eq_eq$222 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Vector')['$==='](other))) {
      } else {
        return false
      };
      return self.elements['$=='](other.$elements());
    }, $Vector_$eq_eq$222.$$arity = 1);
    
    Opal.def(self, '$eql?', $Vector_eql$ques$223 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Vector')['$==='](other))) {
      } else {
        return false
      };
      return self.elements['$eql?'](other.$elements());
    }, $Vector_eql$ques$223.$$arity = 1);
    
    Opal.def(self, '$clone', $Vector_clone$224 = function $$clone() {
      var self = this;

      return self.$class().$elements(self.elements)
    }, $Vector_clone$224.$$arity = 0);
    
    Opal.def(self, '$hash', $Vector_hash$225 = function $$hash() {
      var self = this;

      return self.elements.$hash()
    }, $Vector_hash$225.$$arity = 0);
    
    Opal.def(self, '$*', $Vector_$$226 = function(x) {
      var $$227, self = this, $case = nil, els = nil;

      return (function() {$case = x;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      els = $send(self.elements, 'collect', [], ($$227 = function(e){var self = $$227.$$s == null ? this : $$227.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return $rb_times(e, x);}, $$227.$$s = self, $$227.$$arity = 1, $$227));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times($$($nesting, 'Matrix').$column_vector(self), x)}
      else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrOperationNotDefined'), "*", self.$class(), x.$class())}
      else {return self.$apply_through_coercion(x, "*")}})()
    }, $Vector_$$226.$$arity = 1);
    
    Opal.def(self, '$+', $Vector_$plus$228 = function(v) {
      var $$229, self = this, $case = nil, els = nil;

      return (function() {$case = v;
      if ($$($nesting, 'Vector')['$===']($case)) {
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      els = $send(self, 'collect2', [v], ($$229 = function(v1, v2){var self = $$229.$$s == null ? this : $$229.$$s;

        
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return $rb_plus(v1, v2);}, $$229.$$s = self, $$229.$$arity = 2, $$229));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_plus($$($nesting, 'Matrix').$column_vector(self), v)}
      else {return self.$apply_through_coercion(v, "+")}})()
    }, $Vector_$plus$228.$$arity = 1);
    
    Opal.def(self, '$-', $Vector_$minus$230 = function(v) {
      var $$231, self = this, $case = nil, els = nil;

      return (function() {$case = v;
      if ($$($nesting, 'Vector')['$===']($case)) {
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      els = $send(self, 'collect2', [v], ($$231 = function(v1, v2){var self = $$231.$$s == null ? this : $$231.$$s;

        
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return $rb_minus(v1, v2);}, $$231.$$s = self, $$231.$$arity = 2, $$231));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_minus($$($nesting, 'Matrix').$column_vector(self), v)}
      else {return self.$apply_through_coercion(v, "-")}})()
    }, $Vector_$minus$230.$$arity = 1);
    
    Opal.def(self, '$/', $Vector_$slash$232 = function(x) {
      var $$233, self = this, $case = nil, els = nil;

      return (function() {$case = x;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      els = $send(self.elements, 'collect', [], ($$233 = function(e){var self = $$233.$$s == null ? this : $$233.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return $rb_divide(e, x);}, $$233.$$s = self, $$233.$$arity = 1, $$233));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case) || $$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrOperationNotDefined'), "/", self.$class(), x.$class())}
      else {return self.$apply_through_coercion(x, "/")}})()
    }, $Vector_$slash$232.$$arity = 1);
    
    Opal.def(self, '$+@', $Vector_$plus$$234 = function() {
      var self = this;

      return self
    }, $Vector_$plus$$234.$$arity = 0);
    
    Opal.def(self, '$-@', $Vector_$minus$$235 = function() {
      var $$236, self = this;

      return $send(self, 'collect', [], ($$236 = function(e){var self = $$236.$$s == null ? this : $$236.$$s;

        
        
        if (e == null) {
          e = nil;
        };
        return e['$-@']();}, $$236.$$s = self, $$236.$$arity = 1, $$236))
    }, $Vector_$minus$$235.$$arity = 0);
    
    Opal.def(self, '$inner_product', $Vector_inner_product$237 = function $$inner_product(v) {
      var $$238, self = this, p = nil;

      
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      p = 0;
      $send(self, 'each2', [v], ($$238 = function(v1, v2){var self = $$238.$$s == null ? this : $$238.$$s;

        
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return (p = $rb_plus(p, $rb_times(v1, v2.$conj())));}, $$238.$$s = self, $$238.$$arity = 2, $$238));
      return p;
    }, $Vector_inner_product$237.$$arity = 1);
    self.$alias_method("dot", "inner_product");
    
    Opal.def(self, '$cross_product', $Vector_cross_product$239 = function $$cross_product($a) {
      var $post_args, vs, $$240, $$241, self = this, $case = nil, v = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      if ($truthy($rb_ge(self.$size(), 2))) {
      } else {
        self.$raise($$($nesting, 'ErrOperationNotDefined'), "" + "cross product is not defined on vectors of dimension " + (self.$size()))
      };
      if (vs.$size()['$==']($rb_minus(self.$size(), 2))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (vs.$size()) + " for " + ($rb_minus(self.$size(), 2)) + ")")
      };
      $send(vs, 'each', [], ($$240 = function(v){var self = $$240.$$s == null ? this : $$240.$$s;

        
        
        if (v == null) {
          v = nil;
        };
        if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "expected Vector, got " + (v.$class()))
        };
        if (v.$size()['$=='](self.$size())) {
          return nil
        } else {
          return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, $$240.$$s = self, $$240.$$arity = 1, $$240));
      return (function() {$case = self.$size();
      if ((2)['$===']($case)) {return $$($nesting, 'Vector')['$[]'](self.elements['$[]'](1)['$-@'](), self.elements['$[]'](0))}
      else if ((3)['$===']($case)) {
      v = vs['$[]'](0);
      return $$($nesting, 'Vector')['$[]']($rb_minus($rb_times(v['$[]'](2), self.elements['$[]'](1)), $rb_times(v['$[]'](1), self.elements['$[]'](2))), $rb_minus($rb_times(v['$[]'](0), self.elements['$[]'](2)), $rb_times(v['$[]'](2), self.elements['$[]'](0))), $rb_minus($rb_times(v['$[]'](1), self.elements['$[]'](0)), $rb_times(v['$[]'](0), self.elements['$[]'](1))));}
      else {
      rows = [self].concat(Opal.to_a(vs)).concat([$send($$($nesting, 'Array'), 'new', [self.$size()], ($$241 = function(i){var self = $$241.$$s == null ? this : $$241.$$s;

        
        
        if (i == null) {
          i = nil;
        };
        return $$($nesting, 'Vector').$basis($hash2(["size", "index"], {"size": self.$size(), "index": i}));}, $$241.$$s = self, $$241.$$arity = 1, $$241))]);
      return $$($nesting, 'Matrix').$rows(rows).$laplace_expansion($hash2(["row"], {"row": $rb_minus(self.$size(), 1)}));}})();
    }, $Vector_cross_product$239.$$arity = -1);
    self.$alias_method("cross", "cross_product");
    
    Opal.def(self, '$collect', $Vector_collect$242 = function $$collect() {
      var $iter = $Vector_collect$242.$$p, block = $iter || nil, self = this, els = nil;

      if ($iter) $Vector_collect$242.$$p = null;
      
      
      if ($iter) $Vector_collect$242.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("collect")
      };
      els = $send(self.elements, 'collect', [], block.$to_proc());
      return self.$class().$elements(els, false);
    }, $Vector_collect$242.$$arity = 0);
    $alias(self, "map", "collect");
    
    Opal.def(self, '$magnitude', $Vector_magnitude$243 = function $$magnitude() {
      var $$244, self = this;

      return $$($nesting, 'Math').$sqrt($send(self.elements, 'inject', [0], ($$244 = function(v, e){var self = $$244.$$s == null ? this : $$244.$$s;

        
        
        if (v == null) {
          v = nil;
        };
        
        if (e == null) {
          e = nil;
        };
        return $rb_plus(v, e.$abs2());}, $$244.$$s = self, $$244.$$arity = 2, $$244)))
    }, $Vector_magnitude$243.$$arity = 0);
    $alias(self, "r", "magnitude");
    $alias(self, "norm", "magnitude");
    
    Opal.def(self, '$map2', $Vector_map2$245 = function $$map2(v) {
      var $iter = $Vector_map2$245.$$p, block = $iter || nil, self = this, els = nil;

      if ($iter) $Vector_map2$245.$$p = null;
      
      
      if ($iter) $Vector_map2$245.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("map2", v)
      };
      els = $send(self, 'collect2', [v], block.$to_proc());
      return self.$class().$elements(els, false);
    }, $Vector_map2$245.$$arity = 1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ZeroVectorError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    
    Opal.def(self, '$normalize', $Vector_normalize$246 = function $$normalize() {
      var self = this, n = nil;

      
      n = self.$magnitude();
      if (n['$=='](0)) {
        self.$raise($$($nesting, 'ZeroVectorError'), "Zero vectors can not be normalized")};
      return $rb_divide(self, n);
    }, $Vector_normalize$246.$$arity = 0);
    
    Opal.def(self, '$angle_with', $Vector_angle_with$247 = function $$angle_with(v) {
      var self = this, prod = nil;

      
      if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "Expected a Vector, got a " + (v.$class()))
      };
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      prod = $rb_times(self.$magnitude(), v.$magnitude());
      if (prod['$=='](0)) {
        self.$raise($$($nesting, 'ZeroVectorError'), "Can't get angle of zero vector")};
      return $$($nesting, 'Math').$acos($rb_divide(self.$inner_product(v), prod));
    }, $Vector_angle_with$247.$$arity = 1);
    
    Opal.def(self, '$covector', $Vector_covector$248 = function $$covector() {
      var self = this;

      return $$($nesting, 'Matrix').$row_vector(self)
    }, $Vector_covector$248.$$arity = 0);
    
    Opal.def(self, '$to_a', $Vector_to_a$249 = function $$to_a() {
      var self = this;

      return self.elements.$dup()
    }, $Vector_to_a$249.$$arity = 0);
    
    Opal.def(self, '$to_matrix', $Vector_to_matrix$250 = function $$to_matrix() {
      var self = this;

      return $$($nesting, 'Matrix').$column_vector(self)
    }, $Vector_to_matrix$250.$$arity = 0);
    
    Opal.def(self, '$elements_to_f', $Vector_elements_to_f$251 = function $$elements_to_f() {
      var self = this;

      
      self.$warn("Vector#elements_to_f is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, $Vector_elements_to_f$251.$$arity = 0);
    
    Opal.def(self, '$elements_to_i', $Vector_elements_to_i$252 = function $$elements_to_i() {
      var self = this;

      
      self.$warn("Vector#elements_to_i is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, $Vector_elements_to_i$252.$$arity = 0);
    
    Opal.def(self, '$elements_to_r', $Vector_elements_to_r$253 = function $$elements_to_r() {
      var self = this;

      
      self.$warn("Vector#elements_to_r is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, $Vector_elements_to_r$253.$$arity = 0);
    
    Opal.def(self, '$coerce', $Vector_coerce$254 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {return [$$$($$($nesting, 'Matrix'), 'Scalar').$new(other), self]}
      else {return self.$raise($$($nesting, 'TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))}})()
    }, $Vector_coerce$254.$$arity = 1);
    
    Opal.def(self, '$to_s', $Vector_to_s$255 = function $$to_s() {
      var self = this;

      return $rb_plus($rb_plus("Vector[", self.elements.$join(", ")), "]")
    }, $Vector_to_s$255.$$arity = 0);
    return (Opal.def(self, '$inspect', $Vector_inspect$256 = function $$inspect() {
      var self = this;

      return $rb_plus("Vector", self.elements.$inspect())
    }, $Vector_inspect$256.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};
