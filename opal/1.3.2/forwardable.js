Opal.modules["forwardable"] = function(Opal) {/* Generated by Opal 1.3.2 */
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $alias = Opal.alias;

  Opal.add_stubs(['$each', '$respond_to?', '$def_instance_delegator', '$include?', '$start_with?', '$to_s', '$define_method', '$__send__', '$instance_variable_get', '$to_proc', '$def_single_delegator', '$define_singleton_method']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Forwardable');

    var $nesting = [self].concat($parent_nesting), $Forwardable_instance_delegate$1, $Forwardable_def_instance_delegators$4, $Forwardable_def_instance_delegator$6;

    
    
    Opal.def(self, '$instance_delegate', $Forwardable_instance_delegate$1 = function $$instance_delegate(hash) {
      var $$2, self = this;

      return $send(hash, 'each', [], ($$2 = function(methods, accessor){var self = $$2.$$s == null ? this : $$2.$$s, $$3;

        
        
        if (methods == null) {
          methods = nil;
        };
        
        if (accessor == null) {
          accessor = nil;
        };
        if ($truthy(methods['$respond_to?']("each"))) {
        } else {
          methods = [methods]
        };
        return $send(methods, 'each', [], ($$3 = function(method){var self = $$3.$$s == null ? this : $$3.$$s;

          
          
          if (method == null) {
            method = nil;
          };
          return self.$def_instance_delegator(accessor, method);}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 2, $$2))
    }, $Forwardable_instance_delegate$1.$$arity = 1);
    
    Opal.def(self, '$def_instance_delegators', $Forwardable_def_instance_delegators$4 = function $$def_instance_delegators(accessor, $a) {
      var $post_args, methods, $$5, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      methods = $post_args;;
      return $send(methods, 'each', [], ($$5 = function(method){var self = $$5.$$s == null ? this : $$5.$$s;

        
        
        if (method == null) {
          method = nil;
        };
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil;};
        return self.$def_instance_delegator(accessor, method);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
    }, $Forwardable_def_instance_delegators$4.$$arity = -2);
    
    Opal.def(self, '$def_instance_delegator', $Forwardable_def_instance_delegator$6 = function $$def_instance_delegator(accessor, method, ali) {
      var $$7, $$8, $iter = $Forwardable_def_instance_delegator$6.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Forwardable_def_instance_delegator$6.$$p = null;
      
      
      if (ali == null) {
        ali = method;
      };
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_method', [ali], ($$7 = function($a){var self = $$7.$$s == null ? this : $$7.$$s, $iter = $$7.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$7.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, $$7.$$s = self, $$7.$$arity = -1, $$7))
      } else {
        return $send(self, 'define_method', [ali], ($$8 = function($a){var self = $$8.$$s == null ? this : $$8.$$s, $iter = $$8.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$8.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$__send__(accessor), '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, $$8.$$s = self, $$8.$$arity = -1, $$8))
      };
    }, $Forwardable_def_instance_delegator$6.$$arity = -3);
    $alias(self, "delegate", "instance_delegate");
    $alias(self, "def_delegators", "def_instance_delegators");
    return $alias(self, "def_delegator", "def_instance_delegator");
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'SingleForwardable');

    var $nesting = [self].concat($parent_nesting), $SingleForwardable_single_delegate$9, $SingleForwardable_def_single_delegators$12, $SingleForwardable_def_single_delegator$14;

    
    
    Opal.def(self, '$single_delegate', $SingleForwardable_single_delegate$9 = function $$single_delegate(hash) {
      var $$10, self = this;

      return $send(hash, 'each', [], ($$10 = function(methods, accessor){var self = $$10.$$s == null ? this : $$10.$$s, $$11;

        
        
        if (methods == null) {
          methods = nil;
        };
        
        if (accessor == null) {
          accessor = nil;
        };
        if ($truthy(methods['$respond_to?']("each"))) {
        } else {
          methods = [methods]
        };
        return $send(methods, 'each', [], ($$11 = function(method){var self = $$11.$$s == null ? this : $$11.$$s;

          
          
          if (method == null) {
            method = nil;
          };
          return self.$def_single_delegator(accessor, method);}, $$11.$$s = self, $$11.$$arity = 1, $$11));}, $$10.$$s = self, $$10.$$arity = 2, $$10))
    }, $SingleForwardable_single_delegate$9.$$arity = 1);
    
    Opal.def(self, '$def_single_delegators', $SingleForwardable_def_single_delegators$12 = function $$def_single_delegators(accessor, $a) {
      var $post_args, methods, $$13, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      methods = $post_args;;
      return $send(methods, 'each', [], ($$13 = function(method){var self = $$13.$$s == null ? this : $$13.$$s;

        
        
        if (method == null) {
          method = nil;
        };
        if ($truthy(["__send__", "__id__"]['$include?'](method))) {
          return nil;};
        return self.$def_single_delegator(accessor, method);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
    }, $SingleForwardable_def_single_delegators$12.$$arity = -2);
    
    Opal.def(self, '$def_single_delegator', $SingleForwardable_def_single_delegator$14 = function $$def_single_delegator(accessor, method, ali) {
      var $$15, $$16, $iter = $SingleForwardable_def_single_delegator$14.$$p, $yield = $iter || nil, self = this;

      if ($iter) $SingleForwardable_def_single_delegator$14.$$p = null;
      
      
      if (ali == null) {
        ali = method;
      };
      if ($truthy(accessor.$to_s()['$start_with?']("@"))) {
        return $send(self, 'define_singleton_method', [ali], ($$15 = function($a){var self = $$15.$$s == null ? this : $$15.$$s, $iter = $$15.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$15.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$instance_variable_get(accessor), '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, $$15.$$s = self, $$15.$$arity = -1, $$15))
      } else {
        return $send(self, 'define_singleton_method', [ali], ($$16 = function($a){var self = $$16.$$s == null ? this : $$16.$$s, $iter = $$16.$$p, block = $iter || nil, $post_args, args;

          
          
          if ($iter) $$16.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.$__send__(accessor), '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, $$16.$$s = self, $$16.$$arity = -1, $$16))
      };
    }, $SingleForwardable_def_single_delegator$14.$$arity = -3);
    $alias(self, "delegate", "single_delegate");
    $alias(self, "def_delegators", "def_single_delegators");
    return $alias(self, "def_delegator", "def_single_delegator");
  })($nesting[0], $nesting);
};
