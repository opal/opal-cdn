Opal.modules.js=function(Opal){Opal.top;var $nesting=[],nil=Opal.nil,$module=(Opal.$$$,Opal.$$,Opal.module),$truthy=Opal.truthy,$alias=Opal.alias;return Opal.add_stubs(["$insert","$<<","$global","$extend"]),function($base,$parent_nesting){var $JS_delete$1,$JS_global$2,$JS_in$3,$JS_instanceof$4,$JS_new$5,$JS_new$6,$JS_typeof$7,$JS_void$8,$JS_call$9,$JS_$$$10,self=$module($base,"JS");[self].concat($parent_nesting);return Opal.def(self,"$delete",$JS_delete$1=function(object,property){return delete object[property]},$JS_delete$1.$$arity=2),Opal.def(self,"$global",$JS_global$2=function(){return Opal.global},$JS_global$2.$$arity=0),Opal.def(self,"$in",$JS_in$3=function(property,object){return property in object},$JS_in$3.$$arity=2),Opal.def(self,"$instanceof",$JS_instanceof$4=function(value,func){return value instanceof func},$JS_instanceof$4.$$arity=2),$truthy("function"==typeof Function.prototype.bind)?Opal.def(self,"$new",$JS_new$5=function(func,$a){var args,$iter=$JS_new$5.$$p,block=$iter||nil;return $iter&&($JS_new$5.$$p=null),$iter&&($JS_new$5.$$p=null),(args=Opal.slice.call(arguments,1,arguments.length)).$insert(0,this),$truthy(block)&&args["$<<"](block),new(func.bind.apply(func,args))},$JS_new$5.$$arity=-2):Opal.def(self,"$new",$JS_new$6=function(func,$a){var $post_args,args,$iter=$JS_new$6.$$p,block=$iter||nil,f=nil;return $iter&&($JS_new$6.$$p=null),$iter&&($JS_new$6.$$p=null),$post_args=Opal.slice.call(arguments,1,arguments.length),args=$post_args,$truthy(block)&&args["$<<"](block),(f=function(){return func.apply(this,args)}).prototype=func.prototype,new f},$JS_new$6.$$arity=-2),Opal.def(self,"$typeof",$JS_typeof$7=function(value){return typeof value},$JS_typeof$7.$$arity=1),Opal.def(self,"$void",$JS_void$8=function(expr){},$JS_void$8.$$arity=1),Opal.def(self,"$call",$JS_call$9=function(func,$a){var args,$iter=$JS_call$9.$$p,block=$iter||nil,self=this,g=nil;return $iter&&($JS_call$9.$$p=null),$iter&&($JS_call$9.$$p=null),args=Opal.slice.call(arguments,1,arguments.length),g=self.$global(),$truthy(block)&&args["$<<"](block),g[func].apply(g,args)},$JS_call$9.$$arity=-2),$alias(self,"method_missing","call"),Opal.def(self,"$[]",$JS_$$$10=function(name){return Opal.global[name]},$JS_$$$10.$$arity=1),self.$extend(self)}($nesting[0],$nesting)};
