Opal.modules.promise=function(Opal){function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.$$$,Opal.$$),$klass=Opal.klass,$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$alias=Opal.alias,$send2=Opal.send2,$find_super=Opal.find_super;return Opal.add_stubs(["$resolve","$new","$reject","$attr_reader","$===","$value","$key?","$keys","$!=","$==","$<<","$>>","$exception?","$[]","$resolved?","$rejected?","$!","$error","$include?","$action","$realized?","$raise","$^","$call","$resolve!","$exception!","$any?","$each","$reject!","$there_can_be_only_one!","$then","$to_proc","$fail","$always","$trace","$class","$object_id","$+","$inspect","$rescue","$act?","$nil?","$prev","$push","$concat","$it","$proc","$reverse","$pop","$<=","$length","$shift","$-","$wait","$map","$reduce","$try","$tap","$all?","$find"]),function($base,$super,$parent_nesting){var $Promise_value$1,$Promise_error$2,$Promise_when$3,$Promise_initialize$4,$Promise_value$5,$Promise_act$ques$6,$Promise_action$7,$Promise_exception$ques$8,$Promise_realized$ques$9,$Promise_resolved$ques$10,$Promise_rejected$ques$11,$Promise_$$12,$Promise_$lt$lt$13,$Promise_$gt$gt$14,$Promise_resolve$15,$Promise_resolve$excl$16,$Promise_reject$18,$Promise_reject$excl$19,$Promise_exception$excl$21,$Promise_then$22,$Promise_then$excl$23,$Promise_fail$24,$Promise_fail$excl$25,$Promise_always$26,$Promise_always$excl$27,$Promise_trace$28,$Promise_trace$excl$29,$Promise_there_can_be_only_one$excl$30,$Promise_inspect$31,$Promise_to_v2$32,self=$klass($base,null,"Promise"),$nesting=[self].concat($parent_nesting);self.$$prototype.value=self.$$prototype.action=self.$$prototype.exception=self.$$prototype.realized=self.$$prototype.next=self.$$prototype.delayed=self.$$prototype.error=self.$$prototype.prev=nil,Opal.defs(self,"$value",$Promise_value$1=function(value){return this.$new().$resolve(value)},$Promise_value$1.$$arity=1),Opal.defs(self,"$error",$Promise_error$2=function(value){return this.$new().$reject(value)},$Promise_error$2.$$arity=1),Opal.defs(self,"$when",$Promise_when$3=function($a){var promises;return promises=Opal.slice.call(arguments,0,arguments.length),$$($nesting,"When").$new(promises)},$Promise_when$3.$$arity=-1),self.$attr_reader("error","prev","next"),Opal.def(self,"$initialize",$Promise_initialize$4=function(action){return null==action&&(action=$hash2([],{})),this.action=action,this.realized=!1,this.exception=!1,this.value=nil,this.error=nil,this.delayed=!1,this.prev=nil,this.next=[]},$Promise_initialize$4.$$arity=-1),Opal.def(self,"$value",$Promise_value$5=function(){return $truthy($$($nesting,"Promise")["$==="](this.value))?this.value.$value():this.value},$Promise_value$5.$$arity=0),Opal.def(self,"$act?",$Promise_act$ques$6=function(){var $ret_or_1;return $truthy($ret_or_1=this.action["$key?"]("success"))?$ret_or_1:this.action["$key?"]("always")},$Promise_act$ques$6.$$arity=0),Opal.def(self,"$action",$Promise_action$7=function(){return this.action.$keys()},$Promise_action$7.$$arity=0),Opal.def(self,"$exception?",$Promise_exception$ques$8=function(){return this.exception},$Promise_exception$ques$8.$$arity=0),Opal.def(self,"$realized?",$Promise_realized$ques$9=function(){return this.realized["$!="](!1)},$Promise_realized$ques$9.$$arity=0),Opal.def(self,"$resolved?",$Promise_resolved$ques$10=function(){return this.realized["$=="]("resolve")},$Promise_resolved$ques$10.$$arity=0),Opal.def(self,"$rejected?",$Promise_rejected$ques$11=function(){return this.realized["$=="]("reject")},$Promise_rejected$ques$11.$$arity=0),Opal.def(self,"$^",$Promise_$$12=function(promise){return promise["$<<"](this),this["$>>"](promise),promise},$Promise_$$12.$$arity=1),Opal.def(self,"$<<",$Promise_$lt$lt$13=function(promise){return this.prev=promise,this},$Promise_$lt$lt$13.$$arity=1),Opal.def(self,"$>>",$Promise_$gt$gt$14=function(promise){var self=this,$ret_or_2=nil;return self.next["$<<"](promise),$truthy(self["$exception?"]())?promise.$reject(self.delayed["$[]"](0)):$truthy(self["$resolved?"]())?promise.$resolve($truthy(self.delayed)?self.delayed["$[]"](0):self.$value()):$truthy(self["$rejected?"]())&&($truthy($truthy($ret_or_2=self.action["$key?"]("failure")["$!"]())?$ret_or_2:$$($nesting,"Promise")["$==="]($truthy(self.delayed)?self.delayed["$[]"](0):self.error))||$truthy(promise.$action()["$include?"]("always")))&&promise.$reject($truthy(self.delayed)?self.delayed["$[]"](0):self.$error()),self},$Promise_$gt$gt$14.$$arity=1),Opal.def(self,"$resolve",$Promise_resolve$15=function(value){var self=this,block=nil,$ret_or_3=nil,e=nil;if(null==value&&(value=nil),$truthy(self["$realized?"]())&&self.$raise($$($nesting,"ArgumentError"),"the promise has already been realized"),$truthy($$($nesting,"Promise")["$==="](value)))return value["$<<"](self.prev)["$^"](self);try{block=$truthy($ret_or_3=self.action["$[]"]("success"))?$ret_or_3:self.action["$[]"]("always"),$truthy(block)&&(value=block.$call(value)),self["$resolve!"](value)}catch($err){if(!Opal.rescue($err,[$$($nesting,"Exception")]))throw $err;e=$err;try{self["$exception!"](e)}finally{Opal.pop_exception()}}return self},$Promise_resolve$15.$$arity=-1),Opal.def(self,"$resolve!",$Promise_resolve$excl$16=function(value){var $$17;return this.realized="resolve",this.value=value,$truthy(this.next["$any?"]())?$send(this.next,"each",[],(($$17=function(p){null==$$17.$$s||$$17.$$s;return null==p&&(p=nil),p.$resolve(value)}).$$s=this,$$17.$$arity=1,$$17)):this.delayed=[value]},$Promise_resolve$excl$16.$$arity=1),Opal.def(self,"$reject",$Promise_reject$18=function(value){var self=this,block=nil,$ret_or_4=nil,e=nil;if(null==value&&(value=nil),$truthy(self["$realized?"]())&&self.$raise($$($nesting,"ArgumentError"),"the promise has already been realized"),$truthy($$($nesting,"Promise")["$==="](value)))return value["$<<"](self.prev)["$^"](self);try{block=$truthy($ret_or_4=self.action["$[]"]("failure"))?$ret_or_4:self.action["$[]"]("always"),$truthy(block)&&(value=block.$call(value)),$truthy(self.action["$key?"]("always"))?self["$resolve!"](value):self["$reject!"](value)}catch($err){if(!Opal.rescue($err,[$$($nesting,"Exception")]))throw $err;e=$err;try{self["$exception!"](e)}finally{Opal.pop_exception()}}return self},$Promise_reject$18.$$arity=-1),Opal.def(self,"$reject!",$Promise_reject$excl$19=function(value){var $$20;return this.realized="reject",this.error=value,$truthy(this.next["$any?"]())?$send(this.next,"each",[],(($$20=function(p){null==$$20.$$s||$$20.$$s;return null==p&&(p=nil),p.$reject(value)}).$$s=this,$$20.$$arity=1,$$20)):this.delayed=[value]},$Promise_reject$excl$19.$$arity=1),Opal.def(self,"$exception!",$Promise_exception$excl$21=function(error){return this.exception=!0,this["$reject!"](error)},$Promise_exception$excl$21.$$arity=1),Opal.def(self,"$then",$Promise_then$22=function(){var $iter=$Promise_then$22.$$p,block=$iter||nil;return $iter&&($Promise_then$22.$$p=null),$iter&&($Promise_then$22.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["success"],{success:block})))},$Promise_then$22.$$arity=0),Opal.def(self,"$then!",$Promise_then$excl$23=function(){var $iter=$Promise_then$excl$23.$$p,block=$iter||nil;return $iter&&($Promise_then$excl$23.$$p=null),$iter&&($Promise_then$excl$23.$$p=null),this["$there_can_be_only_one!"](),$send(this,"then",[],block.$to_proc())},$Promise_then$excl$23.$$arity=0),$alias(self,"do","then"),$alias(self,"do!","then!"),Opal.def(self,"$fail",$Promise_fail$24=function(){var $iter=$Promise_fail$24.$$p,block=$iter||nil;return $iter&&($Promise_fail$24.$$p=null),$iter&&($Promise_fail$24.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["failure"],{failure:block})))},$Promise_fail$24.$$arity=0),Opal.def(self,"$fail!",$Promise_fail$excl$25=function(){var $iter=$Promise_fail$excl$25.$$p,block=$iter||nil;return $iter&&($Promise_fail$excl$25.$$p=null),$iter&&($Promise_fail$excl$25.$$p=null),this["$there_can_be_only_one!"](),$send(this,"fail",[],block.$to_proc())},$Promise_fail$excl$25.$$arity=0),$alias(self,"rescue","fail"),$alias(self,"catch","fail"),$alias(self,"rescue!","fail!"),$alias(self,"catch!","fail!"),Opal.def(self,"$always",$Promise_always$26=function(){var $iter=$Promise_always$26.$$p,block=$iter||nil;return $iter&&($Promise_always$26.$$p=null),$iter&&($Promise_always$26.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["always"],{always:block})))},$Promise_always$26.$$arity=0),Opal.def(self,"$always!",$Promise_always$excl$27=function(){var $iter=$Promise_always$excl$27.$$p,block=$iter||nil;return $iter&&($Promise_always$excl$27.$$p=null),$iter&&($Promise_always$excl$27.$$p=null),this["$there_can_be_only_one!"](),$send(this,"always",[],block.$to_proc())},$Promise_always$excl$27.$$arity=0),$alias(self,"finally","always"),$alias(self,"ensure","always"),$alias(self,"finally!","always!"),$alias(self,"ensure!","always!"),Opal.def(self,"$trace",$Promise_trace$28=function(depth){var $iter=$Promise_trace$28.$$p,block=$iter||nil;return $iter&&($Promise_trace$28.$$p=null),$iter&&($Promise_trace$28.$$p=null),null==depth&&(depth=nil),this["$^"]($$($nesting,"Trace").$new(depth,block))},$Promise_trace$28.$$arity=-1),Opal.def(self,"$trace!",$Promise_trace$excl$29=function($a){var args,$iter=$Promise_trace$excl$29.$$p,block=$iter||nil,self=this;return $iter&&($Promise_trace$excl$29.$$p=null),$iter&&($Promise_trace$excl$29.$$p=null),args=Opal.slice.call(arguments,0,arguments.length),self["$there_can_be_only_one!"](),$send(self,"trace",Opal.to_a(args),block.$to_proc())},$Promise_trace$excl$29.$$arity=-1),Opal.def(self,"$there_can_be_only_one!",$Promise_there_can_be_only_one$excl$30=function(){return $truthy(this.next["$any?"]())?this.$raise($$($nesting,"ArgumentError"),"a promise has already been chained"):nil},$Promise_there_can_be_only_one$excl$30.$$arity=0),Opal.def(self,"$inspect",$Promise_inspect$31=function(){var self=this,result=nil,$ret_or_5=nil;return result="#<"+self.$class()+"("+self.$object_id()+")",$truthy(self.next["$any?"]())&&(result=$rb_plus(result," >> "+self.next.$inspect())),result=$rb_plus(result,$truthy(self["$realized?"]())?": "+($truthy($ret_or_5=self.value)?$ret_or_5:self.error).$inspect()+">":">")},$Promise_inspect$31.$$arity=0),$alias(self,"to_v1","itself"),Opal.def(self,"$to_v2",$Promise_to_v2$32=function(){var $$33,$$34,v2=nil;return v2=$$($nesting,"PromiseV2").$new(),$send($send(this,"then",[],(($$33=function(i){null==$$33.$$s||$$33.$$s;return null==i&&(i=nil),v2.$resolve(i)}).$$s=this,$$33.$$arity=1,$$33)),"rescue",[],(($$34=function(i){null==$$34.$$s||$$34.$$s;return null==i&&(i=nil),v2.$reject(i)}).$$s=this,$$34.$$arity=1,$$34)),v2},$Promise_to_v2$32.$$arity=0),$alias(self,"to_n","to_v2"),function($base,$super,$parent_nesting){var $Trace_it$35,$Trace_initialize$36,self=$klass($base,$super,"Trace"),$nesting=[self].concat($parent_nesting);Opal.defs(self,"$it",$Trace_it$35=function(promise){var prev,current=nil,$ret_or_6=nil;return current=[],$truthy($truthy($ret_or_6=promise["$act?"]())?$ret_or_6:promise.$prev()["$nil?"]())&&current.$push(promise.$value()),prev=promise.$prev(),$truthy(prev)?current.$concat(this.$it(prev)):current},$Trace_it$35.$$arity=1),Opal.def(self,"$initialize",$Trace_initialize$36=function(depth,block){var $$37,$iter=$Trace_initialize$36.$$p;return $iter&&($Trace_initialize$36.$$p=null),this.depth=depth,$send2(this,$find_super(this,"initialize",$Trace_initialize$36,!1,!0),"initialize",[$hash2(["success"],{success:$send(this,"proc",[],($$37=function(){var lhs,rhs,self=null==$$37.$$s?this:$$37.$$s,trace=nil,$ret_or_7=nil;return(trace=$$($nesting,"Trace").$it(self).$reverse()).$pop(),$truthy($truthy($ret_or_7=depth)?(lhs=depth,rhs=trace.$length(),"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)):$ret_or_7)&&trace.$shift(function(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}(trace.$length(),depth)),$send(block,"call",Opal.to_a(trace))},$$37.$$s=this,$$37.$$arity=0,$$37))})],null)},$Trace_initialize$36.$$arity=2)}($nesting[0],self,$nesting),function($base,$super,$parent_nesting){var $When_initialize$38,$When_each$40,$When_collect$42,$When_inject$44,$When_wait$46,$When_$gt$gt$48,$When_try$50,self=$klass($base,$super,"When"),$nesting=[self].concat($parent_nesting);self.$$prototype.wait=nil,Opal.def(self,"$initialize",$When_initialize$38=function(promises){var $$39,$iter=$When_initialize$38.$$p;return $iter&&($When_initialize$38.$$p=null),null==promises&&(promises=[]),$send2(this,$find_super(this,"initialize",$When_initialize$38,!1,!0),"initialize",[],null),this.wait=[],$send(promises,"each",[],($$39=function(promise){var self=null==$$39.$$s?this:$$39.$$s;return null==promise&&(promise=nil),self.$wait(promise)},$$39.$$s=this,$$39.$$arity=1,$$39))},$When_initialize$38.$$arity=-1),Opal.def(self,"$each",$When_each$40=function(){var $$41,$iter=$When_each$40.$$p,block=$iter||nil;return $iter&&($When_each$40.$$p=null),$iter&&($When_each$40.$$p=null),$truthy(block)||this.$raise($$($nesting,"ArgumentError"),"no block given"),$send(this,"then",[],(($$41=function(values){null==$$41.$$s||$$41.$$s;return null==values&&(values=nil),$send(values,"each",[],block.$to_proc())}).$$s=this,$$41.$$arity=1,$$41))},$When_each$40.$$arity=0),Opal.def(self,"$collect",$When_collect$42=function(){var $$43,$iter=$When_collect$42.$$p,block=$iter||nil;return $iter&&($When_collect$42.$$p=null),$iter&&($When_collect$42.$$p=null),$truthy(block)||this.$raise($$($nesting,"ArgumentError"),"no block given"),$send(this,"then",[],(($$43=function(values){null==$$43.$$s||$$43.$$s;return null==values&&(values=nil),$$($nesting,"When").$new($send(values,"map",[],block.$to_proc()))}).$$s=this,$$43.$$arity=1,$$43))},$When_collect$42.$$arity=0),Opal.def(self,"$inject",$When_inject$44=function($a){var $post_args,args,$$45,$iter=$When_inject$44.$$p,block=$iter||nil,self=this;return $iter&&($When_inject$44.$$p=null),$iter&&($When_inject$44.$$p=null),$post_args=Opal.slice.call(arguments,0,arguments.length),args=$post_args,$send(self,"then",[],(($$45=function(values){null==$$45.$$s||$$45.$$s;return null==values&&(values=nil),$send(values,"reduce",Opal.to_a(args),block.$to_proc())}).$$s=self,$$45.$$arity=1,$$45))},$When_inject$44.$$arity=-1),$alias(self,"map","collect"),$alias(self,"reduce","inject"),Opal.def(self,"$wait",$When_wait$46=function(promise){var $$47;return $truthy($$($nesting,"Promise")["$==="](promise))||(promise=$$($nesting,"Promise").$value(promise)),$truthy(promise["$act?"]())&&(promise=promise.$then()),this.wait["$<<"](promise),$send(promise,"always",[],($$47=function(){var self=null==$$47.$$s?this:$$47.$$s;return null==self.next&&(self.next=nil),$truthy(self.next["$any?"]())?self.$try():nil},$$47.$$s=this,$$47.$$arity=0,$$47)),this},$When_wait$46.$$arity=1),$alias(self,"and","wait"),Opal.def(self,"$>>",$When_$gt$gt$48=function($a){var $rest_arg,$$49,$iter=$When_$gt$gt$48.$$p,self=this;return $iter&&($When_$gt$gt$48.$$p=null),$rest_arg=Opal.slice.call(arguments,0,arguments.length),$send($send2(self,$find_super(self,">>",$When_$gt$gt$48,!1,!0),">>",Opal.to_a($rest_arg),$iter),"tap",[],(($$49=function(){return(null==$$49.$$s?this:$$49.$$s).$try()}).$$s=self,$$49.$$arity=0,$$49))},$When_$gt$gt$48.$$arity=-1),Opal.def(self,"$try",$When_try$50=function(){var promise=nil;return $truthy($send(this.wait,"all?",[],"realized?".$to_proc()))?(promise=$send(this.wait,"find",[],"rejected?".$to_proc()),$truthy(promise)?this.$reject(promise.$error()):this.$resolve($send(this.wait,"map",[],"value".$to_proc()))):nil},$When_try$50.$$arity=0)}($nesting[0],self,$nesting)}($nesting[0],0,$nesting),Opal.const_set($nesting[0],"PromiseV1",$$($nesting,"Promise"))};
