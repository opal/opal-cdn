Opal.modules.set=function(Opal){var nil=Opal.nil,$$$=Opal.$$$,$klass=Opal.klass,$defs=Opal.defs,$hash2=Opal.hash2,$truthy=Opal.truthy,$eqeqeq=Opal.eqeqeq,$Kernel=Opal.Kernel,$send=Opal.send,$def=Opal.def,$eqeq=Opal.eqeq,$to_a=Opal.to_a,$rb_minus=Opal.rb_minus,$rb_lt=Opal.rb_lt,$rb_le=Opal.rb_le,$alias=Opal.alias,$module=Opal.module;return Opal.add_stubs("include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,-,enum_for,[],<<,replace,delete,select,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys"),function($base,$super){var self=$klass("::",null,"Set");function is_set(set){$truthy(set["$is_a?"]($$$("Set")))||$Kernel.$raise($$$("ArgumentError"),"value must be a set")}self.$$prototype.hash=nil,self.$include($$$("Enumerable")),$defs(self,"$[]",(function($a){var ary,self=this;return ary=Opal.slice.call(arguments),self.$new(ary)}),-1),$def(self,"$initialize",(function $$initialize(enum$){var block=$$initialize.$$p||nil;return delete $$initialize.$$p,null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($eqeqeq($$$("Enumerable"),enum$)||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],(function $$2(item){return null==item&&(item=nil),(null==$$2.$$s?this:$$2.$$s).$add(Opal.yield1(block,item))}),{$$arity:1,$$s:this}):this.$merge(enum$))}),-1),$def(self,"$dup",(function(){return this.$class().$new().$merge(this)}),0),$def(self,"$-",(function(enum$){return $truthy(enum$["$respond_to?"]("each"))||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)}),1),$def(self,"$inspect",(function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"}),0),$def(self,"$==",(function(other){return!!$truthy(this["$equal?"](other))||($truthy(other["$instance_of?"](this.$class()))?this.hash["$=="](other.$instance_variable_get("@hash")):!(!$truthy(other["$is_a?"]($$$("Set")))||!$eqeq(this.$size(),other.$size()))&&$send(other,"all?",[],(function $$5(o){var self=null==$$5.$$s?this:$$5.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)}),{$$arity:1,$$s:this}))}),1),$def(self,"$add",(function(o){var $writer;return $writer=[o,!0],$send(this.hash,"[]=",$to_a($writer)),$rb_minus($writer.length,1),this}),1),$def(self,"$classify",(function $$classify(){var block=$$classify.$$p||nil,result=nil;return delete $$classify.$$p,block===nil?this.$enum_for("classify"):(result=$send($$$("Hash"),"new",[],(function $$6(h,k){var $writer;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,(null==$$6.$$s?this:$$6.$$s).$class().$new()],$send(h,"[]=",$to_a($writer)),$writer[$rb_minus($writer.length,1)]}),{$$arity:2,$$s:this}),$send(this,"each",[],(function(item){return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}),1),result)}),0),$def(self,"$collect!",(function $Set_collect$excl$8(){var block=$Set_collect$excl$8.$$p||nil,result=nil;return delete $Set_collect$excl$8.$$p,block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],(function(item){return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}),1),this.$replace(result))}),0),$def(self,"$delete",(function(o){return this.hash.$delete(o),this}),1),$def(self,"$delete?",(function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil}),1),$def(self,"$delete_if",(function $$delete_if(){var $yield=$$delete_if.$$p||nil;return delete $$delete_if.$$p,$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],(function(o){return null==o&&(o=nil),Opal.yield1($yield,o)}),1),"each",[],(function $$13(o){var self=null==$$13.$$s?this:$$13.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}),{$$arity:1,$$s:this}),this)}),0),$def(self,"$keep_if",(function $$keep_if(){var $yield=$$keep_if.$$p||nil;return delete $$keep_if.$$p,$yield===nil?this.$enum_for("keep_if"):($send($send(this,"reject",[],(function(o){return null==o&&(o=nil),Opal.yield1($yield,o)}),1),"each",[],(function $$15(o){var self=null==$$15.$$s?this:$$15.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}),{$$arity:1,$$s:this}),this)}),0),$def(self,"$reject!",(function $Set_reject$excl$16(){var before,block=$Set_reject$excl$16.$$p||nil;return delete $Set_reject$excl$16.$$p,block===nil?this.$enum_for("reject!"):(before=this.$size(),$send(this,"delete_if",[],block.$to_proc()),$eqeq(this.$size(),before)?nil:this)}),0),$def(self,"$select!",(function $Set_select$excl$17(){var before,block=$Set_select$excl$17.$$p||nil;return delete $Set_select$excl$17.$$p,block===nil?this.$enum_for("select!"):(before=this.$size(),$send(this,"keep_if",[],block.$to_proc()),$eqeq(this.$size(),before)?nil:this)}),0),$def(self,"$add?",(function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)}),1),$def(self,"$each",(function $$each(){var block=$$each.$$p||nil;return delete $$each.$$p,block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)}),0),$def(self,"$empty?",(function(){return this.hash["$empty?"]()}),0),$def(self,"$eql?",(function(other){return this.hash["$eql?"]($send(other,"instance_eval",[],(function $$21(){var self=null==$$21.$$s?this:$$21.$$s;return null==self.hash&&(self.hash=nil),self.hash}),{$$arity:0,$$s:this}))}),1),$def(self,"$clear",(function(){return this.hash.$clear(),this}),0),$def(self,"$include?",(function(o){return this.hash["$include?"](o)}),1),$def(self,"$merge",(function(enum$){return $send(enum$,"each",[],(function $$23(item){return null==item&&(item=nil),(null==$$23.$$s?this:$$23.$$s).$add(item)}),{$$arity:1,$$s:this}),this}),1),$def(self,"$replace",(function(enum$){return this.$clear(),this.$merge(enum$),this}),1),$def(self,"$size",(function(){return this.hash.$size()}),0),$def(self,"$subtract",(function(enum$){return $send(enum$,"each",[],(function $$24(item){return null==item&&(item=nil),(null==$$24.$$s?this:$$24.$$s).$delete(item)}),{$$arity:1,$$s:this}),this}),1),$def(self,"$|",(function(enum$){return $truthy(enum$["$respond_to?"]("each"))||$Kernel.$raise($$$("ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)}),1),$def(self,"$superset?",(function(set){return is_set(set),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],(function $$27(o){return null==o&&(o=nil),(null==$$27.$$s?this:$$27.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$proper_superset?",(function(set){return is_set(set),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],(function $$29(o){return null==o&&(o=nil),(null==$$29.$$s?this:$$29.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$subset?",(function(set){return is_set(set),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1)}),1),$def(self,"$proper_subset?",(function(set){return is_set(set),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1)}),1),$def(self,"$intersect?",(function(set){return is_set(set),$truthy($rb_lt(this.$size(),set.$size()))?$send(this,"any?",[],(function(o){return null==o&&(o=nil),set["$include?"](o)}),1):$send(set,"any?",[],(function $$36(o){return null==o&&(o=nil),(null==$$36.$$s?this:$$36.$$s)["$include?"](o)}),{$$arity:1,$$s:this})}),1),$def(self,"$disjoint?",(function(set){return this["$intersect?"](set)["$!"]()}),1),$def(self,"$to_a",(function(){return this.hash.$keys()}),0),$alias(self,"+","|"),$alias(self,"<","proper_subset?"),$alias(self,"<<","add"),$alias(self,"<=","subset?"),$alias(self,">","proper_superset?"),$alias(self,">=","superset?"),$alias(self,"difference","-"),$alias(self,"filter!","select!"),$alias(self,"length","size"),$alias(self,"map!","collect!"),$alias(self,"member?","include?"),$alias(self,"union","|")}(),function($base,$parent_nesting){var self=$module("::","Enumerable"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $def(self,"$to_set",(function $$to_set($a,$b){var $post_args,klass,block=$$to_set.$$p||nil,self=this;return delete $$to_set.$$p,($post_args=Opal.slice.call(arguments)).length>0&&(klass=$post_args.shift()),null==klass&&(klass=$$("Set")),$send(klass,"new",[self].concat($to_a($post_args)),block.$to_proc())}),-1)}(0,[])};
