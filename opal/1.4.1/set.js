Opal.modules["set"] = function(Opal) {/* Generated by Opal 1.4.1 */
  var $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $klass = Opal.klass, $defs = Opal.defs, $hash2 = Opal.hash2, $truthy = Opal.truthy, $eqeqeq = Opal.eqeqeq, $Kernel = Opal.Kernel, $send = Opal.send, $def = Opal.def, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $rb_minus = Opal.rb_minus, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $alias = Opal.alias, $module = Opal.module;

  Opal.add_stubs('include,new,nil?,===,raise,each,add,merge,class,respond_to?,subtract,dup,join,to_a,equal?,instance_of?,==,instance_variable_get,size,is_a?,all?,include?,[]=,-,enum_for,[],<<,replace,delete,select,reject,delete_if,to_proc,keep_if,each_key,empty?,eql?,instance_eval,clear,<,<=,any?,!,intersect?,keys');
  
  (function($base, $super) {
    var self = $klass($base, $super, 'Set');

    var $ret_or_1 = nil, $proto = self.$$prototype;

    $proto.hash = nil;
    
    self.$include($$$('Enumerable'));
    $defs(self, '$[]', function $Set_$$$1($a) {
      var $post_args, ary, self = this;

      
      
      $post_args = Opal.slice.call(arguments);
      
      ary = $post_args;;
      return self.$new(ary);
    }, -1);
    
    $def(self, '$initialize', function $$initialize(enum$) {
      var block = $$initialize.$$p || nil, self = this;

      delete $$initialize.$$p;
      
      ;
      
      if (enum$ == null) enum$ = nil;;
      self.hash = $hash2([], {});
      if ($truthy(enum$['$nil?']())) {
        return nil
      };
      if (!$eqeqeq($$$('Enumerable'), enum$)) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], function $$2(item){var self = $$2.$$s == null ? this : $$2.$$s;

          
          
          if (item == null) item = nil;;
          return self.$add(Opal.yield1(block, item));}, {$$arity: 1, $$s: self})
      } else {
        return self.$merge(enum$)
      };
    }, -1);
    
    $def(self, '$dup', function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, 0);
    
    $def(self, '$-', function $Set_$minus$3(enum$) {
      var self = this;

      
      if (!$truthy(enum$['$respond_to?']("each"))) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, 1);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, 0);
    
    $def(self, '$==', function $Set_$eq_eq$4(other) {
      var self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if (($truthy(other['$is_a?']($$$('Set'))) && ($eqeq(self.$size(), other.$size())))) {
        return $send(other, 'all?', [], function $$5(o){var self = $$5.$$s == null ? this : $$5.$$s;
          if (self.hash == null) self.hash = nil;

          
          
          if (o == null) o = nil;;
          return self.hash['$include?'](o);}, {$$arity: 1, $$s: self})
      } else {
        return false
      }
    }, 1);
    
    $def(self, '$add', function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', $to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, 1);
    
    $def(self, '$classify', function $$classify() {
      var block = $$classify.$$p || nil, self = this, result = nil;

      delete $$classify.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("classify")
      };
      result = $send($$$('Hash'), 'new', [], function $$6(h, k){var self = $$6.$$s == null ? this : $$6.$$s, $writer = nil;

        
        
        if (h == null) h = nil;;
        
        if (k == null) k = nil;;
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', $to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, {$$arity: 2, $$s: self});
      $send(self, 'each', [], function $$7(item){
        
        
        if (item == null) item = nil;;
        return result['$[]'](Opal.yield1(block, item)).$add(item);}, 1);
      return result;
    }, 0);
    
    $def(self, '$collect!', function $Set_collect$excl$8() {
      var block = $Set_collect$excl$8.$$p || nil, self = this, result = nil;

      delete $Set_collect$excl$8.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], function $$9(item){
        
        
        if (item == null) item = nil;;
        return result['$<<'](Opal.yield1(block, item));}, 1);
      return self.$replace(result);
    }, 0);
    
    $def(self, '$delete', function $Set_delete$10(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, 1);
    
    $def(self, '$delete?', function $Set_delete$ques$11(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
      } else {
        return nil
      }
    }, 1);
    
    $def(self, '$delete_if', function $$delete_if() {
      var $yield = $$delete_if.$$p || nil, self = this;

      delete $$delete_if.$$p;
      
      if (!($yield !== nil)) {
        return self.$enum_for("delete_if")
      };
      $send($send(self, 'select', [], function $$12(o){
        
        
        if (o == null) o = nil;;
        return Opal.yield1($yield, o);;}, 1), 'each', [], function $$13(o){var self = $$13.$$s == null ? this : $$13.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) o = nil;;
        return self.hash.$delete(o);}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$keep_if', function $$keep_if() {
      var $yield = $$keep_if.$$p || nil, self = this;

      delete $$keep_if.$$p;
      
      if (!($yield !== nil)) {
        return self.$enum_for("keep_if")
      };
      $send($send(self, 'reject', [], function $$14(o){
        
        
        if (o == null) o = nil;;
        return Opal.yield1($yield, o);;}, 1), 'each', [], function $$15(o){var self = $$15.$$s == null ? this : $$15.$$s;
        if (self.hash == null) self.hash = nil;

        
        
        if (o == null) o = nil;;
        return self.hash.$delete(o);}, {$$arity: 1, $$s: self});
      return self;
    }, 0);
    
    $def(self, '$reject!', function $Set_reject$excl$16() {
      var block = $Set_reject$excl$16.$$p || nil, self = this, before = nil;

      delete $Set_reject$excl$16.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("reject!")
      };
      before = self.$size();
      $send(self, 'delete_if', [], block.$to_proc());
      if ($eqeq(self.$size(), before)) {
        return nil
      } else {
        return self
      };
    }, 0);
    
    $def(self, '$select!', function $Set_select$excl$17() {
      var block = $Set_select$excl$17.$$p || nil, self = this, before = nil;

      delete $Set_select$excl$17.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("select!")
      };
      before = self.$size();
      $send(self, 'keep_if', [], block.$to_proc());
      if ($eqeq(self.$size(), before)) {
        return nil
      } else {
        return self
      };
    }, 0);
    
    $def(self, '$add?', function $Set_add$ques$18(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
      } else {
        return self.$add(o)
      }
    }, 1);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      delete $$each.$$p;
      
      ;
      if (!(block !== nil)) {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$empty?', function $Set_empty$ques$19() {
      var self = this;

      return self.hash['$empty?']()
    }, 0);
    
    $def(self, '$eql?', function $Set_eql$ques$20(other) {
      var self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;
        if (self.hash == null) self.hash = nil;

        return self.hash}, {$$arity: 0, $$s: self}))
    }, 1);
    
    $def(self, '$clear', function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, 0);
    
    $def(self, '$include?', function $Set_include$ques$22(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, 1);
    
    $def(self, '$merge', function $$merge(enum$) {
      var self = this;

      
      $send(enum$, 'each', [], function $$23(item){var self = $$23.$$s == null ? this : $$23.$$s;

        
        
        if (item == null) item = nil;;
        return self.$add(item);}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    
    $def(self, '$replace', function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, 1);
    
    $def(self, '$size', function $$size() {
      var self = this;

      return self.hash.$size()
    }, 0);
    
    $def(self, '$subtract', function $$subtract(enum$) {
      var self = this;

      
      $send(enum$, 'each', [], function $$24(item){var self = $$24.$$s == null ? this : $$24.$$s;

        
        
        if (item == null) item = nil;;
        return self.$delete(item);}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    
    $def(self, '$|', function $Set_$$25(enum$) {
      var self = this;

      
      if (!$truthy(enum$['$respond_to?']("each"))) {
        $Kernel.$raise($$$('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, 1);
    
    function is_set(set) {
      ($truthy(($ret_or_1 = (set)['$is_a?']($$$('Set')))) ? ($ret_or_1) : ($Kernel.$raise($$$('ArgumentError'), "value must be a set")))
    }
  ;
    
    $def(self, '$superset?', function $Set_superset$ques$26(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false
      };
      return $send(set, 'all?', [], function $$27(o){var self = $$27.$$s == null ? this : $$27.$$s;

        
        
        if (o == null) o = nil;;
        return self['$include?'](o);}, {$$arity: 1, $$s: self});
    }, 1);
    
    $def(self, '$proper_superset?', function $Set_proper_superset$ques$28(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false
      };
      return $send(set, 'all?', [], function $$29(o){var self = $$29.$$s == null ? this : $$29.$$s;

        
        
        if (o == null) o = nil;;
        return self['$include?'](o);}, {$$arity: 1, $$s: self});
    }, 1);
    
    $def(self, '$subset?', function $Set_subset$ques$30(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false
      };
      return $send(self, 'all?', [], function $$31(o){
        
        
        if (o == null) o = nil;;
        return set['$include?'](o);}, 1);
    }, 1);
    
    $def(self, '$proper_subset?', function $Set_proper_subset$ques$32(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false
      };
      return $send(self, 'all?', [], function $$33(o){
        
        
        if (o == null) o = nil;;
        return set['$include?'](o);}, 1);
    }, 1);
    
    $def(self, '$intersect?', function $Set_intersect$ques$34(set) {
      var self = this;

      
      is_set(set);
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return $send(self, 'any?', [], function $$35(o){
          
          
          if (o == null) o = nil;;
          return set['$include?'](o);}, 1)
      } else {
        return $send(set, 'any?', [], function $$36(o){var self = $$36.$$s == null ? this : $$36.$$s;

          
          
          if (o == null) o = nil;;
          return self['$include?'](o);}, {$$arity: 1, $$s: self})
      };
    }, 1);
    
    $def(self, '$disjoint?', function $Set_disjoint$ques$37(set) {
      var self = this;

      return self['$intersect?'](set)['$!']()
    }, 1);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, 0);
    $alias(self, "+", "|");
    $alias(self, "<", "proper_subset?");
    $alias(self, "<<", "add");
    $alias(self, "<=", "subset?");
    $alias(self, ">", "proper_superset?");
    $alias(self, ">=", "superset?");
    $alias(self, "difference", "-");
    $alias(self, "filter!", "select!");
    $alias(self, "length", "size");
    $alias(self, "map!", "collect!");
    $alias(self, "member?", "include?");
    return $alias(self, "union", "|");
  })('::', null);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    return $def(self, '$to_set', function $$to_set($a, $b) {
      var block = $$to_set.$$p || nil, $post_args, klass, args, self = this;

      delete $$to_set.$$p;
      
      ;
      
      $post_args = Opal.slice.call(arguments);
      
      if ($post_args.length > 0) klass = $post_args.shift();
      if (klass == null) klass = $$('Set');;
      
      args = $post_args;;
      return $send(klass, 'new', [self].concat($to_a(args)), block.$to_proc());
    }, -1)
  })('::', $nesting);
};
