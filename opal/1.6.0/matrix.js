Opal.modules["matrix/lup_decomposition"] = function(Opal) {/* Generated by Opal 1.6.0 */
  var $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $eqeq = Opal.eqeq, $def = Opal.def, $rb_le = Opal.rb_le, $thrower = Opal.thrower, $neqeq = Opal.neqeq, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $to_a = Opal.to_a, $rb_lt = Opal.rb_lt, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('include,build,min,>,[],==,<=,new,each_with_index,[]=,send,l,u,p,alias_method,attr_reader,times,!=,Raise,*,singular?,is_a?,row_count,column_count,map,to_a,row,upto,+,-,downto,quo,convert_to_array,size,values_at,elements,raise,class,abs,-@,<');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'LUPDecomposition');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.row_count = $proto.column_count = $proto.pivots = $proto.pivot_sign = nil;
      
      self.$include($$$($$('Matrix'), 'ConversionHelper'));
      
      $def(self, '$l', function $$l() {
        var self = this;

        return $send($$('Matrix'), 'build', [self.row_count, [self.column_count, self.row_count].$min()], function $$1(i, j){var self = $$1.$$s == null ? this : $$1.$$s;
          if (self.lu == null) self.lu = nil;

          
          if (i == null) i = nil;
          if (j == null) j = nil;
          if ($truthy($rb_gt(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else if ($eqeq(i, j)) {
            return 1
          } else {
            return 0
          };}, {$$arity: 2, $$s: self})
      }, 0);
      
      $def(self, '$u', function $$u() {
        var self = this;

        return $send($$('Matrix'), 'build', [[self.column_count, self.row_count].$min(), self.column_count], function $$2(i, j){var self = $$2.$$s == null ? this : $$2.$$s;
          if (self.lu == null) self.lu = nil;

          
          if (i == null) i = nil;
          if (j == null) j = nil;
          if ($truthy($rb_le(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else {
            return 0
          };}, {$$arity: 2, $$s: self})
      }, 0);
      
      $def(self, '$p', function $$p() {
        var self = this, rows = nil;

        
        rows = $send($$('Array'), 'new', [self.row_count], function $$3(){var self = $$3.$$s == null ? this : $$3.$$s;
          if (self.row_count == null) self.row_count = nil;

          return $$('Array').$new(self.row_count, 0)}, {$$arity: 0, $$s: self});
        $send(self.pivots, 'each_with_index', [], function $$4(p, i){var $a;

          
          if (p == null) p = nil;
          if (i == null) i = nil;
          return ($a = [p, 1], $send(rows['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, 2);
        return $$('Matrix').$send("new", rows, self.row_count);
      }, 0);
      
      $def(self, '$to_ary', function $$to_ary() {
        var self = this;

        return [self.$l(), self.$u(), self.$p()]
      }, 0);
      self.$alias_method("to_a", "to_ary");
      self.$attr_reader("pivots");
      
      $def(self, '$singular?', function $LUPDecomposition_singular$ques$5() {try { var $t_return = $thrower('return'); 
        var self = this;

        
        $send(self.column_count, 'times', [], function $$6(j){var self = $$6.$$s == null ? this : $$6.$$s;
          if (self.lu == null) self.lu = nil;

          
          if (j == null) j = nil;
          if ($eqeq(self.lu['$[]'](j)['$[]'](j), 0)) {
            $t_return.$throw(true)
          } else {
            return nil
          };}, {$$arity: 1, $$s: self, $$ret: $t_return});
        return false;} catch($e) {
          if ($e === $t_return) return $e.$v;
          throw $e;
        }
      }, 0);
      
      $def(self, '$det', function $$det() {
        var self = this, d = nil;

        
        if ($neqeq(self.row_count, self.column_count)) {
          $$('Matrix').$Raise($$$($$('Matrix'), 'ErrDimensionMismatch'))
        };
        d = self.pivot_sign;
        $send(self.column_count, 'times', [], function $$7(j){var self = $$7.$$s == null ? this : $$7.$$s;
          if (self.lu == null) self.lu = nil;

          
          if (j == null) j = nil;
          return (d = $rb_times(d, self.lu['$[]'](j)['$[]'](j)));}, {$$arity: 1, $$s: self});
        return d;
      }, 0);
      self.$alias_method("determinant", "det");
      
      $def(self, '$solve', function $$solve(b) {
        var self = this, nx = nil, m = nil;

        
        if ($truthy(self['$singular?']())) {
          $$('Matrix').$Raise($$$($$('Matrix'), 'ErrNotRegular'), "Matrix is singular.")
        };
        if ($truthy(b['$is_a?']($$('Matrix')))) {
          
          if ($neqeq(b.$row_count(), self.row_count)) {
            $$('Matrix').$Raise($$$($$('Matrix'), 'ErrDimensionMismatch'))
          };
          nx = b.$column_count();
          m = $send(self.pivots, 'map', [], function $$8(row){
            
            if (row == null) row = nil;
            return b.$row(row).$to_a();}, 1);
          $send(self.column_count, 'times', [], function $$9(k){var self = $$9.$$s == null ? this : $$9.$$s;
            if (self.column_count == null) self.column_count = nil;

            
            if (k == null) k = nil;
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], function $$10(i){var self = $$10.$$s == null ? this : $$10.$$s;

              
              if (i == null) i = nil;
              return $send(nx, 'times', [], function $$11(j){var $a, self = $$11.$$s == null ? this : $$11.$$s, $binary_op_recvr_tmp_3 = nil;
                if (self.lu == null) self.lu = nil;

                
                if (j == null) j = nil;
                $binary_op_recvr_tmp_3 = m['$[]'](i);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_3['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))], $send($binary_op_recvr_tmp_3, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          $send($rb_minus(self.column_count, 1), 'downto', [0], function $$12(k){var self = $$12.$$s == null ? this : $$12.$$s;

            
            if (k == null) k = nil;
            $send(nx, 'times', [], function $$13(j){var $a, self = $$13.$$s == null ? this : $$13.$$s;
              if (self.lu == null) self.lu = nil;

              
              if (j == null) j = nil;
              return ($a = [j, m['$[]'](k)['$[]'](j).$quo(self.lu['$[]'](k)['$[]'](k))], $send(m['$[]'](k), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            return $send(k, 'times', [], function $$14(i){var self = $$14.$$s == null ? this : $$14.$$s;

              
              if (i == null) i = nil;
              return $send(nx, 'times', [], function $$15(j){var $a, self = $$15.$$s == null ? this : $$15.$$s, $binary_op_recvr_tmp_4 = nil;
                if (self.lu == null) self.lu = nil;

                
                if (j == null) j = nil;
                $binary_op_recvr_tmp_4 = m['$[]'](i);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_4['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))], $send($binary_op_recvr_tmp_4, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          return $$('Matrix').$send("new", m, nx);
        } else {
          
          b = self.$convert_to_array(b);
          if ($neqeq(b.$size(), self.row_count)) {
            $$('Matrix').$Raise($$$($$('Matrix'), 'ErrDimensionMismatch'))
          };
          m = $send(b, 'values_at', $to_a(self.pivots));
          $send(self.column_count, 'times', [], function $$16(k){var self = $$16.$$s == null ? this : $$16.$$s;
            if (self.column_count == null) self.column_count = nil;

            
            if (k == null) k = nil;
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], function $$17(i){var $a, self = $$17.$$s == null ? this : $$17.$$s;
              if (self.lu == null) self.lu = nil;

              
              if (i == null) i = nil;
              return ($a = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))], $send(m, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          $send($rb_minus(self.column_count, 1), 'downto', [0], function $$18(k){var self = $$18.$$s == null ? this : $$18.$$s;
            if (self.lu == null) self.lu = nil;

            
            if (k == null) k = nil;
            m['$[]='](k, m['$[]'](k).$quo(self.lu['$[]'](k)['$[]'](k)));
            return $send(k, 'times', [], function $$19(i){var $a, self = $$19.$$s == null ? this : $$19.$$s;
              if (self.lu == null) self.lu = nil;

              
              if (i == null) i = nil;
              return ($a = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))], $send(m, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          return $$('Vector').$elements(m, false);
        };
      }, 1);
      return $def(self, '$initialize', function $$initialize(a) {
        var self = this, lu_col_j = nil;

        
        if (!$truthy(a['$is_a?']($$('Matrix')))) {
          self.$raise($$('TypeError'), "Expected Matrix but got " + (a.$class()))
        };
        self.lu = a.$to_a();
        self.row_count = a.$row_count();
        self.column_count = a.$column_count();
        self.pivots = $$('Array').$new(self.row_count);
        $send(self.row_count, 'times', [], function $$20(i){var $a, self = $$20.$$s == null ? this : $$20.$$s;
          if (self.pivots == null) self.pivots = nil;

          
          if (i == null) i = nil;
          return ($a = [i, i], $send(self.pivots, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        self.pivot_sign = 1;
        lu_col_j = $$('Array').$new(self.row_count);
        return $send(self.column_count, 'times', [], function $$21(j){var self = $$21.$$s == null ? this : $$21.$$s, p = nil, k = nil;
          if (self.row_count == null) self.row_count = nil;
          if (self.column_count == null) self.column_count = nil;
          if (self.pivots == null) self.pivots = nil;
          if (self.pivot_sign == null) self.pivot_sign = nil;
          if (self.lu == null) self.lu = nil;

          
          if (j == null) j = nil;
          $send(self.row_count, 'times', [], function $$22(i){var $a, self = $$22.$$s == null ? this : $$22.$$s;
            if (self.lu == null) self.lu = nil;

            
            if (i == null) i = nil;
            return ($a = [i, self.lu['$[]'](i)['$[]'](j)], $send(lu_col_j, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
          $send(self.row_count, 'times', [], function $$23(i){var $a, $b, self = $$23.$$s == null ? this : $$23.$$s, lu_row_i = nil, kmax = nil, s = nil;
            if (self.lu == null) self.lu = nil;

            
            if (i == null) i = nil;
            lu_row_i = self.lu['$[]'](i);
            kmax = [i, j].$min();
            s = 0;
            $send(kmax, 'times', [], function $$24(k){
              
              if (k == null) k = nil;
              return (s = $rb_plus(s, $rb_times(lu_row_i['$[]'](k), lu_col_j['$[]'](k))));}, 1);
            return ($a = [j, ($b = [i, $rb_minus(lu_col_j['$[]'](i), s)], $send(lu_col_j, '[]=', $b), $b[$b.length - 1])], $send(lu_row_i, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
          p = j;
          $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], function $$25(i){
            
            if (i == null) i = nil;
            if ($truthy($rb_gt(lu_col_j['$[]'](i).$abs(), lu_col_j['$[]'](p).$abs()))) {
              return (p = i)
            } else {
              return nil
            };}, 1);
          if ($neqeq(p, j)) {
            
            $send(self.column_count, 'times', [], function $$26(k){var $a, self = $$26.$$s == null ? this : $$26.$$s, t = nil;
              if (self.lu == null) self.lu = nil;

              
              if (k == null) k = nil;
              t = self.lu['$[]'](p)['$[]'](k);
              self.lu['$[]'](p)['$[]='](k, self.lu['$[]'](j)['$[]'](k));
              return ($a = [k, t], $send(self.lu['$[]'](j), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            k = self.pivots['$[]'](p);
            self.pivots['$[]='](p, self.pivots['$[]'](j));
            self.pivots['$[]='](j, k);
            self.pivot_sign = self.pivot_sign['$-@']();
          };
          if (($truthy($rb_lt(j, self.row_count)) && ($neqeq(self.lu['$[]'](j)['$[]'](j), 0)))) {
            return $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], function $$27(i){var $a, self = $$27.$$s == null ? this : $$27.$$s;
              if (self.lu == null) self.lu = nil;

              
              if (i == null) i = nil;
              return ($a = [j, self.lu['$[]'](i)['$[]'](j).$quo(self.lu['$[]'](j)['$[]'](j))], $send(self.lu['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self})
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
      }, 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["e2mmap"] = function(Opal) {/* Generated by Opal 1.6.0 */
  var $module = Opal.module, $const_set = Opal.const_set, $send2 = Opal.send2, $find_super = Opal.find_super, $truthy = Opal.truthy, $rb_lt = Opal.rb_lt, $defs = Opal.defs, $send = Opal.send, $slice = Opal.slice, $to_a = Opal.to_a, $def = Opal.def, $alias = Opal.alias, $hash2 = Opal.hash2, $gvars = Opal.gvars, $regexp = Opal.regexp, $thrower = Opal.thrower, $nesting = [], nil = Opal.nil;

  Opal.add_stubs('<,bind,module_eval,Raise,class,extend,def_e2message,def_exception,instance_eval,[]=,new,const_defined?,remove_const,const_set,e2mm_message,nil?,caller,=~,[],quote,shift,raise,sprintf,Fail,inspect,each,ancestors');
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Exception2MessageMapper');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    $const_set($nesting[0], 'E2MM', $$('Exception2MessageMapper'));
    $defs($$('E2MM'), '$extend_object', function $$extend_object(cl) {
      var $yield = $$extend_object.$$p || nil, self = this;

      $$extend_object.$$p = null;
      
      $send2(self, $find_super(self, 'extend_object', $$extend_object, false, true), 'extend_object', [cl], $yield);
      if ($truthy($rb_lt(cl, $$('E2MM')))) {
        return nil
      } else {
        return cl.$bind(self)
      };
    }, 1);
    
    $def(self, '$bind', function $$bind(cl) {
      var self = this;

      return $send(self, 'module_eval', [], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

        
        
        $def(self, '$Raise', function $$Raise($a, $b) {
          var $post_args, err, rest, self = this;

          
          $post_args = $slice.call(arguments);
          
          if ($post_args.length > 0) err = $post_args.shift();if (err == null) err = nil;
          rest = $post_args;
          return $send($$('Exception2MessageMapper'), 'Raise', [self.$class(), err].concat($to_a(rest)));
        }, -1);
        $alias(self, "Fail", "Raise");
        (function(self, $parent_nesting) {
          
          
          
          Opal.udef(self, '$' + "included");;
          return nil;
        })(Opal.get_singleton_class(self), $nesting);
        return $defs(self, '$included', function $$included(mod) {
          
          return mod.$extend($$('Exception2MessageMapper'))
        }, 1);}, {$$arity: 0, $$s: self})
    }, 1);
    
    $def(self, '$Raise', function $$Raise($a, $b) {
      var $post_args, err, rest, self = this;

      
      $post_args = $slice.call(arguments);
      
      if ($post_args.length > 0) err = $post_args.shift();if (err == null) err = nil;
      rest = $post_args;
      return $send($$('E2MM'), 'Raise', [self, err].concat($to_a(rest)));
    }, -1);
    $alias(self, "Fail", "Raise");
    $alias(self, "fail", "Raise");
    
    $def(self, '$def_e2message', function $$def_e2message(c, m) {
      var self = this;

      return $$('E2MM').$def_e2message(self, c, m)
    }, 2);
    
    $def(self, '$def_exception', function $$def_exception(n, m, s) {
      var self = this;

      
      if (s == null) s = $$('StandardError');
      return $$('E2MM').$def_exception(self, n, m, s);
    }, -3);
    self.MessageMap = $hash2([], {});
    $defs($$('E2MM'), '$def_e2message', function $$def_e2message(k, c, m) {
      var self = this;

      
      $send($$('E2MM'), 'instance_eval', [], function $$2(){var $a, self = $$2.$$s == null ? this : $$2.$$s;
        if (self.MessageMap == null) self.MessageMap = nil;

        return ($a = [[k, c], m], $send(self.MessageMap, '[]=', $a), $a[$a.length - 1])}, {$$arity: 0, $$s: self});
      return c;
    }, 3);
    $defs($$('E2MM'), '$def_exception', function $$def_exception(k, n, m, s) {
      var self = this, e = nil;

      
      if (s == null) s = $$('StandardError');
      e = $$('Class').$new(s);
      $send($$('E2MM'), 'instance_eval', [], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;
        if (self.MessageMap == null) self.MessageMap = nil;

        return ($a = [[k, e], m], $send(self.MessageMap, '[]=', $a), $a[$a.length - 1])}, {$$arity: 0, $$s: self});
      if ($truthy(k['$const_defined?'](n, false))) {
        $send(k, 'module_eval', [], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

          return self.$remove_const(n)}, {$$arity: 0, $$s: self})
      };
      return k.$const_set(n, e);
    }, -4);
    $defs($$('E2MM'), '$Raise', function $$Raise($a, $b, $c) {
      var $post_args, klass, err, rest, self = this, form = nil, b = nil;
      if ($gvars["@"] == null) $gvars["@"] = nil;

      
      $post_args = $slice.call(arguments);
      
      if ($post_args.length > 0) klass = $post_args.shift();if (klass == null) klass = $$('E2MM');
      
      if ($post_args.length > 0) err = $post_args.shift();if (err == null) err = nil;
      rest = $post_args;
      if ($truthy((form = self.$e2mm_message(klass, err)))) {
        
        b = ($truthy($gvars["@"]['$nil?']()) ? (self.$caller(1)) : ($gvars["@"]));
        if ($truthy(b['$[]'](0)['$=~']($regexp(["^", $$('Regexp').$quote("./e2mmap.rb"), ":"])))) {
          b.$shift()
        };
        return self.$raise(err, $send(self, 'sprintf', [form].concat($to_a(rest))), b);
      } else {
        return $$('E2MM').$Fail($$('E2MM'), $$('ErrNotRegisteredException'), err.$inspect())
      };
    }, -1);
    (function(self, $parent_nesting) {
      
      return $alias(self, "Fail", "Raise")
    })(Opal.get_singleton_class($$('E2MM')), $nesting);
    $defs($$('E2MM'), '$e2mm_message', function $$e2mm_message(klass, exp) {try { var $t_return = $thrower('return'); 
      var self = this;

      
      $send(klass.$ancestors(), 'each', [], function $$5(c){var self = $$5.$$s == null ? this : $$5.$$s, mes = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

        
        if (c == null) c = nil;
        if ($truthy((mes = self.MessageMap['$[]']([c, exp])))) {
          $t_return.$throw(mes)
        } else {
          return nil
        };}, {$$arity: 1, $$s: self, $$ret: $t_return});
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 2);
    (function(self, $parent_nesting) {
      
      return $alias(self, "message", "e2mm_message")
    })(Opal.get_singleton_class(self), $nesting);
    return $$('E2MM').$def_exception($$('E2MM'), "ErrNotRegisteredException", "not registered exception(%s)");
  })($nesting[0], $nesting)
};

Opal.modules["matrix/eigenvalue_decomposition"] = function(Opal) {/* Generated by Opal 1.6.0 */
  var $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $def = Opal.def, $alias = Opal.alias, $eqeq = Opal.eqeq, $to_a = Opal.to_a, $rb_gt = Opal.rb_gt, $rb_plus = Opal.rb_plus, $rb_minus = Opal.rb_minus, $rb_divide = Opal.rb_divide, $rb_times = Opal.rb_times, $neqeq = Opal.neqeq, $rb_lt = Opal.rb_lt, $rb_le = Opal.rb_le, $rb_ge = Opal.rb_ge, $to_ary = Opal.to_ary, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('is_a?,raise,class,row_count,new,symmetric?,to_a,tridiagonalize,diagonalize,reduce_to_hessenberg,hessenberg_to_real_schur,send,transpose,build_eigenvectors,eigenvector_matrix,inverse,eigenvector_matrix_inv,dup,each_with_index,==,[]=,Complex,[],map,diagonal,eigenvalues,eigenvalue_matrix,v,d,v_inv,alias_method,private,>,+,-,-@,abs,/,*,times,downto,sqrt,upto,!=,max,<,<=,hypot,>=,min,cdiv');
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EigenvalueDecomposition');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.size = $proto.symmetric = $proto.d = $proto.e = $proto.v = $proto.h = nil;
      
      
      $def(self, '$initialize', function $$initialize(a) {
        var self = this;

        
        if (!$truthy(a['$is_a?']($$('Matrix')))) {
          self.$raise($$('TypeError'), "Expected Matrix but got " + (a.$class()))
        };
        self.size = a.$row_count();
        self.d = $$('Array').$new(self.size, 0);
        self.e = $$('Array').$new(self.size, 0);
        if ($truthy((self.symmetric = a['$symmetric?']()))) {
          
          self.v = a.$to_a();
          self.$tridiagonalize();
          return self.$diagonalize();
        } else {
          
          self.v = $send($$('Array'), 'new', [self.size], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;
            if (self.size == null) self.size = nil;

            return $$('Array').$new(self.size, 0)}, {$$arity: 0, $$s: self});
          self.h = a.$to_a();
          self.ort = $$('Array').$new(self.size, 0);
          self.$reduce_to_hessenberg();
          return self.$hessenberg_to_real_schur();
        };
      }, 1);
      
      $def(self, '$eigenvector_matrix', function $$eigenvector_matrix() {
        var self = this;

        return $$('Matrix').$send("new", self.$build_eigenvectors().$transpose())
      }, 0);
      $alias(self, "v", "eigenvector_matrix");
      
      $def(self, '$eigenvector_matrix_inv', function $$eigenvector_matrix_inv() {
        var self = this, r = nil;

        
        r = $$('Matrix').$send("new", self.$build_eigenvectors());
        if (!$truthy(self.symmetric)) {
          r = r.$transpose().$inverse()
        };
        return r;
      }, 0);
      $alias(self, "v_inv", "eigenvector_matrix_inv");
      
      $def(self, '$eigenvalues', function $$eigenvalues() {
        var self = this, values = nil;

        
        values = self.d.$dup();
        $send(self.e, 'each_with_index', [], function $$2(imag, i){var $a, self = $$2.$$s == null ? this : $$2.$$s;

          
          if (imag == null) imag = nil;
          if (i == null) i = nil;
          if ($eqeq(imag, 0)) {
            return nil
          } else {
            return ($a = [i, self.$Complex(values['$[]'](i), imag)], $send(values, '[]=', $a), $a[$a.length - 1])
          };}, {$$arity: 2, $$s: self});
        return values;
      }, 0);
      
      $def(self, '$eigenvectors', function $$eigenvectors() {
        var self = this;

        return $send(self.$build_eigenvectors(), 'map', [], function $$3(ev){
          
          if (ev == null) ev = nil;
          return $$('Vector').$send("new", ev);}, 1)
      }, 0);
      
      $def(self, '$eigenvalue_matrix', function $$eigenvalue_matrix() {
        var self = this;

        return $send($$('Matrix'), 'diagonal', $to_a(self.$eigenvalues()))
      }, 0);
      $alias(self, "d", "eigenvalue_matrix");
      
      $def(self, '$to_ary', function $$to_ary() {
        var self = this;

        return [self.$v(), self.$d(), self.$v_inv()]
      }, 0);
      self.$alias_method("to_a", "to_ary");
      self.$private();
      
      $def(self, '$build_eigenvectors', function $$build_eigenvectors() {
        var self = this;

        return $send(self.e.$each_with_index(), 'map', [], function $$4(imag, i){var self = $$4.$$s == null ? this : $$4.$$s;
          if (self.size == null) self.size = nil;

          
          if (imag == null) imag = nil;
          if (i == null) i = nil;
          if ($eqeq(imag, 0)) {
            return $send($$('Array'), 'new', [self.size], function $$5(j){var self = $$5.$$s == null ? this : $$5.$$s;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              return self.v['$[]'](j)['$[]'](i);}, {$$arity: 1, $$s: self})
          } else if ($truthy($rb_gt(imag, 0))) {
            return $send($$('Array'), 'new', [self.size], function $$6(j){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              return self.$Complex(self.v['$[]'](j)['$[]'](i), self.v['$[]'](j)['$[]']($rb_plus(i, 1)));}, {$$arity: 1, $$s: self})
          } else {
            return $send($$('Array'), 'new', [self.size], function $$7(j){var self = $$7.$$s == null ? this : $$7.$$s;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              return self.$Complex(self.v['$[]'](j)['$[]']($rb_minus(i, 1)), self.v['$[]'](j)['$[]'](i)['$-@']());}, {$$arity: 1, $$s: self})
          };}, {$$arity: 2, $$s: self})
      }, 0);
      
      $def(self, '$cdiv', function $$cdiv(xr, xi, yr, yi) {
        var r = nil, d = nil;

        if ($truthy($rb_gt(yr.$abs(), yi.$abs()))) {
          
          r = $rb_divide(yi, yr);
          d = $rb_plus(yr, $rb_times(r, yi));
          return [$rb_divide($rb_plus(xr, $rb_times(r, xi)), d), $rb_divide($rb_minus(xi, $rb_times(r, xr)), d)];
        } else {
          
          r = $rb_divide(yr, yi);
          d = $rb_plus(yi, $rb_times(r, yr));
          return [$rb_divide($rb_plus($rb_times(r, xr), xi), d), $rb_divide($rb_minus($rb_times(r, xi), xr), d)];
        }
      }, 4);
      
      $def(self, '$tridiagonalize', function $$tridiagonalize() {
        var $a, self = this;

        
        $send(self.size, 'times', [], function $$8(j){var $a, self = $$8.$$s == null ? this : $$8.$$s;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

          
          if (j == null) j = nil;
          return ($a = [j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j)], $send(self.d, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        $send($rb_minus(self.size, 1), 'downto', [$rb_plus(0, 1)], function $$9(i){var $a, self = $$9.$$s == null ? this : $$9.$$s, scale = nil, h = nil, f = nil, g = nil, hh = nil;
          if (self.e == null) self.e = nil;
          if (self.d == null) self.d = nil;

          
          if (i == null) i = nil;
          scale = 0.0;
          h = 0.0;
          $send(i, 'times', [], function $$10(k){var self = $$10.$$s == null ? this : $$10.$$s;
            if (self.d == null) self.d = nil;

            
            if (k == null) k = nil;
            return (scale = $rb_plus(scale, self.d['$[]'](k).$abs()));}, {$$arity: 1, $$s: self});
          if ($eqeq(scale, 0.0)) {
            
            self.e['$[]='](i, self.d['$[]']($rb_minus(i, 1)));
            $send(i, 'times', [], function $$11(j){var $a, self = $$11.$$s == null ? this : $$11.$$s;
              if (self.d == null) self.d = nil;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              self.d['$[]='](j, self.v['$[]']($rb_minus(i, 1))['$[]'](j));
              self.v['$[]'](i)['$[]='](j, 0.0);
              return ($a = [i, 0.0], $send(self.v['$[]'](j), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
          } else {
            
            $send(i, 'times', [], function $$12(k){var self = $$12.$$s == null ? this : $$12.$$s;
              if (self.d == null) self.d = nil;

              
              if (k == null) k = nil;
              self.d['$[]='](k, $rb_divide(self.d['$[]'](k), scale));
              return (h = $rb_plus(h, $rb_times(self.d['$[]'](k), self.d['$[]'](k))));}, {$$arity: 1, $$s: self});
            f = self.d['$[]']($rb_minus(i, 1));
            g = $$('Math').$sqrt(h);
            if ($truthy($rb_gt(f, 0))) {
              g = g['$-@']()
            };
            self.e['$[]='](i, $rb_times(scale, g));
            h = $rb_minus(h, $rb_times(f, g));
            self.d['$[]=']($rb_minus(i, 1), $rb_minus(f, g));
            $send(i, 'times', [], function $$13(j){var $a, self = $$13.$$s == null ? this : $$13.$$s;
              if (self.e == null) self.e = nil;

              
              if (j == null) j = nil;
              return ($a = [j, 0.0], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            $send(i, 'times', [], function $$14(j){var $a, self = $$14.$$s == null ? this : $$14.$$s;
              if (self.d == null) self.d = nil;
              if (self.v == null) self.v = nil;
              if (self.e == null) self.e = nil;

              
              if (j == null) j = nil;
              f = self.d['$[]'](j);
              self.v['$[]'](j)['$[]='](i, f);
              g = $rb_plus(self.e['$[]'](j), $rb_times(self.v['$[]'](j)['$[]'](j), f));
              $send($rb_plus(j, 1), 'upto', [$rb_minus(i, 1)], function $$15(k){var $a, self = $$15.$$s == null ? this : $$15.$$s;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;
                if (self.e == null) self.e = nil;

                
                if (k == null) k = nil;
                g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]'](j), self.d['$[]'](k)));
                return ($a = [k, $rb_plus(self.e['$[]'](k), $rb_times(self.v['$[]'](k)['$[]'](j), f))], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              return ($a = [j, g], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            f = 0.0;
            $send(i, 'times', [], function $$16(j){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              if (j == null) j = nil;
              self.e['$[]='](j, $rb_divide(self.e['$[]'](j), h));
              return (f = $rb_plus(f, $rb_times(self.e['$[]'](j), self.d['$[]'](j))));}, {$$arity: 1, $$s: self});
            hh = $rb_divide(f, $rb_plus(h, h));
            $send(i, 'times', [], function $$17(j){var $a, self = $$17.$$s == null ? this : $$17.$$s;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              if (j == null) j = nil;
              return ($a = [j, $rb_minus(self.e['$[]'](j), $rb_times(hh, self.d['$[]'](j)))], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            $send(i, 'times', [], function $$18(j){var $a, self = $$18.$$s == null ? this : $$18.$$s;
              if (self.d == null) self.d = nil;
              if (self.e == null) self.e = nil;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              f = self.d['$[]'](j);
              g = self.e['$[]'](j);
              $send(j, 'upto', [$rb_minus(i, 1)], function $$19(k){var $a, self = $$19.$$s == null ? this : $$19.$$s, $binary_op_recvr_tmp_5 = nil;
                if (self.v == null) self.v = nil;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;

                
                if (k == null) k = nil;
                $binary_op_recvr_tmp_5 = self.v['$[]'](k);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_5['$[]'](j), $rb_plus($rb_times(f, self.e['$[]'](k)), $rb_times(g, self.d['$[]'](k))))], $send($binary_op_recvr_tmp_5, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              self.d['$[]='](j, self.v['$[]']($rb_minus(i, 1))['$[]'](j));
              return ($a = [j, 0.0], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
          };
          return ($a = [i, h], $send(self.d, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        $send((0), 'upto', [$rb_minus($rb_minus(self.size, 1), 1)], function $$20(i){var self = $$20.$$s == null ? this : $$20.$$s, h = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

          
          if (i == null) i = nil;
          self.v['$[]']($rb_minus(self.size, 1))['$[]='](i, self.v['$[]'](i)['$[]'](i));
          self.v['$[]'](i)['$[]='](i, 1.0);
          h = self.d['$[]']($rb_plus(i, 1));
          if ($neqeq(h, 0.0)) {
            
            $send((0), 'upto', [i], function $$21(k){var $a, self = $$21.$$s == null ? this : $$21.$$s;
              if (self.v == null) self.v = nil;
              if (self.d == null) self.d = nil;

              
              if (k == null) k = nil;
              return ($a = [k, $rb_divide(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), h)], $send(self.d, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            $send((0), 'upto', [i], function $$22(j){var self = $$22.$$s == null ? this : $$22.$$s, g = nil;

              
              if (j == null) j = nil;
              g = 0.0;
              $send((0), 'upto', [i], function $$23(k){var self = $$23.$$s == null ? this : $$23.$$s;
                if (self.v == null) self.v = nil;

                
                if (k == null) k = nil;
                return (g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), self.v['$[]'](k)['$[]'](j))));}, {$$arity: 1, $$s: self});
              return $send((0), 'upto', [i], function $$24(k){var $a, self = $$24.$$s == null ? this : $$24.$$s, $binary_op_recvr_tmp_6 = nil;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;

                
                if (k == null) k = nil;
                $binary_op_recvr_tmp_6 = self.v['$[]'](k);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_6['$[]'](j), $rb_times(g, self.d['$[]'](k)))], $send($binary_op_recvr_tmp_6, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          };
          return $send((0), 'upto', [i], function $$25(k){var $a, self = $$25.$$s == null ? this : $$25.$$s;
            if (self.v == null) self.v = nil;

            
            if (k == null) k = nil;
            return ($a = [$rb_plus(i, 1), 0.0], $send(self.v['$[]'](k), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        $send(self.size, 'times', [], function $$26(j){var $a, self = $$26.$$s == null ? this : $$26.$$s;
          if (self.d == null) self.d = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;

          
          if (j == null) j = nil;
          self.d['$[]='](j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j));
          return ($a = [j, 0.0], $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        self.v['$[]']($rb_minus(self.size, 1))['$[]=']($rb_minus(self.size, 1), 1.0);
        return ($a = [0, 0.0], $send(self.e, '[]=', $a), $a[$a.length - 1]);
      }, 0);
      
      $def(self, '$diagonalize', function $$diagonalize() {
        var self = this, f = nil, tst1 = nil, eps = nil;

        
        $send((1), 'upto', [$rb_minus(self.size, 1)], function $$27(i){var $a, self = $$27.$$s == null ? this : $$27.$$s;
          if (self.e == null) self.e = nil;

          
          if (i == null) i = nil;
          return ($a = [$rb_minus(i, 1), self.e['$[]'](i)], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        self.e['$[]=']($rb_minus(self.size, 1), 0.0);
        f = 0.0;
        tst1 = 0.0;
        eps = $$$($$('Float'), 'EPSILON');
        $send(self.size, 'times', [], function $$28(l){var $a, self = $$28.$$s == null ? this : $$28.$$s, m = nil, iter = nil, g = nil, p = nil, r = nil, dl1 = nil, h = nil, c = nil, c2 = nil, c3 = nil, el1 = nil, s = nil, s2 = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.size == null) self.size = nil;

          
          if (l == null) l = nil;
          tst1 = [tst1, $rb_plus(self.d['$[]'](l).$abs(), self.e['$[]'](l).$abs())].$max();
          m = l;
          while ($truthy($rb_lt(m, self.size))) {
          
            if ($truthy($rb_le(self.e['$[]'](m).$abs(), $rb_times(eps, tst1)))) {
              break
            };
            m = $rb_plus(m, 1);
          };
          if ($truthy($rb_gt(m, l))) {
            
            iter = 0;
            do {
            
              iter = $rb_plus(iter, 1);
              g = self.d['$[]'](l);
              p = $rb_divide($rb_minus(self.d['$[]']($rb_plus(l, 1)), g), $rb_times(2.0, self.e['$[]'](l)));
              r = $$('Math').$hypot(p, 1.0);
              if ($truthy($rb_lt(p, 0))) {
                r = r['$-@']()
              };
              self.d['$[]='](l, $rb_divide(self.e['$[]'](l), $rb_plus(p, r)));
              self.d['$[]=']($rb_plus(l, 1), $rb_times(self.e['$[]'](l), $rb_plus(p, r)));
              dl1 = self.d['$[]']($rb_plus(l, 1));
              h = $rb_minus(g, self.d['$[]'](l));
              $send($rb_plus(l, 2), 'upto', [$rb_minus(self.size, 1)], function $$29(i){var $a, self = $$29.$$s == null ? this : $$29.$$s;
                if (self.d == null) self.d = nil;

                
                if (i == null) i = nil;
                return ($a = [i, $rb_minus(self.d['$[]'](i), h)], $send(self.d, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              f = $rb_plus(f, h);
              p = self.d['$[]'](m);
              c = 1.0;
              c2 = c;
              c3 = c;
              el1 = self.e['$[]']($rb_plus(l, 1));
              s = 0.0;
              s2 = 0.0;
              $send($rb_minus(m, 1), 'downto', [l], function $$30(i){var self = $$30.$$s == null ? this : $$30.$$s;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;
                if (self.size == null) self.size = nil;

                
                if (i == null) i = nil;
                c3 = c2;
                c2 = c;
                s2 = s;
                g = $rb_times(c, self.e['$[]'](i));
                h = $rb_times(c, p);
                r = $$('Math').$hypot(p, self.e['$[]'](i));
                self.e['$[]=']($rb_plus(i, 1), $rb_times(s, r));
                s = $rb_divide(self.e['$[]'](i), r);
                c = $rb_divide(p, r);
                p = $rb_minus($rb_times(c, self.d['$[]'](i)), $rb_times(s, g));
                self.d['$[]=']($rb_plus(i, 1), $rb_plus(h, $rb_times(s, $rb_plus($rb_times(c, g), $rb_times(s, self.d['$[]'](i))))));
                return $send(self.size, 'times', [], function $$31(k){var $a, self = $$31.$$s == null ? this : $$31.$$s;
                  if (self.v == null) self.v = nil;

                  
                  if (k == null) k = nil;
                  h = self.v['$[]'](k)['$[]']($rb_plus(i, 1));
                  self.v['$[]'](k)['$[]=']($rb_plus(i, 1), $rb_plus($rb_times(s, self.v['$[]'](k)['$[]'](i)), $rb_times(c, h)));
                  return ($a = [i, $rb_minus($rb_times(c, self.v['$[]'](k)['$[]'](i)), $rb_times(s, h))], $send(self.v['$[]'](k), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
              p = $rb_divide($rb_times($rb_times($rb_times($rb_times(s['$-@'](), s2), c3), el1), self.e['$[]'](l)), dl1);
              self.e['$[]='](l, $rb_times(s, p));
              self.d['$[]='](l, $rb_times(c, p));
            } while ($truthy($rb_gt(self.e['$[]'](l).$abs(), $rb_times(eps, tst1))));;
          };
          self.d['$[]='](l, $rb_plus(self.d['$[]'](l), f));
          return ($a = [l, 0.0], $send(self.e, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
        return $send((0), 'upto', [$rb_minus(self.size, 2)], function $$32(i){var self = $$32.$$s == null ? this : $$32.$$s, k = nil, p = nil;
          if (self.d == null) self.d = nil;
          if (self.size == null) self.size = nil;

          
          if (i == null) i = nil;
          k = i;
          p = self.d['$[]'](i);
          $send($rb_plus(i, 1), 'upto', [$rb_minus(self.size, 1)], function $$33(j){var self = $$33.$$s == null ? this : $$33.$$s;
            if (self.d == null) self.d = nil;

            
            if (j == null) j = nil;
            if ($truthy($rb_lt(self.d['$[]'](j), p))) {
              
              k = j;
              return (p = self.d['$[]'](j));
            } else {
              return nil
            };}, {$$arity: 1, $$s: self});
          if ($neqeq(k, i)) {
            
            self.d['$[]='](k, self.d['$[]'](i));
            self.d['$[]='](i, p);
            return $send(self.size, 'times', [], function $$34(j){var $a, self = $$34.$$s == null ? this : $$34.$$s;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              p = self.v['$[]'](j)['$[]'](i);
              self.v['$[]'](j)['$[]='](i, self.v['$[]'](j)['$[]'](k));
              return ($a = [k, p], $send(self.v['$[]'](j), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
      }, 0);
      
      $def(self, '$reduce_to_hessenberg', function $$reduce_to_hessenberg() {
        var self = this, low = nil, high = nil;

        
        low = 0;
        high = $rb_minus(self.size, 1);
        $send($rb_plus(low, 1), 'upto', [$rb_minus(high, 1)], function $$35(m){var $a, self = $$35.$$s == null ? this : $$35.$$s, scale = nil, h = nil, g = nil;
          if (self.ort == null) self.ort = nil;
          if (self.size == null) self.size = nil;
          if (self.h == null) self.h = nil;

          
          if (m == null) m = nil;
          scale = 0.0;
          $send(m, 'upto', [high], function $$36(i){var self = $$36.$$s == null ? this : $$36.$$s;
            if (self.h == null) self.h = nil;

            
            if (i == null) i = nil;
            return (scale = $rb_plus(scale, self.h['$[]'](i)['$[]']($rb_minus(m, 1)).$abs()));}, {$$arity: 1, $$s: self});
          if ($neqeq(scale, 0.0)) {
            
            h = 0.0;
            $send(high, 'downto', [m], function $$37(i){var self = $$37.$$s == null ? this : $$37.$$s;
              if (self.ort == null) self.ort = nil;
              if (self.h == null) self.h = nil;

              
              if (i == null) i = nil;
              self.ort['$[]='](i, $rb_divide(self.h['$[]'](i)['$[]']($rb_minus(m, 1)), scale));
              return (h = $rb_plus(h, $rb_times(self.ort['$[]'](i), self.ort['$[]'](i))));}, {$$arity: 1, $$s: self});
            g = $$('Math').$sqrt(h);
            if ($truthy($rb_gt(self.ort['$[]'](m), 0))) {
              g = g['$-@']()
            };
            h = $rb_minus(h, $rb_times(self.ort['$[]'](m), g));
            self.ort['$[]='](m, $rb_minus(self.ort['$[]'](m), g));
            $send(m, 'upto', [$rb_minus(self.size, 1)], function $$38(j){var self = $$38.$$s == null ? this : $$38.$$s, f = nil;

              
              if (j == null) j = nil;
              f = 0.0;
              $send(high, 'downto', [m], function $$39(i){var self = $$39.$$s == null ? this : $$39.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

                
                if (i == null) i = nil;
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](i), self.h['$[]'](i)['$[]'](j))));}, {$$arity: 1, $$s: self});
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], function $$40(i){var $a, self = $$40.$$s == null ? this : $$40.$$s, $binary_op_recvr_tmp_7 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

                
                if (i == null) i = nil;
                $binary_op_recvr_tmp_7 = self.h['$[]'](i);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_7['$[]'](j), $rb_times(f, self.ort['$[]'](i)))], $send($binary_op_recvr_tmp_7, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
            $send((0), 'upto', [high], function $$41(i){var self = $$41.$$s == null ? this : $$41.$$s, f = nil;

              
              if (i == null) i = nil;
              f = 0.0;
              $send(high, 'downto', [m], function $$42(j){var self = $$42.$$s == null ? this : $$42.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

                
                if (j == null) j = nil;
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](j), self.h['$[]'](i)['$[]'](j))));}, {$$arity: 1, $$s: self});
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], function $$43(j){var $a, self = $$43.$$s == null ? this : $$43.$$s, $binary_op_recvr_tmp_8 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

                
                if (j == null) j = nil;
                $binary_op_recvr_tmp_8 = self.h['$[]'](i);
                return ($a = [j, $rb_minus($binary_op_recvr_tmp_8['$[]'](j), $rb_times(f, self.ort['$[]'](j)))], $send($binary_op_recvr_tmp_8, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
            self.ort['$[]='](m, $rb_times(scale, self.ort['$[]'](m)));
            return ($a = [$rb_minus(m, 1), $rb_times(scale, g)], $send(self.h['$[]'](m), '[]=', $a), $a[$a.length - 1]);
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        $send(self.size, 'times', [], function $$44(i){var self = $$44.$$s == null ? this : $$44.$$s;
          if (self.size == null) self.size = nil;

          
          if (i == null) i = nil;
          return $send(self.size, 'times', [], function $$45(j){var $a, self = $$45.$$s == null ? this : $$45.$$s;
            if (self.v == null) self.v = nil;

            
            if (j == null) j = nil;
            return ($a = [j, ($eqeq(i, j) ? (1.0) : (0.0))], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        return $send($rb_minus(high, 1), 'downto', [$rb_plus(low, 1)], function $$46(m){var self = $$46.$$s == null ? this : $$46.$$s;
          if (self.h == null) self.h = nil;

          
          if (m == null) m = nil;
          if ($neqeq(self.h['$[]'](m)['$[]']($rb_minus(m, 1)), 0.0)) {
            
            $send($rb_plus(m, 1), 'upto', [high], function $$47(i){var $a, self = $$47.$$s == null ? this : $$47.$$s;
              if (self.h == null) self.h = nil;
              if (self.ort == null) self.ort = nil;

              
              if (i == null) i = nil;
              return ($a = [i, self.h['$[]'](i)['$[]']($rb_minus(m, 1))], $send(self.ort, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            return $send(m, 'upto', [high], function $$48(j){var self = $$48.$$s == null ? this : $$48.$$s, g = nil;
              if (self.ort == null) self.ort = nil;
              if (self.h == null) self.h = nil;

              
              if (j == null) j = nil;
              g = 0.0;
              $send(m, 'upto', [high], function $$49(i){var self = $$49.$$s == null ? this : $$49.$$s;
                if (self.ort == null) self.ort = nil;
                if (self.v == null) self.v = nil;

                
                if (i == null) i = nil;
                return (g = $rb_plus(g, $rb_times(self.ort['$[]'](i), self.v['$[]'](i)['$[]'](j))));}, {$$arity: 1, $$s: self});
              g = $rb_divide($rb_divide(g, self.ort['$[]'](m)), self.h['$[]'](m)['$[]']($rb_minus(m, 1)));
              return $send(m, 'upto', [high], function $$50(i){var $a, self = $$50.$$s == null ? this : $$50.$$s, $binary_op_recvr_tmp_9 = nil;
                if (self.v == null) self.v = nil;
                if (self.ort == null) self.ort = nil;

                
                if (i == null) i = nil;
                $binary_op_recvr_tmp_9 = self.v['$[]'](i);
                return ($a = [j, $rb_plus($binary_op_recvr_tmp_9['$[]'](j), $rb_times(g, self.ort['$[]'](i)))], $send($binary_op_recvr_tmp_9, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
      }, 0);
      return $def(self, '$hessenberg_to_real_schur', function $$hessenberg_to_real_schur() {
        var self = this, nn = nil, n = nil, low = nil, high = nil, eps = nil, exshift = nil, p = nil, q = nil, r = nil, s = nil, z = nil, norm = nil, iter = nil, l = nil, w = nil, x = nil, y = nil, m = nil;

        
        nn = self.size;
        n = $rb_minus(nn, 1);
        low = 0;
        high = $rb_minus(nn, 1);
        eps = $$$($$('Float'), 'EPSILON');
        exshift = 0.0;
        p = (q = (r = (s = (z = 0))));
        norm = 0.0;
        $send(nn, 'times', [], function $$51(i){var self = $$51.$$s == null ? this : $$51.$$s;
          if (self.d == null) self.d = nil;
          if (self.h == null) self.h = nil;
          if (self.e == null) self.e = nil;

          
          if (i == null) i = nil;
          if (($truthy($rb_lt(i, low)) || ($truthy($rb_gt(i, high))))) {
            
            self.d['$[]='](i, self.h['$[]'](i)['$[]'](i));
            self.e['$[]='](i, 0.0);
          };
          return $send([$rb_minus(i, 1), 0].$max(), 'upto', [$rb_minus(nn, 1)], function $$52(j){var self = $$52.$$s == null ? this : $$52.$$s;
            if (self.h == null) self.h = nil;

            
            if (j == null) j = nil;
            return (norm = $rb_plus(norm, self.h['$[]'](i)['$[]'](j).$abs()));}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        iter = 0;
        while ($truthy($rb_ge(n, low))) {
        
          l = n;
          while ($truthy($rb_gt(l, low))) {
          
            s = $rb_plus(self.h['$[]']($rb_minus(l, 1))['$[]']($rb_minus(l, 1)).$abs(), self.h['$[]'](l)['$[]'](l).$abs());
            if ($eqeq(s, 0.0)) {
              s = norm
            };
            if ($truthy($rb_lt(self.h['$[]'](l)['$[]']($rb_minus(l, 1)).$abs(), $rb_times(eps, s)))) {
              break
            };
            l = $rb_minus(l, 1);
          };
          if ($eqeq(l, n)) {
            
            self.h['$[]'](n)['$[]='](n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift));
            self.d['$[]='](n, self.h['$[]'](n)['$[]'](n));
            self.e['$[]='](n, 0.0);
            n = $rb_minus(n, 1);
            iter = 0;
          } else if ($eqeq(l, $rb_minus(n, 1))) {
            
            w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));
            p = $rb_divide($rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), self.h['$[]'](n)['$[]'](n)), 2.0);
            q = $rb_plus($rb_times(p, p), w);
            z = $$('Math').$sqrt(q.$abs());
            self.h['$[]'](n)['$[]='](n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift));
            self.h['$[]']($rb_minus(n, 1))['$[]=']($rb_minus(n, 1), $rb_plus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), exshift));
            x = self.h['$[]'](n)['$[]'](n);
            if ($truthy($rb_ge(q, 0))) {
              
              if ($truthy($rb_ge(p, 0))) {
                z = $rb_plus(p, z)
              } else {
                z = $rb_minus(p, z)
              };
              self.d['$[]=']($rb_minus(n, 1), $rb_plus(x, z));
              self.d['$[]='](n, self.d['$[]']($rb_minus(n, 1)));
              if ($neqeq(z, 0.0)) {
                self.d['$[]='](n, $rb_minus(x, $rb_divide(w, z)))
              };
              self.e['$[]=']($rb_minus(n, 1), 0.0);
              self.e['$[]='](n, 0.0);
              x = self.h['$[]'](n)['$[]']($rb_minus(n, 1));
              s = $rb_plus(x.$abs(), z.$abs());
              p = $rb_divide(x, s);
              q = $rb_divide(z, s);
              r = $$('Math').$sqrt($rb_plus($rb_times(p, p), $rb_times(q, q)));
              p = $rb_divide(p, r);
              q = $rb_divide(q, r);
              $send($rb_minus(n, 1), 'upto', [$rb_minus(nn, 1)], function $$53(j){var $a, self = $$53.$$s == null ? this : $$53.$$s;
                if (self.h == null) self.h = nil;

                
                if (j == null) j = nil;
                z = self.h['$[]']($rb_minus(n, 1))['$[]'](j);
                self.h['$[]']($rb_minus(n, 1))['$[]='](j, $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](n)['$[]'](j))));
                return ($a = [j, $rb_minus($rb_times(q, self.h['$[]'](n)['$[]'](j)), $rb_times(p, z))], $send(self.h['$[]'](n), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              $send((0), 'upto', [n], function $$54(i){var $a, self = $$54.$$s == null ? this : $$54.$$s;
                if (self.h == null) self.h = nil;

                
                if (i == null) i = nil;
                z = self.h['$[]'](i)['$[]']($rb_minus(n, 1));
                self.h['$[]'](i)['$[]=']($rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](i)['$[]'](n))));
                return ($a = [n, $rb_minus($rb_times(q, self.h['$[]'](i)['$[]'](n)), $rb_times(p, z))], $send(self.h['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              $send(low, 'upto', [high], function $$55(i){var $a, self = $$55.$$s == null ? this : $$55.$$s;
                if (self.v == null) self.v = nil;

                
                if (i == null) i = nil;
                z = self.v['$[]'](i)['$[]']($rb_minus(n, 1));
                self.v['$[]'](i)['$[]=']($rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.v['$[]'](i)['$[]'](n))));
                return ($a = [n, $rb_minus($rb_times(q, self.v['$[]'](i)['$[]'](n)), $rb_times(p, z))], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
            } else {
              
              self.d['$[]=']($rb_minus(n, 1), $rb_plus(x, p));
              self.d['$[]='](n, $rb_plus(x, p));
              self.e['$[]=']($rb_minus(n, 1), z);
              self.e['$[]='](n, z['$-@']());
            };
            n = $rb_minus(n, 2);
            iter = 0;
          } else {
            
            x = self.h['$[]'](n)['$[]'](n);
            y = 0.0;
            w = 0.0;
            if ($truthy($rb_lt(l, n))) {
              
              y = self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1));
              w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));
            };
            if ($eqeq(iter, 10)) {
              
              exshift = $rb_plus(exshift, x);
              $send(low, 'upto', [n], function $$56(i){var $a, self = $$56.$$s == null ? this : $$56.$$s, $binary_op_recvr_tmp_10 = nil;
                if (self.h == null) self.h = nil;

                
                if (i == null) i = nil;
                $binary_op_recvr_tmp_10 = self.h['$[]'](i);
                return ($a = [i, $rb_minus($binary_op_recvr_tmp_10['$[]'](i), x)], $send($binary_op_recvr_tmp_10, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              s = $rb_plus(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 2)).$abs());
              x = (y = $rb_times(0.75, s));
              w = $rb_times($rb_times(-0.4375, s), s);
            };
            if ($eqeq(iter, 30)) {
              
              s = $rb_divide($rb_minus(y, x), 2.0);
              s = $rb_times(s, $rb_plus(s, w));
              if ($truthy($rb_gt(s, 0))) {
                
                s = $$('Math').$sqrt(s);
                if ($truthy($rb_lt(y, x))) {
                  s = s['$-@']()
                };
                s = $rb_minus(x, $rb_divide(w, $rb_plus($rb_divide($rb_minus(y, x), 2.0), s)));
                $send(low, 'upto', [n], function $$57(i){var $a, self = $$57.$$s == null ? this : $$57.$$s, $binary_op_recvr_tmp_11 = nil;
                  if (self.h == null) self.h = nil;

                  
                  if (i == null) i = nil;
                  $binary_op_recvr_tmp_11 = self.h['$[]'](i);
                  return ($a = [i, $rb_minus($binary_op_recvr_tmp_11['$[]'](i), s)], $send($binary_op_recvr_tmp_11, '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
                exshift = $rb_plus(exshift, s);
                x = (y = (w = 0.964));
              };
            };
            iter = $rb_plus(iter, 1);
            m = $rb_minus(n, 2);
            while ($truthy($rb_ge(m, l))) {
            
              z = self.h['$[]'](m)['$[]'](m);
              r = $rb_minus(x, z);
              s = $rb_minus(y, z);
              p = $rb_plus($rb_divide($rb_minus($rb_times(r, s), w), self.h['$[]']($rb_plus(m, 1))['$[]'](m)), self.h['$[]'](m)['$[]']($rb_plus(m, 1)));
              q = $rb_minus($rb_minus($rb_minus(self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)), z), r), s);
              r = self.h['$[]']($rb_plus(m, 2))['$[]']($rb_plus(m, 1));
              s = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
              p = $rb_divide(p, s);
              q = $rb_divide(q, s);
              r = $rb_divide(r, s);
              if ($eqeq(m, l)) {
                break
              };
              if ($truthy($rb_lt($rb_times(self.h['$[]'](m)['$[]']($rb_minus(m, 1)).$abs(), $rb_plus(q.$abs(), r.$abs())), $rb_times(eps, $rb_times(p.$abs(), $rb_plus($rb_plus(self.h['$[]']($rb_minus(m, 1))['$[]']($rb_minus(m, 1)).$abs(), z.$abs()), self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)).$abs())))))) {
                break
              };
              m = $rb_minus(m, 1);
            };
            $send($rb_plus(m, 2), 'upto', [n], function $$58(i){var $a, self = $$58.$$s == null ? this : $$58.$$s;
              if (self.h == null) self.h = nil;

              
              if (i == null) i = nil;
              self.h['$[]'](i)['$[]=']($rb_minus(i, 2), 0.0);
              if ($truthy($rb_gt(i, $rb_plus(m, 2)))) {
                return ($a = [$rb_minus(i, 3), 0.0], $send(self.h['$[]'](i), '[]=', $a), $a[$a.length - 1])
              } else {
                return nil
              };}, {$$arity: 1, $$s: self});
            $send(m, 'upto', [$rb_minus(n, 1)], function $$59(k){var self = $$59.$$s == null ? this : $$59.$$s, notlast = nil;
              if (self.h == null) self.h = nil;

              
              if (k == null) k = nil;
              notlast = k['$!=']($rb_minus(n, 1));
              if ($neqeq(k, m)) {
                
                p = self.h['$[]'](k)['$[]']($rb_minus(k, 1));
                q = self.h['$[]']($rb_plus(k, 1))['$[]']($rb_minus(k, 1));
                r = ($truthy(notlast) ? (self.h['$[]']($rb_plus(k, 2))['$[]']($rb_minus(k, 1))) : (0.0));
                x = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
                if ($eqeq(x, 0)) {
                  return nil
                };
                p = $rb_divide(p, x);
                q = $rb_divide(q, x);
                r = $rb_divide(r, x);
              };
              s = $$('Math').$sqrt($rb_plus($rb_plus($rb_times(p, p), $rb_times(q, q)), $rb_times(r, r)));
              if ($truthy($rb_lt(p, 0))) {
                s = s['$-@']()
              };
              if ($neqeq(s, 0)) {
                
                if ($neqeq(k, m)) {
                  self.h['$[]'](k)['$[]=']($rb_minus(k, 1), $rb_times(s['$-@'](), x))
                } else if ($neqeq(l, m)) {
                  self.h['$[]'](k)['$[]=']($rb_minus(k, 1), self.h['$[]'](k)['$[]']($rb_minus(k, 1))['$-@']())
                };
                p = $rb_plus(p, s);
                x = $rb_divide(p, s);
                y = $rb_divide(q, s);
                z = $rb_divide(r, s);
                q = $rb_divide(q, p);
                r = $rb_divide(r, p);
                $send(k, 'upto', [$rb_minus(nn, 1)], function $$60(j){var $a, self = $$60.$$s == null ? this : $$60.$$s;
                  if (self.h == null) self.h = nil;

                  
                  if (j == null) j = nil;
                  p = $rb_plus(self.h['$[]'](k)['$[]'](j), $rb_times(q, self.h['$[]']($rb_plus(k, 1))['$[]'](j)));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(r, self.h['$[]']($rb_plus(k, 2))['$[]'](j)));
                    self.h['$[]']($rb_plus(k, 2))['$[]='](j, $rb_minus(self.h['$[]']($rb_plus(k, 2))['$[]'](j), $rb_times(p, z)));
                  };
                  self.h['$[]'](k)['$[]='](j, $rb_minus(self.h['$[]'](k)['$[]'](j), $rb_times(p, x)));
                  return ($a = [j, $rb_minus(self.h['$[]']($rb_plus(k, 1))['$[]'](j), $rb_times(p, y))], $send(self.h['$[]']($rb_plus(k, 1)), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
                $send((0), 'upto', [[n, $rb_plus(k, 3)].$min()], function $$61(i){var $a, self = $$61.$$s == null ? this : $$61.$$s;
                  if (self.h == null) self.h = nil;

                  
                  if (i == null) i = nil;
                  p = $rb_plus($rb_times(x, self.h['$[]'](i)['$[]'](k)), $rb_times(y, self.h['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.h['$[]'](i)['$[]']($rb_plus(k, 2))));
                    self.h['$[]'](i)['$[]=']($rb_plus(k, 2), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r)));
                  };
                  self.h['$[]'](i)['$[]='](k, $rb_minus(self.h['$[]'](i)['$[]'](k), p));
                  return ($a = [$rb_plus(k, 1), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))], $send(self.h['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
                return $send(low, 'upto', [high], function $$62(i){var $a, self = $$62.$$s == null ? this : $$62.$$s;
                  if (self.v == null) self.v = nil;

                  
                  if (i == null) i = nil;
                  p = $rb_plus($rb_times(x, self.v['$[]'](i)['$[]'](k)), $rb_times(y, self.v['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.v['$[]'](i)['$[]']($rb_plus(k, 2))));
                    self.v['$[]'](i)['$[]=']($rb_plus(k, 2), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r)));
                  };
                  self.v['$[]'](i)['$[]='](k, $rb_minus(self.v['$[]'](i)['$[]'](k), p));
                  return ($a = [$rb_plus(k, 1), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});
              } else {
                return nil
              };}, {$$arity: 1, $$s: self});
          };
        };
        if ($eqeq(norm, 0.0)) {
          return nil
        };
        $send($rb_minus(nn, 1), 'downto', [0], function $$63(k){var $a, $b, self = $$63.$$s == null ? this : $$63.$$s, cdivr = nil, cdivi = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.h == null) self.h = nil;

          
          if (k == null) k = nil;
          p = self.d['$[]'](k);
          q = self.e['$[]'](k);
          if ($eqeq(q, 0)) {
            
            l = k;
            self.h['$[]'](k)['$[]='](k, 1.0);
            return $send($rb_minus(k, 1), 'downto', [0], function $$64(i){var self = $$64.$$s == null ? this : $$64.$$s, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              if (i == null) i = nil;
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              r = 0.0;
              $send(l, 'upto', [k], function $$65(j){var self = $$65.$$s == null ? this : $$65.$$s;
                if (self.h == null) self.h = nil;

                
                if (j == null) j = nil;
                return (r = $rb_plus(r, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](k))));}, {$$arity: 1, $$s: self});
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                return (s = r);
              } else {
                
                l = i;
                if ($eqeq(self.e['$[]'](i), 0.0)) {
                  if ($neqeq(w, 0.0)) {
                    self.h['$[]'](i)['$[]='](k, $rb_divide(r['$-@'](), w))
                  } else {
                    self.h['$[]'](i)['$[]='](k, $rb_divide(r['$-@'](), $rb_times(eps, norm)))
                  }
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  q = $rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i)));
                  t = $rb_divide($rb_minus($rb_times(x, s), $rb_times(z, r)), q);
                  self.h['$[]'](i)['$[]='](k, t);
                  if ($truthy($rb_gt(x.$abs(), z.$abs()))) {
                    self.h['$[]']($rb_plus(i, 1))['$[]='](k, $rb_divide($rb_minus(r['$-@'](), $rb_times(w, t)), x))
                  } else {
                    self.h['$[]']($rb_plus(i, 1))['$[]='](k, $rb_divide($rb_minus(s['$-@'](), $rb_times(y, t)), z))
                  };
                };
                t = self.h['$[]'](i)['$[]'](k).$abs();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [k], function $$66(j){var $a, self = $$66.$$s == null ? this : $$66.$$s;
                    if (self.h == null) self.h = nil;

                    
                    if (j == null) j = nil;
                    return ($a = [k, $rb_divide(self.h['$[]'](j)['$[]'](k), t)], $send(self.h['$[]'](j), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self})
                } else {
                  return nil
                };
              };}, {$$arity: 1, $$s: self});
          } else if ($truthy($rb_lt(q, 0))) {
            
            l = $rb_minus(n, 1);
            if ($truthy($rb_gt(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]'](n).$abs()))) {
              
              self.h['$[]']($rb_minus(n, 1))['$[]=']($rb_minus(n, 1), $rb_divide(q, self.h['$[]'](n)['$[]']($rb_minus(n, 1))));
              self.h['$[]']($rb_minus(n, 1))['$[]='](n, $rb_divide($rb_minus(self.h['$[]'](n)['$[]'](n), p)['$-@'](), self.h['$[]'](n)['$[]']($rb_minus(n, 1))));
            } else {
              
              $b = self.$cdiv(0.0, self.h['$[]']($rb_minus(n, 1))['$[]'](n)['$-@'](), $rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), p), q), $a = $to_ary($b), (cdivr = ($a[0] == null ? nil : $a[0])), (cdivi = ($a[1] == null ? nil : $a[1])), $b;
              self.h['$[]']($rb_minus(n, 1))['$[]=']($rb_minus(n, 1), cdivr);
              self.h['$[]']($rb_minus(n, 1))['$[]='](n, cdivi);
            };
            self.h['$[]'](n)['$[]=']($rb_minus(n, 1), 0.0);
            self.h['$[]'](n)['$[]='](n, 1.0);
            return $send($rb_minus(n, 2), 'downto', [0], function $$67(i){var $c, $d, self = $$67.$$s == null ? this : $$67.$$s, ra = nil, sa = nil, vr = nil, vi = nil, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

              
              if (i == null) i = nil;
              ra = 0.0;
              sa = 0.0;
              $send(l, 'upto', [n], function $$68(j){var self = $$68.$$s == null ? this : $$68.$$s;
                if (self.h == null) self.h = nil;

                
                if (j == null) j = nil;
                ra = $rb_plus(ra, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]']($rb_minus(n, 1))));
                return (sa = $rb_plus(sa, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](n))));}, {$$arity: 1, $$s: self});
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                r = ra;
                return (s = sa);
              } else {
                
                l = i;
                if ($eqeq(self.e['$[]'](i), 0)) {
                  
                  $d = self.$cdiv(ra['$-@'](), sa['$-@'](), w, q), $c = $to_ary($d), (cdivr = ($c[0] == null ? nil : $c[0])), (cdivi = ($c[1] == null ? nil : $c[1])), $d;
                  self.h['$[]'](i)['$[]=']($rb_minus(n, 1), cdivr);
                  self.h['$[]'](i)['$[]='](n, cdivi);
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  vr = $rb_minus($rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i))), $rb_times(q, q));
                  vi = $rb_times($rb_times($rb_minus(self.d['$[]'](i), p), 2.0), q);
                  if (($eqeq(vr, 0.0) && ($eqeq(vi, 0.0)))) {
                    vr = $rb_times($rb_times(eps, norm), $rb_plus($rb_plus($rb_plus($rb_plus(w.$abs(), q.$abs()), x.$abs()), y.$abs()), z.$abs()))
                  };
                  $d = self.$cdiv($rb_plus($rb_minus($rb_times(x, r), $rb_times(z, ra)), $rb_times(q, sa)), $rb_minus($rb_minus($rb_times(x, s), $rb_times(z, sa)), $rb_times(q, ra)), vr, vi), $c = $to_ary($d), (cdivr = ($c[0] == null ? nil : $c[0])), (cdivi = ($c[1] == null ? nil : $c[1])), $d;
                  self.h['$[]'](i)['$[]=']($rb_minus(n, 1), cdivr);
                  self.h['$[]'](i)['$[]='](n, cdivi);
                  if ($truthy($rb_gt(x.$abs(), $rb_plus(z.$abs(), q.$abs())))) {
                    
                    self.h['$[]']($rb_plus(i, 1))['$[]=']($rb_minus(n, 1), $rb_divide($rb_plus($rb_minus(ra['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_times(q, self.h['$[]'](i)['$[]'](n))), x));
                    self.h['$[]']($rb_plus(i, 1))['$[]='](n, $rb_divide($rb_minus($rb_minus(sa['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]'](n))), $rb_times(q, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), x));
                  } else {
                    
                    $d = self.$cdiv($rb_minus(r['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_minus(s['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]'](n))), z, q), $c = $to_ary($d), (cdivr = ($c[0] == null ? nil : $c[0])), (cdivi = ($c[1] == null ? nil : $c[1])), $d;
                    self.h['$[]']($rb_plus(i, 1))['$[]=']($rb_minus(n, 1), cdivr);
                    self.h['$[]']($rb_plus(i, 1))['$[]='](n, cdivi);
                  };
                };
                t = [self.h['$[]'](i)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]'](i)['$[]'](n).$abs()].$max();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [n], function $$69(j){var $e, self = $$69.$$s == null ? this : $$69.$$s;
                    if (self.h == null) self.h = nil;

                    
                    if (j == null) j = nil;
                    self.h['$[]'](j)['$[]=']($rb_minus(n, 1), $rb_divide(self.h['$[]'](j)['$[]']($rb_minus(n, 1)), t));
                    return ($e = [n, $rb_divide(self.h['$[]'](j)['$[]'](n), t)], $send(self.h['$[]'](j), '[]=', $e), $e[$e.length - 1]);}, {$$arity: 1, $$s: self})
                } else {
                  return nil
                };
              };}, {$$arity: 1, $$s: self});
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        $send(nn, 'times', [], function $$70(i){var self = $$70.$$s == null ? this : $$70.$$s;

          
          if (i == null) i = nil;
          if (($truthy($rb_lt(i, low)) || ($truthy($rb_gt(i, high))))) {
            return $send(i, 'upto', [$rb_minus(nn, 1)], function $$71(j){var $a, self = $$71.$$s == null ? this : $$71.$$s;
              if (self.h == null) self.h = nil;
              if (self.v == null) self.v = nil;

              
              if (j == null) j = nil;
              return ($a = [j, self.h['$[]'](i)['$[]'](j)], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self})
          } else {
            return nil
          };}, {$$arity: 1, $$s: self});
        return $send($rb_minus(nn, 1), 'downto', [low], function $$72(j){var self = $$72.$$s == null ? this : $$72.$$s;

          
          if (j == null) j = nil;
          return $send(low, 'upto', [high], function $$73(i){var $a, self = $$73.$$s == null ? this : $$73.$$s;
            if (self.v == null) self.v = nil;

            
            if (i == null) i = nil;
            z = 0.0;
            $send(low, 'upto', [[j, high].$min()], function $$74(k){var self = $$74.$$s == null ? this : $$74.$$s;
              if (self.v == null) self.v = nil;
              if (self.h == null) self.h = nil;

              
              if (k == null) k = nil;
              return (z = $rb_plus(z, $rb_times(self.v['$[]'](i)['$[]'](k), self.h['$[]'](k)['$[]'](j))));}, {$$arity: 1, $$s: self});
            return ($a = [j, z], $send(self.v['$[]'](i), '[]=', $a), $a[$a.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
      }, 0);
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

Opal.modules["matrix"] = function(Opal) {/* Generated by Opal 1.6.0 */
  var $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $defs = Opal.defs, $send = Opal.send, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_lt = Opal.rb_lt, $to_a = Opal.to_a, $alias = Opal.alias, $neqeq = Opal.neqeq, $rb_times = Opal.rb_times, $rb_plus = Opal.rb_plus, $def = Opal.def, $thrower = Opal.thrower, $rb_ge = Opal.rb_ge, $rb_minus = Opal.rb_minus, $const_set = Opal.const_set, $hash2 = Opal.hash2, $rb_gt = Opal.rb_gt, $to_ary = Opal.to_ary, $rb_le = Opal.rb_le, $ensure_kwargs = Opal.ensure_kwargs, $not = Opal.not, $eqeqeq = Opal.eqeqeq, $rb_divide = Opal.rb_divide, $return_self = Opal.return_self, $assign_ivar = Opal.assign_ivar, $get_kwarg = Opal.get_kwarg, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

  Opal.add_stubs('require,extend,def_e2message,def_exception,include,autoload,private_class_method,attr_reader,protected,rows,convert_to_array,map!,size,[],each,==,raise,new,transpose,coerce_to_int,<,to_enum,empty,[]=,diagonal,scalar,identity,!=,*,coerce_to_matrix,map,send,to_proc,column_count,concat,row_count,each_with_index,+,empty?,method,first,Raise,combine,class,private,fetch,alias_method,elements,-@,>=,times,collect,new_matrix,-,upto,min,inspect,freeze,>,include?,last,pop,end,exclude_end?,<=,to_a,delete_at,square?,determinant,first_minor,**,build,cofactor,!,inject,with_index,all?,conj,singular?,===,eql?,hash,column_vector,column,apply_through_coercion,/,inverse,I,abs,quo,loop,zero?,>>,eigensystem,+@,determinant_bareiss,find,warn,determinant_e,hstack,rank,round,trace,vstack,lup,conjugate,imaginary,real,imag,rect,row,join,to_s,dup,to_ary,message,is_a?,coerce,length,public_send,kind_of?,respond_to?,__send__,coerce_to,count,independent?,collect2,each2,basis,laplace_expansion,sqrt,abs2,magnitude,acos,inner_product,row_vector');
  
  self.$require("e2mmap.rb");
  (function($base, $parent_nesting) {
    var self = $module($base, 'ExceptionForMatrix');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

    
    self.$extend($$('Exception2MessageMapper'));
    self.$def_e2message($$('TypeError'), "wrong argument type %s (expected %s)");
    self.$def_e2message($$('ArgumentError'), "Wrong # of arguments(%d for %d)");
    self.$def_exception("ErrDimensionMismatch", "\#{self.name} dimension mismatch");
    self.$def_exception("ErrNotRegular", "Not Regular Matrix");
    self.$def_exception("ErrOperationNotDefined", "Operation(%s) can\\'t be defined: %s op %s");
    return self.$def_exception("ErrOperationNotImplemented", "Sorry, Operation(%s) not implemented: %s op %s");
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Matrix');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.rows = nil;
    
    self.$include($$('Enumerable'));
    self.$include($$('ExceptionForMatrix'));
    self.$autoload("EigenvalueDecomposition", "matrix/eigenvalue_decomposition");
    self.$autoload("LUPDecomposition", "matrix/lup_decomposition");
    self.$private_class_method("new");
    self.$attr_reader("rows");
    self.$protected("rows");
    $defs($$('Matrix'), '$[]', function $Matrix_$$$1($a) {
      var $post_args, rows, self = this;

      
      $post_args = $slice.call(arguments);
      rows = $post_args;
      return self.$rows(rows, false);
    }, -1);
    $defs($$('Matrix'), '$rows', function $$rows(rows, copy) {
      var self = this, size = nil, $ret_or_1 = nil;

      
      if (copy == null) copy = true;
      rows = self.$convert_to_array(rows, copy);
      $send(rows, 'map!', [], function $$2(row){var self = $$2.$$s == null ? this : $$2.$$s;

        
        if (row == null) row = nil;
        return self.$convert_to_array(row, copy);}, {$$arity: 1, $$s: self});
      size = ($truthy(($ret_or_1 = rows['$[]'](0))) ? ($ret_or_1) : ([])).$size();
      $send(rows, 'each', [], function $$3(row){var self = $$3.$$s == null ? this : $$3.$$s;

        
        if (row == null) row = nil;
        if ($eqeq(row.$size(), size)) {
          return nil
        } else {
          return self.$raise($$('ErrDimensionMismatch'), "row size differs (" + (row.$size()) + " should be " + (size) + ")")
        };}, {$$arity: 1, $$s: self});
      return self.$new(rows, size);
    }, -2);
    $defs($$('Matrix'), '$columns', function $$columns(columns) {
      var self = this;

      return self.$rows(columns, false).$transpose()
    }, 1);
    $defs($$('Matrix'), '$build', function $$build(row_count, column_count) {
      var $yield = $$build.$$p || nil, self = this, rows = nil;

      $$build.$$p = null;
      
      if (column_count == null) column_count = row_count;
      row_count = $$('CoercionHelper').$coerce_to_int(row_count);
      column_count = $$('CoercionHelper').$coerce_to_int(column_count);
      if (($truthy($rb_lt(row_count, 0)) || ($truthy($rb_lt(column_count, 0))))) {
        self.$raise($$('ArgumentError'))
      };
      if (!($yield !== nil)) {
        return self.$to_enum("build", row_count, column_count)
      };
      rows = $send($$('Array'), 'new', [row_count], function $$4(i){
        
        if (i == null) i = nil;
        return $send($$('Array'), 'new', [column_count], function $$5(j){
          
          if (j == null) j = nil;
          return Opal.yieldX($yield, [i, j]);;}, 1);}, 1);
      return self.$new(rows, column_count);
    }, -2);
    $defs($$('Matrix'), '$diagonal', function $$diagonal($a) {
      var $post_args, values, self = this, size = nil, rows = nil;

      
      $post_args = $slice.call(arguments);
      values = $post_args;
      size = values.$size();
      if ($eqeq(size, 0)) {
        return $$('Matrix').$empty()
      };
      rows = $send($$('Array'), 'new', [size], function $$6(j){var row = nil;

        
        if (j == null) j = nil;
        row = $$('Array').$new(size, 0);
        row['$[]='](j, values['$[]'](j));
        return row;}, 1);
      return self.$new(rows);
    }, -1);
    $defs($$('Matrix'), '$scalar', function $$scalar(n, value) {
      var self = this;

      return $send(self, 'diagonal', $to_a($$('Array').$new(n, value)))
    }, 2);
    $defs($$('Matrix'), '$identity', function $$identity(n) {
      var self = this;

      return self.$scalar(n, 1)
    }, 1);
    (function(self, $parent_nesting) {
      
      
      $alias(self, "unit", "identity");
      return $alias(self, "I", "identity");
    })(Opal.get_singleton_class($$('Matrix')), $nesting);
    $defs($$('Matrix'), '$zero', function $$zero(row_count, column_count) {
      var self = this, rows = nil;

      
      if (column_count == null) column_count = row_count;
      rows = $send($$('Array'), 'new', [row_count], function $$7(){
        return $$('Array').$new(column_count, 0)}, 0);
      return self.$new(rows, column_count);
    }, -2);
    $defs($$('Matrix'), '$row_vector', function $$row_vector(row) {
      var self = this;

      
      row = self.$convert_to_array(row);
      return self.$new([row]);
    }, 1);
    $defs($$('Matrix'), '$column_vector', function $$column_vector(column) {
      var self = this;

      
      column = self.$convert_to_array(column);
      return self.$new([column].$transpose(), 1);
    }, 1);
    $defs($$('Matrix'), '$empty', function $$empty(row_count, column_count) {
      var self = this;

      
      if (row_count == null) row_count = 0;
      if (column_count == null) column_count = 0;
      if (($neqeq(column_count, 0) && ($neqeq(row_count, 0)))) {
        self.$raise($$('ArgumentError'), "One size must be 0")
      };
      if (($truthy($rb_lt(column_count, 0)) || ($truthy($rb_lt(row_count, 0))))) {
        self.$raise($$('ArgumentError'), "Negative size")
      };
      return self.$new($rb_times([[]], row_count), column_count);
    }, -1);
    $defs($$('Matrix'), '$vstack', function $$vstack(x, $a) {
      var $post_args, matrices, self = this, result = nil;

      
      $post_args = $slice.call(arguments, 1);
      matrices = $post_args;
      x = $$('CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      $send(matrices, 'each', [], function $$8(m){var self = $$8.$$s == null ? this : $$8.$$s;

        
        if (m == null) m = nil;
        m = $$('CoercionHelper').$coerce_to_matrix(m);
        if ($neqeq(m.$column_count(), x.$column_count())) {
          self.$raise($$('ErrDimensionMismatch'), "The given matrices must have " + (x.$column_count()) + " columns, but one has " + (m.$column_count()))
        };
        return result.$concat(m.$send("rows"));}, {$$arity: 1, $$s: self});
      return self.$new(result, x.$column_count());
    }, -2);
    $defs($$('Matrix'), '$hstack', function $$hstack(x, $a) {
      var $post_args, matrices, self = this, result = nil, total_column_count = nil;

      
      $post_args = $slice.call(arguments, 1);
      matrices = $post_args;
      x = $$('CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      total_column_count = x.$column_count();
      $send(matrices, 'each', [], function $$9(m){var self = $$9.$$s == null ? this : $$9.$$s;

        
        if (m == null) m = nil;
        m = $$('CoercionHelper').$coerce_to_matrix(m);
        if ($neqeq(m.$row_count(), x.$row_count())) {
          self.$raise($$('ErrDimensionMismatch'), "The given matrices must have " + (x.$row_count()) + " rows, but one has " + (m.$row_count()))
        };
        $send(result, 'each_with_index', [], function $$10(row, i){
          
          if (row == null) row = nil;
          if (i == null) i = nil;
          return row.$concat(m.$send("rows")['$[]'](i));}, 2);
        return (total_column_count = $rb_plus(total_column_count, m.$column_count()));}, {$$arity: 1, $$s: self});
      return self.$new(result, total_column_count);
    }, -2);
    $defs($$('Matrix'), '$combine', function $$combine($a) {
      var $post_args, matrices, $yield = $$combine.$$p || nil, self = this, x = nil, rows = nil;

      $$combine.$$p = null;
      
      $post_args = $slice.call(arguments);
      matrices = $post_args;
      if (!($yield !== nil)) {
        return $send(self, 'to_enum', ["combine"].concat($to_a(matrices)))
      };
      if ($truthy(matrices['$empty?']())) {
        return $$('Matrix').$empty()
      };
      $send(matrices, 'map!', [], $$('CoercionHelper').$method("coerce_to_matrix").$to_proc());
      x = matrices.$first();
      $send(matrices, 'each', [], function $$11(m){
        
        if (m == null) m = nil;
        if (($eqeq(x.$row_count(), m.$row_count()) && ($eqeq(x.$column_count(), m.$column_count())))) {
          return nil
        } else {
          return $$('Matrix').$Raise($$('ErrDimensionMismatch'))
        };}, 1);
      rows = $send($$('Array'), 'new', [x.$row_count()], function $$12(i){
        
        if (i == null) i = nil;
        return $send($$('Array'), 'new', [x.$column_count()], function $$13(j){
          
          if (j == null) j = nil;
          return Opal.yield1($yield, $send(matrices, 'map', [], function $$14(m){
            
            if (m == null) m = nil;
            return m['$[]'](i, j);}, 1));;}, 1);}, 1);
      return self.$new(rows, x.$column_count());
    }, -1);
    
    $def(self, '$combine', function $$combine($a) {
      var block = $$combine.$$p || nil, $post_args, matrices, self = this;

      $$combine.$$p = null;
      
      ;
      $post_args = $slice.call(arguments);
      matrices = $post_args;
      return $send($$('Matrix'), 'combine', [self].concat($to_a(matrices)), block.$to_proc());
    }, -1);
    
    $def(self, '$initialize', function $$initialize(rows, column_count) {
      var self = this;

      
      if (column_count == null) column_count = rows['$[]'](0).$size();
      self.rows = rows;
      return (self.column_count = column_count);
    }, -2);
    
    $def(self, '$new_matrix', function $$new_matrix(rows, column_count) {
      var self = this;

      
      if (column_count == null) column_count = rows['$[]'](0).$size();
      return self.$class().$send("new", rows, column_count);
    }, -2);
    self.$private("new_matrix");
    
    $def(self, '$[]', function $Matrix_$$$15(i, j) {try { var $t_return = $thrower('return'); 
      var self = this;

      return $send(self.rows, 'fetch', [i], function $$16(){
        $t_return.$throw()}, {$$arity: 0, $$ret: $t_return})['$[]'](j)} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 2);
    $alias(self, "element", "[]");
    $alias(self, "component", "[]");
    
    $def(self, '$[]=', function $Matrix_$$$eq$17(i, j, v) {
      var $a, self = this;

      return ($a = [j, v], $send(self.rows['$[]'](i), '[]=', $a), $a[$a.length - 1])
    }, 3);
    $alias(self, "set_element", "[]=");
    $alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    $def(self, '$row_count', function $$row_count() {
      var self = this;

      return self.rows.$size()
    }, 0);
    self.$alias_method("row_size", "row_count");
    self.$attr_reader("column_count");
    self.$alias_method("column_size", "column_count");
    
    $def(self, '$row', function $$row(i) {try { var $t_return = $thrower('return'); 
      var block = $$row.$$p || nil, self = this;

      $$row.$$p = null;
      
      ;
      if ((block !== nil)) {
        
        $send($send(self.rows, 'fetch', [i], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

          $t_return.$throw(self)}, {$$arity: 0, $$s: self, $$ret: $t_return}), 'each', [], block.$to_proc());
        return self;
      } else {
        return $$('Vector').$elements($send(self.rows, 'fetch', [i], function $$19(){
          $t_return.$throw()}, {$$arity: 0, $$ret: $t_return}))
      };} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 1);
    
    $def(self, '$column', function $$column(j) {
      var $yield = $$column.$$p || nil, self = this, col = nil;

      $$column.$$p = null;
      if (($yield !== nil)) {
        
        if (($truthy($rb_ge(j, self.$column_count())) || ($truthy($rb_lt(j, self.$column_count()['$-@']()))))) {
          return self
        };
        $send(self.$row_count(), 'times', [], function $$20(i){var self = $$20.$$s == null ? this : $$20.$$s;
          if (self.rows == null) self.rows = nil;

          
          if (i == null) i = nil;
          return Opal.yield1($yield, self.rows['$[]'](i)['$[]'](j));;}, {$$arity: 1, $$s: self});
        return self;
      } else {
        
        if (($truthy($rb_ge(j, self.$column_count())) || ($truthy($rb_lt(j, self.$column_count()['$-@']()))))) {
          return nil
        };
        col = $send($$('Array'), 'new', [self.$row_count()], function $$21(i){var self = $$21.$$s == null ? this : $$21.$$s;
          if (self.rows == null) self.rows = nil;

          
          if (i == null) i = nil;
          return self.rows['$[]'](i)['$[]'](j);}, {$$arity: 1, $$s: self});
        return $$('Vector').$elements(col, false);
      }
    }, 1);
    
    $def(self, '$collect', function $$collect() {
      var block = $$collect.$$p || nil, self = this, rows = nil;

      $$collect.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$to_enum("collect")
      };
      rows = $send(self.rows, 'collect', [], function $$22(row){
        
        if (row == null) row = nil;
        return $send(row, 'collect', [], block.$to_proc());}, 1);
      return self.$new_matrix(rows, self.$column_count());
    }, 0);
    $alias(self, "map", "collect");
    
    $def(self, '$each', function $$each(which) {try { var $t_return = $thrower('return'); 
      var $yield = $$each.$$p || nil, self = this, last = nil, block = nil;

      $$each.$$p = null;
      
      if (which == null) which = "all";
      if (!($yield !== nil)) {
        return self.$to_enum("each", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      
      switch (which) {
        case "all":
          
          block = $$('Proc').$new();
          $send(self.rows, 'each', [], function $$23(row){
            
            if (row == null) row = nil;
            return $send(row, 'each', [], block.$to_proc());}, 1);
          break;
        case "diagonal":
          $send(self.rows, 'each_with_index', [], function $$24(row, row_index){var self = $$24.$$s == null ? this : $$24.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return Opal.yield1($yield, $send(row, 'fetch', [row_index], function $$25(){var self = $$25.$$s == null ? this : $$25.$$s;

              $t_return.$throw(self)}, {$$arity: 0, $$s: self, $$ret: $t_return}));;}, {$$arity: 2, $$s: self})
          break;
        case "off_diagonal":
          $send(self.rows, 'each_with_index', [], function $$26(row, row_index){var self = $$26.$$s == null ? this : $$26.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send(self.$column_count(), 'times', [], function $$27(col_index){
              
              if (col_index == null) col_index = nil;
              if ($eqeq(row_index, col_index)) {
                return nil
              } else {
                return Opal.yield1($yield, row['$[]'](col_index));
              };}, 1);}, {$$arity: 2, $$s: self})
          break;
        case "lower":
          $send(self.rows, 'each_with_index', [], function $$28(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send((0), 'upto', [[row_index, last].$min()], function $$29(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yield1($yield, row['$[]'](col_index));;}, 1);}, 2)
          break;
        case "strict_lower":
          $send(self.rows, 'each_with_index', [], function $$30(row, row_index){var self = $$30.$$s == null ? this : $$30.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send([row_index, self.$column_count()].$min(), 'times', [], function $$31(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yield1($yield, row['$[]'](col_index));;}, 1);}, {$$arity: 2, $$s: self})
          break;
        case "strict_upper":
          $send(self.rows, 'each_with_index', [], function $$32(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send($rb_plus(row_index, 1), 'upto', [last], function $$33(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yield1($yield, row['$[]'](col_index));;}, 1);}, 2)
          break;
        case "upper":
          $send(self.rows, 'each_with_index', [], function $$34(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send(row_index, 'upto', [last], function $$35(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yield1($yield, row['$[]'](col_index));;}, 1);}, 2)
          break;
        default:
          self.$raise($$('ArgumentError'), "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")
      };
      return self;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    
    $def(self, '$each_with_index', function $$each_with_index(which) {try { var $t_return = $thrower('return'); 
      var $yield = $$each_with_index.$$p || nil, self = this, last = nil;

      $$each_with_index.$$p = null;
      
      if (which == null) which = "all";
      if (!($yield !== nil)) {
        return self.$to_enum("each_with_index", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      
      switch (which) {
        case "all":
          $send(self.rows, 'each_with_index', [], function $$36(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send(row, 'each_with_index', [], function $$37(e, col_index){
              
              if (e == null) e = nil;
              if (col_index == null) col_index = nil;
              return Opal.yieldX($yield, [e, row_index, col_index]);;}, 2);}, 2)
          break;
        case "diagonal":
          $send(self.rows, 'each_with_index', [], function $$38(row, row_index){var self = $$38.$$s == null ? this : $$38.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return Opal.yieldX($yield, [$send(row, 'fetch', [row_index], function $$39(){var self = $$39.$$s == null ? this : $$39.$$s;

              $t_return.$throw(self)}, {$$arity: 0, $$s: self, $$ret: $t_return}), row_index, row_index]);;}, {$$arity: 2, $$s: self})
          break;
        case "off_diagonal":
          $send(self.rows, 'each_with_index', [], function $$40(row, row_index){var self = $$40.$$s == null ? this : $$40.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send(self.$column_count(), 'times', [], function $$41(col_index){
              
              if (col_index == null) col_index = nil;
              if ($eqeq(row_index, col_index)) {
                return nil
              } else {
                return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);
              };}, 1);}, {$$arity: 2, $$s: self})
          break;
        case "lower":
          $send(self.rows, 'each_with_index', [], function $$42(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send((0), 'upto', [[row_index, last].$min()], function $$43(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, 1);}, 2)
          break;
        case "strict_lower":
          $send(self.rows, 'each_with_index', [], function $$44(row, row_index){var self = $$44.$$s == null ? this : $$44.$$s;

            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send([row_index, self.$column_count()].$min(), 'times', [], function $$45(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, 1);}, {$$arity: 2, $$s: self})
          break;
        case "strict_upper":
          $send(self.rows, 'each_with_index', [], function $$46(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send($rb_plus(row_index, 1), 'upto', [last], function $$47(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, 1);}, 2)
          break;
        case "upper":
          $send(self.rows, 'each_with_index', [], function $$48(row, row_index){
            
            if (row == null) row = nil;
            if (row_index == null) row_index = nil;
            return $send(row_index, 'upto', [last], function $$49(col_index){
              
              if (col_index == null) col_index = nil;
              return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, 1);}, 2)
          break;
        default:
          self.$raise($$('ArgumentError'), "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")
      };
      return self;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    $const_set($nesting[0], 'SELECTORS', $hash2(["all", "diagonal", "off_diagonal", "lower", "strict_lower", "strict_upper", "upper"], {"all": true, "diagonal": true, "off_diagonal": true, "lower": true, "strict_lower": true, "strict_upper": true, "upper": true}).$freeze());
    
    $def(self, '$index', function $$index($a) {try { var $t_return = $thrower('return'); 
      var $post_args, args, $yield = $$index.$$p || nil, self = this, which = nil, value = nil;

      $$index.$$p = null;
      
      $post_args = $slice.call(arguments);
      args = $post_args;
      if ($truthy($rb_gt(args.$size(), 2))) {
        self.$raise($$('ArgumentError'), "wrong number of arguments(" + (args.$size()) + " for 0-2)")
      };
      which = (($eqeq(args.$size(), 2) || ($truthy($$('SELECTORS')['$include?'](args.$last())))) ? (args.$pop()) : ("all"));
      if (!(($yield !== nil) || ($eqeq(args.$size(), 1)))) {
        return $send(self, 'to_enum', ["find_index", which].concat($to_a(args)))
      };
      if ($eqeq(args.$size(), 1)) {
        
        value = args.$first();
        $send(self, 'each_with_index', [which], function $$50(e, row_index, col_index){
          
          if (e == null) e = nil;
          if (row_index == null) row_index = nil;
          if (col_index == null) col_index = nil;
          if ($eqeq(e, value)) {
            $t_return.$throw([row_index, col_index])
          } else {
            return nil
          };}, {$$arity: 3, $$ret: $t_return});
      } else {
        $send(self, 'each_with_index', [which], function $$51(e, row_index, col_index){
          
          if (e == null) e = nil;
          if (row_index == null) row_index = nil;
          if (col_index == null) col_index = nil;
          if ($truthy(Opal.yield1($yield, e))) {
            $t_return.$throw([row_index, col_index])
          } else {
            return nil
          };}, {$$arity: 3, $$ret: $t_return})
      };
      return nil;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, -1);
    self.$alias_method("find_index", "index");
    
    $def(self, '$minor', function $$minor($a) {
      var $post_args, param, $b, $c, self = this, row_range = nil, col_range = nil, from_row = nil, to_row = nil, size_row = nil, from_col = nil, to_col = nil, size_col = nil, rows = nil;

      
      $post_args = $slice.call(arguments);
      param = $post_args;
      
      switch (param.$size()) {
        case 2:
          
          $c = param, $b = $to_ary($c), (row_range = ($b[0] == null ? nil : $b[0])), (col_range = ($b[1] == null ? nil : $b[1])), $c;
          from_row = row_range.$first();
          if ($truthy($rb_lt(from_row, 0))) {
            from_row = $rb_plus(from_row, self.$row_count())
          };
          to_row = row_range.$end();
          if ($truthy($rb_lt(to_row, 0))) {
            to_row = $rb_plus(to_row, self.$row_count())
          };
          if (!$truthy(row_range['$exclude_end?']())) {
            to_row = $rb_plus(to_row, 1)
          };
          size_row = $rb_minus(to_row, from_row);
          from_col = col_range.$first();
          if ($truthy($rb_lt(from_col, 0))) {
            from_col = $rb_plus(from_col, self.$column_count())
          };
          to_col = col_range.$end();
          if ($truthy($rb_lt(to_col, 0))) {
            to_col = $rb_plus(to_col, self.$column_count())
          };
          if (!$truthy(col_range['$exclude_end?']())) {
            to_col = $rb_plus(to_col, 1)
          };
          size_col = $rb_minus(to_col, from_col);
          break;
        case 4:
          
          $c = param, $b = $to_ary($c), (from_row = ($b[0] == null ? nil : $b[0])), (size_row = ($b[1] == null ? nil : $b[1])), (from_col = ($b[2] == null ? nil : $b[2])), (size_col = ($b[3] == null ? nil : $b[3])), $c;
          if (($truthy($rb_lt(size_row, 0)) || ($truthy($rb_lt(size_col, 0))))) {
            return nil
          };
          if ($truthy($rb_lt(from_row, 0))) {
            from_row = $rb_plus(from_row, self.$row_count())
          };
          if ($truthy($rb_lt(from_col, 0))) {
            from_col = $rb_plus(from_col, self.$column_count())
          };
          break;
        default:
          self.$raise($$('ArgumentError'), param.$inspect())
      };
      if (((($truthy($rb_gt(from_row, self.$row_count())) || ($truthy($rb_gt(from_col, self.$column_count())))) || ($truthy($rb_lt(from_row, 0)))) || ($truthy($rb_lt(from_col, 0))))) {
        return nil
      };
      rows = $send(self.rows['$[]'](from_row, size_row), 'collect', [], function $$52(row){
        
        if (row == null) row = nil;
        return row['$[]'](from_col, size_col);}, 1);
      return self.$new_matrix(rows, [$rb_minus(self.$column_count(), from_col), size_col].$min());
    }, -1);
    
    $def(self, '$first_minor', function $$first_minor(row, column) {
      var self = this, arrays = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$('RuntimeError'), "first_minor of empty matrix is not defined")
      };
      if (!($rb_le(0, row) && ($truthy($rb_lt(row, self.$row_count()))))) {
        self.$raise($$('ArgumentError'), "invalid row (" + (row.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      if (!($rb_le(0, column) && ($truthy($rb_lt(column, self.$column_count()))))) {
        self.$raise($$('ArgumentError'), "invalid column (" + (column.$inspect()) + " for 0.." + ($rb_minus(self.$column_count(), 1)) + ")")
      };
      arrays = self.$to_a();
      arrays.$delete_at(row);
      $send(arrays, 'each', [], function $$53(array){
        
        if (array == null) array = nil;
        return array.$delete_at(column);}, 1);
      return self.$new_matrix(arrays, $rb_minus(self.$column_count(), 1));
    }, 2);
    
    $def(self, '$cofactor', function $$cofactor(row, column) {
      var self = this, det_of_minor = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$('RuntimeError'), "cofactor of empty matrix is not defined")
      };
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      det_of_minor = self.$first_minor(row, column).$determinant();
      return $rb_times(det_of_minor, (-1)['$**']($rb_plus(row, column)));
    }, 2);
    
    $def(self, '$adjugate', function $$adjugate() {
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      return $send($$('Matrix'), 'build', [self.$row_count(), self.$column_count()], function $$54(row, column){var self = $$54.$$s == null ? this : $$54.$$s;

        
        if (row == null) row = nil;
        if (column == null) column = nil;
        return self.$cofactor(column, row);}, {$$arity: 2, $$s: self});
    }, 0);
    
    $def(self, '$laplace_expansion', function $$laplace_expansion($kwargs) {
      var row, column, self = this, num = nil, $ret_or_1 = nil;

      
      $kwargs = $ensure_kwargs($kwargs);
      
      row = $kwargs.$$smap["row"];if (row == null) row = nil;
      
      column = $kwargs.$$smap["column"];if (column == null) column = nil;
      num = ($truthy(($ret_or_1 = row)) ? ($ret_or_1) : (column));
      if (($not(num) || (($truthy(row) && ($truthy(column)))))) {
        self.$raise($$('ArgumentError'), "exactly one the row or column arguments must be specified")
      };
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      if ($truthy(self['$empty?']())) {
        self.$raise($$('RuntimeError'), "laplace_expansion of empty matrix is not defined")
      };
      if (!($rb_le(0, num) && ($truthy($rb_lt(num, self.$row_count()))))) {
        self.$raise($$('ArgumentError'), "invalid num (" + (num.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      return $send(self.$send(($truthy(row) ? ("row") : ("column")), num).$map(), 'with_index', [], function $$55(e, k){var self = $$55.$$s == null ? this : $$55.$$s;

        
        if (e == null) e = nil;
        if (k == null) k = nil;
        return $rb_times(e, $send(self, 'cofactor', $to_a(($truthy(row) ? ([num, k]) : ([k, num])))));}, {$$arity: 2, $$s: self}).$inject("+");
    }, -1);
    self.$alias_method("cofactor_expansion", "laplace_expansion");
    
    $def(self, '$diagonal?', function $Matrix_diagonal$ques$56() {
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      return $send(self.$each("off_diagonal"), 'all?', [], "zero?".$to_proc());
    }, 0);
    
    $def(self, '$empty?', function $Matrix_empty$ques$57() {
      var self = this, $ret_or_1 = nil;

      if ($truthy(($ret_or_1 = self.$column_count()['$=='](0)))) {
        return $ret_or_1
      } else {
        return self.$row_count()['$=='](0)
      }
    }, 0);
    
    $def(self, '$hermitian?', function $Matrix_hermitian$ques$58() {
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      return $send(self.$each_with_index("upper"), 'all?', [], function $$59(e, row, col){var self = $$59.$$s == null ? this : $$59.$$s;

        
        if (e == null) e = nil;
        if (row == null) row = nil;
        if (col == null) col = nil;
        return e['$=='](self.$rows()['$[]'](col)['$[]'](row).$conj());}, {$$arity: 3, $$s: self});
    }, 0);
    
    $def(self, '$lower_triangular?', function $Matrix_lower_triangular$ques$60() {
      var self = this;

      return $send(self.$each("strict_upper"), 'all?', [], "zero?".$to_proc())
    }, 0);
    
    $def(self, '$normal?', function $Matrix_normal$ques$61() {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], function $$62(row_i, i){var self = $$62.$$s == null ? this : $$62.$$s;

        
        if (row_i == null) row_i = nil;
        if (i == null) i = nil;
        return $send(self.$rows(), 'each_with_index', [], function $$63(row_j, j){var self = $$63.$$s == null ? this : $$63.$$s, s = nil;

          
          if (row_j == null) row_j = nil;
          if (j == null) j = nil;
          s = 0;
          $send(self.$rows(), 'each_with_index', [], function $$64(row_k, k){
            
            if (row_k == null) row_k = nil;
            if (k == null) k = nil;
            return (s = $rb_plus(s, $rb_minus($rb_times(row_i['$[]'](k), row_j['$[]'](k).$conj()), $rb_times(row_k['$[]'](i).$conj(), row_k['$[]'](j)))));}, 2);
          if ($eqeq(s, 0)) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: 2, $$s: self, $$ret: $t_return});}, {$$arity: 2, $$s: self});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$orthogonal?', function $Matrix_orthogonal$ques$65() {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], function $$66(row, i){var self = $$66.$$s == null ? this : $$66.$$s;

        
        if (row == null) row = nil;
        if (i == null) i = nil;
        return $send(self.$column_count(), 'times', [], function $$67(j){var self = $$67.$$s == null ? this : $$67.$$s, s = nil;

          
          if (j == null) j = nil;
          s = 0;
          $send(self.$row_count(), 'times', [], function $$68(k){var self = $$68.$$s == null ? this : $$68.$$s;

            
            if (k == null) k = nil;
            return (s = $rb_plus(s, $rb_times(row['$[]'](k), self.$rows()['$[]'](k)['$[]'](j))));}, {$$arity: 1, $$s: self});
          if ($eqeq(s, ($eqeq(i, j) ? (1) : (0)))) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: 1, $$s: self, $$ret: $t_return});}, {$$arity: 2, $$s: self});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$permutation?', function $Matrix_permutation$ques$69() {try { var $t_return = $thrower('return'); 
      var self = this, cols = nil;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      cols = $$('Array').$new(self.$column_count());
      $send(self.$rows(), 'each_with_index', [], function $$70(row, i){var found = nil;

        
        if (row == null) row = nil;
        if (i == null) i = nil;
        found = false;
        $send(row, 'each_with_index', [], function $$71(e, j){var $a;

          
          if (e == null) e = nil;
          if (j == null) j = nil;
          if ($eqeq(e, 1)) {
            
            if (($truthy(found) || ($truthy(cols['$[]'](j))))) {
              $t_return.$throw(false)
            };
            return (found = ($a = [j, true], $send(cols, '[]=', $a), $a[$a.length - 1]));
          } else if ($neqeq(e, 0)) {
            $t_return.$throw(false)
          } else {
            return nil
          };}, {$$arity: 2, $$ret: $t_return});
        if ($truthy(found)) {
          return nil
        } else {
          $t_return.$throw(false)
        };}, {$$arity: 2, $$ret: $t_return});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$real?', function $Matrix_real$ques$72() {
      var self = this;

      return $send(self, 'all?', [], "real?".$to_proc())
    }, 0);
    
    $def(self, '$regular?', function $Matrix_regular$ques$73() {
      var self = this;

      return self['$singular?']()['$!']()
    }, 0);
    
    $def(self, '$singular?', function $Matrix_singular$ques$74() {
      var self = this;

      return self.$determinant()['$=='](0)
    }, 0);
    
    $def(self, '$square?', function $Matrix_square$ques$75() {
      var self = this;

      return self.$column_count()['$=='](self.$row_count())
    }, 0);
    
    $def(self, '$symmetric?', function $Matrix_symmetric$ques$76() {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["strict_upper"], function $$77(e, row, col){var self = $$77.$$s == null ? this : $$77.$$s;

        
        if (e == null) e = nil;
        if (row == null) row = nil;
        if (col == null) col = nil;
        if ($neqeq(e, self.$rows()['$[]'](col)['$[]'](row))) {
          $t_return.$throw(false)
        } else {
          return nil
        };}, {$$arity: 3, $$s: self, $$ret: $t_return});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$antisymmetric?', function $Matrix_antisymmetric$ques$78() {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["upper"], function $$79(e, row, col){var self = $$79.$$s == null ? this : $$79.$$s;

        
        if (e == null) e = nil;
        if (row == null) row = nil;
        if (col == null) col = nil;
        if ($eqeq(e, self.$rows()['$[]'](col)['$[]'](row)['$-@']())) {
          return nil
        } else {
          $t_return.$throw(false)
        };}, {$$arity: 3, $$s: self, $$ret: $t_return});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$unitary?', function $Matrix_unitary$ques$80() {try { var $t_return = $thrower('return'); 
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], function $$81(row, i){var self = $$81.$$s == null ? this : $$81.$$s;

        
        if (row == null) row = nil;
        if (i == null) i = nil;
        return $send(self.$column_count(), 'times', [], function $$82(j){var self = $$82.$$s == null ? this : $$82.$$s, s = nil;

          
          if (j == null) j = nil;
          s = 0;
          $send(self.$row_count(), 'times', [], function $$83(k){var self = $$83.$$s == null ? this : $$83.$$s;

            
            if (k == null) k = nil;
            return (s = $rb_plus(s, $rb_times(row['$[]'](k).$conj(), self.$rows()['$[]'](k)['$[]'](j))));}, {$$arity: 1, $$s: self});
          if ($eqeq(s, ($eqeq(i, j) ? (1) : (0)))) {
            return nil
          } else {
            $t_return.$throw(false)
          };}, {$$arity: 1, $$s: self, $$ret: $t_return});}, {$$arity: 2, $$s: self});
      return true;} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    
    $def(self, '$upper_triangular?', function $Matrix_upper_triangular$ques$84() {
      var self = this;

      return $send(self.$each("strict_lower"), 'all?', [], "zero?".$to_proc())
    }, 0);
    
    $def(self, '$zero?', function $Matrix_zero$ques$85() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, 0);
    
    $def(self, '$==', function $Matrix_$eq_eq$86(other) {
      var self = this;

      
      if (!($eqeqeq($$('Matrix'), other) && ($eqeq(self.$column_count(), other.$column_count())))) {
        return false
      };
      return self.$rows()['$=='](other.$rows());
    }, 1);
    
    $def(self, '$eql?', function $Matrix_eql$ques$87(other) {
      var self = this;

      
      if (!($eqeqeq($$('Matrix'), other) && ($eqeq(self.$column_count(), other.$column_count())))) {
        return false
      };
      return self.$rows()['$eql?'](other.$rows());
    }, 1);
    
    $def(self, '$clone', function $$clone() {
      var self = this;

      return self.$new_matrix($send(self.rows, 'map', [], "dup".$to_proc()), self.$column_count())
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return self.rows.$hash()
    }, 0);
    
    $def(self, '$*', function $Matrix_$$88(m) {
      var self = this, $ret_or_1 = nil, rows = nil, r = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = m))) {
        
        rows = $send(self.rows, 'collect', [], function $$89(row){
          
          if (row == null) row = nil;
          return $send(row, 'collect', [], function $$90(e){
            
            if (e == null) e = nil;
            return $rb_times(e, m);}, 1);}, 1);
        return self.$new_matrix(rows, self.$column_count());
      } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
        
        m = self.$class().$column_vector(m);
        r = $rb_times(self, m);
        return r.$column(0);
      } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
        
        if ($neqeq(self.$column_count(), m.$row_count())) {
          $$('Matrix').$Raise($$('ErrDimensionMismatch'))
        };
        rows = $send($$('Array'), 'new', [self.$row_count()], function $$91(i){var self = $$91.$$s == null ? this : $$91.$$s;

          
          if (i == null) i = nil;
          return $send($$('Array'), 'new', [m.$column_count()], function $$92(j){var self = $$92.$$s == null ? this : $$92.$$s;

            
            if (j == null) j = nil;
            return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], function $$93(vij, k){var self = $$93.$$s == null ? this : $$93.$$s;

              
              if (vij == null) vij = nil;
              if (k == null) k = nil;
              return $rb_plus(vij, $rb_times(self['$[]'](i, k), m['$[]'](k, j)));}, {$$arity: 2, $$s: self});}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        return self.$new_matrix(rows, m.$column_count());
      } else {
        return self.$apply_through_coercion(m, "*")
      }
    }, 1);
    
    $def(self, '$+', function $Matrix_$plus$94(m) {
      var self = this, $ret_or_1 = nil, rows = nil;

      
      if ($eqeqeq($$('Numeric'), ($ret_or_1 = m))) {
        $$('Matrix').$Raise($$('ErrOperationNotDefined'), "+", self.$class(), m.$class())
      } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
        m = self.$class().$column_vector(m)
      } else if (!$eqeqeq($$('Matrix'), $ret_or_1)) {
        return self.$apply_through_coercion(m, "+")
      };
      if (!($eqeq(self.$row_count(), m.$row_count()) && ($eqeq(self.$column_count(), m.$column_count())))) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      rows = $send($$('Array'), 'new', [self.$row_count()], function $$95(i){var self = $$95.$$s == null ? this : $$95.$$s;

        
        if (i == null) i = nil;
        return $send($$('Array'), 'new', [self.$column_count()], function $$96(j){var self = $$96.$$s == null ? this : $$96.$$s;

          
          if (j == null) j = nil;
          return $rb_plus(self['$[]'](i, j), m['$[]'](i, j));}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
      return self.$new_matrix(rows, self.$column_count());
    }, 1);
    
    $def(self, '$-', function $Matrix_$minus$97(m) {
      var self = this, $ret_or_1 = nil, rows = nil;

      
      if ($eqeqeq($$('Numeric'), ($ret_or_1 = m))) {
        $$('Matrix').$Raise($$('ErrOperationNotDefined'), "-", self.$class(), m.$class())
      } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
        m = self.$class().$column_vector(m)
      } else if (!$eqeqeq($$('Matrix'), $ret_or_1)) {
        return self.$apply_through_coercion(m, "-")
      };
      if (!($eqeq(self.$row_count(), m.$row_count()) && ($eqeq(self.$column_count(), m.$column_count())))) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      rows = $send($$('Array'), 'new', [self.$row_count()], function $$98(i){var self = $$98.$$s == null ? this : $$98.$$s;

        
        if (i == null) i = nil;
        return $send($$('Array'), 'new', [self.$column_count()], function $$99(j){var self = $$99.$$s == null ? this : $$99.$$s;

          
          if (j == null) j = nil;
          return $rb_minus(self['$[]'](i, j), m['$[]'](i, j));}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
      return self.$new_matrix(rows, self.$column_count());
    }, 1);
    
    $def(self, '$/', function $Matrix_$slash$100(other) {
      var self = this, $ret_or_1 = nil, rows = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
        
        rows = $send(self.rows, 'collect', [], function $$101(row){
          
          if (row == null) row = nil;
          return $send(row, 'collect', [], function $$102(e){
            
            if (e == null) e = nil;
            return $rb_divide(e, other);}, 1);}, 1);
        return self.$new_matrix(rows, self.$column_count());
      } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
        return $rb_times(self, other.$inverse())
      } else {
        return self.$apply_through_coercion(other, "/")
      }
    }, 1);
    
    $def(self, '$hadamard_product', function $$hadamard_product(m) {
      var self = this;

      return $send(self, 'combine', [m], function $$103(a, b){
        
        if (a == null) a = nil;
        if (b == null) b = nil;
        return $rb_times(a, b);}, 2)
    }, 1);
    self.$alias_method("entrywise_product", "hadamard_product");
    
    $def(self, '$inverse', function $$inverse() {
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      return self.$class().$I(self.$row_count()).$send("inverse_from", self);
    }, 0);
    $alias(self, "inv", "inverse");
    
    $def(self, '$inverse_from', function $$inverse_from(src) {
      var self = this, last = nil, a = nil;

      
      last = $rb_minus(self.$row_count(), 1);
      a = src.$to_a();
      $send((0), 'upto', [last], function $$104(k){var $a, $b, self = $$104.$$s == null ? this : $$104.$$s, i = nil, akk = nil;
        if (self.rows == null) self.rows = nil;

        
        if (k == null) k = nil;
        i = k;
        akk = a['$[]'](k)['$[]'](k).$abs();
        $send($rb_plus(k, 1), 'upto', [last], function $$105(j){var v = nil;

          
          if (j == null) j = nil;
          v = a['$[]'](j)['$[]'](k).$abs();
          if ($truthy($rb_gt(v, akk))) {
            
            i = j;
            return (akk = v);
          } else {
            return nil
          };}, 1);
        if ($eqeq(akk, 0)) {
          $$('Matrix').$Raise($$('ErrNotRegular'))
        };
        if ($neqeq(i, k)) {
          
          $a = [a['$[]'](k), a['$[]'](i)], ($b = [i, $a[0]], $send(a, '[]=', $b), $b[$b.length - 1]), ($b = [k, $a[1]], $send(a, '[]=', $b), $b[$b.length - 1]), $a;
          $a = [self.rows['$[]'](k), self.rows['$[]'](i)], ($b = [i, $a[0]], $send(self.rows, '[]=', $b), $b[$b.length - 1]), ($b = [k, $a[1]], $send(self.rows, '[]=', $b), $b[$b.length - 1]), $a;
        };
        akk = a['$[]'](k)['$[]'](k);
        $send((0), 'upto', [last], function $$106(ii){var self = $$106.$$s == null ? this : $$106.$$s, q = nil;

          
          if (ii == null) ii = nil;
          if ($eqeq(ii, k)) {
            return nil
          };
          q = a['$[]'](ii)['$[]'](k).$quo(akk);
          a['$[]'](ii)['$[]='](k, 0);
          $send($rb_plus(k, 1), 'upto', [last], function $$107(j){var $c, $binary_op_recvr_tmp_1 = nil;

            
            if (j == null) j = nil;
            $binary_op_recvr_tmp_1 = a['$[]'](ii);
            return ($c = [j, $rb_minus($binary_op_recvr_tmp_1['$[]'](j), $rb_times(a['$[]'](k)['$[]'](j), q))], $send($binary_op_recvr_tmp_1, '[]=', $c), $c[$c.length - 1]);}, 1);
          return $send((0), 'upto', [last], function $$108(j){var $c, self = $$108.$$s == null ? this : $$108.$$s, $binary_op_recvr_tmp_2 = nil;
            if (self.rows == null) self.rows = nil;

            
            if (j == null) j = nil;
            $binary_op_recvr_tmp_2 = self.rows['$[]'](ii);
            return ($c = [j, $rb_minus($binary_op_recvr_tmp_2['$[]'](j), $rb_times(self.rows['$[]'](k)['$[]'](j), q))], $send($binary_op_recvr_tmp_2, '[]=', $c), $c[$c.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
        $send($rb_plus(k, 1), 'upto', [last], function $$109(j){var $c;

          
          if (j == null) j = nil;
          return ($c = [j, a['$[]'](k)['$[]'](j).$quo(akk)], $send(a['$[]'](k), '[]=', $c), $c[$c.length - 1]);}, 1);
        return $send((0), 'upto', [last], function $$110(j){var $c, self = $$110.$$s == null ? this : $$110.$$s;
          if (self.rows == null) self.rows = nil;

          
          if (j == null) j = nil;
          return ($c = [j, self.rows['$[]'](k)['$[]'](j).$quo(akk)], $send(self.rows['$[]'](k), '[]=', $c), $c[$c.length - 1]);}, {$$arity: 1, $$s: self});}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    self.$private("inverse_from");
    
    $def(self, '$**', function $Matrix_$$$111(other) {try { var $t_return = $thrower('return'); 
      var $a, $b, self = this, $ret_or_1 = nil, x = nil, z = nil, v = nil, d = nil, v_inv = nil;

      if ($eqeqeq($$('Integer'), ($ret_or_1 = other))) {
        
        x = self;
        if ($truthy($rb_le(other, 0))) {
          
          x = self.$inverse();
          if ($eqeq(other, 0)) {
            return self.$class().$identity(self.$column_count())
          };
          other = other['$-@']();
        };
        z = nil;
        return $send(self, 'loop', [], function $$112(){
          
          if ($eqeq(other['$[]'](0), 1)) {
            z = ($truthy(z) ? ($rb_times(z, x)) : (x))
          };
          if ($truthy((other = other['$>>'](1))['$zero?']())) {
            $t_return.$throw(z)
          };
          return (x = $rb_times(x, x));}, {$$arity: 0, $$ret: $t_return});
      } else if ($eqeqeq($$('Numeric'), $ret_or_1)) {
        
        $b = self.$eigensystem(), $a = $to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (d = ($a[1] == null ? nil : $a[1])), (v_inv = ($a[2] == null ? nil : $a[2])), $b;
        return $rb_times($rb_times(v, $send(self.$class(), 'diagonal', $to_a($send(d.$each("diagonal"), 'map', [], function $$113(e){
          
          if (e == null) e = nil;
          return e['$**'](other);}, 1)))), v_inv);
      } else {
        return $$('Matrix').$Raise($$('ErrOperationNotDefined'), "**", self.$class(), other.$class())
      }} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 1);
    
    $def(self, '$+@', $return_self, 0);
    
    $def(self, '$-@', function $Matrix_$minus$$114() {
      var self = this;

      return $send(self, 'collect', [], function $$115(e){
        
        if (e == null) e = nil;
        return e['$-@']();}, 1)
    }, 0);
    
    $def(self, '$determinant', function $$determinant() {
      var $a, $b, self = this, m = nil, m0 = nil, m1 = nil, m2 = nil, m3 = nil;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      m = self.rows;
      
      switch (self.$row_count()) {
        case 0:
          return 1
        case 1:
          return m['$[]'](0)['$[]'](0)['$+@']()
        case 2:
          return $rb_minus($rb_times(m['$[]'](0)['$[]'](0)['$+@'](), m['$[]'](1)['$[]'](1)), $rb_times(m['$[]'](0)['$[]'](1), m['$[]'](1)['$[]'](0)))
        case 3:
          
          $b = m, $a = $to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), $b;
          return $rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), $rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)));
        case 4:
          
          $b = m, $a = $to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), (m3 = ($a[3] == null ? nil : $a[3])), $b;
          return $rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](3)), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](0)));
        default:
          return self.$determinant_bareiss()
      };
    }, 0);
    self.$alias_method("det", "determinant");
    
    $def(self, '$determinant_bareiss', function $$determinant_bareiss() {try { var $t_return = $thrower('return'); 
      var self = this, size = nil, last = nil, a = nil, no_pivot = nil, sign = nil, pivot = nil;

      
      size = self.$row_count();
      last = $rb_minus(size, 1);
      a = self.$to_a();
      no_pivot = $send($$('Proc'), 'new', [], function $$116(){
        $t_return.$throw(0)}, {$$arity: 0, $$ret: $t_return});
      sign = 1;
      pivot = 1;
      $send(size, 'times', [], function $$117(k){var $a, $b, previous_pivot = nil, switch$ = nil;

        
        if (k == null) k = nil;
        previous_pivot = pivot;
        if ($eqeq((pivot = a['$[]'](k)['$[]'](k)), 0)) {
          
          switch$ = $send(Opal.Range.$new($rb_plus(k, 1),size, true), 'find', [no_pivot], function $$118(row){
            
            if (row == null) row = nil;
            return a['$[]'](row)['$[]'](k)['$!='](0);}, 1);
          $a = [a['$[]'](k), a['$[]'](switch$)], ($b = [switch$, $a[0]], $send(a, '[]=', $b), $b[$b.length - 1]), ($b = [k, $a[1]], $send(a, '[]=', $b), $b[$b.length - 1]), $a;
          pivot = a['$[]'](k)['$[]'](k);
          sign = sign['$-@']();
        };
        return $send($rb_plus(k, 1), 'upto', [last], function $$119(i){var ai = nil;

          
          if (i == null) i = nil;
          ai = a['$[]'](i);
          return $send($rb_plus(k, 1), 'upto', [last], function $$120(j){var $c;

            
            if (j == null) j = nil;
            return ($c = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](k)['$[]'](j))), previous_pivot)], $send(ai, '[]=', $c), $c[$c.length - 1]);}, 1);}, 1);}, 1);
      return $rb_times(sign, pivot);} catch($e) {
        if ($e === $t_return) return $e.$v;
        throw $e;
      }
    }, 0);
    self.$private("determinant_bareiss");
    
    $def(self, '$determinant_e', function $$determinant_e() {
      var self = this;

      
      self.$warn("Matrix#determinant_e is deprecated; use #determinant", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$determinant();
    }, 0);
    $alias(self, "det_e", "determinant_e");
    
    $def(self, '$hstack', function $$hstack($a) {
      var $post_args, matrices, self = this;

      
      $post_args = $slice.call(arguments);
      matrices = $post_args;
      return $send(self.$class(), 'hstack', [self].concat($to_a(matrices)));
    }, -1);
    
    $def(self, '$rank', function $$rank() {
      var self = this, a = nil, last_column = nil, last_row = nil, pivot_row = nil, previous_pivot = nil;

      
      a = self.$to_a();
      last_column = $rb_minus(self.$column_count(), 1);
      last_row = $rb_minus(self.$row_count(), 1);
      pivot_row = 0;
      previous_pivot = 1;
      $send((0), 'upto', [last_column], function $$121(k){var $a, $b, switch_row = nil, pivot = nil;

        
        if (k == null) k = nil;
        switch_row = $send(Opal.Range.$new(pivot_row, last_row, false), 'find', [], function $$122(row){
          
          if (row == null) row = nil;
          return a['$[]'](row)['$[]'](k)['$!='](0);}, 1);
        if ($truthy(switch_row)) {
          
          if (!$eqeq(pivot_row, switch_row)) {
            $a = [a['$[]'](pivot_row), a['$[]'](switch_row)], ($b = [switch_row, $a[0]], $send(a, '[]=', $b), $b[$b.length - 1]), ($b = [pivot_row, $a[1]], $send(a, '[]=', $b), $b[$b.length - 1]), $a
          };
          pivot = a['$[]'](pivot_row)['$[]'](k);
          $send($rb_plus(pivot_row, 1), 'upto', [last_row], function $$123(i){var ai = nil;

            
            if (i == null) i = nil;
            ai = a['$[]'](i);
            return $send($rb_plus(k, 1), 'upto', [last_column], function $$124(j){var $c;

              
              if (j == null) j = nil;
              return ($c = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](pivot_row)['$[]'](j))), previous_pivot)], $send(ai, '[]=', $c), $c[$c.length - 1]);}, 1);}, 1);
          pivot_row = $rb_plus(pivot_row, 1);
          return (previous_pivot = pivot);
        } else {
          return nil
        };}, 1);
      return pivot_row;
    }, 0);
    
    $def(self, '$rank_e', function $$rank_e() {
      var self = this;

      
      self.$warn("Matrix#rank_e is deprecated; use #rank", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$rank();
    }, 0);
    
    $def(self, '$round', function $$round(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      return $send(self, 'map', [], function $$125(e){
        
        if (e == null) e = nil;
        return e.$round(ndigits);}, 1);
    }, -1);
    
    $def(self, '$trace', function $$trace() {
      var self = this;

      
      if (!$truthy(self['$square?']())) {
        $$('Matrix').$Raise($$('ErrDimensionMismatch'))
      };
      return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], function $$126(tr, i){var self = $$126.$$s == null ? this : $$126.$$s;
        if (self.rows == null) self.rows = nil;

        
        if (tr == null) tr = nil;
        if (i == null) i = nil;
        return $rb_plus(tr, self.rows['$[]'](i)['$[]'](i));}, {$$arity: 2, $$s: self});
    }, 0);
    $alias(self, "tr", "trace");
    
    $def(self, '$transpose', function $$transpose() {
      var self = this;

      
      if ($truthy(self.$row_count()['$zero?']())) {
        return self.$class().$empty(self.$column_count(), 0)
      };
      return self.$new_matrix(self.rows.$transpose(), self.$row_count());
    }, 0);
    $alias(self, "t", "transpose");
    
    $def(self, '$vstack', function $$vstack($a) {
      var $post_args, matrices, self = this;

      
      $post_args = $slice.call(arguments);
      matrices = $post_args;
      return $send(self.$class(), 'vstack', [self].concat($to_a(matrices)));
    }, -1);
    
    $def(self, '$eigensystem', function $$eigensystem() {
      var self = this;

      return $$('EigenvalueDecomposition').$new(self)
    }, 0);
    $alias(self, "eigen", "eigensystem");
    
    $def(self, '$lup', function $$lup() {
      var self = this;

      return $$('LUPDecomposition').$new(self)
    }, 0);
    $alias(self, "lup_decomposition", "lup");
    
    $def(self, '$conjugate', function $$conjugate() {
      var self = this;

      return $send(self, 'collect', [], "conjugate".$to_proc())
    }, 0);
    $alias(self, "conj", "conjugate");
    
    $def(self, '$imaginary', function $$imaginary() {
      var self = this;

      return $send(self, 'collect', [], "imaginary".$to_proc())
    }, 0);
    $alias(self, "imag", "imaginary");
    
    $def(self, '$real', function $$real() {
      var self = this;

      return $send(self, 'collect', [], "real".$to_proc())
    }, 0);
    
    $def(self, '$rect', function $$rect() {
      var self = this;

      return [self.$real(), self.$imag()]
    }, 0);
    $alias(self, "rectangular", "rect");
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
        return [$$('Scalar').$new(other), self]
      } else {
        return self.$raise($$('TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))
      }
    }, 1);
    
    $def(self, '$row_vectors', function $$row_vectors() {
      var self = this;

      return $send($$('Array'), 'new', [self.$row_count()], function $$127(i){var self = $$127.$$s == null ? this : $$127.$$s;

        
        if (i == null) i = nil;
        return self.$row(i);}, {$$arity: 1, $$s: self})
    }, 0);
    
    $def(self, '$column_vectors', function $$column_vectors() {
      var self = this;

      return $send($$('Array'), 'new', [self.$column_count()], function $$128(i){var self = $$128.$$s == null ? this : $$128.$$s;

        
        if (i == null) i = nil;
        return self.$column(i);}, {$$arity: 1, $$s: self})
    }, 0);
    
    $def(self, '$to_matrix', $return_self, 0);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return $send(self.rows, 'collect', [], "dup".$to_proc())
    }, 0);
    
    $def(self, '$elements_to_f', function $$elements_to_f() {
      var self = this;

      
      self.$warn("Matrix#elements_to_f is deprecated, use map(&:to_f)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, 0);
    
    $def(self, '$elements_to_i', function $$elements_to_i() {
      var self = this;

      
      self.$warn("Matrix#elements_to_i is deprecated, use map(&:to_i)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, 0);
    
    $def(self, '$elements_to_r', function $$elements_to_r() {
      var self = this;

      
      self.$warn("Matrix#elements_to_r is deprecated, use map(&:to_r)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, 0);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return $rb_plus($rb_plus("" + (self.$class()) + "[", $send(self.rows, 'collect', [], function $$129(row){
          
          if (row == null) row = nil;
          return $rb_plus($rb_plus("[", $send(row, 'collect', [], function $$130(e){
            
            if (e == null) e = nil;
            return e.$to_s();}, 1).$join(", ")), "]");}, 1).$join(", ")), "]")
      }
    }, 0);
    
    $def(self, '$inspect', function $$inspect() {
      var self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return "" + (self.$class()) + (self.rows.$inspect())
      }
    }, 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'ConversionHelper');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$convert_to_array', function $$convert_to_array(obj, copy) {
        var self = this, $ret_or_1 = nil, converted = nil, e = nil;

        
        if (copy == null) copy = false;
        if ($eqeqeq($$('Array'), ($ret_or_1 = obj))) {
          if ($truthy(copy)) {
            return obj.$dup()
          } else {
            return obj
          }
        } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
          return obj.$to_a()
        } else {
          
          
          try {
            converted = obj.$to_ary()
          } catch ($err) {
            if (Opal.rescue($err, [$$('Exception')])) {(e = $err)
              try {
                self.$raise($$('TypeError'), "can't convert " + (obj.$class()) + " into an Array (" + (e.$message()) + ")")
              } finally { Opal.pop_exception(); }
            } else { throw $err; }
          };;
          if (!$truthy(converted['$is_a?']($$('Array')))) {
            self.$raise($$('TypeError'), "" + (obj.$class()) + "#to_ary should return an Array")
          };
          return converted;
        };
      }, -2);
      return self.$private("convert_to_array");
    })($nesting[0], $nesting);
    self.$extend($$('ConversionHelper'));
    (function($base, $parent_nesting) {
      var self = $module($base, 'CoercionHelper');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      
      
      $def(self, '$apply_through_coercion', function $$apply_through_coercion(obj, oper) {
        var self = this, coercion = nil;

        try {
          
          coercion = obj.$coerce(self);
          if (!($truthy(coercion['$is_a?']($$('Array'))) && ($eqeq(coercion.$length(), 2)))) {
            self.$raise($$('TypeError'))
          };
          return coercion['$[]'](0).$public_send(oper, coercion['$[]'](1));
        } catch ($err) {
          if (Opal.rescue($err, [$$('StandardError')])) {
            try {
              return self.$raise($$('TypeError'), "" + (obj.$inspect()) + " can't be coerced into " + (self.$class()))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        }
      }, 2);
      self.$private("apply_through_coercion");
      $defs(self, '$coerce_to', function $$coerce_to(obj, cls, meth) {
        var self = this, ret = nil, e = nil;

        
        if ($truthy(obj['$kind_of?'](cls))) {
          return obj
        };
        if (!$truthy(obj['$respond_to?'](meth))) {
          self.$raise($$('TypeError'), "Expected a " + (cls) + " but got a " + (obj.$class()))
        };
        
        try {
          ret = obj.$__send__(meth)
        } catch ($err) {
          if (Opal.rescue($err, [$$('Exception')])) {(e = $err)
            try {
              self.$raise($$('TypeError'), "" + ("Coercion error: " + (obj.$inspect()) + "." + (meth) + " => " + (cls) + " failed:\n") + ("(" + (e.$message()) + ")"))
            } finally { Opal.pop_exception(); }
          } else { throw $err; }
        };;
        if (!$truthy(ret['$kind_of?'](cls))) {
          self.$raise($$('TypeError'), "Coercion error: obj." + (meth) + " did NOT return a " + (cls) + " (was " + (ret.$class()) + ")")
        };
        return ret;
      }, 3);
      $defs(self, '$coerce_to_int', function $$coerce_to_int(obj) {
        var self = this;

        return self.$coerce_to(obj, $$('Integer'), "to_int")
      }, 1);
      return $defs(self, '$coerce_to_matrix', function $$coerce_to_matrix(obj) {
        var self = this;

        return self.$coerce_to(obj, $$('Matrix'), "to_matrix")
      }, 1);
    })($nesting[0], $nesting);
    self.$include($$('CoercionHelper'));
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Scalar');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

      $proto.value = nil;
      
      self.$include($$('ExceptionForMatrix'));
      self.$include($$('CoercionHelper'));
      
      $def(self, '$initialize', $assign_ivar("value"), 0);
      
      $def(self, '$+', function $Scalar_$plus$131(other) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return $$('Scalar').$new($rb_plus(self.value, other))
        } else if (($eqeqeq($$('Vector'), $ret_or_1) || ($eqeqeq($$('Matrix'), $ret_or_1)))) {
          return $$('Scalar').$Raise($$('ErrOperationNotDefined'), "+", self.value.$class(), other.$class())
        } else {
          return self.$apply_through_coercion(other, "+")
        }
      }, 1);
      
      $def(self, '$-', function $Scalar_$minus$132(other) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return $$('Scalar').$new($rb_minus(self.value, other))
        } else if (($eqeqeq($$('Vector'), $ret_or_1) || ($eqeqeq($$('Matrix'), $ret_or_1)))) {
          return $$('Scalar').$Raise($$('ErrOperationNotDefined'), "-", self.value.$class(), other.$class())
        } else {
          return self.$apply_through_coercion(other, "-")
        }
      }, 1);
      
      $def(self, '$*', function $Scalar_$$133(other) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return $$('Scalar').$new($rb_times(self.value, other))
        } else if (($eqeqeq($$('Vector'), $ret_or_1) || ($eqeqeq($$('Matrix'), $ret_or_1)))) {
          return $send(other, 'collect', [], function $$134(e){var self = $$134.$$s == null ? this : $$134.$$s;
            if (self.value == null) self.value = nil;

            
            if (e == null) e = nil;
            return $rb_times(self.value, e);}, {$$arity: 1, $$s: self})
        } else {
          return self.$apply_through_coercion(other, "*")
        }
      }, 1);
      
      $def(self, '$/', function $Scalar_$slash$135(other) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return $$('Scalar').$new($rb_divide(self.value, other))
        } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
          return $$('Scalar').$Raise($$('ErrOperationNotDefined'), "/", self.value.$class(), other.$class())
        } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
          return $rb_times(self, other.$inverse())
        } else {
          return self.$apply_through_coercion(other, "/")
        }
      }, 1);
      return $def(self, '$**', function $Scalar_$$$136(other) {
        var self = this, $ret_or_1 = nil;

        if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
          return $$('Scalar').$new(self.value['$**'](other))
        } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
          return $$('Scalar').$Raise($$('ErrOperationNotDefined'), "**", self.value.$class(), other.$class())
        } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
          return $$('Scalar').$Raise($$('ErrOperationNotImplemented'), "**", self.value.$class(), other.$class())
        } else {
          return self.$apply_through_coercion(other, "**")
        }
      }, 1);
    })($nesting[0], $$('Numeric'), $nesting);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector');

    var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

    $proto.elements = nil;
    
    self.$include($$('ExceptionForMatrix'));
    self.$include($$('Enumerable'));
    self.$include($$$($$('Matrix'), 'CoercionHelper'));
    self.$extend($$$($$('Matrix'), 'ConversionHelper'));
    self.$private_class_method("new");
    self.$attr_reader("elements");
    self.$protected("elements");
    $defs($$('Vector'), '$[]', function $Vector_$$$137($a) {
      var $post_args, array, self = this;

      
      $post_args = $slice.call(arguments);
      array = $post_args;
      return self.$new(self.$convert_to_array(array, false));
    }, -1);
    $defs($$('Vector'), '$elements', function $$elements(array, copy) {
      var self = this;

      
      if (copy == null) copy = true;
      return self.$new(self.$convert_to_array(array, copy));
    }, -2);
    $defs($$('Vector'), '$basis', function $$basis($kwargs) {
      var size, index, self = this, array = nil;

      
      $kwargs = $ensure_kwargs($kwargs);
      size = $get_kwarg($kwargs, "size");
      index = $get_kwarg($kwargs, "index");
      if ($truthy($rb_lt(size, 1))) {
        self.$raise($$('ArgumentError'), "invalid size (" + (size) + " for 1..)")
      };
      if (!($rb_le(0, index) && ($truthy($rb_lt(index, size))))) {
        self.$raise($$('ArgumentError'), "invalid index (" + (index) + " for 0..." + (size) + ")")
      };
      array = $$('Array').$new(size, 0);
      array['$[]='](index, 1);
      return self.$new(self.$convert_to_array(array, false));
    }, 1);
    $defs($$('Vector'), '$zero', function $$zero(size) {
      var self = this, array = nil;

      
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$('ArgumentError'), "invalid size (" + (size) + " for 0..)")
      };
      array = $$('Array').$new(size, 0);
      return self.$new(self.$convert_to_array(array, false));
    }, 1);
    
    $def(self, '$initialize', $assign_ivar("elements"), 0);
    
    $def(self, '$[]', function $Vector_$$$138(i) {
      var self = this;

      return self.elements['$[]'](i)
    }, 1);
    $alias(self, "element", "[]");
    $alias(self, "component", "[]");
    
    $def(self, '$[]=', function $Vector_$$$eq$139(i, v) {
      var $a, self = this;

      return ($a = [i, v], $send(self.elements, '[]=', $a), $a[$a.length - 1])
    }, 2);
    $alias(self, "set_element", "[]=");
    $alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    $def(self, '$round', function $$round(ndigits) {
      var self = this;

      
      if (ndigits == null) ndigits = 0;
      return $send(self, 'map', [], function $$140(e){
        
        if (e == null) e = nil;
        return e.$round(ndigits);}, 1);
    }, -1);
    
    $def(self, '$size', function $$size() {
      var self = this;

      return self.elements.$size()
    }, 0);
    
    $def(self, '$each', function $$each() {
      var block = $$each.$$p || nil, self = this;

      $$each.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$to_enum("each")
      };
      $send(self.elements, 'each', [], block.$to_proc());
      return self;
    }, 0);
    
    $def(self, '$each2', function $$each2(v) {
      var $yield = $$each2.$$p || nil, self = this;

      $$each2.$$p = null;
      
      if ($truthy(v['$kind_of?']($$('Integer')))) {
        self.$raise($$('TypeError'), "Integer is not like Vector")
      };
      if ($neqeq(self.$size(), v.$size())) {
        $$('Vector').$Raise($$('ErrDimensionMismatch'))
      };
      if (!($yield !== nil)) {
        return self.$to_enum("each2", v)
      };
      $send(self.$size(), 'times', [], function $$141(i){var self = $$141.$$s == null ? this : $$141.$$s;
        if (self.elements == null) self.elements = nil;

        
        if (i == null) i = nil;
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, {$$arity: 1, $$s: self});
      return self;
    }, 1);
    
    $def(self, '$collect2', function $$collect2(v) {
      var $yield = $$collect2.$$p || nil, self = this;

      $$collect2.$$p = null;
      
      if ($truthy(v['$kind_of?']($$('Integer')))) {
        self.$raise($$('TypeError'), "Integer is not like Vector")
      };
      if ($neqeq(self.$size(), v.$size())) {
        $$('Vector').$Raise($$('ErrDimensionMismatch'))
      };
      if (!($yield !== nil)) {
        return self.$to_enum("collect2", v)
      };
      return $send($$('Array'), 'new', [self.$size()], function $$142(i){var self = $$142.$$s == null ? this : $$142.$$s;
        if (self.elements == null) self.elements = nil;

        
        if (i == null) i = nil;
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, {$$arity: 1, $$s: self});
    }, 1);
    $defs($$('Vector'), '$independent?', function $Vector_independent$ques$143($a) {
      var $post_args, vs, self = this;

      
      $post_args = $slice.call(arguments);
      vs = $post_args;
      $send(vs, 'each', [], function $$144(v){var self = $$144.$$s == null ? this : $$144.$$s;

        
        if (v == null) v = nil;
        if (!$truthy(v['$is_a?']($$('Vector')))) {
          self.$raise($$('TypeError'), "expected Vector, got " + (v.$class()))
        };
        if ($eqeq(v.$size(), vs.$first().$size())) {
          return nil
        } else {
          return $$('Vector').$Raise($$('ErrDimensionMismatch'))
        };}, {$$arity: 1, $$s: self});
      if ($truthy($rb_gt(vs.$count(), vs.$first().$size()))) {
        return false
      };
      return $send($$('Matrix'), '[]', $to_a(vs)).$rank()['$eql?'](vs.$count());
    }, -1);
    
    $def(self, '$independent?', function $Vector_independent$ques$145($a) {
      var $post_args, vs, self = this;

      
      $post_args = $slice.call(arguments);
      vs = $post_args;
      return $send(self.$class(), 'independent?', [self].concat($to_a(vs)));
    }, -1);
    
    $def(self, '$zero?', function $Vector_zero$ques$146() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, 0);
    
    $def(self, '$==', function $Vector_$eq_eq$147(other) {
      var self = this;

      
      if (!$eqeqeq($$('Vector'), other)) {
        return false
      };
      return self.elements['$=='](other.$elements());
    }, 1);
    
    $def(self, '$eql?', function $Vector_eql$ques$148(other) {
      var self = this;

      
      if (!$eqeqeq($$('Vector'), other)) {
        return false
      };
      return self.elements['$eql?'](other.$elements());
    }, 1);
    
    $def(self, '$clone', function $$clone() {
      var self = this;

      return self.$class().$elements(self.elements)
    }, 0);
    
    $def(self, '$hash', function $$hash() {
      var self = this;

      return self.elements.$hash()
    }, 0);
    
    $def(self, '$*', function $Vector_$$149(x) {
      var self = this, $ret_or_1 = nil, els = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = x))) {
        
        els = $send(self.elements, 'collect', [], function $$150(e){
          
          if (e == null) e = nil;
          return $rb_times(e, x);}, 1);
        return self.$class().$elements(els, false);
      } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
        return $rb_times($$('Matrix').$column_vector(self), x)
      } else if ($eqeqeq($$('Vector'), $ret_or_1)) {
        return $$('Vector').$Raise($$('ErrOperationNotDefined'), "*", self.$class(), x.$class())
      } else {
        return self.$apply_through_coercion(x, "*")
      }
    }, 1);
    
    $def(self, '$+', function $Vector_$plus$151(v) {
      var self = this, $ret_or_1 = nil, els = nil;

      if ($eqeqeq($$('Vector'), ($ret_or_1 = v))) {
        
        if ($neqeq(self.$size(), v.$size())) {
          $$('Vector').$Raise($$('ErrDimensionMismatch'))
        };
        els = $send(self, 'collect2', [v], function $$152(v1, v2){
          
          if (v1 == null) v1 = nil;
          if (v2 == null) v2 = nil;
          return $rb_plus(v1, v2);}, 2);
        return self.$class().$elements(els, false);
      } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
        return $rb_plus($$('Matrix').$column_vector(self), v)
      } else {
        return self.$apply_through_coercion(v, "+")
      }
    }, 1);
    
    $def(self, '$-', function $Vector_$minus$153(v) {
      var self = this, $ret_or_1 = nil, els = nil;

      if ($eqeqeq($$('Vector'), ($ret_or_1 = v))) {
        
        if ($neqeq(self.$size(), v.$size())) {
          $$('Vector').$Raise($$('ErrDimensionMismatch'))
        };
        els = $send(self, 'collect2', [v], function $$154(v1, v2){
          
          if (v1 == null) v1 = nil;
          if (v2 == null) v2 = nil;
          return $rb_minus(v1, v2);}, 2);
        return self.$class().$elements(els, false);
      } else if ($eqeqeq($$('Matrix'), $ret_or_1)) {
        return $rb_minus($$('Matrix').$column_vector(self), v)
      } else {
        return self.$apply_through_coercion(v, "-")
      }
    }, 1);
    
    $def(self, '$/', function $Vector_$slash$155(x) {
      var self = this, $ret_or_1 = nil, els = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = x))) {
        
        els = $send(self.elements, 'collect', [], function $$156(e){
          
          if (e == null) e = nil;
          return $rb_divide(e, x);}, 1);
        return self.$class().$elements(els, false);
      } else if (($eqeqeq($$('Matrix'), $ret_or_1) || ($eqeqeq($$('Vector'), $ret_or_1)))) {
        return $$('Vector').$Raise($$('ErrOperationNotDefined'), "/", self.$class(), x.$class())
      } else {
        return self.$apply_through_coercion(x, "/")
      }
    }, 1);
    
    $def(self, '$+@', $return_self, 0);
    
    $def(self, '$-@', function $Vector_$minus$$157() {
      var self = this;

      return $send(self, 'collect', [], function $$158(e){
        
        if (e == null) e = nil;
        return e['$-@']();}, 1)
    }, 0);
    
    $def(self, '$inner_product', function $$inner_product(v) {
      var self = this, p = nil;

      
      if ($neqeq(self.$size(), v.$size())) {
        $$('Vector').$Raise($$('ErrDimensionMismatch'))
      };
      p = 0;
      $send(self, 'each2', [v], function $$159(v1, v2){
        
        if (v1 == null) v1 = nil;
        if (v2 == null) v2 = nil;
        return (p = $rb_plus(p, $rb_times(v1, v2.$conj())));}, 2);
      return p;
    }, 1);
    self.$alias_method("dot", "inner_product");
    
    $def(self, '$cross_product', function $$cross_product($a) {
      var $post_args, vs, self = this, v = nil, rows = nil;

      
      $post_args = $slice.call(arguments);
      vs = $post_args;
      if (!$truthy($rb_ge(self.$size(), 2))) {
        self.$raise($$('ErrOperationNotDefined'), "cross product is not defined on vectors of dimension " + (self.$size()))
      };
      if (!$eqeq(vs.$size(), $rb_minus(self.$size(), 2))) {
        self.$raise($$('ArgumentError'), "wrong number of arguments (" + (vs.$size()) + " for " + ($rb_minus(self.$size(), 2)) + ")")
      };
      $send(vs, 'each', [], function $$160(v){var self = $$160.$$s == null ? this : $$160.$$s;

        
        if (v == null) v = nil;
        if (!$truthy(v['$is_a?']($$('Vector')))) {
          self.$raise($$('TypeError'), "expected Vector, got " + (v.$class()))
        };
        if ($eqeq(v.$size(), self.$size())) {
          return nil
        } else {
          return $$('Vector').$Raise($$('ErrDimensionMismatch'))
        };}, {$$arity: 1, $$s: self});
      
      switch (self.$size()) {
        case 2:
          return $$('Vector')['$[]'](self.elements['$[]'](1)['$-@'](), self.elements['$[]'](0))
        case 3:
          
          v = vs['$[]'](0);
          return $$('Vector')['$[]']($rb_minus($rb_times(v['$[]'](2), self.elements['$[]'](1)), $rb_times(v['$[]'](1), self.elements['$[]'](2))), $rb_minus($rb_times(v['$[]'](0), self.elements['$[]'](2)), $rb_times(v['$[]'](2), self.elements['$[]'](0))), $rb_minus($rb_times(v['$[]'](1), self.elements['$[]'](0)), $rb_times(v['$[]'](0), self.elements['$[]'](1))));
        default:
          
          rows = [self].concat($to_a(vs)).concat([$send($$('Array'), 'new', [self.$size()], function $$161(i){var self = $$161.$$s == null ? this : $$161.$$s;

            
            if (i == null) i = nil;
            return $$('Vector').$basis($hash2(["size", "index"], {"size": self.$size(), "index": i}));}, {$$arity: 1, $$s: self})]);
          return $$('Matrix').$rows(rows).$laplace_expansion($hash2(["row"], {"row": $rb_minus(self.$size(), 1)}));
      };
    }, -1);
    self.$alias_method("cross", "cross_product");
    
    $def(self, '$collect', function $$collect() {
      var block = $$collect.$$p || nil, self = this, els = nil;

      $$collect.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$to_enum("collect")
      };
      els = $send(self.elements, 'collect', [], block.$to_proc());
      return self.$class().$elements(els, false);
    }, 0);
    $alias(self, "map", "collect");
    
    $def(self, '$magnitude', function $$magnitude() {
      var self = this;

      return $$('Math').$sqrt($send(self.elements, 'inject', [0], function $$162(v, e){
        
        if (v == null) v = nil;
        if (e == null) e = nil;
        return $rb_plus(v, e.$abs2());}, 2))
    }, 0);
    $alias(self, "r", "magnitude");
    $alias(self, "norm", "magnitude");
    
    $def(self, '$map2', function $$map2(v) {
      var block = $$map2.$$p || nil, self = this, els = nil;

      $$map2.$$p = null;
      
      ;
      if (!(block !== nil)) {
        return self.$to_enum("map2", v)
      };
      els = $send(self, 'collect2', [v], block.$to_proc());
      return self.$class().$elements(els, false);
    }, 1);
    $klass($nesting[0], $$('StandardError'), 'ZeroVectorError');
    
    $def(self, '$normalize', function $$normalize() {
      var self = this, n = nil;

      
      n = self.$magnitude();
      if ($eqeq(n, 0)) {
        self.$raise($$('ZeroVectorError'), "Zero vectors can not be normalized")
      };
      return $rb_divide(self, n);
    }, 0);
    
    $def(self, '$angle_with', function $$angle_with(v) {
      var self = this, prod = nil;

      
      if (!$truthy(v['$is_a?']($$('Vector')))) {
        self.$raise($$('TypeError'), "Expected a Vector, got a " + (v.$class()))
      };
      if ($neqeq(self.$size(), v.$size())) {
        $$('Vector').$Raise($$('ErrDimensionMismatch'))
      };
      prod = $rb_times(self.$magnitude(), v.$magnitude());
      if ($eqeq(prod, 0)) {
        self.$raise($$('ZeroVectorError'), "Can't get angle of zero vector")
      };
      return $$('Math').$acos($rb_divide(self.$inner_product(v), prod));
    }, 1);
    
    $def(self, '$covector', function $$covector() {
      var self = this;

      return $$('Matrix').$row_vector(self)
    }, 0);
    
    $def(self, '$to_a', function $$to_a() {
      var self = this;

      return self.elements.$dup()
    }, 0);
    
    $def(self, '$to_matrix', function $$to_matrix() {
      var self = this;

      return $$('Matrix').$column_vector(self)
    }, 0);
    
    $def(self, '$elements_to_f', function $$elements_to_f() {
      var self = this;

      
      self.$warn("Vector#elements_to_f is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, 0);
    
    $def(self, '$elements_to_i', function $$elements_to_i() {
      var self = this;

      
      self.$warn("Vector#elements_to_i is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, 0);
    
    $def(self, '$elements_to_r', function $$elements_to_r() {
      var self = this;

      
      self.$warn("Vector#elements_to_r is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, 0);
    
    $def(self, '$coerce', function $$coerce(other) {
      var self = this, $ret_or_1 = nil;

      if ($eqeqeq($$('Numeric'), ($ret_or_1 = other))) {
        return [$$$($$('Matrix'), 'Scalar').$new(other), self]
      } else {
        return self.$raise($$('TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))
      }
    }, 1);
    
    $def(self, '$to_s', function $$to_s() {
      var self = this;

      return $rb_plus($rb_plus("Vector[", self.elements.$join(", ")), "]")
    }, 0);
    return $def(self, '$inspect', function $$inspect() {
      var self = this;

      return $rb_plus("Vector", self.elements.$inspect())
    }, 0);
  })($nesting[0], null, $nesting);
};
