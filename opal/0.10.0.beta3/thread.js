/* Generated by Opal 0.10.0.beta3 */
Opal.modules["thread"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$allocate', '$core_initialize!', '$current', '$fail', '$[]', '$coerce_key_name', '$[]=', '$key?', '$keys', '$private', '$coerce_to!', '$public', '$clear', '$empty?', '$size', '$shift', '$push', '$each', '$to_proc', '$locked?', '$lock', '$unlock']);
  (function($base, $super) {
    function $ThreadError(){};
    var self = $ThreadError = $klass($base, $super, 'ThreadError', $ThreadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $Thread(){};
    var self = $Thread = $klass($base, $super, 'Thread', $Thread);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.fiber_locals = def.thread_locals = nil;
    Opal.defs(self, '$current', TMP_1 = function ːcurrent() {
      var $a, self = this;
      if (self.current == null) self.current = nil;

      if ((($a = self.current) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.current = self.$allocate();
        self.current['$core_initialize!']();
      };
      return self.current;
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$list', TMP_2 = function ːlist() {
      var self = this;

      return [self.$current()];
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$fail($scope.get('NotImplementedError'), "Thread creation not available");
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$[]', TMP_4 = function(key) {
      var self = this;

      return self.fiber_locals['$[]'](self.$coerce_key_name(key));
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_5 = function(key, value) {
      var self = this;

      return self.fiber_locals['$[]='](self.$coerce_key_name(key), value);
    }, TMP_5.$$arity = 2);

    Opal.defn(self, '$key?', TMP_6 = function(key) {
      var self = this;

      return self.fiber_locals['$key?'](self.$coerce_key_name(key));
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$keys', TMP_7 = function ːkeys() {
      var self = this;

      return self.fiber_locals.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$thread_variable_get', TMP_8 = function ːthread_variable_get(key) {
      var self = this;

      return self.thread_locals['$[]'](self.$coerce_key_name(key));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$thread_variable_set', TMP_9 = function ːthread_variable_set(key, value) {
      var self = this;

      return self.thread_locals['$[]='](self.$coerce_key_name(key), value);
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$thread_variable?', TMP_10 = function(key) {
      var self = this;

      return self.thread_locals['$key?'](self.$coerce_key_name(key));
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$thread_variables', TMP_11 = function ːthread_variables() {
      var self = this;

      return self.thread_locals.$keys();
    }, TMP_11.$$arity = 0);

    self.$private();

    Opal.defn(self, '$core_initialize!', TMP_12 = function() {
      var self = this;

      self.thread_locals = $hash2([], {});
      return self.fiber_locals = $hash2([], {});
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$coerce_key_name', TMP_13 = function ːcoerce_key_name(key) {
      var self = this;

      return $scope.get('Opal')['$coerce_to!'](key, $scope.get('String'), "to_s");
    }, TMP_13.$$arity = 1);

    self.$public();

    return (function($base, $super) {
      function $Queue(){};
      var self = $Queue = $klass($base, $super, 'Queue', $Queue);

      var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20;

      def.storage = nil;
      Opal.defn(self, '$initialize', TMP_14 = function ːinitialize() {
        var self = this;

        return self.$clear();
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$clear', TMP_15 = function ːclear() {
        var self = this;

        return self.storage = [];
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$empty?', TMP_16 = function() {
        var self = this;

        return self.storage['$empty?']();
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$size', TMP_17 = function ːsize() {
        var self = this;

        return self.storage.$size();
      }, TMP_17.$$arity = 0);

      Opal.alias(self, 'length', 'size');

      Opal.defn(self, '$pop', TMP_18 = function ːpop(non_block) {
        var $a, self = this;

        if (non_block == null) {
          non_block = false;
        }
        if ((($a = self['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (non_block !== false && non_block !== nil) {
            self.$fail($scope.get('ThreadError'), "Queue empty")};
          self.$fail($scope.get('ThreadError'), "Deadlock");};
        return self.storage.$shift();
      }, TMP_18.$$arity = -1);

      Opal.alias(self, 'shift', 'pop');

      Opal.alias(self, 'deq', 'pop');

      Opal.defn(self, '$push', TMP_19 = function ːpush(value) {
        var self = this;

        return self.storage.$push(value);
      }, TMP_19.$$arity = 1);

      Opal.alias(self, '<<', 'push');

      Opal.alias(self, 'enq', 'push');

      return (Opal.defn(self, '$each', TMP_20 = function ːeach() {
        var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil;

        TMP_20.$$p = null;
        return ($a = ($b = self.storage).$each, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_20.$$arity = 0), nil) && 'each';
    })($scope.base, null);
  })($scope.base, null);
  Opal.cdecl($scope, 'Queue', (($scope.get('Thread')).$$scope.get('Queue')));
  return (function($base, $super) {
    function $Mutex(){};
    var self = $Mutex = $klass($base, $super, 'Mutex', $Mutex);

    var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27;

    def.locked = nil;
    Opal.defn(self, '$initialize', TMP_21 = function ːinitialize() {
      var self = this;

      return self.locked = false;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$lock', TMP_22 = function ːlock() {
      var $a, self = this;

      if ((($a = self.locked) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$fail($scope.get('ThreadError'), "Deadlock")};
      self.locked = true;
      return self;
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$locked?', TMP_23 = function() {
      var self = this;

      return self.locked;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$owned?', TMP_24 = function() {
      var self = this;

      return self.locked;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$try_lock', TMP_25 = function ːtry_lock() {
      var $a, self = this;

      if ((($a = self['$locked?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false
        } else {
        self.$lock();
        return true;
      };
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$unlock', TMP_26 = function ːunlock() {
      var $a, self = this;

      if ((($a = self.locked) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$fail($scope.get('ThreadError'), "Mutex not locked")
      };
      self.locked = false;
      return self;
    }, TMP_26.$$arity = 0);

    return (Opal.defn(self, '$synchronize', TMP_27 = function ːsynchronize() {
      var self = this, $iter = TMP_27.$$p, $yield = $iter || nil;

      TMP_27.$$p = null;
      self.$lock();
      try {
      return Opal.yieldX($yield, []);
      } finally {
        self.$unlock()
      };
    }, TMP_27.$$arity = 0), nil) && 'synchronize';
  })($scope.base, null);
};
