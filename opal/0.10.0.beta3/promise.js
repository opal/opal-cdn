/* Generated by Opal 0.10.0.beta3 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$lambda', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    Opal.defs(self, '$value', TMP_1 = function ːvalue(value) {
      var self = this;

      return self.$new().$resolve(value);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$error', TMP_2 = function ːerror(value) {
      var self = this;

      return self.$new().$reject(value);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$when', TMP_3 = function ːwhen($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('When').$new(promises);
    }, TMP_3.$$arity = -1);

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = [];
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$value', TMP_5 = function ːvalue() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$act?', TMP_6 = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil) ? $a : self.action['$has_key?']("always"));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$action', TMP_7 = function ːaction() {
      var self = this;

      return self.action.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$exception?', TMP_8 = function() {
      var self = this;

      return self.exception;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$realized?', TMP_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$resolved?', TMP_10 = function() {
      var self = this;

      return self.realized['$==']("resolve");
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$rejected?', TMP_11 = function() {
      var self = this;

      return self.realized['$==']("reject");
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$^', TMP_12 = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$<<', TMP_13 = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>>', TMP_14 = function(promise) {
      var $a, $b, $c, self = this;

      self.next['$<<'](promise);
      if ((($a = self['$exception?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$resolve', TMP_15 = function ːresolve(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$resolve!', TMP_17 = function(value) {
      var $a, $b, TMP_16, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$reject', TMP_18 = function ːreject(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_18.$$arity = -1);

    Opal.defn(self, '$reject!', TMP_20 = function(value) {
      var $a, $b, TMP_19, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exception!', TMP_21 = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$then', TMP_22 = function ːthen() {
      var self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$then!', TMP_23 = function() {
      var $a, $b, self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$then, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_23.$$arity = 0);

    Opal.alias(self, 'do', 'then');

    Opal.alias(self, 'do!', 'then!');

    Opal.defn(self, '$fail', TMP_24 = function ːfail() {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$fail!', TMP_25 = function() {
      var $a, $b, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$fail, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.alias(self, 'rescue!', 'fail!');

    Opal.alias(self, 'catch!', 'fail!');

    Opal.defn(self, '$always', TMP_26 = function ːalways() {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$always!', TMP_27 = function() {
      var $a, $b, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$always, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.alias(self, 'finally!', 'always!');

    Opal.alias(self, 'ensure!', 'always!');

    Opal.defn(self, '$trace', TMP_28 = function ːtrace(depth) {
      var self = this, $iter = TMP_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      TMP_28.$$p = null;
      return self['$^']($scope.get('Trace').$new(depth, block));
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$trace!', TMP_29 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      self['$there_can_be_only_one!']();
      return ($b = ($c = self).$trace, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$there_can_be_only_one!', TMP_30 = function() {
      var $a, self = this;

      if ((($a = self.next['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_31 = function ːinspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_31.$$arity = 0);

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_32, TMP_33;

      Opal.defs(self, '$it', TMP_32 = function ːit(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil) ? $b : promise.$prev()['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_32.$$arity = 1);

      return (Opal.defn(self, '$initialize', TMP_33 = function ːinitialize(depth, block) {
        var $a, $b, $c, $d, TMP_34, self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

        TMP_33.$$p = null;
        self.depth = depth;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_33, false)), $a.$$p = null, $a).call($b, $hash2(["success"], {"success": ($c = ($d = self).$lambda, $c.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $e, $f, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($e = (($f = depth !== false && depth !== nil) ? $rb_le(depth, trace.$length()) : depth)) !== nil && (!$e.$$is_boolean || $e == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($e = block).$call.apply($e, Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $c).call($d)}));
      }, TMP_33.$$arity = 2), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_35, TMP_37, TMP_39, TMP_41, TMP_44, TMP_46, TMP_47;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_35 = function ːinitialize(promises) {
        var $a, $b, $c, TMP_36, self = this, $iter = TMP_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        TMP_35.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_35, false)), $a.$$p = null, $a).call($b);
        self.wait = [];
        return ($a = ($c = promises).$each, $a.$$p = (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($c);
      }, TMP_35.$$arity = -1);

      Opal.defn(self, '$each', TMP_37 = function ːeach() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_38 = function(values){var self = TMP_38.$$s || this, $c, $d;
if (values == null) values = nil;
        return ($c = ($d = values).$each, $c.$$p = block.$to_proc(), $c).call($d)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$collect', TMP_39 = function ːcollect() {
        var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

        TMP_39.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_40 = function(values){var self = TMP_40.$$s || this, $c, $d;
if (values == null) values = nil;
        return $scope.get('When').$new(($c = ($d = values).$map, $c.$$p = block.$to_proc(), $c).call($d))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$inject', TMP_41 = function ːinject($a_rest) {
        var $b, $c, TMP_42, self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_41.$$p = null;
        return ($b = ($c = self).$then, $b.$$p = (TMP_42 = function(values){var self = TMP_42.$$s || this, $a, $d;
if (values == null) values = nil;
        return ($a = ($d = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($d, Opal.to_a(args))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $b).call($c);
      }, TMP_41.$$arity = -1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', TMP_44 = function ːwait(promise) {
        var $a, $b, TMP_43, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $c;
          if (self.next == null) self.next = nil;

        if ((($c = self.next['$any?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b);
        return self;
      }, TMP_44.$$arity = 1);

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_46 = function($a_rest) {
        var $b, $c, TMP_45, $d, $e, self = this, $iter = TMP_46.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_46.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($b = ($c = ($d = ($e = self, Opal.find_super_dispatcher(self, '>>', TMP_46, false)), $d.$$p = $iter, $d).apply($e, $zuper)).$tap, $b.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$try()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $b).call($c);
      }, TMP_46.$$arity = -1);

      return (Opal.defn(self, '$try', TMP_47 = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, TMP_47.$$arity = 0), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};
