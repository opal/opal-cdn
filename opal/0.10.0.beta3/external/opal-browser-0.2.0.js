/* Generated by Opal 0.10.0.beta3 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_19, TMP_20, TMP_21;

    Opal.defs(self, '$is_a?', TMP_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$try_convert', TMP_2 = function ːtry_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$convert', TMP_3 = function ːconvert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$call', TMP_4 = function ːcall(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_4.$$arity = -3);

    Opal.defs(self, '$proc', TMP_5 = function ːproc() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, args, $d, $e, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      ($d = ($e = args)['$map!'], $d.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
    }, TMP_5.$$arity = 0);

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_14, TMP_17, TMP_18;

      Opal.defn(self, '$alias_native', TMP_11 = function ːalias_native(new$, $old, $kwargs) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, new$)
        } else if (as !== false && as !== nil) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, args, block, $e, $f, $g, value = nil;
            if (self["native"] == null) self["native"] = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            block = TMP_9.$$p || nil, TMP_9.$$p = null;
          if ((($e = value = ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))) !== nil && (!$e.$$is_boolean || $e == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_10 = function($e_rest){var self = TMP_10.$$s || this, args, block, $f, $g;
            if (self["native"] == null) self["native"] = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            block = TMP_10.$$p || nil, TMP_10.$$p = null;
          return ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($d, new$)
        };
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$native_reader', TMP_14 = function ːnative_reader($a_rest) {
        var $b, $c, TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $a, $d, TMP_13;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($d, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$native_writer', TMP_17 = function ːnative_writer($a_rest) {
        var $b, $c, TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this, $a, $d, TMP_16;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($d, "" + (name) + "=")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$native_accessor', TMP_18 = function ːnative_accessor($a_rest) {
        var $b, $c, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$native_reader.apply($b, Opal.to_a(names));
        return ($c = self).$native_writer.apply($c, Opal.to_a(names));
      }, TMP_18.$$arity = -1);
    })($scope.base);

    Opal.defs(self, '$included', TMP_19 = function ːincluded(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_20 = function ːinitialize(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_21 = function ːto_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    }, TMP_21.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_25, TMP_26;

    Opal.defn(self, '$native?', TMP_22 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$Native', TMP_25 = function ːNative(obj) {
      var $a, $b, TMP_23, $c, TMP_24, self = this;

      if ((($a = obj == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_24 = function($d_rest){var self = TMP_24.$$s || this, args, block, $e, $f;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          block = TMP_24.$$p || nil, TMP_24.$$p = null;
        return self.$Native(($e = ($f = obj).$call, $e.$$p = block.$to_proc(), $e).apply($f, Opal.to_a(args)))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($c)
        } else {
        return obj
      };
    }, TMP_25.$$arity = 1);

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_26 = function ːArray(object, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_26.$$p = null;
      if ((($b = self['$native?'](object)) !== nil && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = (($scope.get('Native')).$$scope.get('Array'))).$new, $b.$$p = block.$to_proc(), $b).apply($c, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    }, TMP_26.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', TMP_27 = function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_key?', TMP_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_28.$$arity = 1);

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_29 = function ːeach($a_rest) {
      var $b, self = this, args, $iter = TMP_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return ($b = self).$method_missing.apply($b, ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$[]', TMP_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_31 = function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$merge!', TMP_32 = function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_34.$$arity = -2);

    Opal.defn(self, '$method_missing', TMP_35 = function ːmethod_missing(mid, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_35.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($b = ($c = Opal.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    }, TMP_35.$$arity = -2);

    Opal.defn(self, '$nil?', TMP_36 = function() {
      var self = this;

      return false;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_38 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$class', TMP_39 = function() {
      var self = this;

      return self.$$class;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_40 = function ːto_a(options) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_40.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    }, TMP_40.$$arity = -1);

    return (Opal.defn(self, '$inspect', TMP_41 = function ːinspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }, TMP_41.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_42 = function ːinitialize(native$, options) {
      var $a, $b, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_42.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, native$);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_42.$$arity = -2);

    Opal.defn(self, '$each', TMP_43 = function ːeach() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$[]', TMP_44 = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_45 = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    }, TMP_45.$$arity = 2);

    Opal.defn(self, '$last', TMP_46 = function ːlast(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if (count !== false && count !== nil) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$length', TMP_47 = function ːlength() {
      var self = this;

      return self["native"][self.length];
    }, TMP_47.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', TMP_48 = function ːinspect() {
      var self = this;

      return self.$to_a().$inspect();
    }, TMP_48.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_49;

    return (Opal.defn(self, '$to_n', TMP_49 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_49.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_50;

    return (Opal.defn(self, '$to_n', TMP_50 = function ːto_n() {
      var self = this;

      return self;
    }, TMP_50.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_51;

    return (Opal.defn(self, '$to_n', TMP_51 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_51.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_52;

    return (Opal.defn(self, '$to_n', TMP_52 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_52.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_53 = function ːto_n() {
      var self = this;

      return self.matches;
    }, TMP_53.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_55;

    return (Opal.defn(self, '$to_n', TMP_55 = function ːto_n() {
      var $a, $b, TMP_54, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value, value);}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54), $a).call($b);
      return result;
    }, TMP_55.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_56;

    return (Opal.defn(self, '$to_n', TMP_56 = function ːto_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_56.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_57;

    return (Opal.defn(self, '$to_n', TMP_57 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_57.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_58;

    return (Opal.defn(self, '$to_n', TMP_58 = function ːto_n() {
      var self = this;

      return self;
    }, TMP_58.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_59;

    return (Opal.defn(self, '$to_n', TMP_59 = function ːto_n() {
      var self = this;

      return null;
    }, TMP_59.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_60, TMP_61;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_60 = function ːinitialize(defaults) {
      var $a, $b, self = this, $iter = TMP_60.$$p, block = $iter || nil;

      TMP_60.$$p = null;
      
      if (defaults !== undefined && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    }, TMP_60.$$arity = -1);

    return (Opal.defn(self, '$to_n', TMP_61 = function ːto_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_61.$$arity = 0), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_62;

    return (Opal.defn(self, '$native_module', TMP_62 = function ːnative_module() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, TMP_62.$$arity = 0), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_63, TMP_64;

    Opal.defn(self, '$native_alias', TMP_63 = function ːnative_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    }, TMP_63.$$arity = 2);

    return (Opal.defn(self, '$native_class', TMP_64 = function ːnative_class() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }, TMP_64.$$arity = 0), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/utils"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base) {
      var $Utils, self = $Utils = $module($base, 'Utils');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5;

      Opal.defs(self, '$heredoc', TMP_1 = function ːheredoc(string) {
        var self = this, indent = nil;

        indent = (function() {
        try {return string.$scan(/^[ \t]*(?=\S)/).$min().$size() } catch ($err) { 
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
          return 0
          } else { throw $err; } }})();
        return string.$gsub((new RegExp("^[ \\t]{" + indent + "}")), "");
      }, TMP_1.$$arity = 1);

      Opal.defs(self, '$deep_merge', TMP_3 = function ːdeep_merge(a, b) {
        var $a, $b, TMP_2, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_2 = function(key, v1, v2){var self = TMP_2.$$s || this, $c, $d;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($c = ($d = $scope.get('Hash')['$==='](v1), $d !== false && $d !== nil ?$scope.get('Hash')['$==='](v2) : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($d = v1).$merge, $c.$$p = merger.$to_proc(), $c).call($d, v2)
            } else {
            return v2
          }}, TMP_2.$$s = self, TMP_2.$$arity = 3, TMP_2), $a).call($b);
        return ($a = ($c = a).$merge, $a.$$p = merger.$to_proc(), $a).call($c, b);
      }, TMP_3.$$arity = 2);

      Opal.defs(self, '$deep_merge!', TMP_5 = function(a, b) {
        var $a, $b, TMP_4, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_4 = function(key, v1, v2){var self = TMP_4.$$s || this, $c, $d;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($c = ($d = $scope.get('Hash')['$==='](v1), $d !== false && $d !== nil ?$scope.get('Hash')['$==='](v2) : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
            ($c = ($d = v1)['$merge!'], $c.$$p = merger.$to_proc(), $c).call($d, v2);
            return v1;
            } else {
            return v2
          }}, TMP_4.$$s = self, TMP_4.$$arity = 3, TMP_4), $a).call($b);
        return ($a = ($c = a)['$merge!'], $a.$$p = merger.$to_proc(), $a).call($c, b);
      }, TMP_5.$$arity = 2);
    })($scope.base)
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4;

        Opal.defs(self, '$defhelper', TMP_1 = function ːdefhelper(name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, args, body, $d, $e, $f;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            body = TMP_2.$$p || nil, TMP_2.$$p = null;
          ($d = ($e = self).$instance_exec, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args));
            if (body !== false && body !== nil) {
              ($d = ($f = self).$do, $d.$$p = body.$to_proc(), $d).call($f)};
            return self;}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b, name);
        }, TMP_1.$$arity = 1);

        return (Opal.defs(self, '$defhelper!', TMP_4 = function(name, attribute) {
          var $a, $b, TMP_3, self = this;

          if (attribute == null) {
            attribute = name;
          }
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]='](attribute, true)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "" + (name) + "!");
        }, TMP_4.$$arity = -2), nil) && 'defhelper!';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/a"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!', '$<<']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $A(){};
          var self = $A = $klass($base, $super, 'A', $A);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          self['$defhelper!']("download");

          self['$defhelper!']("ping");

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(string){var self = TMP_3.$$s || this;
if (string == null) string = nil;
          return self['$<<'](string)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c, "text");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Base(){};
          var self = $Base = $klass($base, $super, 'Base', $Base);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/blockquote"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Blockquote(){};
          var self = $Blockquote = $klass($base, $super, 'Blockquote', $Blockquote);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("cite", value.$to_s())}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "cite")
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/button"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = $hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"})).$each, $a.$$p = (TMP_1 = function(name, attributes){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attributes == null) attributes = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          self['$defhelper!']("autofocus");

          return self['$defhelper!']("disabled");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/canvas"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Canvas(){};
          var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["width", "height"], {"width": "width", "height": "height"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/embed"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Embed(){};
          var self = $Embed = $klass($base, $super, 'Embed', $Embed);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/img"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Img(){};
          var self = $Img = $klass($base, $super, 'Img', $Img);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]=']("ismap", true)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c, "map!");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/link"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Object(){};
          var self = $Object = $klass($base, $super, 'Object', $Object);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/option"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Option(){};
          var self = $Option = $klass($base, $super, 'Option', $Option);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/optgroup"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Optgroup(){};
          var self = $Optgroup = $klass($base, $super, 'Optgroup', $Optgroup);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/select"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["form", "name", "size"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (name == null) name = nil;
          return ($c = ($d = self).$defhelper, $c.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d, name)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

          self['$defhelper!']("auto_focus", "autofocus");

          self['$defhelper!']("disabled");

          return self['$defhelper!']("required");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element/td"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s', '$join']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Td(){};
          var self = $Td = $klass($base, $super, 'Td', $Td);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

          ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("colspan", value.$to_s())}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "columns");

          ($a = ($c = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("rowspan", value.$to_s())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c, "rows");

          return ($a = ($d = self).$defhelper, $a.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, args;
            if (self.attributes == null) self.attributes = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return self.attributes['$[]=']("headers", args.$join(" "))}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($d, "headers");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]=', '$[]', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, $a, $b, TMP_9, $c, TMP_11, TMP_13;

        def.children = def.attributes = def.class_names = def.owner = def.name = nil;
        Opal.defs(self, '$new', TMP_1 = function(owner, name, attributes) {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, const$ = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Element)), $a.$$p = $iter, $a).apply($b, $zuper)
          };
          const$ = name.$capitalize();
          if ((($a = self['$const_defined?'](const$)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$const_get(const$).$new(owner, name, attributes)
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Element)), $a.$$p = $iter, $a).apply($c, $zuper)
          };
        }, TMP_1.$$arity = -3);

        Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(owner, name, attributes) {
          var self = this;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return self.class_names = [];
        }, TMP_2.$$arity = -3);

        Opal.defn(self, '$each', TMP_3 = function ːeach() {
          var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return ($a = ($b = self.children).$each, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$<<', TMP_4 = function(what) {
          var self = this;

          self.children['$<<'](what);
          return self;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_5 = function ːmethod_missing(name, content) {
          var $a, $b, $c, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          if (content == null) {
            content = nil;
          }
          TMP_5.$$p = null;
          if ((($a = name.$to_s()['$end_with?']("!")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.attributes['$[]=']("id", name['$[]']($range(0, -2, false)))
            } else {
            self.class_names['$<<'](name)
          };
          if ((($a = Opal.get('Hash')['$==='](content)) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = ((($b = content['$has_key?']("class")) !== false && $b !== nil) ? $b : content['$has_key?']("classes"))) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = self.class_names).$unshift.apply($a, Opal.to_a((content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a()))))};
            ((Opal.get('Paggio')).$$scope.get('Utils'))['$deep_merge!'](self.attributes, content);
          } else if (content !== false && content !== nil) {
            self['$>>'](content)};
          if (block !== false && block !== nil) {
            ($b = ($c = self.owner)['$extend!'], $b.$$p = block.$to_proc(), $b).call($c, self)};
          return self;
        }, TMP_5.$$arity = -2);

        Opal.defn(self, '$[]', TMP_6 = function($a_rest) {
          var $b, self = this, names, last = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = last = self.class_names.$pop()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$do', TMP_7 = function() {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          ($a = ($b = self.owner)['$extend!'], $a.$$p = block.$to_proc(), $a).call($b, self);
          return self;
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$>>', TMP_8 = function(content) {
          var self = this;

          self['$<<'](((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(content.$to_s()));
          return self;
        }, TMP_8.$$arity = 1);

        ($a = ($b = self).$defhelper, $a.$$p = (TMP_9 = function(hash){var self = TMP_9.$$s || this, $c, $d, TMP_10;
          if (self.attributes == null) self.attributes = nil;
if (hash == null) hash = nil;
        return self.attributes['$[]=']("style", ($c = ($d = hash).$map, $c.$$p = (TMP_10 = function(name, value){var self = TMP_10.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return "" + (name) + ": " + (value)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $c).call($d).$join(";"))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b, "style");

        ($a = ($c = self).$defhelper, $a.$$p = (TMP_11 = function(hash){var self = TMP_11.$$s || this, $d, $e, TMP_12;
if (hash == null) hash = nil;
        return ($d = ($e = hash).$each, $d.$$p = (TMP_12 = function(name, value){var self = TMP_12.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (name == null) name = nil;if (value == null) value = nil;
          return self.attributes['$[]=']("data-" + (name), value.$to_s())}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $d).call($e)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c, "data");

        return (Opal.defn(self, '$inspect', TMP_13 = function ːinspect() {
          var $a, self = this;

          if ((($a = self.children['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "#<HTML::Element(" + (self.name.$upcase()) + ")>"
            } else {
            return "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          };
        }, TMP_13.$$arity = 0), nil) && 'inspect';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/html"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_11;

      def.current = def.roots = def.version = nil;
      self.$attr_reader("version");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(version) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (version == null) {
          version = 5;
        }
        TMP_1.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$<<', TMP_2 = function(what) {
        var $a, self = this;

        return (((($a = self.current) !== false && $a !== nil) ? $a : self.roots))['$<<'](what);
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$root!', TMP_3 = function() {
        var self = this;

        return self.roots.$first();
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$roots!', TMP_4 = function() {
        var self = this;

        return self.roots;
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$element!', TMP_5 = function() {
        var self = this;

        return self.current;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$extend!', TMP_6 = function(element) {
        var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil, old = nil, result = nil;

        if (element == null) {
          element = nil;
        }
        TMP_6.$$p = null;
        $a = [self.current, element], old = $a[0], self.current = $a[1], $a;
        result = block.$call(self);
        if ((($a = Opal.get('String')['$==='](result)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.current).$instance_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.inner_html = result}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b)};
        self.current = old;
        return self;
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$each', TMP_8 = function ːeach() {
        var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return ($a = ($b = self.roots).$each, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_9 = function ːmethod_missing(name, $a_rest) {
        var $b, $c, $d, $e, TMP_10, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, content = nil, element = nil, parent = nil, result = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($b = name.$to_s()['$end_with?']("!")) !== nil && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_9, false)), $b.$$p = $iter, $b).apply($c, $zuper)};
        if ((($b = ((($d = args['$empty?']()) !== false && $d !== nil) ? $d : Opal.get('Hash')['$==='](args.$first()))) !== nil && (!$b.$$is_boolean || $b == true))) {
          } else {
          content = ((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(args.$shift().$to_s())
        };
        element = ($b = $scope.get('Element')).$new.apply($b, [self, name].concat(Opal.to_a(args)));
        if (content !== false && content !== nil) {
          element['$<<'](content)};
        if (block !== false && block !== nil) {
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ((($d = Opal.get('String')['$==='](result)) !== nil && (!$d.$$is_boolean || $d == true))) {
            ($d = ($e = element).$instance_eval, $d.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.inner_html = result}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $d).call($e)};};
        self['$<<'](element);
        return element;
      }, TMP_9.$$arity = -2);

      return (Opal.defn(self, '$inspect', TMP_11 = function ːinspect() {
        var $a, self = this;

        if ((($a = self.roots['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "#<HTML(" + (self.version) + ")>"
          } else {
          return "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        };
      }, TMP_11.$$arity = 0), nil) && 'inspect';
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/unit"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var $a, $b, TMP_23, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Unit(){};
        var self = $Unit = $klass($base, $super, 'Unit', $Unit);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, $c, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $d, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19;

        def.type = def.number = nil;
        Opal.cdecl($scope, 'TYPES', ($a = ($b = ["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($b));

        Opal.cdecl($scope, 'COMPATIBLE', ($a = ($c = ["in", "pt", "mm", "cm", "px", "pc"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($c));

        self.$attr_reader("type", "number");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(number, type) {
          var self = this;

          self.number = number;
          return self.type = type;
        }, TMP_1.$$arity = 2);

        Opal.defn(self, '$coerce', TMP_2 = function ːcoerce(other) {
          var self = this;

          return [self, other];
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$==', TMP_3 = function(other) {
          var $a, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            if ((($a = other['$respond_to?']("to_u")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            other = $scope.get('Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$===', TMP_4 = function(other) {
          var $a, self = this;

          return (($a = self.type['$=='](other.$type())) ? self.number['$=='](other.$number()) : self.type['$=='](other.$type()));
        }, TMP_4.$$arity = 1);

        Opal.alias(self, 'eql?', '==');

        Opal.defn(self, '$hash', TMP_5 = function ːhash() {
          var self = this;

          return [self.number, self.type].$hash();
        }, TMP_5.$$arity = 0);

        ($a = ($d = $scope.get('TYPES')).$each, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this, $e, $f, TMP_7;
if (name == null) name = nil;
        return ($e = ($f = self).$define_method, $e.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return $scope.get('Unit').$new(self.$convert(self, name), name)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $e).call($f, name)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d);

        Opal.defn(self, '$+', TMP_8 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$-', TMP_9 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$*', TMP_10 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$/', TMP_11 = function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$-@', TMP_12 = function() {
          var self = this;

          return $scope.get('Unit').$new($rb_times(self.number, -1), self.type);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$+@', TMP_13 = function() {
          var self = this;

          return $scope.get('Unit').$new(self.number, self.type);
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$to_i', TMP_14 = function ːto_i() {
          var self = this;

          return self.number.$to_i();
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$to_f', TMP_15 = function ːto_f() {
          var self = this;

          return self.number.$to_f();
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$to_u', TMP_16 = function ːto_u() {
          var self = this;

          return self;
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$to_s', TMP_17 = function ːto_s() {
          var self = this;

          return "" + (self.number) + (self.type);
        }, TMP_17.$$arity = 0);

        Opal.alias(self, 'to_str', 'to_s');

        Opal.alias(self, 'inspect', 'to_s');

        self.$private();

        Opal.defn(self, '$compatible?', TMP_18 = function(unit) {
          var self = this;

          return $scope.get('COMPATIBLE')['$include?'](unit.$type());
        }, TMP_18.$$arity = 1);

        return (Opal.defn(self, '$convert', TMP_19 = function ːconvert(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();if ("in"['$===']($case)) {return $rb_times(value, 96)}else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}else if ("px"['$===']($case)) {return value}else { return nil }})();
          return (function() {$case = type;if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}else if ("px"['$===']($case)) {return px}else { return nil }})();
        }, TMP_19.$$arity = 2), nil) && 'convert';
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_20, TMP_22;

    ($a = ($b = (((((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit'))).$$scope.get('TYPES'))).$each, $a.$$p = (TMP_20 = function(name){var self = TMP_20.$$s || this, $c, $d, TMP_21;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, name)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $c).call($d, name)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);

    return (Opal.defn(self, '$to_u', TMP_22 = function ːto_u() {
      var self = this;

      return self;
    }, TMP_22.$$arity = 0), nil) && 'to_u';
  })($scope.base, null);
  ($a = ($b = [$scope.get('Fixnum'), $scope.get('Float')]).$each, $a.$$p = (TMP_23 = function(klass){var self = TMP_23.$$s || this, $c, $d, TMP_24;
if (klass == null) klass = nil;
  return ($c = ($d = klass).$class_eval, $c.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_25;

    Opal.alias(self, 'old_percent', '%');
      return (Opal.def(self, '$%', TMP_25 = function(other) {
        var self = this;

        if (other == null) {
          other = nil;
        }
        if (other !== false && other !== nil) {
          return self.$old_percent(other)
          } else {
          return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, "%")
        };
      }, TMP_25.$$arity = -1), nil) && '%';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $c).call($d)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_26;

    return (Opal.defn(self, '$to_u', TMP_26 = function ːto_u() {
      var $a, self = this, matches = nil, value = nil, unit = nil;

      if ((($a = matches = self.$match(/^([\d+.]+)(.+)?$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        value = matches['$[]'](1).$to_f();
        if ((($a = unit = matches['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return value.$__send__(unit.$downcase())
          } else {
          return value
        };
        } else {
        return 0
      };
    }, TMP_26.$$arity = 0), nil) && 'to_u'
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_27;

    return (Opal.defn(self, '$to_u', TMP_27 = function ːto_u() {
      var self = this;

      return 0;
    }, TMP_27.$$arity = 0), nil) && 'to_u'
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/color"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$define_method', '$new', '$map', '$to_proc']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Color(){};
        var self = $Color = $klass($base, $super, 'Color', $Color);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(value, type) {
          var self = this;

          self.internal = value;
          return self.type = type;
        }, TMP_1.$$arity = 2), nil) && 'initialize'
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d, name)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_4, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_4 = function(name){var self = TMP_4.$$s || this, $c, $d, TMP_5;
if (name == null) name = nil;
    return ($c = ($d = self).$define_method, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d, name)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/definition"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $a, $b, TMP_6, TMP_8, TMP_9, $c, TMP_10, $d, TMP_12, TMP_16, TMP_22, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_36;

        def.style = def.important = nil;
        Opal.cdecl($scope, 'Style', Opal.get('Struct').$new("name", "value", "important"));

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          self.style = [];
          if (block !== false && block !== nil) {
            if (block.$arity()['$=='](0)) {
              return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
              } else {
              return block.$call(self)
            }
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$empty?', TMP_2 = function() {
          var self = this;

          return self.style['$empty?']();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$each', TMP_3 = function ːeach() {
          var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return ($a = ($b = self.style).$each, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$gradient', TMP_4 = function ːgradient($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('Gradient')).$new.apply($b, Opal.to_a(args));
        }, TMP_4.$$arity = -1);

        Opal.defn(self, '$url', TMP_5 = function ːurl(value) {
          var self = this;

          return "url(" + (value.$to_s().$inspect()) + ")";
        }, TMP_5.$$arity = 1);

        ($a = ($b = ["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"]).$each, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this, $c, $d, TMP_7;
if (name == null) name = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $c).call($d, name)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);

        Opal.defn(self, '$rgb', TMP_8 = function ːrgb(r, g, b) {
          var self = this;

          return "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")";
        }, TMP_8.$$arity = 3);

        Opal.defn(self, '$rgba', TMP_9 = function ːrgba(r, g, b, a) {
          var self = this;

          return "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")";
        }, TMP_9.$$arity = 4);

        ($a = ($c = ["scale", "skew", "translate"]).$each, $a.$$p = (TMP_10 = function(name){var self = TMP_10.$$s || this, $d, $e, TMP_11;
if (name == null) name = nil;
        return ($d = ($e = self).$define_method, $d.$$p = (TMP_11 = function(a, b){var self = TMP_11.$$s || this;

            if (b == null) {
              b = nil;
            }if (a == null) a = nil;
          if (b !== false && b !== nil) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
              } else {
              return "" + (name) + "(" + (a) + ")"
            }}, TMP_11.$$s = self, TMP_11.$$arity = -2, TMP_11), $d).call($e, name)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($c);

        ($a = ($d = ["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"]).$each, $a.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $e, $f, TMP_13;
if (name == null) name = nil;
        return ($e = ($f = self).$define_method, $e.$$p = (TMP_13 = function(value){var self = TMP_13.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $e).call($f, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($d);

        Opal.defn(self, '$background', TMP_16 = function ːbackground($a_rest) {
          var $b, $c, TMP_14, $d, TMP_15, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Gradient')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = $rb_gt(args.$length(), 1)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.$raise($scope.get('NotImplementedError'), "multiple gradients not implemented yet")};
            return ($b = ($c = args.$first()).$each, $b.$$p = (TMP_14 = function(s){var self = TMP_14.$$s || this, $a;
if (s == null) s = nil;
            return self.$style(((($a = s.$name()) !== false && $a !== nil) ? $a : "background-image"), s.$value())}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($c);
          } else if ((($b = Opal.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ($b = ($d = args.$first()).$each, $b.$$p = (TMP_15 = function(sub, value){var self = TMP_15.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
            return self.$style("background-" + (sub), value)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $b).call($d)
            } else {
            return self.$style("background", args)
          };
        }, TMP_16.$$arity = -1);

        Opal.defn(self, '$border', TMP_22 = function ːborder($a_rest) {
          var $b, $c, TMP_17, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = Opal.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($b = ($c = options).$each, $b.$$p = (TMP_17 = function(name, value){var self = TMP_17.$$s || this, $a, $d, TMP_18, $e, TMP_19, $f, TMP_21, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($d = value).$each, $a.$$p = (TMP_18 = function(n, v){var self = TMP_18.$$s || this;
if (n == null) n = nil;if (v == null) v = nil;
                return self.$style("border-" + (name) + "-" + (n), v)}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($d)
                } else {
                return self.$style("border-" + (name), value)
              }}else if ("radius"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($e = value).$each, $a.$$p = (TMP_19 = function(horizontal, value){var self = TMP_19.$$s || this, $f, $g, TMP_20;
if (horizontal == null) horizontal = nil;if (value == null) value = nil;
                return ($f = ($g = value).$each, $f.$$p = (TMP_20 = function(vertical, value){var self = TMP_20.$$s || this;
if (vertical == null) vertical = nil;if (value == null) value = nil;
                  self.$style("-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20), $f).call($g)}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $a).call($e)
                } else {
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}else if ("color"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($f = value).$each, $a.$$p = (TMP_21 = function(name, value){var self = TMP_21.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
                return self.$style("border-" + (name) + "-color", value)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($f)
                } else {
                return self.$style("border-color", value)
              }}else {return self.$style("border-" + (name), value)}})()}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $b).call($c);
            } else {
            return self.$style("border", args)
          };
        }, TMP_22.$$arity = -1);

        Opal.defn(self, '$box', TMP_25 = function ːbox(options) {
          var $a, $b, TMP_23, self = this;

          if ((($a = Opal.get('Hash')['$==='](options)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = options).$each, $a.$$p = (TMP_23 = function(name, value){var self = TMP_23.$$s || this, $c, $d, TMP_24, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("shadow"['$===']($case)) {if ((($c = Opal.get('Array')['$==='](value)) !== nil && (!$c.$$is_boolean || $c == true))) {
                if ((($c = Opal.get('Array')['$==='](value['$[]'](0))) !== nil && (!$c.$$is_boolean || $c == true))) {
                  value = ($c = ($d = value).$map, $c.$$p = (TMP_24 = function(v){var self = TMP_24.$$s || this;
if (v == null) v = nil;
                  return v.$join(" ")}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $c).call($d).$join(", ")
                  } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}else {return self.$style("box-" + (name), value)}})()}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $a).call($b)
            } else {
            return self.$style("box", options)
          };
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$opacity', TMP_26 = function ːopacity(value) {
          var self = this;

          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + (($rb_times(value, 100)).$to_i()) + ")\"");
          return self.$style("filter", "alpha(opacity=" + (($rb_times(value, 100)).$to_i()) + ")");
        }, TMP_26.$$arity = 1);

        Opal.defn(self, '$animation', TMP_28 = function ːanimation($a_rest) {
          var $b, $c, TMP_27, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($b = ($c = options).$each, $b.$$p = (TMP_27 = function(name, value){var self = TMP_27.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            self.$style("-webkit-animation-" + (name), value);
              return self.$style("animation-" + (name), value);}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27), $b).call($c);
            } else {
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          };
        }, TMP_28.$$arity = -1);

        Opal.defn(self, '$transition', TMP_29 = function ːtransition($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        }, TMP_29.$$arity = -1);

        Opal.defn(self, '$user_select', TMP_30 = function ːuser_select($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        }, TMP_30.$$arity = -1);

        Opal.defn(self, '$transform', TMP_31 = function ːtransform($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        }, TMP_31.$$arity = -1);

        Opal.defn(self, '$filter', TMP_32 = function ːfilter($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        }, TMP_32.$$arity = -1);

        Opal.defn(self, '$method_missing', TMP_33 = function ːmethod_missing(name, $a_rest) {
          var $b, $c, $d, TMP_34, self = this, args, $iter = TMP_33.$$p, block = $iter || nil, argument = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_33.$$p = null;
          name = name.$to_s();
          if ((($b = name['$end_with?']("!")) !== nil && (!$b.$$is_boolean || $b == true))) {
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            argument = args.$first();
            if ((($b = Opal.get('Hash')['$==='](argument)) !== nil && (!$b.$$is_boolean || $b == true))) {
              ($b = ($d = argument).$each, $b.$$p = (TMP_34 = function(sub, value){var self = TMP_34.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
              return self.$style("" + (name) + "-" + (sub), value)}, TMP_34.$$s = self, TMP_34.$$arity = 2, TMP_34), $b).call($d)
              } else {
              self.$style(name, argument)
            };
            } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        }, TMP_33.$$arity = -2);

        Opal.defn(self, '$style', TMP_35 = function ːstyle(name, value, important) {
          var $a, self = this;

          if (value == null) {
            value = nil;
          }
          if (important == null) {
            important = self.important;
          }
          if ((($a = Opal.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            value = value.$join(" ")};
          if ((($a = $scope.get('Style')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.style['$<<'](name)
            } else {
            return self.style['$<<']($scope.get('Style').$new(name, value, important))
          };
        }, TMP_35.$$arity = -2);

        Opal.defn(self, '$style!', TMP_36 = function(name, value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          return self.$style(name, value, true);
        }, TMP_36.$$arity = -2);

        return (function($base, $super) {
          function $Gradient(){};
          var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

          var def = self.$$proto, $scope = self.$$scope, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42;

          def.to = def.from = def.start = def.end = nil;
          Opal.defn(self, '$initialize', TMP_37 = function ːinitialize($a_rest) {
            var $b, $c, self = this, args, options = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            options = (function() {if ((($b = Opal.get('Hash')['$==='](args.$last())) !== nil && (!$b.$$is_boolean || $b == true))) {
              return args.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ((($b = ($c = self.to, $c !== false && $c !== nil ?self.from['$!']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.from = self.$other(self.to)
            } else if ((($b = ($c = self.from, $c !== false && $c !== nil ?self.to['$!']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return self.end = args.$shift();
          }, TMP_37.$$arity = -1);

          Opal.defn(self, '$each', TMP_38 = function ːeach() {
            var $a, self = this, $iter = TMP_38.$$p, block = $iter || nil;

            TMP_38.$$p = null;
            block.$call(self.$style("-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ((($a = self['$horizontal?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              block.$call(self.$style("-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
              } else {
              block.$call(self.$style("-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          }, TMP_38.$$arity = 0);

          Opal.defn(self, '$horizontal?', TMP_39 = function() {
            var $a, self = this;

            return ((($a = self.to['$==']("left")) !== false && $a !== nil) ? $a : self.to['$==']("right"));
          }, TMP_39.$$arity = 0);

          Opal.defn(self, '$vertical?', TMP_40 = function() {
            var $a, self = this;

            return ((($a = self.to['$==']("top")) !== false && $a !== nil) ? $a : self.to['$==']("bottom"));
          }, TMP_40.$$arity = 0);

          self.$private();

          Opal.defn(self, '$other', TMP_41 = function ːother(side) {
            var self = this, $case = nil;

            return (function() {$case = side;if ("left"['$===']($case)) {return "right"}else if ("right"['$===']($case)) {return "left"}else if ("top"['$===']($case)) {return "bottom"}else if ("bottom"['$===']($case)) {return "top"}else { return nil }})();
          }, TMP_41.$$arity = 1);

          return (Opal.defn(self, '$style', TMP_42 = function ːstyle($a_rest) {
            var $b, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if (args.$length()['$=='](1)) {
              return $scope.get('Style').$new(nil, args.$first())
              } else {
              return ($b = $scope.get('Style')).$new.apply($b, Opal.to_a(args))
            };
          }, TMP_42.$$arity = -1), nil) && 'style';
        })($scope.base, null);
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/rule"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.definition = nil;
        self.$attr_reader("selector", "media");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(selector, media) {
          var self = this;

          self.selector = selector;
          self.media = media;
          return self.definition = $scope.get('Definition').$new();
        }, TMP_1.$$arity = 2);

        return (Opal.defn(self, '$method_missing', TMP_2 = function ːmethod_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_2.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/font"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.definition = nil;
        self.$attr_reader("name");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(name) {
          var self = this;

          self.name = name;
          self.definition = $scope.get('Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        }, TMP_1.$$arity = 1);

        return (Opal.defn(self, '$method_missing', TMP_2 = function ːmethod_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_2.$$p = null;
          return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_2.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css/animation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

        def.steps = nil;
        (function($base, $super) {
          function $Step(){};
          var self = $Step = $klass($base, $super, 'Step', $Step);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def.definition = nil;
          self.$attr_reader("value");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(value) {
            var self = this;

            self.value = value;
            return self.definition = $scope.get('Definition').$new();
          }, TMP_1.$$arity = 1);

          return (Opal.defn(self, '$method_missing', TMP_2 = function ːmethod_missing($a_rest) {
            var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_2.$$p = null;
            return ($b = ($c = self.definition).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
          }, TMP_2.$$arity = -1), nil) && 'method_missing';
        })($scope.base, $scope.get('BasicObject'));

        self.$attr_reader("name", "steps");

        Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(name) {
          var self = this;

          self.name = name;
          return self.steps = [];
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$step', TMP_4 = function ːstep(value) {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          self.steps['$<<']($scope.get('Step').$new(value));
          return block.$call();
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$from', TMP_5 = function ːfrom(value) {
          var self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((0)['$%']()));
          return block.$call();
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$to', TMP_6 = function ːto(value) {
          var self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((100)['$%']()));
          return block.$call();
        }, TMP_6.$$arity = 1);

        return (Opal.defn(self, '$method_missing', TMP_7 = function ːmethod_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_7.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_7.$$p = null;
          return ($b = ($c = self.steps.$last()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_7.$$arity = -1), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/css"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_7, TMP_8, TMP_9, TMP_10;

      def.media = def.current = def.fonts = def.animations = nil;
      Opal.defs(self, '$selector', TMP_2 = function ːselector(list) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = "";
        ($a = ($b = list).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this, $c;
if (part == null) part = nil;
        if ((($c = part['$start_with?']("&")) !== nil && (!$c.$$is_boolean || $c == true))) {
            return result = $rb_plus(result, part['$[]']($range(1, -1, false)))
            } else {
            return result = $rb_plus(result, $rb_plus(" ", part))
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
          } else {
          return result
        };
      }, TMP_2.$$arity = 1);

      self.$attr_reader("rules", "media", "fonts", "animations");

      Opal.defn(self, '$initialize', TMP_3 = function ːinitialize() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$rule', TMP_4 = function ːrule($a_rest) {
        var $b, $c, $d, TMP_5, TMP_6, self = this, names, $iter = TMP_4.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_4.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          return nil
        };
        if ((($b = ($c = ($d = names)['$any?'], $c.$$p = (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
        return n['$include?'](",")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($d)) !== nil && (!$b.$$is_boolean || $b == true))) {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "selectors cannot contain commas")};
        return ($b = ($c = names).$each, $b.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;
if (name == null) name = nil;
        self.selector['$<<'](name);
          self.current['$<<']($scope.get('Rule').$new($scope.get('CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$media', TMP_7 = function ːmedia(query, $a_rest) {
        var $b, self = this, args, $iter = TMP_7.$$p, block = $iter || nil, old = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_7.$$p = null;
        if (block !== false && block !== nil) {
          $b = [self.media, query], old = $b[0], self.media = $b[1], $b;
          block.$call();
          return self.media = old;
          } else {
          return ($b = self).$method_missing.apply($b, ["media", query].concat(Opal.to_a(args)))
        };
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$font', TMP_8 = function ːfont(name, $a_rest) {
        var $b, self = this, args, $iter = TMP_8.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_8.$$p = null;
        if (block !== false && block !== nil) {
          self.current['$<<']($scope.get('Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
          } else {
          return ($b = self).$method_missing.apply($b, ["font", name].concat(Opal.to_a(args)))
        };
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$animation', TMP_9 = function ːanimation(name, $a_rest) {
        var $b, self = this, args, $iter = TMP_9.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        if (block !== false && block !== nil) {
          self.current['$<<']($scope.get('Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
          } else {
          return ($b = self).$method_missing.apply($b, ["animation", name].concat(Opal.to_a(args)))
        };
      }, TMP_9.$$arity = -2);

      return (Opal.defn(self, '$method_missing', TMP_10 = function ːmethod_missing($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_10.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_10.$$p = null;
        return ($b = ($c = self.current.$last()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_10.$$arity = -1), nil) && 'method_missing';
    })($scope.base, $scope.get('BasicObject'));

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_11;

      def.current = def.roots = nil;
      return (Opal.defn(self, '$style', TMP_11 = function ːstyle() {
        var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        return (((($a = self.current) !== false && $a !== nil) ? $a : self.roots))['$<<'](($a = ($b = $scope.get('CSS')).$new, $a.$$p = block.$to_proc(), $a).call($b));
      }, TMP_11.$$arity = 0), nil) && 'style'
    })($scope.base, $scope.get('BasicObject'));
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    def.position = def.string = def.closed = nil;
    self.$include((($scope.get('IO')).$$scope.get('Readable')));

    self.$include((($scope.get('IO')).$$scope.get('Writable')));

    Opal.defs(self, '$open', TMP_1 = function ːopen(string, mode) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = nil;
      }
      TMP_1.$$p = null;
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_1.$$arity = -1);

    self.$attr_accessor("string");

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(string, mode) {
      var $a, $b, self = this;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = "rw";
      }
      self.string = string;
      self.position = string.$length();
      if ((($a = ($b = mode['$include?']("r"), $b !== false && $b !== nil ?mode['$include?']("w")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "write"
      } else if ((($a = ($b = mode['$include?']("w"), $b !== false && $b !== nil ?mode['$include?']("r")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "read"
        } else {
        return nil
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$eof?', TMP_3 = function() {
      var self = this;

      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_3.$$arity = 0);

    Opal.alias(self, 'eof', 'eof?');

    Opal.defn(self, '$seek', TMP_4 = function ːseek(pos, whence) {
      var $a, self = this, $case = nil;

      if (whence == null) {
        whence = (($scope.get('IO')).$$scope.get('SEEK_SET'));
      }
      $case = whence;if ((($scope.get('IO')).$$scope.get('SEEK_SET'))['$===']($case)) {if ((($a = $rb_ge(pos, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise((($scope.get('Errno')).$$scope.get('EINVAL')))
      };
      self.position = pos;}else if ((($scope.get('IO')).$$scope.get('SEEK_CUR'))['$===']($case)) {if ((($a = $rb_gt($rb_plus(self.position, pos), self.string.$length())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.position = self.string.$length()
        } else {
        self.position = $rb_plus(self.position, pos)
      }}else if ((($scope.get('IO')).$$scope.get('SEEK_END'))['$===']($case)) {if ((($a = $rb_gt(pos, self.string.$length())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.position = 0
        } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_4.$$arity = -2);

    Opal.defn(self, '$tell', TMP_5 = function ːtell() {
      var self = this;

      return self.position;
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'pos', 'tell');

    Opal.alias(self, 'pos=', 'seek');

    Opal.defn(self, '$rewind', TMP_6 = function ːrewind() {
      var self = this;

      return self.$seek(0);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_7 = function ːeach_byte() {
      var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil, i = nil;

      TMP_7.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i).$ord());
      i = $rb_plus(i, 1);};
      return self;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$each_char', TMP_8 = function ːeach_char() {
      var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil, i = nil;

      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i));
      i = $rb_plus(i, 1);};
      return self;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$write', TMP_9 = function ːwrite(string) {
      var self = this, before = nil, after = nil;

      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        self.string = $rb_plus(self.string, string);
        return self.position = $rb_plus(self.position, string.$length());
        } else {
        before = self.string['$[]']($range(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]']($range($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return self.position = $rb_plus(self.position, string.$length());
      };
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$read', TMP_10 = function ːread(length, outbuf) {
      var $a, self = this, string = nil, str = nil;

      if (length == null) {
        length = nil;
      }
      if (outbuf == null) {
        outbuf = nil;
      }
      self.$check_readable();
      if ((($a = self['$eof?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      string = (function() {if (length !== false && length !== nil) {
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
        } else {
        str = self.string['$[]']($range(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if (outbuf !== false && outbuf !== nil) {
        return outbuf.$write(string)
        } else {
        return string
      };
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$close', TMP_11 = function ːclose() {
      var self = this;

      return self.closed = "both";
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$close_read', TMP_12 = function ːclose_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return self.closed = "both"
        } else {
        return self.closed = "read"
      };
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$close_write', TMP_13 = function ːclose_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return self.closed = "both"
        } else {
        return self.closed = "write"
      };
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$closed?', TMP_14 = function() {
      var self = this;

      return self.closed['$==']("both");
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$closed_read?', TMP_15 = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("read")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$closed_write?', TMP_16 = function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("write")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$check_writable', TMP_17 = function ːcheck_writable() {
      var $a, self = this;

      if ((($a = self['$closed_write?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for writing")
        } else {
        return nil
      };
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$check_readable', TMP_18 = function ːcheck_readable() {
      var $a, self = this;

      if ((($a = self['$closed_read?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for reading")
        } else {
        return nil
      };
    }, TMP_18.$$arity = 0), nil) && 'check_readable';
  })($scope.base, $scope.get('IO'))
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio/formatter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$-', '$puts', '$*', '$chomp', '$lines', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$steps', '$animations', '$media', '$selector', '$deindent', '$reverse', '$rules']);
  self.$require("stringio");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_14, $c, TMP_17, $d, TMP_24, $e, TMP_25;

    (function($base, $super) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13;

      def.options = def.io = nil;
      Opal.defs(self, '$to_h', TMP_1 = function ːto_h() {
        var $a, self = this;
        if (self.formatters == null) self.formatters = nil;

        return ((($a = self.formatters) !== false && $a !== nil) ? $a : self.formatters = $hash2([], {}));
      }, TMP_1.$$arity = 0);

      Opal.defs(self, '$for', TMP_2 = function(klass) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        if (block !== false && block !== nil) {
          return self.$to_h()['$[]='](klass, block)
          } else {
          return self.$to_h()['$[]'](klass)
        };
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$options', TMP_3 = function ːoptions(options) {
        var self = this, $iter = TMP_3.$$p, block = $iter || nil, old = nil, result = nil;

        TMP_3.$$p = null;
        old = $scope.get('OPTIONS').$dup();
        $scope.get('Utils')['$deep_merge!']($scope.get('OPTIONS'), options);
        result = block.$call();
        $scope.get('OPTIONS').$replace(old);
        return result;
      }, TMP_3.$$arity = 1);

      Opal.cdecl($scope, 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));

      Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(io, options) {
        var $a, self = this;

        if (io == null) {
          io = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = $scope.get('Hash')['$==='](io)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.io = $scope.get('StringIO').$new();
          self.options = io;
          } else {
          self.io = ((($a = io) !== false && $a !== nil) ? $a : $scope.get('StringIO').$new());
          self.options = options;
        };
        return self.options = $scope.get('OPTIONS').$merge(self.options);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$format', TMP_6 = function ːformat(item) {
        var $a, $b, TMP_5, self = this;

        (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = $scope.get('Formatter').$to_h()).$each, $a.$$p = (TMP_5 = function(klass, block){var self = TMP_5.$$s || this, $c;
if (klass == null) klass = nil;if (block == null) block = nil;
        if ((($c = klass['$==='](item)) !== nil && (!$c.$$is_boolean || $c == true))) {
            block.$call(self, item);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 2, TMP_5), $a).call($b)
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return self;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$to_s', TMP_7 = function ːto_s() {
        var self = this;

        return self.io.$string();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$indent?', TMP_8 = function() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        try {
          return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              return false
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$indent', TMP_9 = function ːindent() {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if ((($a = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (block !== false && block !== nil) {
            ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)));
            block.$call();
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)));
            } else {
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)))
          }
        } else if (block !== false && block !== nil) {
          return block.$call()
          } else {
          return nil
        };
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$deindent', TMP_10 = function ːdeindent() {
        var $a, $b, self = this;

        if ((($a = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)))
          } else {
          return nil
        };
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$print', TMP_12 = function ːprint(text) {
        var $a, $b, TMP_11, self = this, level = nil;

        if ((($a = level = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = text.$lines()).$each, $a.$$p = (TMP_11 = function(line){var self = TMP_11.$$s || this;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;
if (line == null) line = nil;
          return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)
          } else {
          return self.io.$print(text)
        };
      }, TMP_12.$$arity = 1);

      return (Opal.defn(self, '$escape', TMP_13 = function ːescape(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}));
      }, TMP_13.$$arity = 1), nil) && 'escape';
    })($scope.base, null);

    ($a = ($b = $scope.get('Formatter')).$for, $a.$$p = (TMP_14 = function(f, item){var self = TMP_14.$$s || this, $c, $d, TMP_15, $case = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $case = item.$version();if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      ($c = ($d = f).$indent, $c.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $e, $f, TMP_16;

      return ($e = ($f = item).$each, $e.$$p = (TMP_16 = function(root){var self = TMP_16.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $e).call($f)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $c).call($d);
      return f.$print("</html>");}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b, $scope.get('HTML'));

    ($a = ($c = $scope.get('Formatter')).$for, $a.$$p = (TMP_17 = function(f, item){var self = TMP_17.$$s || this, $d, $e, $f, $g, TMP_18, TMP_19, TMP_20, name = nil, attributes = nil, class_names = nil, attrs = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $e = ($f = ($g = item).$instance_eval, $f.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

      return [self.name, self.attributes, self.class_names]}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $f).call($g), $d = Opal.to_ary($e), name = ($d[0] == null ? nil : $d[0]), attributes = ($d[1] == null ? nil : $d[1]), class_names = ($d[2] == null ? nil : $d[2]), $e;
      if ((($d = ($e = attributes['$empty?'](), $e !== false && $e !== nil ?class_names['$empty?']() : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
        f.$print("<" + (name) + ">")
        } else {
        attrs = ($d = ($e = attributes).$map, $d.$$p = (TMP_19 = function(key, value){var self = TMP_19.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\""}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $d).call($e);
        if ((($d = class_names['$empty?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
          } else {
          attrs['$<<']("class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ((($d = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase())) !== nil && (!$d.$$is_boolean || $d == true))) {
        return nil;};
      ($d = ($f = f).$indent, $d.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $h, $i, $j, TMP_21, TMP_22, inner = nil;

      if ((($h = inner = ($i = ($j = item).$instance_eval, $i.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;
          if (self.inner_html == null) self.inner_html = nil;

        return self.inner_html}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $i).call($j)) !== nil && (!$h.$$is_boolean || $h == true))) {
          return f.$print(inner)
          } else {
          return ($h = ($i = item).$each, $h.$$p = (TMP_22 = function(child){var self = TMP_22.$$s || this, $k, $l, TMP_23, $case = nil;
if (child == null) child = nil;
          return (function() {$case = child;if ($scope.get('String')['$===']($case)) {return f.$print(f.$escape(child))}else if ($scope.get('CSS')['$===']($case)) {f.$print("<style>");
            ($k = ($l = f).$indent, $k.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

            return f.$format(child)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $k).call($l);
            return f.$print("</style>");}else {return f.$format(child)}})()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $h).call($i)
        }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $d).call($f);
      return f.$print("</" + (name) + ">");}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $a).call($c, (($scope.get('HTML')).$$scope.get('Element')));

    ($a = ($d = $scope.get('Formatter')).$for, $a.$$p = (TMP_24 = function(f, style){var self = TMP_24.$$s || this, $e;
if (f == null) f = nil;if (style == null) style = nil;
    return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ((($e = style.$important()) !== nil && (!$e.$$is_boolean || $e == true))) {
        return " !important"
        } else {
        return nil
      }; return nil; })()) + ";")}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($d, (((($scope.get('CSS')).$$scope.get('Definition'))).$$scope.get('Style')));

    return ($a = ($e = $scope.get('Formatter')).$for, $a.$$p = (TMP_25 = function(f, item){var self = TMP_25.$$s || this, $f, $g, TMP_26, $h, TMP_29, $i, TMP_33;
if (f == null) f = nil;if (item == null) item = nil;
    ($f = ($g = item.$fonts()).$each, $f.$$p = (TMP_26 = function(font){var self = TMP_26.$$s || this, $h, $i, TMP_27;
if (font == null) font = nil;
      f.$print("@font-face {");
        ($h = ($i = f).$indent, $h.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $j, $k, TMP_28;

        return ($j = ($k = font).$each, $j.$$p = (TMP_28 = function(style){var self = TMP_28.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $j).call($k)}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $h).call($i);
        return f.$print("}");}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $f).call($g);
      ($f = ($h = item.$animations()).$each, $f.$$p = (TMP_29 = function(animation){var self = TMP_29.$$s || this, $i, $j, TMP_30;
if (animation == null) animation = nil;
      return ($i = ($j = ["", "-webkit-", "-moz-", "-o-"]).$each, $i.$$p = (TMP_30 = function(platform){var self = TMP_30.$$s || this, $k, $l, TMP_31;
if (platform == null) platform = nil;
        f.$print("@" + (platform) + "keyframes " + (animation.$name()) + " {");
          ($k = ($l = animation.$steps()).$each, $k.$$p = (TMP_31 = function(step){var self = TMP_31.$$s || this, $m, $n, TMP_32;
if (step == null) step = nil;
          f.$print("" + (step.$value()) + " {");
            ($m = ($n = step).$each, $m.$$p = (TMP_32 = function(style){var self = TMP_32.$$s || this;
if (style == null) style = nil;
            return f.$format(style)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $m).call($n);
            return f.$print("}");}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $k).call($l);
          return f.$print("}");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $i).call($j)}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $f).call($h);
      return ($f = ($i = item.$rules().$reverse()).$each, $f.$$p = (TMP_33 = function(rule){var self = TMP_33.$$s || this, $j, $k, TMP_34, m = nil;
if (rule == null) rule = nil;
      if ((($j = rule['$empty?']()) !== nil && (!$j.$$is_boolean || $j == true))) {
          return nil;};
        if ((($j = m = rule.$media()) !== nil && (!$j.$$is_boolean || $j == true))) {
          f.$print("@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        ($j = ($k = f).$indent, $j.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $l, $m, TMP_35;

        return ($l = ($m = rule).$each, $l.$$p = (TMP_35 = function(style){var self = TMP_35.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $l).call($m)}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $j).call($k);
        f.$print("}");
        if ((($j = rule.$media()) !== nil && (!$j.$$is_boolean || $j == true))) {
          f.$print("}");
          return f.$deindent();
          } else {
          return nil
        };}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $f).call($i);}, TMP_25.$$s = self, TMP_25.$$arity = 2, TMP_25), $a).call($e, $scope.get('CSS'));
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["paggio"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defs(self, '$options', TMP_1 = function ːoptions(options) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = $scope.get('Formatter')).$options, $a.$$p = block.$to_proc(), $a).call($b, options);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$indent', TMP_2 = function ːindent(options) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return ($a = ($b = self).$options, $a.$$p = block.$to_proc(), $a).call($b, $hash2(["indent"], {"indent": options}));
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$css', TMP_3 = function ːcss($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      return $scope.get('Formatter').$new().$format(($b = ($c = $scope.get('CSS')).$new, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))).$to_s();
    }, TMP_3.$$arity = -1);

    Opal.defs(self, '$html', TMP_4 = function ːhtml($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      return $scope.get('Formatter').$new().$format(($b = ($c = $scope.get('HTML')).$new, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))).$to_s();
    }, TMP_4.$$arity = -1);

    return (Opal.defs(self, '$html!', TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      return ($a = ($b = $scope.get('Formatter').$new()).$tap, $a.$$p = (TMP_6 = function(f){var self = TMP_6.$$s || this, $c, $d, TMP_7, $e, $f;
if (f == null) f = nil;
      return ($c = ($d = ($e = ($f = $scope.get('HTML')).$new, $e.$$p = block.$to_proc(), $e).call($f)).$each, $c.$$p = (TMP_7 = function(root){var self = TMP_7.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $c).call($d)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b).$to_s();
    }, TMP_5.$$arity = 0), nil) && 'html!';
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.2.0")
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/utils"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Size', $scope.get('Struct').$new("width", "height"));

    Opal.cdecl($scope, 'Position', $scope.get('Struct').$new("x", "y"));
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$encode_uri', TMP_1 = function ːencode_uri() {
      var self = this;

      return self.$to_s().$encode_uri();
    }, TMP_1.$$arity = 0);

    return (Opal.defn(self, '$encode_uri_component', TMP_2 = function ːencode_uri_component() {
      var self = this;

      return self.$to_s().$encode_uri_component();
    }, TMP_2.$$arity = 0), nil) && 'encode_uri_component';
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defn(self, '$encode_uri_component', TMP_3 = function ːencode_uri_component() {
      var self = this;

      return encodeURIComponent(self);
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$encode_uri', TMP_4 = function ːencode_uri() {
      var self = this;

      return encodeURI(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$decode_uri_component', TMP_5 = function ːdecode_uri_component() {
      var self = this;

      return decodeURIComponent(self);
    }, TMP_5.$$arity = 0);

    return (Opal.defn(self, '$decode_uri', TMP_6 = function ːdecode_uri() {
      var self = this;

      return decodeURI(self);
    }, TMP_6.$$arity = 0), nil) && 'decode_uri';
  })($scope.base, null);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_10;

    Opal.defs(self, '$decode_uri', TMP_8 = function ːdecode_uri(string) {
      var $a, $b, TMP_7, self = this;

      return self['$[]'](($a = ($b = string.$split("&")).$map, $a.$$p = (TMP_7 = function(part){var self = TMP_7.$$s || this, $c, $d, name = nil, value = nil;
if (part == null) part = nil;
      $d = part.$split("="), $c = Opal.to_ary($d), name = ($c[0] == null ? nil : $c[0]), value = ($c[1] == null ? nil : $c[1]), $d;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b));
    }, TMP_8.$$arity = 1);

    return (Opal.defn(self, '$encode_uri', TMP_10 = function ːencode_uri() {
      var $a, $b, TMP_9, self = this;

      return ($a = ($b = self).$map, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b).$join("&");
    }, TMP_10.$$arity = 0), nil) && 'encode_uri';
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/support"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  Opal.cdecl($scope, 'BROWSER_ENGINE', (function() {
  try {return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase() } catch ($err) { 
    if (Opal.rescue($err, [$scope.get('StandardError')])) {
    return "unknown"
    } else { throw $err; } }})());
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    self.support = {};

    Opal.defs(self, '$supports?', TMP_1 = function(feature) {
      var $a, $b, self = this, support = nil, $case = nil;
      if (self.support == null) self.support = nil;

      if ((($a = (typeof(self.support[feature]) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.support[feature]};
      support = (function() {$case = feature;if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}else if ("Window.send (Asynchronous)"['$===']($case)) {if ((($a = ($b = (typeof(window.postMessage) !== "undefined"), $b !== false && $b !== nil ?(typeof(window.importScripts) !== "undefined")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
        } else {
        return nil
      }}else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script");}else if ("Event.constructor"['$===']($case)) {try {
        new MouseEvent("click");
        return true;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }}else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window;}else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}else { return nil }})();
      return self.support[feature] = support;
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$loaded?', TMP_2 = function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}else { return nil }})();
    }, TMP_2.$$arity = 1);
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$include?', '$callback=', '$on!', '$delegate', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defs(self, '$new', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, data = nil;

          TMP_1.$$p = null;
          data = ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Definition)), $a.$$p = null, $a).call($b, { bubbles: true, cancelable: true });
          if (block !== false && block !== nil) {
            block.$call(data)};
          return data.$to_n();
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$bubbles=', TMP_2 = function(value) {
          var self = this;

          return self["native"].bubbles = value;
        }, TMP_2.$$arity = 1);

        return (Opal.defn(self, '$cancelable=', TMP_3 = function(value) {
          var self = this;

          return self["native"].cancelable = value;
        }, TMP_3.$$arity = 1), nil) && 'cancelable=';
      })($scope.base, null);

      return (function($base) {
        var $Target, self = $Target = $module($base, 'Target');

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_7, TMP_10, TMP_19, TMP_22, $a, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_32, TMP_33, TMP_35, TMP_36, TMP_37, TMP_38, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_46;

        Opal.defs(self, '$converters', TMP_4 = function ːconverters() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return ((($a = self.converters) !== false && $a !== nil) ? $a : self.converters = []);
        }, TMP_4.$$arity = 0);

        Opal.defs(self, '$register', TMP_5 = function ːregister() {
          var self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return self.$converters()['$<<'](block);
        }, TMP_5.$$arity = 0);

        Opal.defs(self, '$convert', TMP_7 = function ːconvert(value) {try {

          var $a, $b, TMP_6, self = this;

          if ((($a = self['$native?'](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return value
          };
          ($a = ($b = self.$converters()).$each, $a.$$p = (TMP_6 = function(block){var self = TMP_6.$$s || this, $c, result = nil;
if (block == null) block = nil;
          if ((($c = result = block.$call(value)) !== nil && (!$c.$$is_boolean || $c == true))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = 1);

        Opal.defs(self, '$included', TMP_10 = function ːincluded(klass) {
          var $a, $b, TMP_8, self = this;

          return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

          return (Opal.defs(self, '$target', TMP_9 = function ːtarget() {
              var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

              TMP_9.$$p = null;
              return ($a = ($b = (($scope.get('Event')).$$scope.get('Target'))).$register, $a.$$p = block.$to_proc(), $a).call($b);
            }, TMP_9.$$arity = 0), nil) && 'target'}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
        }, TMP_10.$$arity = 1);

        (function($base, $super) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16;

          def.proc = def.name = nil;
          self.$attr_reader("target", "name", "selector");

          Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(target, name, selector) {
            var self = this, $iter = TMP_11.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil;
            }
            TMP_11.$$p = null;
            self.target = target;
            self.name = name;
            self.selector = selector;
            return self.block = block;
          }, TMP_11.$$arity = -3);

          Opal.defn(self, '$call', TMP_12 = function ːcall(event) {
            var self = this;

            return self.$to_proc().$call(event);
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$to_proc', TMP_14 = function ːto_proc() {
            var $a, $b, $c, TMP_13, self = this;

            return ((($a = self.proc) !== false && $a !== nil) ? $a : self.proc = ($b = ($c = self).$lambda, $b.$$p = (TMP_13 = function(event){var self = TMP_13.$$s || this, $d;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          
              event = $scope.get('Event').$new(event, self);
              if ((($d = event['$stopped?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
                } else {
                ($d = self.block).$call.apply($d, [event].concat(Opal.to_a(event.$arguments())))
              };
              return event['$prevented?']()['$!']();}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $b).call($c));
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$event', TMP_15 = function ːevent() {
            var self = this;

            return $scope.get('Event').$class_for(self.name);
          }, TMP_15.$$arity = 0);

          return (Opal.defn(self, '$off', TMP_16 = function ːoff() {
            var self = this;

            return self.$target().$off(self);
          }, TMP_16.$$arity = 0), nil) && 'off';
        })($scope.base, null);

        (function($base, $super) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18;

          def.target = def.name = def.pair = nil;
          Opal.defn(self, '$initialize', TMP_17 = function ːinitialize(target, name, pair) {
            var self = this;

            self.target = target;
            self.name = name;
            return self.pair = pair;
          }, TMP_17.$$arity = 3);

          return (Opal.defn(self, '$off', TMP_18 = function ːoff() {
            var $a, self = this, delegate = nil;

            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ((($a = delegate.$last()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }, TMP_18.$$arity = 0), nil) && 'off';
        })($scope.base, null);

        Opal.cdecl($scope, 'Delegates', $scope.get('Struct').$new("callback", "handlers"));

        Opal.defn(self, '$on', TMP_19 = function ːon(name, selector) {
          var $a, $b, $c, $d, TMP_20, $e, TMP_21, self = this, $iter = TMP_19.$$p, block = $iter || nil, delegate = nil, pair = nil, callback = nil;

          if (selector == null) {
            selector = nil;
          }
          TMP_19.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          if (selector !== false && selector !== nil) {
            if ((($a = delegate = self.$delegated()['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return $scope.get('Delegate').$new(self, name, pair);
              } else {
              delegate = self.$delegated()['$[]='](name, $scope.get('Delegates').$new());
              if ((($a = ["blur", "focus"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                (($a = [($c = ($d = self)['$on!'], $c.$$p = (TMP_20 = function(e){var self = TMP_20.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $c).call($d, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
                } else {
                (($a = [($c = ($e = self).$on, $c.$$p = (TMP_21 = function(e){var self = TMP_21.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($e, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
              };
              pair = [selector, block];
              (($a = [[pair]]), $b = delegate, $b['$handlers='].apply($b, $a), $a[$a.length-1]);
              return $scope.get('Delegate').$new(self, name, pair);
            }
            } else {
            callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name, selector);
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        }, TMP_19.$$arity = -2);

        Opal.defn(self, '$on!', TMP_22 = function(name) {
          var $a, $b, self = this, $iter = TMP_22.$$p, block = $iter || nil, callback = nil;

          TMP_22.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name);
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        }, TMP_22.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', TMP_23 = function ːattach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          }, TMP_23.$$arity = 1);

          Opal.defn(self, '$attach!', TMP_24 = function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          }, TMP_24.$$arity = 1);
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', TMP_25 = function ːattach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$==']($scope.get('Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          ;
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc());
            };
            return callback;
          }, TMP_25.$$arity = 1);

          Opal.defn(self, '$attach!', TMP_26 = function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            $case = callback.$name();if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc());}else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc());}else {self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          }, TMP_26.$$arity = 1);
          } else {
          Opal.defn(self, '$attach', TMP_27 = function ːattach($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_27.$$arity = -1);

          Opal.defn(self, '$attach!', TMP_28 = function($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_28.$$arity = -1);
        };

        Opal.defn(self, '$off', TMP_32 = function ːoff(what) {
          var $a, $b, TMP_29, $c, TMP_30, $d, TMP_31, self = this, $case = nil;

          if (what == null) {
            what = nil;
          }
          return (function() {$case = what;if ($scope.get('Callback')['$===']($case)) {self.$callbacks().$delete(what);
          return self.$detach(what);}else if ($scope.get('String')['$===']($case)) {if ((($a = ((($b = what['$include?']("*")) !== false && $b !== nil) ? $b : what['$include?']("?"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$off($scope.get('Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            what = $scope.get('Event').$name_for(what);
            return ($a = ($b = self.$callbacks()).$delete_if, $a.$$p = (TMP_29 = function(callback){var self = TMP_29.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
          }}else if ($scope.get('Regexp')['$===']($case)) {return ($a = ($c = self.$callbacks()).$delete_if, $a.$$p = (TMP_30 = function(callback){var self = TMP_30.$$s || this, $d;
if (callback == null) callback = nil;
          if ((($d = callback.$name()['$=~'](what)) !== nil && (!$d.$$is_boolean || $d == true))) {
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($c)}else {($a = ($d = self.$callbacks()).$each, $a.$$p = (TMP_31 = function(callback){var self = TMP_31.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($d);
          return self.$callbacks().$clear();}})();
        }, TMP_32.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("Event.removeListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', TMP_33 = function ːdetach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false);
          }, TMP_33.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.detach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', TMP_35 = function ːdetach(callback) {
            var $a, $b, $c, TMP_34, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              if ((($a = ($b = ($c = self.$callbacks())['$none?'], $b.$$p = (TMP_34 = function(c){var self = TMP_34.$$s || this;
if (c == null) c = nil;
              return c.$event()['$==']($scope.get('Custom'))}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            ;
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc());
            };
          }, TMP_35.$$arity = 1)
          } else {
          Opal.defn(self, '$detach', TMP_36 = function ːdetach(callback) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_36.$$arity = 1)
        };

        Opal.defn(self, '$trigger', TMP_37 = function ːtrigger(event, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_37.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_37.$$p = null;
          if ((($b = event['$is_a?']($scope.get('String'))) !== nil && (!$b.$$is_boolean || $b == true))) {
            event = ($b = ($c = $scope.get('Event')).$create, $b.$$p = block.$to_proc(), $b).apply($c, [event].concat(Opal.to_a(args)))};
          return self.$dispatch(event);
        }, TMP_37.$$arity = -2);

        Opal.defn(self, '$trigger!', TMP_38 = function(event, $a_rest) {
          var $b, $c, TMP_39, self = this, args, $iter = TMP_38.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_38.$$p = null;
          return ($b = ($c = self).$trigger, $b.$$p = (TMP_39 = function(e){var self = TMP_39.$$s || this, $a, $d;
if (e == null) e = nil;
          if (block !== false && block !== nil) {
              block.$call(e)};
            return (($a = [false]), $d = e, $d['$bubbles='].apply($d, $a), $a[$a.length-1]);}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $b).apply($c, [event].concat(Opal.to_a(args)));
        }, TMP_38.$$arity = -2);

        if ((($a = $scope.get('Browser')['$supports?']("Event.dispatch")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', TMP_40 = function ːdispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n());
          }, TMP_40.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.fire")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', TMP_41 = function ːdispatch(event) {
            var $a, self = this;
            if (self["native"] == null) self["native"] = nil;

            if ((($a = $scope.get('Custom')['$==='](event)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n());
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n());
            };
          }, TMP_41.$$arity = 1)
          } else {
          Opal.defn(self, '$dispatch', TMP_42 = function ːdispatch($a_rest) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          }, TMP_42.$$arity = -1)
        };

        self.$private();

        Opal.defn(self, '$callbacks', TMP_43 = function ːcallbacks() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      ;
        }, TMP_43.$$arity = 0);

        Opal.defn(self, '$delegated', TMP_44 = function ːdelegated() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      ;
        }, TMP_44.$$arity = 0);

        Opal.defn(self, '$delegate', TMP_46 = function ːdelegate(delegates, event, element) {
          var $a, $b, TMP_45, self = this;

          if (element == null) {
            element = event.$target();
          }
          if ((($a = ((($b = element['$nil?']()) !== false && $b !== nil) ? $b : element['$=='](event.$on()))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = delegates.$handlers()).$each, $a.$$p = (TMP_45 = function(selector, block){var self = TMP_45.$$s || this, $c, $d, new$ = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ((($c = element['$=~'](selector)) !== nil && (!$c.$$is_boolean || $c == true))) {
              new$ = event.$dup();
              (($c = [element]), $d = new$, $d['$on='].apply($d, $c), $c[$c.length-1]);
              return ($c = block).$call.apply($c, [new$].concat(Opal.to_a(new$.$arguments())));
              } else {
              return nil
            }}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45), $a).call($b);
          return self.$delegate(delegates, event, element.$parent());
        }, TMP_46.$$arity = -3);
      })($scope.base);
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/ui"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.UI");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$detail=', TMP_2 = function(value) {
            var self = this;

            return self["native"].detail = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$view=', TMP_3 = function(value) {
            var self = this;

            return self["native"].view = value;
          }, TMP_3.$$arity = 1), nil) && 'view=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new UIEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("detail");

        return self.$alias_native("view");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']();
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_2 = function(value) {
              var self = this;

              return self["native"].clientX = value;
            }, TMP_2.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_3 = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, TMP_3.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_4 = function(value) {
              var self = this;

              return self["native"].layerX = value;
            }, TMP_4.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_5 = function(value) {
              var self = this;

              return self["native"].layerY = value;
            }, TMP_5.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_6 = function(value) {
              var self = this;

              return self["native"].offsetX = value;
            }, TMP_6.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_7 = function(value) {
              var self = this;

              return self["native"].offsetY= value;
            }, TMP_7.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_8 = function(value) {
              var self = this;

              return self["native"].pageX = value;
            }, TMP_8.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_9 = function(value) {
              var self = this;

              return self["native"].pageY = value;
            }, TMP_9.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_10 = function(value) {
              var self = this;

              return self["native"].screenX = value;
            }, TMP_10.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_11 = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, TMP_11.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_12 = function(value) {
              var self = this;

              return self["native"].x = value;
            }, TMP_12.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_13 = function(value) {
              var self = this;

              return self["native"].y = value;
            }, TMP_13.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$x=', TMP_14 = function(value) {
            var self = this;

            return self["native"].screenX = value;
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$y=', TMP_15 = function(value) {
            var self = this;

            return self["native"].screenY = value;
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$alt!', TMP_16 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_17 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_18 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$button=', TMP_19 = function(value) {
            var self = this;

            return self["native"].button = value;
          }, TMP_19.$$arity = 1);

          Opal.defn(self, '$client', TMP_20 = function ːclient() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$layer', TMP_21 = function ːlayer() {
            var self = this;

            return $scope.get('Layer').$new(self["native"]);
          }, TMP_21.$$arity = 0);

          Opal.defn(self, '$offset', TMP_22 = function ːoffset() {
            var self = this;

            return $scope.get('Offset').$new(self["native"]);
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$page', TMP_23 = function ːpage() {
            var self = this;

            return $scope.get('Page').$new(self["native"]);
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$screen', TMP_24 = function ːscreen() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$ancestor', TMP_25 = function ːancestor() {
            var self = this;

            return $scope.get('Ancestor').$new(self["native"]);
          }, TMP_25.$$arity = 0);

          Opal.defn(self, '$related=', TMP_26 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$try_convert(elem);
          }, TMP_26.$$arity = 1);

          Opal.defn(self, '$from=', TMP_27 = function(elem) {
            var self = this;

            return self["native"].fromElement = $scope.get('Native').$try_convert(elem);
          }, TMP_27.$$arity = 1);

          return (Opal.defn(self, '$to=', TMP_28 = function(elem) {
            var self = this;

            return self["native"].toElement = $scope.get('Native').$try_convert(elem);
          }, TMP_28.$$arity = 1), nil) && 'to=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_29 = function ːconstruct(name, desc) {
              var self = this;

              return new MouseEvent(name, desc);
            }, TMP_29.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_30 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            }, TMP_30.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', TMP_31 = function ːclient() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$layer', TMP_32 = function ːlayer() {
          var $a, self = this;

          if ((($a = self["native"].layerX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].layerX, self["native"].layerY)
          };
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$offset', TMP_33 = function ːoffset() {
          var $a, self = this;

          if ((($a = self["native"].offsetX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].offsetX, self["native"].offsetY)
          };
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$page', TMP_34 = function ːpage() {
          var $a, self = this;

          if ((($a = self["native"].pageX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].pageX, self["native"].pageY)
          };
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$screen', TMP_35 = function ːscreen() {
          var $a, self = this;

          if ((($a = self["native"].screenX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
          };
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$ancestor', TMP_36 = function ːancestor() {
          var $a, self = this;

          if ((($a = self["native"].x == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].x, self["native"].y)
          };
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$x', TMP_37 = function ːx() {
          var self = this;

          return self.$screen().$x();
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$y', TMP_38 = function ːy() {
          var self = this;

          return self.$screen().$y();
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$related', TMP_39 = function ːrelated() {
          var $a, self = this;

          if ((($a = self["native"].relatedTarget == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          };
        }, TMP_39.$$arity = 0);

        Opal.defn(self, '$from', TMP_40 = function ːfrom() {
          var $a, self = this;

          if ((($a = self["native"].fromElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          };
        }, TMP_40.$$arity = 0);

        Opal.defn(self, '$to', TMP_41 = function ːto() {
          var $a, self = this;

          if ((($a = self["native"].toElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          };
        }, TMP_41.$$arity = 0);

        Opal.defn(self, '$click?', TMP_42 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click");
        }, TMP_42.$$arity = 0);

        Opal.defn(self, '$double_click?', TMP_43 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick");
        }, TMP_43.$$arity = 0);

        Opal.defn(self, '$down?', TMP_44 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown");
        }, TMP_44.$$arity = 0);

        Opal.defn(self, '$enter?', TMP_45 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter");
        }, TMP_45.$$arity = 0);

        Opal.defn(self, '$leave?', TMP_46 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave");
        }, TMP_46.$$arity = 0);

        Opal.defn(self, '$move?', TMP_47 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove");
        }, TMP_47.$$arity = 0);

        Opal.defn(self, '$out?', TMP_48 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout");
        }, TMP_48.$$arity = 0);

        Opal.defn(self, '$over?', TMP_49 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover");
        }, TMP_49.$$arity = 0);

        Opal.defn(self, '$up?', TMP_50 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup");
        }, TMP_50.$$arity = 0);

        return (Opal.defn(self, '$show?', TMP_51 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show");
        }, TMP_51.$$arity = 0), nil) && 'show?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Keyboard");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

          def["native"] = nil;
          Opal.defn(self, '$alt!', TMP_2 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_4 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$shift!', TMP_5 = function() {
            var self = this;

            return self["native"].shiftKey = true;
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$code=', TMP_6 = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code;
          }, TMP_6.$$arity = 1);

          Opal.defn(self, '$key=', TMP_7 = function(key) {
            var self = this;

            return self["native"].key = key;
          }, TMP_7.$$arity = 1);

          Opal.defn(self, '$char=', TMP_8 = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$;
          }, TMP_8.$$arity = 1);

          Opal.defn(self, '$repeat!', TMP_9 = function() {
            var self = this;

            return self["native"].repeat = true;
          }, TMP_9.$$arity = 0);

          return (Opal.defn(self, '$locale=', TMP_10 = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, TMP_10.$$arity = 1), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_11 = function ːconstruct(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc);
            }, TMP_11.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_12 = function ːconstruct(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            }, TMP_12.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("locale");

        self.$alias_native("repeat?", "repeat");

        Opal.defn(self, '$key', TMP_13 = function ːkey() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil;
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$code', TMP_14 = function ːcode() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$char', TMP_15 = function() {
          var $a, self = this;

          return self["native"].char || self["native"].charCode || (function() {if ((($a = self.$code()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })();
        }, TMP_15.$$arity = 0);

        Opal.alias(self, 'to_i', 'key');

        Opal.defn(self, '$down?', TMP_16 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown");
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$press?', TMP_17 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress");
        }, TMP_17.$$arity = 0);

        return (Opal.defn(self, '$up?', TMP_18 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup");
        }, TMP_18.$$arity = 0), nil) && 'up?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/focus"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5, TMP_6;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Focus");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$view=', TMP_2 = function(value) {
            var self = this;

            return self["native"].view = $scope.get('Native').$convert(value);
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$related=', TMP_3 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }, TMP_3.$$arity = 1), nil) && 'related=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new FocusEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        return (Opal.defn(self, '$related', TMP_6 = function ːrelated() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }, TMP_6.$$arity = 0), nil) && 'related';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_7;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']();
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$x=', TMP_2 = function(value) {
            var self = this;

            return self["native"].deltaX = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$y=', TMP_3 = function(value) {
            var self = this;

            return self["native"].deltaY = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$z=', TMP_4 = function(value) {
            var self = this;

            return self["native"].deltaZ = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$mode=', TMP_5 = function(value) {
            var self = this, $case = nil;

            value = (function() {$case = value;if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL;}else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE;}else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE;}else { return nil }})();
            return self["native"].deltaMode = value;
          }, TMP_5.$$arity = 1), nil) && 'mode=';
        })($scope.base, $scope.get('Definition'));

        Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
          var self = this;

          return new WheelEvent(name, desc);
        }, TMP_6.$$arity = 2);

        self.$alias_native("x", "deltaX");

        self.$alias_native("y", "deltaY");

        self.$alias_native("z", "deltaZ");

        return (Opal.defn(self, '$mode', TMP_7 = function ːmode() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}else { return nil }})();
        }, TMP_7.$$arity = 0), nil) && 'mode';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/composition"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Composition");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$locale=', TMP_3 = function(value) {
            var self = this;

            return self["native"].locale = value;
          }, TMP_3.$$arity = 1), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("data");

        self.$alias_native("locale");

        Opal.defn(self, '$start?', TMP_6 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart");
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$update?', TMP_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate");
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$end?', TMP_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend");
        }, TMP_8.$$arity = 0), nil) && 'end?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/animation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Animation");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$animation=', TMP_2 = function(value) {
            var self = this;

            return self["native"].animationName = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$elapsed=', TMP_3 = function(value) {
            var self = this;

            return self["native"].elapsedTime = value;
          }, TMP_3.$$arity = 1), nil) && 'elapsed=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc);
            }, TMP_4.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("name", "animationName");

        return self.$alias_native("elapsed", "elapsedTime");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.AudioProcessing");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$time=', TMP_2 = function(value) {
            var self = this;

            return self["native"].playbackTime = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$input=', TMP_3 = function(value) {
            var self = this;

            return self["native"].inputBuffer = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$output=', TMP_4 = function(value) {
            var self = this;

            return self["native"].outputBuffer = value;
          }, TMP_4.$$arity = 1), nil) && 'output=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc);
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("time", "playbackTime");

        self.$alias_native("input", "inputBuffer");

        return self.$alias_native("output", "outputBuffer");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.BeforeUnload");
        }, TMP_1.$$arity = 0);

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', TMP_2 = function ːconstruct(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc);
            }, TMP_2.$$arity = 2), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Clipboard");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$type=', TMP_3 = function(value) {
            var self = this;

            return self["native"].dataType = value;
          }, TMP_3.$$arity = 1), nil) && 'type=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc);
            }, TMP_4.$$arity = 2)}};

        self.$alias_native("data");

        return self.$alias_native("type", "dataType");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceLight");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1), nil) && 'value='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function ːconstruct(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc);
            }, TMP_3.$$arity = 2)}};

        return self.$alias_native("value");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceMotion");
        }, TMP_1.$$arity = 0);

        Opal.cdecl($scope, 'Acceleration', $scope.get('Struct').$new("x", "y", "z"));

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$acceleration=', TMP_2 = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n();
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$acceleration_with_gravity=', TMP_3 = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n();
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$rotation=', TMP_4 = function(value) {
            var self = this;

            return self["native"].rotationRate = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$interval=', TMP_5 = function(value) {
            var self = this;

            return self["native"].interval = value;
          }, TMP_5.$$arity = 1), nil) && 'interval=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("acceleration");

        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");

        self.$alias_native("rotation", "rotationRate");

        return self.$alias_native("interval");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceOrientation");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$absolute=', TMP_2 = function(value) {
            var self = this;

            return self["native"].absolute = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$alpha=', TMP_3 = function(value) {
            var self = this;

            return self["native"].alpha = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$beta=', TMP_4 = function(value) {
            var self = this;

            return self["native"].beta = value;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$gamma=', TMP_5 = function(value) {
            var self = this;

            return self["native"].gamma = value;
          }, TMP_5.$$arity = 1), nil) && 'gamma=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("absolute");

        self.$alias_native("alpha");

        self.$alias_native("beta");

        return self.$alias_native("gamma");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceProximity");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$min=', TMP_3 = function(value) {
            var self = this;

            return self["native"].min = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$max=', TMP_4 = function(value) {
            var self = this;

            return self["native"].max = value;
          }, TMP_4.$$arity = 1), nil) && 'max=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc);
            }, TMP_5.$$arity = 2)}};

        self.$alias_native("value");

        self.$alias_native("min");

        return self.$alias_native("max");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/drag"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Drag");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_2 = function(value) {
              var self = this;

              return self["native"].clientX = value;
            }, TMP_2.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_3 = function(value) {
              var self = this;

              return self["native"].clientY = value;
            }, TMP_3.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', TMP_4 = function(value) {
              var self = this;

              return self["native"].screenX = value;
            }, TMP_4.$$arity = 1);

            return (Opal.defn(self, '$y=', TMP_5 = function(value) {
              var self = this;

              return self["native"].screenY = value;
            }, TMP_5.$$arity = 1), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$alt!', TMP_6 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_7 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_8 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$button=', TMP_9 = function(value) {
            var self = this;

            return self["native"].button = value;
          }, TMP_9.$$arity = 1);

          Opal.defn(self, '$client', TMP_10 = function ːclient() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$screen', TMP_11 = function ːscreen() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$related=', TMP_12 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }, TMP_12.$$arity = 1);

          return (Opal.defn(self, '$transfer=', TMP_13 = function(value) {
            var self = this;

            return self["native"].dataTransfer = $scope.get('Native').$convert(self.$elem());
          }, TMP_13.$$arity = 1), nil) && 'transfer=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_14 = function ːconstruct(name, desc) {
              var self = this;

              return new DragEvent(name, desc);
            }, TMP_14.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_15 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            }, TMP_15.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', TMP_16 = function ːclient() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$screen', TMP_17 = function ːscreen() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].screenX) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          };
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$x', TMP_18 = function ːx() {
          var self = this;

          return self.$screen().$x();
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$y', TMP_19 = function ːy() {
          var self = this;

          return self.$screen().$y();
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$related', TMP_20 = function ːrelated() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }, TMP_20.$$arity = 0);

        return (Opal.defn(self, '$transfer', TMP_21 = function ːtransfer() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_21.$$arity = 0), nil) && 'transfer';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Gamepad");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          def["native"] = nil;
          Opal.defn(self, '$id=', TMP_2 = function(value) {
            var self = this;

            return self["native"].id = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$index=', TMP_3 = function(value) {
            var self = this;

            return self["native"].index = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$at=', TMP_4 = function(value) {
            var self = this;

            return self["native"].timestamp = value;
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$axes=', TMP_5 = function(value) {
            var self = this;

            return self["native"].axes = value;
          }, TMP_5.$$arity = 1);

          return (Opal.defn(self, '$buttons=', TMP_6 = function(value) {
            var self = this;

            return self["native"].buttons = value;
          }, TMP_6.$$arity = 1), nil) && 'buttons=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc });
            }, TMP_7.$$arity = 2)}};

        Opal.defn(self, '$id', TMP_8 = function ːid() {
          var self = this;

          return self["native"].gamepad.id;
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$index', TMP_9 = function ːindex() {
          var self = this;

          return self["native"].gamepad.index;
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$at', TMP_10 = function ːat() {
          var self = this;

          return self["native"].gamepad.timestamp;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$axes', TMP_11 = function ːaxes() {
          var self = this;

          return self["native"].gamepad.axes;
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$buttons', TMP_12 = function ːbuttons() {
          var self = this;

          return self["native"].gamepad.buttons;
        }, TMP_12.$$arity = 0), nil) && 'buttons';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.HashChange");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$old=', TMP_2 = function(value) {
            var self = this;

            return self["native"].oldURL = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$new=', TMP_3 = function(value) {
            var self = this;

            return self["native"].newURL = value;
          }, TMP_3.$$arity = 1), nil) && 'new=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc);
            }, TMP_4.$$arity = 2)}};

        self.$alias_native("old", "oldURL");

        return self.$alias_native("new", "newURL");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/progress"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5, TMP_6;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Progress");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$computable=', TMP_2 = function(value) {
            var self = this;

            return self["native"].computableLength = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$loaded=', TMP_3 = function(value) {
            var self = this;

            return self["native"].loaded = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$total=', TMP_4 = function(value) {
            var self = this;

            return self["native"].total = value;
          }, TMP_4.$$arity = 1), nil) && 'total=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc);
            }, TMP_5.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            }, TMP_6.$$arity = 2)}};

        self.$alias_native("computable?", "computableLength");

        self.$alias_native("loaded");

        return self.$alias_native("total");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PageTransition");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$persisted=', TMP_2 = function(value) {
            var self = this;

            return self["native"].persisted = value;
          }, TMP_2.$$arity = 1), nil) && 'persisted='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.PageTransition")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function ːconstruct(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc);
            }, TMP_3.$$arity = 2)}};

        return self.$alias_native("persisted?", "persisted");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3, TMP_4;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PopState");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$state=', TMP_2 = function(value) {
            var self = this;

            return self["native"].state = value;
          }, TMP_2.$$arity = 1), nil) && 'state='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_3 = function ːconstruct(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc);
            }, TMP_3.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            }, TMP_4.$$arity = 2)}};

        return self.$alias_native("state");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/storage"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Storage");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          def["native"] = nil;
          Opal.defn(self, '$key=', TMP_2 = function(value) {
            var self = this;

            return self["native"].key = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$new=', TMP_3 = function(value) {
            var self = this;

            return self["native"].newValue = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$old=', TMP_4 = function(value) {
            var self = this;

            return self["native"].oldValue = value;
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$area=', TMP_5 = function(value) {
            var self = this;

            return self["native"].storageArea = value;
          }, TMP_5.$$arity = 1);

          return (Opal.defn(self, '$url=', TMP_6 = function(value) {
            var self = this;

            return self["native"].url = value;
          }, TMP_6.$$arity = 1), nil) && 'url=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {
              var self = this;

              return new StorageEvent(name, desc);
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("key");

        self.$alias_native("new", "newValue");

        self.$alias_native("old", "oldValue");

        self.$alias_native("area", "storageArea");

        return self.$alias_native("url");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/touch"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Touch");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$alt!', TMP_2 = function() {
            var self = this;

            return self["native"].altKey = true;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$ctrl!', TMP_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$meta!', TMP_4 = function() {
            var self = this;

            return self["native"].metaKey = true;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$shift!', TMP_5 = function() {
            var self = this;

            return self["native"].shiftKey = true;
          }, TMP_5.$$arity = 0), nil) && 'shift!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              return new TouchEvent(name, desc);
            }, TMP_6.$$arity = 2)}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        Opal.defn(self, '$cancel?', TMP_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel");
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$end?', TMP_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend");
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$leave?', TMP_9 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave");
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$move?', TMP_10 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove");
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$start?', TMP_11 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart");
        }, TMP_11.$$arity = 0), nil) && 'start?';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Sensor");
        }, TMP_1.$$arity = 0);

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', TMP_2 = function ːconstruct(name, desc) {
              var self = this;

              return new SensorEvent(name, desc);
            }, TMP_2.$$arity = 2), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["ostruct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$[]=', '$new_ostruct_member', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_17, TMP_19;

    def.table = nil;
    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil;
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil) {
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](self.$new_ostruct_member(key), value)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b)
        } else {
        return nil
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$[]', TMP_3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_4 = function(name, value) {
      var self = this;

      return self.table['$[]='](self.$new_ostruct_member(name), value);
    }, TMP_4.$$arity = 2);

    Opal.defn(self, '$method_missing', TMP_5 = function ːmethod_missing(name, $a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 2)) !== nil && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('NoMethodError').$new("undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ((($b = name['$end_with?']("=")) !== nil && (!$b.$$is_boolean || $b == true))) {
        if ((($b = args.$length()['$!='](1)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError').$new("wrong number of arguments (0 for 1)"))};
        return self.table['$[]='](self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0));
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, TMP_5.$$arity = -2);

    Opal.defn(self, '$each_pair', TMP_6 = function ːeach_pair() {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a.$$p = (TMP_7 = function(pair){var self = TMP_7.$$s || this;
if (pair == null) pair = nil;
      return Opal.yield1($yield, pair);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$===', TMP_9 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_10 = function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$to_h', TMP_11 = function ːto_h() {
      var self = this;

      return self.table.$dup();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$to_n', TMP_12 = function ːto_n() {
      var self = this;

      return self.table.$to_n();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$hash', TMP_13 = function ːhash() {
      var self = this;

      return self.table.$hash();
    }, TMP_13.$$arity = 0);

    self.$attr_reader("table");

    Opal.defn(self, '$delete_field', TMP_14 = function ːdelete_field(name) {
      var self = this, sym = nil;

      sym = name.$to_sym();
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self.table.$delete(sym);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$new_ostruct_member', TMP_17 = function ːnew_ostruct_member(name) {
      var $a, $b, TMP_15, $c, TMP_16, self = this;

      name = name.$to_sym();
      if ((($a = self['$respond_to?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b, name);
        ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_16 = function(x){var self = TMP_16.$$s || this;
          if (self.table == null) self.table = nil;
if (x == null) x = nil;
        return self.table['$[]='](name, x)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($c, "" + (name) + "=");
      };
      return name;
    }, TMP_17.$$arity = 1);

    var ostruct_ids;

    Opal.defn(self, '$inspect', TMP_19 = function ːinspect() {
      var $a, $b, TMP_18, self = this, result = nil;

      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      try {
      result = "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      
      if ((($a = self.table['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_18 = function(name, value){var self = TMP_18.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      };
    }, TMP_19.$$arity = 0);

    return Opal.alias(self, 'to_s', 'inspect');
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/custom"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  self.$require("ostruct");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def.detail = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Custom");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2;

          def["native"] = nil;
          return (Opal.defn(self, '$method_missing', TMP_2 = function ːmethod_missing(name, value) {
            var $a, self = this;

            if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value;
              } else {
              return nil
            };
          }, TMP_2.$$arity = 2), nil) && 'method_missing'
        })($scope.base, $scope.get('Definition'));

        if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_3 = function ːconstruct(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc });
          }, TMP_3.$$arity = 2)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_4 = function ːconstruct(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          }, TMP_4.$$arity = 2)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          }, TMP_5.$$arity = 2)
          } else {
          Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          }, TMP_6.$$arity = 2)
        };

        Opal.defn(self, '$initialize', TMP_7 = function ːinitialize(event, callback) {
          var $a, $b, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil;
          }
          TMP_7.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_7, false)), $a.$$p = null, $a).call($b, event, callback);
          return self.detail = $scope.get('Hash').$new(event.detail);
        }, TMP_7.$$arity = -2);

        return (Opal.defn(self, '$method_missing', TMP_8 = function ːmethod_missing(id, $a_rest) {
          var $b, $c, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_8.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($b = self.detail['$has_key?'](id)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.detail['$[]'](id)};
          return ($b = ($c = self, Opal.find_super_dispatcher(self, 'method_missing', TMP_8, false)), $b.$$p = $iter, $b).apply($c, $zuper);
        }, TMP_8.$$arity = -2), nil) && 'method_missing';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["buffer/array"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$name_for', '$include', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

      def["native"] = nil;
      Opal.defs(self, '$for', TMP_1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($scope.get('Buffer').$name_for(bits, type)) + "Array");
      }, TMP_1.$$arity = 2);

      self.$include($scope.get('Enumerable'));

      self.$attr_reader("buffer", "type");

      Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(buffer, bits, type) {
        var $a, $b, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil;
        }
        if (type == null) {
          type = nil;
        }
        TMP_2.$$p = null;
        if ($scope.get('Native')['$=='](buffer)) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($b, buffer)
          } else {
          
        var klass = $scope.get('Array').$for(bits, type);

        ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($c, new klass(buffer.$to_n()))
      ;
        };
        self.buffer = buffer;
        return self.type = type;
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$bits', TMP_3 = function ːbits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$[]', TMP_4 = function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil;
        }
        if (offset !== false && offset !== nil) {
          return self["native"].subarray(index, offset);
          } else {
          return self["native"][index];
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$[]=', TMP_5 = function(index, value) {
        var self = this;

        return self["native"][index] = value;
      }, TMP_5.$$arity = 2);

      Opal.defn(self, '$bytesize', TMP_6 = function ːbytesize() {
        var self = this;

        return self["native"].byteLength;
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$each', TMP_7 = function ːeach() {
        var self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        TMP_7.$$p = null;
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        Opal.yield1($yield, self["native"][i])
      }
    ;
        return self;
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$length', TMP_8 = function ːlength() {
        var self = this;

        return self["native"].length;
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$merge!', TMP_9 = function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset);
      }, TMP_9.$$arity = -2);

      return Opal.alias(self, 'size', 'length');
    })($scope.base, $scope.get('Native'))
  })($scope.base, $scope.get('Native'))
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["buffer/view"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defs(self, '$supported?', TMP_1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']();
      }, TMP_1.$$arity = 0);

      self.$attr_reader("buffer", "offset");

      Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(buffer, offset, length) {
        var $a, $b, $c, $d, $e, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil;
        }
        if (length == null) {
          length = nil;
        }
        TMP_2.$$p = null;
        if ((($a = self['$native?'](buffer)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($b, buffer)
        } else if ((($a = (($c = offset !== false && offset !== nil) ? length : offset)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($c, new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n()))
        } else if (offset !== false && offset !== nil) {
          ($a = ($d = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($d, new DataView(buffer.$to_n(), offset.$to_n()))
          } else {
          ($a = ($e = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($e, new DataView(buffer.$to_n()))
        };
        self.buffer = buffer;
        return self.offset = offset;
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$length', TMP_3 = function ːlength() {
        var self = this;

        return self["native"].byteLength;
      }, TMP_3.$$arity = 0);

      Opal.alias(self, 'size', 'length');

      Opal.defn(self, '$get', TMP_4 = function ːget(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["get" + $scope.get('Buffer').$name_for(bits, type)](offset, little);
      }, TMP_4.$$arity = -2);

      Opal.alias(self, '[]', 'get');

      Opal.defn(self, '$set', TMP_5 = function ːset(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["set" + $scope.get('Buffer').$name_for(bits, type)](offset, value, little);
      }, TMP_5.$$arity = -3);

      Opal.alias(self, '[]=', 'set');

      Opal.defn(self, '$get_int8', TMP_6 = function ːget_int8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt8(offset, little);
      }, TMP_6.$$arity = -2);

      Opal.defn(self, '$set_int8', TMP_7 = function ːset_int8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt8(offset, value, little);
      }, TMP_7.$$arity = -3);

      Opal.defn(self, '$get_uint8', TMP_8 = function ːget_uint8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint8(offset, little);
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$set_uint8', TMP_9 = function ːset_uint8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint8(offset, value, little);
      }, TMP_9.$$arity = -3);

      Opal.defn(self, '$get_int16', TMP_10 = function ːget_int16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt16(offset, little);
      }, TMP_10.$$arity = -2);

      Opal.defn(self, '$set_int16', TMP_11 = function ːset_int16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt16(offset, value, little);
      }, TMP_11.$$arity = -3);

      Opal.defn(self, '$get_uint16', TMP_12 = function ːget_uint16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint16(offset, little);
      }, TMP_12.$$arity = -2);

      Opal.defn(self, '$set_uint16', TMP_13 = function ːset_uint16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint16(offset, value, little);
      }, TMP_13.$$arity = -3);

      Opal.defn(self, '$get_int32', TMP_14 = function ːget_int32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt32(offset, little);
      }, TMP_14.$$arity = -2);

      Opal.defn(self, '$set_int32', TMP_15 = function ːset_int32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt32(offset, value, little);
      }, TMP_15.$$arity = -3);

      Opal.defn(self, '$get_uint32', TMP_16 = function ːget_uint32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint32(offset, little);
      }, TMP_16.$$arity = -2);

      Opal.defn(self, '$set_uint32', TMP_17 = function ːset_uint32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint32(offset, value, little);
      }, TMP_17.$$arity = -3);

      Opal.defn(self, '$get_float32', TMP_18 = function ːget_float32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat32(offset, little);
      }, TMP_18.$$arity = -2);

      Opal.defn(self, '$set_float32', TMP_19 = function ːset_float32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat32(offset, value, little);
      }, TMP_19.$$arity = -3);

      Opal.defn(self, '$get_float64', TMP_20 = function ːget_float64(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat64(offset, little);
      }, TMP_20.$$arity = -2);

      return (Opal.defn(self, '$set_float64', TMP_21 = function ːset_float64(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat64(offset, value, little);
      }, TMP_21.$$arity = -3), nil) && 'set_float64';
    })($scope.base, null)
  })($scope.base, null)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["buffer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    def["native"] = nil;
    self.$include($scope.get('Native'));

    Opal.defs(self, '$supported?', TMP_1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']();
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$name_for', TMP_2 = function ːname_for(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;if ("unsigned"['$===']($case)) {return "Uint"}else if ("signed"['$===']($case)) {return "Int"}else if ("float"['$===']($case)) {return "Float"}else { return nil }})()) + (bits);
    }, TMP_2.$$arity = 2);

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(size, bits) {
      var $a, $b, $c, self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8;
      }
      TMP_3.$$p = null;
      if ((($a = self['$native?'](size)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($b, size)
        } else {
        return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_3, false)), $a.$$p = null, $a).call($c, new ArrayBuffer(size * (bits / 8)))
      };
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$length', TMP_4 = function ːlength() {
      var self = this;

      return self["native"].byteLength;
    }, TMP_4.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_5 = function ːto_a(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8;
      }
      if (type == null) {
        type = "unsigned";
      }
      return $scope.get('Array').$new(self, bits, type);
    }, TMP_5.$$arity = -1);

    return (Opal.defn(self, '$view', TMP_6 = function ːview(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil;
      }
      if (length == null) {
        length = nil;
      }
      return $scope.get('View').$new(self, offset, length);
    }, TMP_6.$$arity = -1), nil) && 'view';
  })($scope.base, null);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/message"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  self.$require("buffer");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Message");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$data=', TMP_2 = function(value) {
            var self = this;

            return self["native"].data = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$origin=', TMP_3 = function(value) {
            var self = this;

            return self["native"].origin = value;
          }, TMP_3.$$arity = 1);

          return (Opal.defn(self, '$source=', TMP_4 = function(value) {
            var self = this;

            return self["native"].source = $scope.get('Native').$convert(value);
          }, TMP_4.$$arity = 1), nil) && 'source=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_5 = function ːconstruct(name, desc) {
              var self = this;

              return new MessageEvent(name, desc);
            }, TMP_5.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            }, TMP_6.$$arity = 2)}};

        Opal.defn(self, '$data', TMP_7 = function ːdata() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return $scope.get('Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return $scope.get('Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    ;
        }, TMP_7.$$arity = 0);

        self.$alias_native("origin");

        return (Opal.defn(self, '$source', TMP_8 = function ːsource() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return $scope.get('Window').$new(source);
      }
      else {
        return nil;
      }
    ;
        }, TMP_8.$$arity = 0), nil) && 'source';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event/close"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_6, TMP_7;

        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Close");
        }, TMP_1.$$arity = 0);

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$code=', TMP_2 = function(value) {
            var self = this;

            return self["native"].code = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$reason=', TMP_3 = function(value) {
            var self = this;

            return self["native"].reason = value;
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$clean!', TMP_4 = function(value) {
            var self = this;

            return self["native"].wasClean = true;
          }, TMP_4.$$arity = 1);

          return (Opal.defn(self, '$not_clean!', TMP_5 = function(value) {
            var self = this;

            return self["native"].wasClean = false;
          }, TMP_5.$$arity = 1), nil) && 'not_clean!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
              var self = this;

              return new CloseEvent(name, desc);
            }, TMP_6.$$arity = 2)
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            }, TMP_7.$$arity = 2)}};

        self.$alias_native("code");

        self.$alias_native("reason");

        return self.$alias_native("clean?", "wasClean");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$to_proc', '$const_get', '$arguments=', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, $a, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

      def["native"] = def.on = def.callback = nil;
      Opal.defs(self, '$aliases', TMP_1 = function ːaliases() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return ((($a = self.aliases) !== false && $a !== nil) ? $a : self.aliases = $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"}));
      }, TMP_1.$$arity = 0);

      Opal.defs(self, '$name_for', TMP_2 = function ːname_for(name) {
        var $a, self = this;

        return (((($a = self.$aliases()['$[]'](name)) !== false && $a !== nil) ? $a : name)).$gsub(":", "");
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$class_for', TMP_3 = function ːclass_for(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return $scope.get('Animation')}else if ("audioprocess"['$===']($case)) {return $scope.get('AudioProcessing')}else if ("beforeunload"['$===']($case)) {return $scope.get('BeforeUnload')}else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return $scope.get('Composition')}else if ("copy"['$===']($case) || "cut"['$===']($case)) {return $scope.get('Clipboard')}else if ("devicelight"['$===']($case)) {return $scope.get('DeviceLight')}else if ("devicemotion"['$===']($case)) {return $scope.get('DeviceMotion')}else if ("deviceorientation"['$===']($case)) {return $scope.get('DeviceOrientation')}else if ("deviceproximity"['$===']($case)) {return $scope.get('DeviceProximity')}else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return $scope.get('Drag')}else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return $scope.get('Gamepad')}else if ("hashchange"['$===']($case)) {return $scope.get('HashChange')}else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return $scope.get('Progress')}else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return $scope.get('PageTransition')}else if ("popstate"['$===']($case)) {return $scope.get('PopState')}else if ("storage"['$===']($case)) {return $scope.get('Storage')}else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return $scope.get('Touch')}else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return $scope.get('Sensor')}else if ("message"['$===']($case)) {return $scope.get('Message')}else if ("close"['$===']($case)) {return $scope.get('Close')}else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return $scope.get('Mouse')}else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return $scope.get('Keyboard')}else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return $scope.get('Focus')}else if ("wheel"['$===']($case)) {return $scope.get('Wheel')}else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return $scope.get('Event')}else {return $scope.get('Custom')}})();
      }, TMP_3.$$arity = 1);

      Opal.defs(self, '$supported?', TMP_4 = function() {
        var self = this;

        return true;
      }, TMP_4.$$arity = 0);

      Opal.defs(self, '$create', TMP_5 = function ːcreate(name, $a_rest) {
        var $b, $c, $d, self = this, args, $iter = TMP_5.$$p, block = $iter || nil, klass = nil, event = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_5.$$p = null;
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, ($b = ($c = klass.$const_get("Definition")).$new, $b.$$p = block.$to_proc(), $b).call($c)));
        (($b = [args]), $d = event, $d['$arguments='].apply($d, $b), $b[$b.length-1]);
        return event;
      }, TMP_5.$$arity = -2);

      if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_6 = function ːconstruct(name, desc) {
          var self = this;

          return new Event(name, desc);
        }, TMP_6.$$arity = 2)
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_7 = function ːconstruct(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = 2)
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', TMP_8 = function ːconstruct(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n();
        }, TMP_8.$$arity = 2)
        } else {
        Opal.defs(self, '$construct', TMP_9 = function ːconstruct(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n();
        }, TMP_9.$$arity = 2)
      };

      Opal.defs(self, '$new', TMP_10 = function(value, callback) {
        var $a, $b, $c, self = this, $iter = TMP_10.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (callback == null) {
          callback = nil;
        }
        TMP_10.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (self['$==']($scope.get('Event'))) {
          } else {
          return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_10, false, $Event)), $a.$$p = $iter, $a).apply($b, $zuper)
        };
        klass = self.$class_for((function() {if (callback !== false && callback !== nil) {
          return callback.$name()
          } else {
          return value.type;
        }; return nil; })());
        if (klass['$==']($scope.get('Event'))) {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_10, false, $Event)), $a.$$p = $iter, $a).apply($c, $zuper)
          } else {
          return klass.$new(value, callback)
        };
      }, TMP_10.$$arity = -2);

      self.$attr_reader("callback");

      self.$attr_writer("on");

      Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(event, callback) {
        var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil;
        }
        TMP_11.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, event);
        return self.callback = callback;
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$name', TMP_12 = function ːname() {
        var self = this;

        return self["native"].type;
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$on', TMP_13 = function ːon() {
        var $a, self = this;

        return ((($a = self.on) !== false && $a !== nil) ? $a : $scope.get('Target').$convert(self["native"].currentTarget));
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$target', TMP_14 = function ːtarget() {
        var self = this;

        return $scope.get('Target').$convert(self["native"].srcElement || self["native"].target);
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$arguments', TMP_15 = function() {
        var self = this;

        return self["native"].arguments || [];
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$arguments=', TMP_16 = function(args) {
        var self = this;

        return self["native"].arguments = args;
      }, TMP_16.$$arity = 1);

      self.$alias_native("bubbles?", "bubbles");

      self.$alias_native("cancelable?", "cancelable");

      self.$alias_native("data");

      self.$alias_native("phase", "eventPhase");

      self.$alias_native("at", "timeStamp");

      Opal.defn(self, '$off', TMP_17 = function ːoff() {
        var $a, self = this;

        if ((($a = self.callback) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.callback.$off()
          } else {
          return nil
        };
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$stopped?', TMP_18 = function() {
        var self = this;

        return !!self["native"].stopped;
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$stop', TMP_19 = function ːstop() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].stopPropagation) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].stopPropagation();};
        return self["native"].stopped = true;
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$prevent', TMP_20 = function ːprevent() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].preventDefault) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].preventDefault();};
        return self["native"].prevented = true;
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$prevented?', TMP_21 = function() {
        var self = this;

        return !!self["native"].prevented;
      }, TMP_21.$$arity = 0);

      return (Opal.defn(self, '$stop!', TMP_22 = function() {
        var self = this;

        self.$prevent();
        return self.$stop();
      }, TMP_22.$$arity = 0), nil) && 'stop!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/window/view"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $View(){};
        var self = $View = $klass($base, $super, 'View', $View);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.innerSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', TMP_2 = function ːwidth() {
            var self = this;

            return self["native"].innerWidth;
          }, TMP_2.$$arity = 0);

          return (Opal.defn(self, '$height', TMP_3 = function ːheight() {
            var self = this;

            return self["native"].innerHeight;
          }, TMP_3.$$arity = 0), nil) && 'height';
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.clientSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$height', TMP_4 = function ːheight() {
            var self = this;

            return self["native"].document.documentElement.clientHeight;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$width', TMP_5 = function ːwidth() {
            var self = this;

            return self["native"].document.documentElement.clientWidth;
          }, TMP_5.$$arity = 0), nil) && 'width';
          } else {
          Opal.defn(self, '$width', TMP_6 = function ːwidth() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          }, TMP_6.$$arity = 0);

          return (Opal.defn(self, '$height', TMP_7 = function ːheight() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          }, TMP_7.$$arity = 0), nil) && 'height';
        };
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/window/size"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Size(){};
        var self = $Size = $klass($base, $super, 'Size', $Size);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$set', TMP_2 = function ːset($a_rest) {
          var $b, $c, self = this, args, width = nil, height = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
            $c = args.$first().$values_at("width", "height"), $b = Opal.to_ary($c), width = ($b[0] == null ? nil : $b[0]), height = ($b[1] == null ? nil : $b[1]), $c
            } else {
            $c = args, $b = Opal.to_ary($c), width = ($b[0] == null ? nil : $b[0]), height = ($b[1] == null ? nil : $b[1]), $c
          };
          ((($b = width) !== false && $b !== nil) ? $b : width = self.$width());
          ((($b = height) !== false && $b !== nil) ? $b : height = self.$height());
          self["native"].resizeTo(width, height);
          return self;
        }, TMP_2.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.outerSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', TMP_3 = function ːwidth() {
            var self = this;

            return self["native"].outerWidth;
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$height', TMP_4 = function ːheight() {
            var self = this;

            return self["native"].outerHeight;
          }, TMP_4.$$arity = 0);
          } else {
          Opal.defn(self, '$width', TMP_5 = function ːwidth() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$height', TMP_6 = function ːheight() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          }, TMP_6.$$arity = 0);
        };

        Opal.defn(self, '$width=', TMP_7 = function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}));
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$height=', TMP_8 = function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}));
        }, TMP_8.$$arity = 1), nil) && 'height=';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/window/scroll"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Scroll(){};
        var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def["native"] = nil;
        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        }, TMP_1.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Window.scroll")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', TMP_2 = function ːposition() {
            var self = this;

            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return $scope.get('Position').$new(x, y);
          }, TMP_2.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("Window.pageOffset")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', TMP_3 = function ːposition() {
            var self = this;

            return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
          }, TMP_3.$$arity = 0)
          } else {
          Opal.defn(self, '$position', TMP_4 = function ːposition() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window scroll unsupported");
          }, TMP_4.$$arity = 0)
        };

        Opal.defn(self, '$x', TMP_5 = function ːx() {
          var self = this;

          return self.$position().$x();
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$y', TMP_6 = function ːy() {
          var self = this;

          return self.$position().$y();
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$to', TMP_7 = function ːto(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil) ? $a : self.$x());
          y = ((($a = what['$[]']("y")) !== false && $a !== nil) ? $a : self.$y());
          self["native"].scrollTo(x, y);
          return self;
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$by', TMP_8 = function ːby(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil) ? $a : 0);
          y = ((($a = what['$[]']("y")) !== false && $a !== nil) ? $a : 0);
          self["native"].scrollBy(x, y);
          return self;
        }, TMP_8.$$arity = 1), nil) && 'by';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/window"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, $a, $b, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

      def["native"] = nil;
      Opal.defs(self, '$open', TMP_2 = function ːopen(url, options) {
        var $a, $b, TMP_1, self = this, name = nil, features = nil;

        name = options.$delete("name");
        features = ($a = ($b = options).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $case = nil;
if (key == null) key = nil;if (value == null) value = nil;
        value = (function() {$case = value;if (true['$===']($case)) {return "yes"}else if (false['$===']($case)) {return "no"}else {return value}})();
          return "" + (key) + "=" + (value);}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      }, TMP_2.$$arity = 2);

      self.$include($scope.get('Native'));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_3 = function(value){var self = TMP_3.$$s || this, $c;
        if ($gvars.window == null) $gvars.window = nil;
if (value == null) value = nil;
      if ((($c = value == window) !== nil && (!$c.$$is_boolean || $c == true))) {
          return $gvars.window
          } else {
          return nil
        }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);

      Opal.defn(self, '$alert', TMP_4 = function ːalert(value) {
        var self = this;

        self["native"].alert(value);
        return value;
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$prompt', TMP_5 = function ːprompt(value) {
        var self = this;

        return self["native"].prompt(value) || nil;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$confirm', TMP_6 = function ːconfirm(value) {
        var self = this;

        return self["native"].confirm(value) || false;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$view', TMP_7 = function ːview() {
        var self = this;

        return $scope.get('View').$new(self);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$size', TMP_8 = function ːsize() {
        var self = this;

        return $scope.get('Size').$new(self);
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$scroll', TMP_9 = function ːscroll() {
        var self = this;

        return $scope.get('Scroll').$new(self);
      }, TMP_9.$$arity = 0);

      if ((($a = $scope.get('Browser')['$supports?']("Window.send")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defn(self, '$send', TMP_10 = function ːsend(message, options) {
          var $a, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self["native"].postMessage(message, ((($a = options['$[]']("to")) !== false && $a !== nil) ? $a : "*"));
        }, TMP_10.$$arity = -2)
        } else {
        Opal.defn(self, '$send', TMP_11 = function ːsend(message, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise($scope.get('NotImplementedError'), "message sending unsupported");
        }, TMP_11.$$arity = -2)
      };

      return (Opal.defn(self, '$close', TMP_12 = function ːclose() {
        var self = this;

        
      return (window.open('', '_self', '') && window.close()) ||
             (window.opener = null && window.close()) ||
             (window.opener = '' && window.close());
    
      }, TMP_12.$$arity = 0), nil) && 'close';
    })($scope.base, null)
  })($scope.base);
  $gvars.window = (($scope.get('Browser')).$$scope.get('Window')).$new(window);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15;

    Opal.defn(self, '$alert', TMP_13 = function ːalert(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$prompt', TMP_14 = function ːprompt(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$confirm', TMP_15 = function ːconfirm(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value);
    }, TMP_15.$$arity = 1);
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/node_set"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$uniq', '$map', '$DOM', '$convert', '$flatten', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NodeSet(){};
        var self = $NodeSet = $klass($base, $super, 'NodeSet', $NodeSet);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_7, TMP_9, TMP_11, TMP_13, TMP_15, TMP_17, TMP_18;

        def.literal = nil;
        Opal.defs(self, '$[]', TMP_2 = function($a_rest) {
          var $b, $c, TMP_1, self = this, nodes;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          nodes = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            nodes[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$new(($b = ($c = nodes.$flatten()).$map, $b.$$p = (TMP_1 = function(x){var self = TMP_1.$$s || this;
if (x == null) x = nil;
          return self.$DOM($scope.get('Native').$convert(x))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c).$uniq());
        }, TMP_2.$$arity = -1);

        Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(literal) {
          var self = this;

          return self.literal = literal;
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_4 = function ːmethod_missing(name, $a_rest) {
          var $b, $c, TMP_5, $d, self = this, args, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_4.$$p = null;
          if ((($b = self.literal['$respond_to?'](name)) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = ($c = self).$each, $b.$$p = (TMP_5 = function(el){var self = TMP_5.$$s || this, $a, $d;
if (el == null) el = nil;
            return ($a = ($d = el).$__send__, $a.$$p = block.$to_proc(), $a).apply($d, [name].concat(Opal.to_a(args)))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $b).call($c);
            return self;
          };
          result = ($b = ($d = self.literal).$__send__, $b.$$p = block.$to_proc(), $b).apply($d, [name].concat(Opal.to_a(args)));
          if ((($b = result === self.literal) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self
          } else if ((($b = $scope.get('Array')['$==='](result)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return $scope.get('NodeSet').$new(result)
            } else {
            return result
          };
        }, TMP_4.$$arity = -2);

        Opal.defn(self, '$at_css', TMP_7 = function ːat_css($a_rest) {try {

          var $b, $c, TMP_6, self = this, rules;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = ($c = self).$each, $b.$$p = (TMP_6 = function(node){var self = TMP_6.$$s || this, $a, $d;
if (node == null) node = nil;
          if ((($a = node = ($d = node).$at_css.apply($d, Opal.to_a(rules))) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$at_xpath', TMP_9 = function ːat_xpath($a_rest) {try {

          var $b, $c, TMP_8, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          ($b = ($c = self).$each, $b.$$p = (TMP_8 = function(node){var self = TMP_8.$$s || this, $a, $d;
if (node == null) node = nil;
          if ((($a = node = ($d = node).$at_xpath.apply($d, Opal.to_a(paths))) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_9.$$arity = -1);

        Opal.defn(self, '$css', TMP_11 = function ːcss(path) {
          var $a, $b, TMP_10, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_10 = function(node){var self = TMP_10.$$s || this;
if (node == null) node = nil;
          return node.$css(path)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b));
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$filter', TMP_13 = function ːfilter(expression) {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = self.literal).$select, $a.$$p = (TMP_12 = function(node){var self = TMP_12.$$s || this;
if (node == null) node = nil;
          return node['$=~'](expression)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$search', TMP_15 = function ːsearch($a_rest) {
          var $b, $c, TMP_14, self = this, what;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          what = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            what[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet')['$[]'](($b = ($c = self.literal).$map, $b.$$p = (TMP_14 = function(node){var self = TMP_14.$$s || this, $a;
if (node == null) node = nil;
          return ($a = node).$search.apply($a, Opal.to_a(what))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($c));
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$xpath', TMP_17 = function ːxpath(path) {
          var $a, $b, TMP_16, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_16 = function(node){var self = TMP_16.$$s || this;
if (node == null) node = nil;
          return node.$xpath(path)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b));
        }, TMP_17.$$arity = 1);

        return (Opal.defn(self, '$to_ary', TMP_18 = function ːto_ary() {
          var self = this;

          return self.literal;
        }, TMP_18.$$arity = 0), nil) && 'to_ary';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/node"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, $a, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'ELEMENT_NODE', 1);

        Opal.cdecl($scope, 'ATTRIBUTE_NODE', 2);

        Opal.cdecl($scope, 'TEXT_NODE', 3);

        Opal.cdecl($scope, 'CDATA_SECTION_NODE', 4);

        Opal.cdecl($scope, 'ENTITY_REFERENCE_NOCE', 5);

        Opal.cdecl($scope, 'ENTITY_NODE', 6);

        Opal.cdecl($scope, 'PROCESSING_INSTRUCTION_NODE', 7);

        Opal.cdecl($scope, 'COMMENT_NODE', 8);

        Opal.cdecl($scope, 'DOCUMENT_NODE', 9);

        Opal.cdecl($scope, 'DOCUMENT_TYPE_NODE', 10);

        Opal.cdecl($scope, 'DOCUMENT_FRAGMENT_NODE', 11);

        Opal.cdecl($scope, 'NOTATION_NODE', 12);

        Opal.defs(self, '$new', TMP_1 = function(value) {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Node'))) {
            ((($a = self.classes) !== false && $a !== nil) ? $a : self.classes = [nil, $scope.get('Element'), $scope.get('Attribute'), $scope.get('Text'), $scope.get('CDATA'), nil, nil, nil, $scope.get('Comment'), $scope.get('Document'), nil, $scope.get('DocumentFragment')]);
            if ((($a = klass = self.classes['$[]'](value.nodeType)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(value)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Node object")
            };
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Node)), $a.$$p = $iter, $a).apply($b, $zuper)
          };
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$==', TMP_2 = function(other) {
          var self = this;

          return self["native"] === $scope.get('Native').$convert(other);
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$<<', TMP_4 = function(node) {
          var $a, $b, TMP_3, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_3 = function(n){var self = TMP_3.$$s || this;
if (n == null) n = nil;
            return self['$<<'](n)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$>>', TMP_6 = function(node) {
          var $a, $b, TMP_5, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
            return self['$>>'](n)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          if ((($a = self["native"].firstChild == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            self["native"].appendChild(node);
            } else {
            self["native"].insertBefore(node, self["native"].firstChild);
          };
          return self;
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$add_child', TMP_7 = function ːadd_child(node) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_7.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          return self['$<<'](node);
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$add_next_sibling', TMP_8 = function ːadd_next_sibling(node) {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_8.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        }, TMP_8.$$arity = -1);

        Opal.defn(self, '$add_previous_sibling', TMP_9 = function ːadd_previous_sibling(node) {
          var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          TMP_9.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        }, TMP_9.$$arity = -1);

        Opal.alias(self, 'after', 'add_next_sibling');

        Opal.defn(self, '$append_to', TMP_10 = function ːappend_to(node) {
          var self = this;

          return node['$<<'](self);
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$ancestors', TMP_12 = function ːancestors(expression) {
          var $a, $b, TMP_11, self = this, parents = nil, parent = nil;

          if (expression == null) {
            expression = nil;
          }
          if ((($a = self.$parent()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ((($b = parent = parents.$last().$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
          parents['$<<'](parent)};
          if ((($a = $scope.get('Document')['$==='](parents.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            parents.$pop()};
          if (expression !== false && expression !== nil) {
            ($a = ($b = parents)['$select!'], $a.$$p = (TMP_11 = function(p){var self = TMP_11.$$s || this;
if (p == null) p = nil;
            return p['$=~'](expression)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)};
          return $scope.get('NodeSet').$new(parents);
        }, TMP_12.$$arity = -1);

        Opal.alias(self, 'before', 'add_previous_sibling');

        Opal.defn(self, '$remove', TMP_13 = function ːremove() {
          var $a, self = this;

          if ((($a = self.$parent()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$parent().$remove_child(self)
            } else {
            return nil
          };
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$clear', TMP_14 = function ːclear() {
          var self = this;

          return self.$children().$remove();
        }, TMP_14.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Element.textContent")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', TMP_15 = function ːcontent() {
            var self = this;

            return self["native"].textContent;
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$content=', TMP_16 = function(value) {
            var self = this;

            return self["native"].textContent = value;
          }, TMP_16.$$arity = 1);
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.innerText")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', TMP_17 = function ːcontent() {
            var self = this;

            return self["native"].innerText;
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$content=', TMP_18 = function(value) {
            var self = this;

            return self["native"].innerText = value;
          }, TMP_18.$$arity = 1);
          } else {
          Opal.defn(self, '$content', TMP_19 = function ːcontent() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$content=', TMP_20 = function(value) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          }, TMP_20.$$arity = 1);
        };

        Opal.defn(self, '$blank?', TMP_21 = function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$cdata?', TMP_22 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('CDATA_SECTION_NODE'));
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$child', TMP_23 = function ːchild() {
          var self = this;

          return self.$children().$first();
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$children', TMP_24 = function ːchildren() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].childNodes));
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$children=', TMP_25 = function(node) {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$comment?', TMP_26 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('COMMENT_NODE'));
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$document', TMP_27 = function ːdocument() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].ownerDocument) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].ownerDocument)
            } else {
            return nil
          };
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$document?', TMP_28 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_NODE'));
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$elem?', TMP_29 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('ELEMENT_NODE'));
        }, TMP_29.$$arity = 0);

        Opal.alias(self, 'element?', 'elem?');

        Opal.defn(self, '$element_children', TMP_30 = function ːelement_children() {
          var $a, $b, self = this;

          return ($a = ($b = self.$children()).$select, $a.$$p = "element?".$to_proc(), $a).call($b);
        }, TMP_30.$$arity = 0);

        Opal.alias(self, 'elements', 'element_children');

        Opal.defn(self, '$first_element_child', TMP_31 = function ːfirst_element_child() {
          var self = this;

          return self.$element_children().$first();
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$fragment?', TMP_32 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_FRAGMENT_NODE'));
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$inner_html', TMP_33 = function ːinner_html() {
          var self = this;

          return self["native"].innerHTML;
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$inner_html=', TMP_34 = function(value) {
          var self = this;

          return self["native"].innerHTML = value;
        }, TMP_34.$$arity = 1);

        Opal.alias(self, 'inner_text', 'content');

        Opal.alias(self, 'inner_text=', 'content=');

        Opal.defn(self, '$last_element_child', TMP_35 = function ːlast_element_child() {
          var self = this;

          return self.$element_children().$last();
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$name', TMP_36 = function ːname() {
          var self = this;

          return self["native"].nodeName || nil;
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$name=', TMP_37 = function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s();
        }, TMP_37.$$arity = 1);

        Opal.defn(self, '$namespace', TMP_38 = function ːnamespace() {
          var self = this;

          return self["native"].namespaceURI || nil;
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$next', TMP_39 = function ːnext() {
          var $a, self = this;

          if ((($a = self["native"].nextSibling != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].nextSibling)
            } else {
            return nil
          };
        }, TMP_39.$$arity = 0);

        Opal.alias(self, 'next=', 'add_next_sibling');

        Opal.defn(self, '$next_element', TMP_40 = function ːnext_element() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$next();
          while ((($b = (($c = current !== false && current !== nil) ? current['$element?']()['$!']() : current)) !== nil && (!$b.$$is_boolean || $b == true))) {
          current = current.$next()};
          return current;
        }, TMP_40.$$arity = 0);

        Opal.alias(self, 'next_sibling', 'next');

        Opal.alias(self, 'node_name', 'name');

        Opal.alias(self, 'node_name=', 'name=');

        Opal.defn(self, '$node_type', TMP_41 = function ːnode_type() {
          var self = this;

          return self["native"].nodeType;
        }, TMP_41.$$arity = 0);

        Opal.defn(self, '$parent', TMP_42 = function ːparent() {
          var $a, self = this;

          if ((($a = self["native"].parentNode != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].parentNode)
            } else {
            return nil
          };
        }, TMP_42.$$arity = 0);

        Opal.defn(self, '$parent=', TMP_43 = function(node) {
          var self = this;

          return self["native"].parentNode = $scope.get('Native').$convert(node);
        }, TMP_43.$$arity = 1);

        Opal.defn(self, '$parse', TMP_44 = function ːparse(text, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_44.$$arity = -2);

        Opal.defn(self, '$path', TMP_45 = function ːpath() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_45.$$arity = 0);

        Opal.defn(self, '$prepend_to', TMP_46 = function ːprepend_to(node) {
          var self = this;

          return node['$>>'](self);
        }, TMP_46.$$arity = 1);

        Opal.defn(self, '$previous', TMP_47 = function ːprevious() {
          var $a, self = this;

          if ((($a = self["native"].previousSibling != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].previousSibling)
            } else {
            return nil
          };
        }, TMP_47.$$arity = 0);

        Opal.alias(self, 'previous=', 'add_previous_sibling');

        Opal.defn(self, '$previous_element', TMP_48 = function ːprevious_element() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$previous();
          while ((($b = (($c = current !== false && current !== nil) ? current['$element?']()['$!']() : current)) !== nil && (!$b.$$is_boolean || $b == true))) {
          current = current.$previous()};
          return current;
        }, TMP_48.$$arity = 0);

        Opal.alias(self, 'previous_sibling', 'previous');

        Opal.defn(self, '$remove_child', TMP_49 = function ːremove_child(node) {
          var self = this;

          return self["native"].removeChild($scope.get('Native').$try_convert(node));
        }, TMP_49.$$arity = 1);

        Opal.defn(self, '$replace', TMP_50 = function ːreplace(node) {
          var $a, self = this;

          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        }, TMP_50.$$arity = 1);

        Opal.alias(self, 'replace_with', 'replace');

        Opal.alias(self, 'text', 'content');

        Opal.alias(self, 'text=', 'content=');

        Opal.defn(self, '$text?', TMP_51 = function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('TEXT_NODE'));
        }, TMP_51.$$arity = 0);

        Opal.defn(self, '$traverse', TMP_52 = function ːtraverse() {
          var self = this, $iter = TMP_52.$$p, block = $iter || nil;

          TMP_52.$$p = null;
          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_52.$$arity = 0);

        Opal.alias(self, 'type', 'node_type');

        Opal.defn(self, '$value', TMP_53 = function ːvalue() {
          var self = this;

          return self["native"].nodeValue || nil;
        }, TMP_53.$$arity = 0);

        Opal.defn(self, '$value=', TMP_54 = function(value) {
          var self = this;

          return self["native"].nodeValue = value;
        }, TMP_54.$$arity = 1);

        return (Opal.defn(self, '$inspect', TMP_55 = function ːinspect() {
          var self = this;

          return "#<DOM::Node: " + (self.$name()) + ">";
        }, TMP_55.$$arity = 0), nil) && 'inspect';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/attribute"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Attribute(){};
        var self = $Attribute = $klass($base, $super, 'Attribute', $Attribute);

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_1;

        self.$include($scope.get('Native'));

        self.$alias_native("name");

        self.$alias_native("value");

        self.$alias_native("value=");

        if ((($a = $scope.get('Browser')['$supports?']("Attr.isId")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$alias_native("id?", "isId")
          } else {
          return (Opal.defn(self, '$id?', TMP_1 = function() {
            var self = this;

            return self.$name()['$==']("id");
          }, TMP_1.$$arity = 0), nil) && 'id?'
        };
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/character_data"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CharacterData(){};
        var self = $CharacterData = $klass($base, $super, 'CharacterData', $CharacterData);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

        def["native"] = nil;
        Opal.defn(self, '$append', TMP_1 = function ːappend(string) {
          var self = this;

          self["native"].appendData(string);
          return self;
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$data', TMP_2 = function ːdata() {
          var self = this;

          return self["native"].data;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$delete', TMP_3 = function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          self["native"].deleteData(offset, count);
          return self;
        }, TMP_3.$$arity = -2);

        Opal.defn(self, '$insert', TMP_4 = function ːinsert(string, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          self["native"].insertData(offset, string);
          return self;
        }, TMP_4.$$arity = -2);

        self.$alias_native("length");

        Opal.defn(self, '$replace', TMP_5 = function ːreplace(string, offset, count) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          if (count == null) {
            count = self["native"].length;
          }
          self["native"].replaceData(offset, count, string);
          return self;
        }, TMP_5.$$arity = -2);

        return (Opal.defn(self, '$substring', TMP_6 = function ːsubstring(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          return self["native"].substringData(offset, count);
        }, TMP_6.$$arity = -2), nil) && 'substring';
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/text"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        def["native"] = nil;
        Opal.defs(self, '$create', TMP_1 = function ːcreate($a_rest) {
          var $b, self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $gvars.document).$create_text.apply($b, Opal.to_a(args));
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$whole', TMP_2 = function ːwhole() {
          var self = this;

          return self["native"].wholeText;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$split', TMP_3 = function ːsplit(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset));
        }, TMP_3.$$arity = 1);

        return (Opal.defn(self, '$inspect', TMP_4 = function ːinspect() {
          var self = this;

          return "#<DOM::Text: " + (self.$data()) + ">";
        }, TMP_4.$$arity = 0), nil) && 'inspect';
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/cdata"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CDATA(){};
        var self = $CDATA = $klass($base, $super, 'CDATA', $CDATA);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$inspect', TMP_1 = function ːinspect() {
          var self = this;

          return "#<DOM::CDATA: " + (self.$value()) + ">";
        }, TMP_1.$$arity = 0), nil) && 'inspect'
      })($scope.base, $scope.get('Text'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/comment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$inspect', TMP_1 = function ːinspect() {
          var self = this;

          return "#<DOM::Comment: " + (self.$value()) + ">";
        }, TMP_1.$$arity = 0), nil) && 'inspect'
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/attributes"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$name', '$value', '$attribute_nodes', '$!', '$[]=']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10;

          def.namespace = def["native"] = def.element = nil;
          self.$attr_reader("namespace");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element, options) {
            var self = this;

            self.element = element;
            self["native"] = element.$to_n();
            return self.namespace = options['$[]']("namespace");
          }, TMP_1.$$arity = 2);

          if ((($a = ((($b = $scope.get('Browser')['$supports?']("Element.className")) !== false && $b !== nil) ? $b : $scope.get('Browser')['$supports?']("Element.htmlFor"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$[]', TMP_2 = function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            }, TMP_2.$$arity = -2);

            Opal.defn(self, '$[]=', TMP_3 = function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            }, TMP_3.$$arity = -3);
            } else {
            Opal.defn(self, '$[]', TMP_4 = function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            }, TMP_4.$$arity = -2);

            Opal.defn(self, '$[]=', TMP_5 = function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            }, TMP_5.$$arity = -3);
          };

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_6 = function ːeach() {
            var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil;

            TMP_6.$$p = null;
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            ($a = ($b = self.element.$attribute_nodes()).$each, $a.$$p = (TMP_7 = function(attr){var self = TMP_7.$$s || this;
if (attr == null) attr = nil;
            return Opal.yieldX(block, [attr.$name(), attr.$value()]);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
            return self;
          }, TMP_6.$$arity = 0);

          Opal.alias(self, 'get', '[]');

          Opal.defn(self, '$has_key?', TMP_8 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']();
          }, TMP_8.$$arity = 1);

          Opal.defn(self, '$merge!', TMP_10 = function(hash) {
            var $a, $b, TMP_9, self = this;

            ($a = ($b = hash).$each, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return self['$[]='](name, value)}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
            return self;
          }, TMP_10.$$arity = 1);

          return Opal.alias(self, 'set', '[]=');
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/data"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$=~', '$attributes', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Data(){};
          var self = $Data = $klass($base, $super, 'Data', $Data);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6, TMP_7;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element) {
            var $a, self = this;

            self.element = element;
            self["native"] = element.$to_n();
            if ((($a = (typeof(self["native"].$data) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self["native"].$data = {};
            };
          }, TMP_1.$$arity = 1);

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_2 = function ːeach() {
            var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

            TMP_2.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            ($a = ($b = self.element.$attributes()).$each, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this, $c;
if (name == null) name = nil;if (value == null) value = nil;
            if ((($c = name['$=~'](/^data-(.*)$/)) !== nil && (!$c.$$is_boolean || $c == true))) {
                return block.$call((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), value)
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b);
            return self;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$assign', TMP_5 = function ːassign(data) {
            var $a, $b, TMP_4, self = this;

            ($a = ($b = data).$each, $a.$$p = (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
              if (self["native"] == null) self["native"] = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return self["native"].$data[name] = value;}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($b);
            return self;
          }, TMP_5.$$arity = 1);

          Opal.defn(self, '$[]', TMP_6 = function(name) {
            var $a, self = this, data = nil;

            if ((($a = data = self.element['$[]']("data-" + (name))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          }, TMP_6.$$arity = 1);

          return (Opal.defn(self, '$[]=', TMP_7 = function(name, value) {
            var self = this;

            return self["native"].$data[name] = value;
          }, TMP_7.$$arity = 2), nil) && '[]=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/position"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$x=', '$+', '$x', '$to_i', '$y=', '$y', '$-']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Position(){};
          var self = $Position = $klass($base, $super, 'Position', $Position);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          Opal.defn(self, '$get', TMP_2 = function ːget() {
            var $a, self = this, offset = nil, position = nil, parent = nil, parent_offset = nil;

            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = (($scope.get('Browser')).$$scope.get('Position')).$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              if ((($a = parent['$=~']("html")) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                parent_offset = parent.$offset()
              };
              ($a = parent_offset, $a['$x=']($rb_plus($a.$x(), parent.$style()['$[]']("border-top-width").$to_i())));
              ($a = parent_offset, $a['$y=']($rb_plus($a.$y(), parent.$style()['$[]']("border-left-width").$to_i())));};
            return (($scope.get('Browser')).$$scope.get('Position')).$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$x', TMP_3 = function ːx() {
            var self = this;

            return self.$get().$x();
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$y', TMP_4 = function ːy() {
            var self = this;

            return self.$get().$y();
          }, TMP_4.$$arity = 0), nil) && 'y';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/offset"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$to_u', '$===', '$first', '$+', '$-', '$px']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Offset(){};
          var self = $Offset = $klass($base, $super, 'Offset', $Offset);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, $a, TMP_7, TMP_8, TMP_9;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          Opal.defn(self, '$parent', TMP_2 = function ːparent() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n());
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$x', TMP_3 = function ːx() {
            var self = this;

            return self.$get().$x();
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$x=', TMP_4 = function(value) {
            var self = this;

            return self.$set(value, nil);
          }, TMP_4.$$arity = 1);

          Opal.defn(self, '$y', TMP_5 = function ːy() {
            var self = this;

            return self.$get().$y();
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$y=', TMP_6 = function(value) {
            var self = this;

            return self.$set(nil, value);
          }, TMP_6.$$arity = 1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.getBoundingClientRect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$get', TMP_7 = function ːget() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            }, TMP_7.$$arity = 0)
            } else {
            Opal.defn(self, '$get', TMP_8 = function ːget() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            }, TMP_8.$$arity = 0)
          };

          return (Opal.defn(self, '$set', TMP_9 = function ːset($a_rest) {
            var $b, $c, self = this, value, position = nil, offset = nil, top = nil, left = nil, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            value = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              value[$arg_idx - 0] = arguments[$arg_idx];
            }
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              self.element.$style()['$[]=']("position", "relative")};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ((($b = (($scope.get('Browser')).$$scope.get('Position'))['$==='](value.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
              $b = [value.$first().$x(), value.$first().$y()], x = $b[0], y = $b[1], $b
            } else if ((($b = $scope.get('Hash')['$==='](value.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
              $b = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], x = $b[0], y = $b[1], $b
              } else {
              $c = value, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
            };
            if (x !== false && x !== nil) {
              self.element.$style()['$[]=']("left", $rb_plus(($rb_minus(x.$px(), offset.$x())), left))};
            if (y !== false && y !== nil) {
              return self.element.$style()['$[]=']("top", $rb_plus(($rb_minus(y.$px(), offset.$y())), top))
              } else {
              return nil
            };
          }, TMP_9.$$arity = -1), nil) && 'set';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/scroll"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Scroll(){};
          var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

          def["native"] = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          }, TMP_1.$$arity = 1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.scroll")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_2 = function ːto($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
                x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil) ? $b : self.$x());
                y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            }, TMP_2.$$arity = -1);

            Opal.defn(self, '$position', TMP_3 = function ːposition() {
              var self = this;

              return (($scope.get('Browser')).$$scope.get('Position')).$new(self["native"].scrollLeft, self["native"].scrollTop);
            }, TMP_3.$$arity = 0);
          } else if ((($a = $scope.get('Browser')['$supports?']("Element.pageOffset")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_4 = function ːto($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
                x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil) ? $b : self.$x());
                y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            }, TMP_4.$$arity = -1);

            Opal.defn(self, '$position', TMP_5 = function ːposition() {
              var self = this;

              return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
            }, TMP_5.$$arity = 0);
            } else {
            Opal.defn(self, '$to', TMP_6 = function ːto($a_rest) {
              var self = this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            }, TMP_6.$$arity = -1);

            Opal.defn(self, '$position', TMP_7 = function ːposition() {
              var self = this;

              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            }, TMP_7.$$arity = 0);
          };

          Opal.defn(self, '$x', TMP_8 = function ːx() {
            var self = this;

            return self.$position().$x();
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$y', TMP_9 = function ːy() {
            var self = this;

            return self.$position().$y();
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$height', TMP_10 = function ːheight() {
            var self = this;

            return self["native"].scrollHeight;
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$width', TMP_11 = function ːwidth() {
            var self = this;

            return self["native"].scrollWidth;
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$by', TMP_12 = function ːby($a_rest) {
            var $b, $c, self = this, args, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ((($b = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$b.$$is_boolean || $b == true))) {
              x = ((($b = args.$first()['$[]']("x")) !== false && $b !== nil) ? $b : 0);
              y = ((($b = args.$first()['$[]']("y")) !== false && $b !== nil) ? $b : 0);
              } else {
              $c = args, $b = Opal.to_ary($c), x = ($b[0] == null ? nil : $b[0]), y = ($b[1] == null ? nil : $b[1]), $c
            };
            self["native"].scrollBy(x, y);
            return self;
          }, TMP_12.$$arity = -1);

          if ((($a = $scope.get('Browser')['$supports?']("Element.scrollIntoViewIfNeeded")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', TMP_13 = function ːto(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self["native"].scrollIntoViewIfNeeded(align);
            }, TMP_13.$$arity = -1)
            } else {
            Opal.defn(self, '$to', TMP_14 = function ːto(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self.$raise($scope.get('NotImplementedError'));
            }, TMP_14.$$arity = -1)
          };

          return (Opal.defn(self, '$to!', TMP_15 = function(align) {
            var self = this;

            if (align == null) {
              align = true;
            }
            return self["native"].scrollIntoView(align);
          }, TMP_15.$$arity = -1), nil) && 'to!';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/size"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Size(){};
          var self = $Size = $klass($base, $super, 'Size', $Size);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(element, $a_rest) {
            var self = this, inc;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            inc = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              inc[$arg_idx - 1] = arguments[$arg_idx];
            }
            self.element = element;
            self["native"] = element.$to_n();
            return self.include = inc;
          }, TMP_1.$$arity = -2);

          Opal.defn(self, '$width', TMP_2 = function ːwidth() {
            var self = this;

            return self["native"].offsetWidth;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$width=', TMP_3 = function(value) {
            var self = this;

            return self.element.$style()['$[]=']("width", value);
          }, TMP_3.$$arity = 1);

          Opal.defn(self, '$height', TMP_4 = function ːheight() {
            var self = this;

            return self["native"].offsetHeight;
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$height=', TMP_5 = function(value) {
            var self = this;

            return self.element.$style()['$[]=']("height", value);
          }, TMP_5.$$arity = 1), nil) && 'height=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function ːvalue() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          Opal.defn(self, '$checked?', TMP_3 = function() {
            var self = this;

            return self["native"].checked;
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$clear', TMP_4 = function ːclear() {
            var self = this;

            return self["native"].value = '';
          }, TMP_4.$$arity = 0), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/select"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function ːvalue() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$labels', TMP_2 = function ːlabels() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].labels));
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$options', TMP_3 = function ːoptions() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].options));
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$option', TMP_4 = function ːoption() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex]);
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$index', TMP_5 = function ːindex() {
            var self = this;

            return self["native"].selectedIndex;
          }, TMP_5.$$arity = 0);

          self.$alias_native("multiple?", "multiple");

          self.$alias_native("required?", "required");

          return self.$alias_native("length");
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/image"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

          def["native"] = nil;
          Opal.defn(self, '$complete?', TMP_1 = function() {
            var self = this;

            return self["native"].complete;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$cross?', TMP_2 = function() {
            var self = this;

            return self["native"].crossOrigin;
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$height', TMP_3 = function ːheight() {
            var self = this;

            return self["native"].naturalHeight;
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$width', TMP_4 = function ːwidth() {
            var self = this;

            return self["native"].naturalWidth;
          }, TMP_4.$$arity = 0), nil) && 'width';
        })($scope.base, $scope.get('Element'));

        return Opal.cdecl($scope, 'Img', $scope.get('Image'));
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/template"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Template(){};
          var self = $Template = $klass($base, $super, 'Template', $Template);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def["native"] = nil;
          return (Opal.defn(self, '$content', TMP_1 = function ːcontent() {
            var self = this;

            return self.$DOM(self["native"].content);
          }, TMP_1.$$arity = 0), nil) && 'content'
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element/textarea"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Textarea(){};
          var self = $Textarea = $klass($base, $super, 'Textarea', $Textarea);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

          def["native"] = nil;
          Opal.defn(self, '$value', TMP_1 = function ːvalue() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$value=', TMP_2 = function(value) {
            var self = this;

            return self["native"].value = value;
          }, TMP_2.$$arity = 1);

          return (Opal.defn(self, '$clear', TMP_3 = function ːclear() {
            var self = this;

            return self["native"].value = '';
          }, TMP_3.$$arity = 0), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/element"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$to_proc', '$split', '$===', '$assign', '$height', '$size', '$height=', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$-', '$width', '$width=']);
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, $c, TMP_51, TMP_52;

        def["native"] = nil;
        Opal.defs(self, '$create', TMP_1 = function ːcreate($a_rest) {
          var $b, self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $gvars.document).$create_element.apply($b, Opal.to_a(args));
        }, TMP_1.$$arity = -1);

        Opal.defs(self, '$new', TMP_2 = function(node) {
          var $a, $b, $c, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, name = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_2.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            name = (node.nodeName).$capitalize();
            if ((($a = $scope.get('Element').$constants()['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('Element').$const_get(name).$new(node)
              } else {
              return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_2, false, $Element)), $a.$$p = $iter, $a).apply($b, $zuper)
            };
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'new', TMP_2, false, $Element)), $a.$$p = $iter, $a).apply($c, $zuper)
          };
        }, TMP_2.$$arity = 1);

        self.$include((($scope.get('Event')).$$scope.get('Target')));

        ($a = ($b = self).$target, $a.$$p = (TMP_3 = function(value){var self = TMP_3.$$s || this;
if (value == null) value = nil;
        
          try {return self.$DOM(value) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);

        if ((($a = $scope.get('Browser')['$supports?']("Element.matches")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_4 = function(selector) {
            var self = this;

            return self["native"].matches(selector);
          }, TMP_4.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Opera)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_5 = function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector);
          }, TMP_5.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Internet Explorer)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_6 = function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector);
          }, TMP_6.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Firefox)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_7 = function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector);
          }, TMP_7.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Chrome)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_8 = function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector);
          }, TMP_8.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', TMP_9 = function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector);
          }, TMP_9.$$arity = 1)
          } else {
          Opal.defn(self, '$=~', TMP_10 = function(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "selector matching unsupported");
          }, TMP_10.$$arity = 1)
        };

        Opal.defn(self, '$/', TMP_12 = function($a_rest) {
          var $b, $c, TMP_11, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet')['$[]'](($b = ($c = paths).$map, $b.$$p = (TMP_11 = function(path){var self = TMP_11.$$s || this;
if (path == null) path = nil;
          return self.$xpath(path)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $b).call($c));
        }, TMP_12.$$arity = -1);

        Opal.defn(self, '$[]', TMP_13 = function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$get(name, options);
        }, TMP_13.$$arity = -2);

        Opal.defn(self, '$[]=', TMP_14 = function(name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$set(name, value, options);
        }, TMP_14.$$arity = -3);

        Opal.defn(self, '$add_class', TMP_15 = function ːadd_class($a_rest) {
          var $b, self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          classes = $rb_plus(self.$class_names(), names);
          if ((($b = classes['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            self["native"].className = classes.$uniq().$join(" ");
          };
          return self;
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$at', TMP_16 = function ːat(path_or_selector) {
          var $a, self = this;

          return ((($a = self.$xpath(path_or_selector).$first()) !== false && $a !== nil) ? $a : self.$css(path_or_selector).$first());
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$at_css', TMP_18 = function ːat_css($a_rest) {
          var $b, $c, TMP_17, self = this, rules, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return ($b = ($c = rules).$each, $b.$$p = (TMP_17 = function(rule){var self = TMP_17.$$s || this, $a;
if (rule == null) rule = nil;
          if ((($a = result = self.$css(rule).$first()) !== nil && (!$a.$$is_boolean || $a == true))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_17.$$s = self, TMP_17.$$brk = $brk, TMP_17.$$arity = 1, TMP_17), $b).call($c)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_18.$$arity = -1);

        Opal.defn(self, '$at_xpath', TMP_20 = function ːat_xpath($a_rest) {
          var $b, $c, TMP_19, self = this, paths, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return ($b = ($c = paths).$each, $b.$$p = (TMP_19 = function(path){var self = TMP_19.$$s || this, $a;
if (path == null) path = nil;
          if ((($a = result = self.$xpath(path).$first()) !== nil && (!$a.$$is_boolean || $a == true))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19.$$brk = $brk, TMP_19.$$arity = 1, TMP_19), $b).call($c)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_20.$$arity = -1);

        Opal.alias(self, 'attr', '[]');

        Opal.alias(self, 'attribute', '[]');

        Opal.defn(self, '$attributes', TMP_21 = function ːattributes(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return $scope.get('Attributes').$new(self, options);
        }, TMP_21.$$arity = -1);

        Opal.defn(self, '$attribute_nodes', TMP_22 = function ːattribute_nodes() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].attributes, $hash2(["get"], {"get": "item"})));
        }, TMP_22.$$arity = 0);

        self.$alias_native("class_name", "className");

        Opal.defn(self, '$class_names', TMP_23 = function ːclass_names() {
          var $a, $b, self = this;

          return ($a = ($b = (self["native"].className).$split(/\s+/)).$reject, $a.$$p = "empty?".$to_proc(), $a).call($b);
        }, TMP_23.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Query.css")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', TMP_24 = function ːcss(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].querySelectorAll(path)))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_24.$$arity = 1)
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', TMP_25 = function ːcss(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_25.$$arity = 1)
          } else {
          Opal.defn(self, '$css', TMP_26 = function ːcss(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by CSS selector unsupported");
          }, TMP_26.$$arity = 1)
        };

        Opal.defn(self, '$data', TMP_27 = function ːdata(value) {
          var $a, self = this, data = nil;

          if (value == null) {
            value = nil;
          }
          data = $scope.get('Data').$new(self);
          if (value !== false && value !== nil) {
            } else {
            return data
          };
          if ((($a = $scope.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            data.$assign(value)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_27.$$arity = -1);

        Opal.alias(self, 'get_attribute', '[]');

        Opal.alias(self, 'get', '[]');

        Opal.defn(self, '$height', TMP_28 = function ːheight() {
          var self = this;

          return self.$size().$height();
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$height=', TMP_29 = function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$height='].apply($b, $a), $a[$a.length-1]);
        }, TMP_29.$$arity = 1);

        Opal.defn(self, '$id', TMP_30 = function ːid() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    ;
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$id=', TMP_31 = function(value) {
          var self = this;

          return self["native"].id = value.$to_s();
        }, TMP_31.$$arity = 1);

        Opal.defn(self, '$inner_dom', TMP_32 = function ːinner_dom() {
          var $a, $b, self = this, $iter = TMP_32.$$p, block = $iter || nil, doc = nil;

          TMP_32.$$p = null;
          self.$clear();
          doc = self.$document();
          return self['$<<'](($a = ($b = $scope.get('Builder')).$new, $a.$$p = block.$to_proc(), $a).call($b, doc, self).$to_a());
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$inner_dom=', TMP_33 = function(node) {
          var self = this;

          self.$clear();
          return self['$<<'](node);
        }, TMP_33.$$arity = 1);

        Opal.defn(self, '$inspect', TMP_34 = function ːinspect() {
          var $a, self = this, inspect = nil;

          inspect = self.$name().$downcase();
          if ((($a = self.$id()) !== nil && (!$a.$$is_boolean || $a == true))) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ((($a = self.$class_names()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "#<DOM::Element: " + (inspect) + ">";
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$offset', TMP_35 = function ːoffset($a_rest) {
          var $b, self = this, values, off = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          values = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            values[$arg_idx - 0] = arguments[$arg_idx];
          }
          off = $scope.get('Offset').$new(self);
          if ((($b = values['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = off).$set.apply($b, Opal.to_a(values))
          };
          return off;
        }, TMP_35.$$arity = -1);

        Opal.defn(self, '$offset=', TMP_36 = function(value) {
          var $a, self = this;

          return ($a = self.$offset()).$set.apply($a, Opal.to_a(value));
        }, TMP_36.$$arity = 1);

        Opal.defn(self, '$position', TMP_37 = function ːposition() {
          var self = this;

          return $scope.get('Position').$new(self);
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$scroll', TMP_38 = function ːscroll() {
          var self = this;

          return $scope.get('Scroll').$new(self);
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$search', TMP_40 = function ːsearch($a_rest) {
          var $b, $c, TMP_39, self = this, selectors;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          selectors = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            selectors[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $scope.get('NodeSet').$new(($b = ($c = selectors).$map, $b.$$p = (TMP_39 = function(selector){var self = TMP_39.$$s || this;
if (selector == null) selector = nil;
          return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a())}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $b).call($c).$flatten().$uniq());
        }, TMP_40.$$arity = -1);

        Opal.alias(self, 'set', '[]=');

        Opal.alias(self, 'set_attribute', '[]=');

        Opal.defn(self, '$style', TMP_41 = function ːstyle(data) {
          var $a, $b, self = this, $iter = TMP_41.$$p, block = $iter || nil, style = nil;

          if (data == null) {
            data = nil;
          }
          TMP_41.$$p = null;
          style = (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].style);
          if ((($a = ((($b = data) !== false && $b !== nil) ? $b : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return style
          };
          if ((($a = $scope.get('String')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
            style.$replace(data)
          } else if ((($a = $scope.get('Hash')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
            style.$assign(data)
          } else if (block !== false && block !== nil) {
            ($a = ($b = style).$apply, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_41.$$arity = -1);

        if ((($a = $scope.get('Browser')['$supports?']("CSS.computed")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', TMP_42 = function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self.$window().$to_n().getComputedStyle(self["native"], null));
          }, TMP_42.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("CSS.current")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', TMP_43 = function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].currentStyle);
          }, TMP_43.$$arity = 0)
          } else {
          Opal.defn(self, '$style!', TMP_44 = function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "computed style unsupported");
          }, TMP_44.$$arity = 0)
        };

        Opal.defn(self, '$remove_attribute', TMP_45 = function ːremove_attribute(name) {
          var self = this;

          return self["native"].removeAttribute(name);
        }, TMP_45.$$arity = 1);

        Opal.defn(self, '$remove_class', TMP_46 = function ːremove_class($a_rest) {
          var $b, self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          classes = $rb_minus(self.$class_names(), names);
          if ((($b = classes['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self["native"].removeAttribute('class');
            } else {
            self["native"].className = classes.$join(" ");
          };
          return self;
        }, TMP_46.$$arity = -1);

        Opal.defn(self, '$size', TMP_47 = function ːsize($a_rest) {
          var $b, self = this, inc;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          inc = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            inc[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('Size')).$new.apply($b, [self].concat(Opal.to_a(inc)));
        }, TMP_47.$$arity = -1);

        Opal.defn(self, '$width', TMP_48 = function ːwidth() {
          var self = this;

          return self.$size().$width();
        }, TMP_48.$$arity = 0);

        Opal.defn(self, '$width=', TMP_49 = function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$width='].apply($b, $a), $a[$a.length-1]);
        }, TMP_49.$$arity = 1);

        Opal.defn(self, '$window', TMP_50 = function ːwindow() {
          var self = this;

          return self.$document().$window();
        }, TMP_50.$$arity = 0);

        if ((($a = ((($c = $scope.get('Browser')['$supports?']("Query.xpath")) !== false && $c !== nil) ? $c : $scope.get('Browser')['$loaded?']("wicked-good-xpath"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$loaded?']("wicked-good-xpath")) !== nil && (!$a.$$is_boolean || $a == true))) {
            wgxpath.install();};

          return (Opal.defn(self, '$xpath', TMP_51 = function ːxpath(path) {
            var self = this;

            try {
              return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  return $scope.get('NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          }, TMP_51.$$arity = 1), nil) && 'xpath';
          } else {
          return (Opal.defn(self, '$xpath', TMP_52 = function ːxpath(path) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by XPath unsupported");
          }, TMP_52.$$arity = 1), nil) && 'xpath'
        };
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/document"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, $a, TMP_8, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

        def["native"] = nil;
        Opal.defn(self, '$[]', TMP_1 = function(what) {
          var $a, self = this;

          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          return ((($a = self.$css(what).$first()) !== false && $a !== nil) ? $a : self.$xpath(what).$first());
        }, TMP_1.$$arity = 1);

        Opal.alias(self, 'at', '[]');

        Opal.defn(self, '$body', TMP_2 = function ːbody() {
          var self = this;

          return self.$DOM(self["native"].body);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$create_element', TMP_3 = function ːcreate_element(name, options) {
          var $a, self = this, ns = nil;

          if (options == null) {
            options = $hash2([], {});
          }
          if ((($a = ns = options['$[]']("namespace")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
            } else {
            return self.$DOM(self["native"].createElement(name))
          };
        }, TMP_3.$$arity = -2);

        Opal.defn(self, '$create_text', TMP_4 = function ːcreate_text(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content));
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$document', TMP_5 = function ːdocument() {
          var self = this;

          return self;
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$head', TMP_6 = function ːhead() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0]);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
          var self = this;

          return "#<DOM::Document>";
        }, TMP_7.$$arity = 0);

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_8 = function ːready() {
            var $a, $b, TMP_9, self = this, $iter = TMP_8.$$p, block = $iter || nil;

            TMP_8.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
            e.$off();
              return block.$call();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b, "dom:load");
          }, TMP_8.$$arity = 0)
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_10 = function ːready() {
            var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

            TMP_10.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_11 = function(e){var self = TMP_11.$$s || this, $c;
if (e == null) e = nil;
            if ((($c = self['$ready?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                e.$off();
                return block.$call();
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b, "ready:state:change");
          }, TMP_10.$$arity = 0)
          } else {
          Opal.defn(self, '$ready', TMP_12 = function ːready() {
            var self = this, $iter = TMP_12.$$p, block = $iter || nil;

            TMP_12.$$p = null;
            return self.$raise($scope.get('NotImplementedError'), "document ready unsupported");
          }, TMP_12.$$arity = 0)
        };

        Opal.defn(self, '$ready?', TMP_13 = function() {
          var self = this;

          return self["native"].readyState === "complete";
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$root', TMP_14 = function ːroot() {
          var self = this;

          return self.$DOM(self["native"].documentElement);
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$root=', TMP_15 = function(element) {
          var self = this;

          return self["native"].documentElement = $scope.get('Native').$convert(element);
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$style_sheets', TMP_17 = function ːstyle_sheets() {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_16 = function(e){var self = TMP_16.$$s || this;
if (e == null) e = nil;
          return (($scope.get('CSS')).$$scope.get('StyleSheet')).$new(e)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b, self["native"].styleSheets);
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$title', TMP_18 = function ːtitle() {
          var self = this;

          return self["native"].title;
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$title=', TMP_19 = function(value) {
          var self = this;

          return self["native"].title = value;
        }, TMP_19.$$arity = 1);

        if ((($a = $scope.get('Browser')['$supports?']("Document.view")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', TMP_20 = function ːwindow() {
            var self = this;

            return $scope.get('Window').$new(self["native"].defaultView);
          }, TMP_20.$$arity = 0), nil) && 'window'
        } else if ((($a = $scope.get('Browser')['$supports?']("Document.window")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', TMP_21 = function ːwindow() {
            var self = this;

            return $scope.get('Window').$new(self["native"].parentWindow);
          }, TMP_21.$$arity = 0), nil) && 'window'
          } else {
          return (Opal.defn(self, '$window', TMP_22 = function ːwindow() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window from document unsupported");
          }, TMP_22.$$arity = 0), nil) && 'window'
        };
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/document_fragment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DocumentFragment(){};
        var self = $DocumentFragment = $klass($base, $super, 'DocumentFragment', $DocumentFragment);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/builder"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  (function($base) {
    var $Utils, self = $Utils = $module($base, 'Utils');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$heredoc', TMP_1 = function ːheredoc(string) {
      var self = this;

      return string;
    }, TMP_1.$$arity = 1)
  })($scope.get('Paggio'));
  (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.on = nil;
    return (Opal.defn(self, '$on', TMP_2 = function ːon($a_rest) {
      var $b, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      return (((($b = self.on) !== false && $b !== nil) ? $b : self.on = []))['$<<']([args, block]);
    }, TMP_2.$$arity = -1), nil) && 'on'
  })((($scope.get('Paggio')).$$scope.get('HTML')), $scope.get('BasicObject'));
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_10, $c, TMP_11, $d, TMP_15;

      (function($base, $super) {
        function $Builder(){};
        var self = $Builder = $klass($base, $super, 'Builder', $Builder);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6, TMP_7, TMP_9;

        def.builder = def.roots = nil;
        Opal.defs(self, '$to_h', TMP_3 = function ːto_h() {
          var $a, self = this;
          if (self.builders == null) self.builders = nil;

          return ((($a = self.builders) !== false && $a !== nil) ? $a : self.builders = $hash2([], {}));
        }, TMP_3.$$arity = 0);

        Opal.defs(self, '$for', TMP_4 = function(klass) {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          if (block !== false && block !== nil) {
            return self.$to_h()['$[]='](klass, block)
            } else {
            return self.$to_h()['$[]'](klass)
          };
        }, TMP_4.$$arity = 1);

        Opal.defs(self, '$build', TMP_6 = function ːbuild(builder, item) {try {

          var $a, $b, TMP_5, self = this;

          ($a = ($b = self.$to_h()).$each, $a.$$p = (TMP_5 = function(klass, block){var self = TMP_5.$$s || this, $c;
if (klass == null) klass = nil;if (block == null) block = nil;
          if ((($c = klass['$==='](item)) !== nil && (!$c.$$is_boolean || $c == true))) {
              Opal.ret(block.$call(builder, item))
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b);
          return self.$raise($scope.get('ArgumentError'), "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_6.$$arity = 2);

        self.$attr_reader("document", "element");

        Opal.defn(self, '$initialize', TMP_7 = function ːinitialize(document) {
          var $a, $b, $c, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          self.document = document;
          self.builder = ($a = ($b = (($scope.get('Paggio')).$$scope.get('HTML'))).$new, $a.$$p = block.$to_proc(), $a).call($b);
          return self.roots = ($a = ($c = self.builder.$each()).$map, $a.$$p = (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
          return $scope.get('Builder').$build(self, e)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c);
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$to_a', TMP_9 = function ːto_a() {
          var self = this;

          return self.roots;
        }, TMP_9.$$arity = 0), nil) && 'to_a';
      })($scope.base, null);

      ($a = ($b = $scope.get('Builder')).$for, $a.$$p = (TMP_10 = function(b, item){var self = TMP_10.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return b.$document().$create_text(item)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b, $scope.get('String'));

      ($a = ($c = $scope.get('Builder')).$for, $a.$$p = (TMP_11 = function(b, item){var self = TMP_11.$$s || this, $d, $e, TMP_12, $f, TMP_13, $g, TMP_14, dom = nil, on = nil, inner = nil;
if (b == null) b = nil;if (item == null) item = nil;
      dom = b.$document().$create_element(item.name);
        if ((($d = $scope.get('Hash')['$==='](item.attributes)) !== nil && (!$d.$$is_boolean || $d == true))) {
          dom.$attributes()['$merge!'](item.attributes)};
        ($d = ($e = (item.class_names)).$each, $d.$$p = (TMP_12 = function(value){var self = TMP_12.$$s || this;
if (value == null) value = nil;
        return dom.$add_class(value)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $d).call($e);
        if ((($d = on = item.on || nil) !== nil && (!$d.$$is_boolean || $d == true))) {
          ($d = ($f = on).$each, $d.$$p = (TMP_13 = function(args, block){var self = TMP_13.$$s || this, $g, $h;
if (args == null) args = nil;if (block == null) block = nil;
          return ($g = ($h = dom).$on, $g.$$p = block.$to_proc(), $g).apply($h, Opal.to_a(args))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $d).call($f)};
        if ((($d = inner = item.inner_html || nil) !== nil && (!$d.$$is_boolean || $d == true))) {
          (($d = [inner]), $g = dom, $g['$inner_html='].apply($g, $d), $d[$d.length-1])
          } else {
          ($d = ($g = item).$each, $d.$$p = (TMP_14 = function(child){var self = TMP_14.$$s || this;
if (child == null) child = nil;
          return dom['$<<']($scope.get('Builder').$build(b, child))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $d).call($g)
        };
        return dom;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($c, (((($scope.get('Paggio')).$$scope.get('HTML'))).$$scope.get('Element')));

      ($a = ($d = $scope.get('Builder')).$for, $a.$$p = (TMP_15 = function(b, item){var self = TMP_15.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return item}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($d, (($scope.get('DOM')).$$scope.get('Node')));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom/mutation_observer"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$to_n']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MutationObserver(){};
        var self = $MutationObserver = $klass($base, $super, 'MutationObserver', $MutationObserver);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15;

        def["native"] = nil;
        Opal.defs(self, '$supported?', TMP_1 = function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("MutationObserver");
        }, TMP_1.$$arity = 0);

        self.$include($scope.get('Native'));

        (function($base, $super) {
          function $Record(){};
          var self = $Record = $klass($base, $super, 'Record', $Record);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

          def["native"] = nil;
          self.$include($scope.get('Native'));

          Opal.defn(self, '$type', TMP_2 = function ːtype() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;if ("attributes"['$===']($case)) {return "attribute"}else if ("childList"['$===']($case)) {return "tree"}else if ("characterData"['$===']($case)) {return "cdata"}else { return nil }})();
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$attribute?', TMP_3 = function() {
            var self = this;

            return self.$type()['$==']("attribute");
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$tree?', TMP_4 = function() {
            var self = this;

            return self.$type()['$==']("tree");
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$cdata?', TMP_5 = function() {
            var self = this;

            return self.$type()['$==']("cdata");
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$added', TMP_6 = function ːadded() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].addedNodes != null) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].addedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$removed', TMP_7 = function ːremoved() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].removedNodes != null) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].removedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$target', TMP_8 = function ːtarget() {
            var self = this;

            return self.$DOM(self["native"].target);
          }, TMP_8.$$arity = 0);

          self.$alias_native("old", "oldValue");

          self.$alias_native("name", "attributeName");

          return self.$alias_native("namespace", "attributeNamespace");
        })($scope.base, null);

        Opal.defn(self, '$initialize', TMP_9 = function ːinitialize() {
          var $a, $b, TMP_10, $c, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          TMP_9.$$p = null;
          
      var func = function(records) {
        return block.$call(($a = ($b = (records)).$map, $a.$$p = (TMP_10 = function(r){var self = TMP_10.$$s || this;
if (r == null) r = nil;
          return (((((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('MutationObserver'))).$$scope.get('Record')).$new(r)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b));
      }
    ;
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_9, false)), $a.$$p = null, $a).call($c, new window.MutationObserver(func));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$observe', TMP_11 = function ːobserve(target, options) {
          var self = this;

          if (options == null) {
            options = nil;
          }
          if (options !== false && options !== nil) {
            } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe($scope.get('Native').$convert(target), self.$convert(options));
          return self;
        }, TMP_11.$$arity = -2);

        Opal.defn(self, '$take', TMP_13 = function ːtake() {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = (self["native"].takeRecords())).$map, $a.$$p = (TMP_12 = function(r){var self = TMP_12.$$s || this;
if (r == null) r = nil;
          return $scope.get('Record').$new(r)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$disconnect', TMP_14 = function ːdisconnect() {
          var self = this;

          return self["native"].disconnect();
        }, TMP_14.$$arity = 0);

        self.$private();

        return (Opal.defn(self, '$convert', TMP_15 = function ːconvert(hash) {
          var $a, self = this, options = nil, attrs = nil, filter = nil, cdata = nil;

          options = self.$Native({});
          if ((($a = hash['$[]']("children")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("childList", true)};
          if ((($a = hash['$[]']("tree")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("subtree", true)};
          if ((($a = attrs = hash['$[]']("attributes")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributes", true);
            if (attrs['$==']("old")) {
              options['$[]=']("attributeOldValue", true)};};
          if ((($a = filter = hash['$[]']("filter")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributeFilter", filter)};
          if ((($a = cdata = hash['$[]']("cdata")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("characterData", true);
            if (cdata['$==']("old")) {
              options['$[]=']("characterDataOldValue", true)};};
          return options.$to_n();
        }, TMP_15.$$arity = 1), nil) && 'convert';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/dom"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$XML', TMP_1 = function ːXML(what) {
      var self = this;

      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    
      return self.$DOM(doc);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$DOM', TMP_2 = function ːDOM($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil, document = nil, roots = nil, what = nil;
      if ($gvars.document == null) $gvars.document = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        document = ((($b = args.$shift()) !== false && $b !== nil) ? $b : $gvars.document);
        roots = ($b = ($c = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Builder'))).$new, $b.$$p = block.$to_proc(), $b).call($c, document).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
          } else {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('NodeSet')).$new(roots)
        };
        } else {
        what = args.$shift();
        document = ((($b = args.$shift()) !== false && $b !== nil) ? $b : $gvars.document);
        if ((($b = self['$native?'](what)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node')).$new(what)
        } else if ((($b = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node'))['$==='](what)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return what
        } else if ((($b = $scope.get('String')['$==='](what)) !== nil && (!$b.$$is_boolean || $b == true))) {
          
          var doc = $scope.get('Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        ;
          } else {
          return self.$raise($scope.get('ArgumentError'), "argument not DOM convertible")
        };
      };
    }, TMP_2.$$arity = -1);
  })($scope.base);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      def["native"] = nil;
      return (Opal.defn(self, '$document', TMP_3 = function ːdocument() {
        var self = this;

        return self.$DOM(self["native"].document);
      }, TMP_3.$$arity = 0), nil) && 'document'
    })($scope.base, null)
  })($scope.base);
  return $gvars.document = $gvars.window.$document();
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/css/declaration"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$important', '$name', '$value', '$to_proc', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Declaration(){};
        var self = $Declaration = $klass($base, $super, 'Declaration', $Declaration);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        self.$include($scope.get('Enumerable'));

        Opal.defn(self, '$rule', TMP_1 = function ːrule() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].parentRule) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$assign', TMP_3 = function ːassign(data) {
          var $a, $b, TMP_2, self = this;

          ($a = ($b = data).$each, $a.$$p = (TMP_2 = function(name, value){var self = TMP_2.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self['$[]='](name, value)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
          return self;
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$replace', TMP_4 = function ːreplace(string) {
          var self = this;

          return self["native"].cssText = string;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$apply', TMP_5 = function ːapply() {
          var $a, $b, TMP_6, $c, $d, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = ($c = ($d = (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Definition'))).$new, $c.$$p = block.$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_6 = function(style){var self = TMP_6.$$s || this, $c;
            if (self["native"] == null) self["native"] = nil;
if (style == null) style = nil;
          if ((($c = style.$important()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self["native"].setProperty(style.$name(), style.$value(), "important");
              } else {
              return self["native"].setProperty(style.$name(), style.$value(), "");
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$delete', TMP_7 = function(name) {
          var self = this;

          return self["native"].removeProperty(name);
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$[]', TMP_8 = function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    ;
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$[]=', TMP_9 = function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "");
        }, TMP_9.$$arity = 2);

        Opal.defn(self, '$important?', TMP_10 = function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important";
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$each', TMP_11 = function ːeach() {
          var self = this, $iter = TMP_11.$$p, block = $iter || nil;

          TMP_11.$$p = null;
          if ((block !== nil)) {
            } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        Opal.yieldX(block, [name, self['$[]'](name)])
      }
    ;
          return self;
        }, TMP_11.$$arity = 0);

        self.$alias_native("length");

        self.$alias_native("to_s", "cssText");

        return (Opal.defn(self, '$method_missing', TMP_12 = function ːmethod_missing(name, value) {
          var $a, self = this;

          if (value == null) {
            value = nil;
          }
          if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self['$[]='](name['$[]']($range(0, -2, false)), value)
            } else {
            return self['$[]'](name)
          };
        }, TMP_12.$$arity = -2), nil) && 'method_missing';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/css/style_sheet"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$log', '$==', '$id', '$rules', '$__send__', '$to_proc']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StyleSheet(){};
        var self = $StyleSheet = $klass($base, $super, 'StyleSheet', $StyleSheet);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_10, TMP_12, TMP_13;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(what) {
          var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          if ((($a = what['$is_a?']((($scope.get('DOM')).$$scope.get('Element')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b, what.$to_n().sheet)
            } else {
            return ($a = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($c, what)
          };
        }, TMP_1.$$arity = 1);

        self.$alias_native("disabled?", "disabled");

        self.$alias_native("href");

        self.$alias_native("title");

        self.$alias_native("type");

        Opal.defn(self, '$media', TMP_2 = function ːmedia() {
          var $a, self = this;

          if ((($a = self["native"].media != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Media').$new(self["native"].media)
            } else {
            return nil
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$owner', TMP_3 = function ːowner() {
          var self = this;

          return self.$DOM(self["native"].ownerNode);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$parent', TMP_4 = function ːparent() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Sheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$rules', TMP_6 = function ːrules() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return $scope.get('Rule').$new(e)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b, self["native"].cssRules);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$delete', TMP_7 = function(index) {
          var self = this;

          return self["native"].deleteRule(index);
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$insert', TMP_8 = function ːinsert(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index);
        }, TMP_8.$$arity = 2);

        Opal.defn(self, '$rule', TMP_10 = function ːrule(selector, body) {
          var $a, $b, TMP_9, self = this;

          if ((($a = $scope.get('String')['$==='](selector)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            selector = selector.$join(", ")
          };
          if ((($a = $scope.get('String')['$==='](body)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            body = ($a = ($b = body).$map, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return "" + (name) + ": " + (value) + ";"}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        }, TMP_10.$$arity = 2);

        Opal.defn(self, '$[]', TMP_12 = function(id) {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = self.$rules()).$find, $a.$$p = (TMP_11 = function(r){var self = TMP_11.$$s || this;
if (r == null) r = nil;
          self.$log(r);
            return r.$id()['$=='](id);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_13 = function ːmethod_missing($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_13.$$p = null;
          return ($b = ($c = self.$rules()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
        }, TMP_13.$$arity = -1);

        return (function($base, $super) {
          function $Media(){};
          var self = $Media = $klass($base, $super, 'Media', $Media);

          var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15;

          def["native"] = nil;
          self.$alias_native("text", "mediaText");

          self.$alias_native("to_s", "mediaText");

          Opal.defn(self, '$push', TMP_14 = function ːpush(medium) {
            var self = this;

            self["native"].appendMedium(medium);
            return self;
          }, TMP_14.$$arity = 1);

          return (Opal.defn(self, '$delete', TMP_15 = function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium);
          }, TMP_15.$$arity = 1), nil) && 'delete';
        })($scope.base, (($scope.get('Native')).$$scope.get('Array')));
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/css/rule"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'STYLE_RULE', 1);

        Opal.cdecl($scope, 'CHARSET_RULE', 2);

        Opal.cdecl($scope, 'IMPORT_RULE', 3);

        Opal.cdecl($scope, 'MEDIA_RULE', 4);

        Opal.cdecl($scope, 'FONT_FACE_RULE', 5);

        Opal.cdecl($scope, 'PAGE_RULE', 6);

        Opal.cdecl($scope, 'KEYFRAMES_RULE', 7);

        Opal.cdecl($scope, 'KEYFRAME_RULE', 8);

        Opal.cdecl($scope, 'NAMESPACE_RULE', 10);

        Opal.cdecl($scope, 'COUNTER_STYLE_RULE', 11);

        Opal.cdecl($scope, 'SUPPORTS_RULE', 12);

        Opal.cdecl($scope, 'DOCUMENT_RULE', 13);

        Opal.cdecl($scope, 'FONT_FEATURE_VALUES_RULE', 14);

        Opal.cdecl($scope, 'VIEWPORT_RULE', 15);

        Opal.cdecl($scope, 'REGION_STYLE_RULE', 16);

        Opal.defs(self, '$new', TMP_1 = function(rule) {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          if (self['$==']($scope.get('Rule'))) {
            ((($a = self.classes) !== false && $a !== nil) ? $a : self.classes = [nil, $scope.get('Style')]);
            if ((($a = klass = self.classes['$[]'](rule.type)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(rule)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Rule object")
            };
            } else {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_1, false, $Rule)), $a.$$p = null, $a).call($b, rule)
          };
        }, TMP_1.$$arity = 1);

        self.$alias_native("text", "cssText");

        self.$alias_native("to_s", "cssText");

        Opal.defn(self, '$parent', TMP_2 = function ːparent() {
          var $a, self = this;

          if ((($a = self["native"].parentRule != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$style_sheet', TMP_3 = function ːstyle_sheet() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('StyleSheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0), nil) && 'style_sheet';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/css/rule/style"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$to_proc', '$declaration']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Style(){};
          var self = $Style = $klass($base, $super, 'Style', $Style);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          def["native"] = nil;
          self.$alias_native("selector", "selectorText");

          self.$alias_native("id", "selectorText");

          Opal.defn(self, '$declaration', TMP_1 = function ːdeclaration() {
            var self = this;

            return $scope.get('Declaration').$new(self["native"].style);
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$method_missing', TMP_2 = function ːmethod_missing($a_rest) {
            var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            TMP_2.$$p = null;
            return ($b = ($c = self.$declaration()).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
          }, TMP_2.$$arity = -1), nil) && 'method_missing';
        })($scope.base, $scope.get('Rule'))
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.0.beta3 */
Opal.modules["browser/css"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$inner_text=', '$css', '$to_proc']);
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$CSS', TMP_1 = function ːCSS(text) {
      var $a, $b, $c, $d, self = this, $iter = TMP_1.$$p, block = $iter || nil, style = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if (text == null) {
        text = nil;
      }
      TMP_1.$$p = null;
      style = $gvars.document.$create_element("style");
      style['$[]=']("type", "text/css");
      if (block !== false && block !== nil) {
        (($a = [($c = ($d = $scope.get('Paggio')).$css, $c.$$p = block.$to_proc(), $c).call($d)]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [text]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
      };
      return style;
    }, TMP_1.$$arity = -1)
  })($scope.base);
};

/* Generated by Opal 0.10.0.beta3 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
})(Opal);
