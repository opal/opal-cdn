Opal.modules["nodejs/kernel"]=function(Opal){var TMP_3,TMP_4,self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$module=Opal.module;Opal.add_stubs(["$to_str","$new","$to_s"]);Opal.exit=process.exit;(function($base){var $Kernel,self=$Kernel=$module($base,"Kernel");var def=self.$$proto,$scope=self.$$scope,TMP_1,TMP_2;Opal.cdecl($scope,"NODE_REQUIRE",require);Opal.defn(self,"$caller",TMP_1=function ːcaller(){var self=this;var stack;try{var err=Error("my error");throw err}catch(e){stack=e.stack}return stack.$split("\n").slice(3)},TMP_1.$$arity=0);Opal.defn(self,"$node_require",TMP_2=function ːnode_require(path){var self=this;return $scope.get("NODE_REQUIRE")(path.$to_str())},TMP_2.$$arity=1)})($scope.base);Opal.cdecl($scope,"ARGV",process.argv.slice(2));Opal.cdecl($scope,"ENV",$scope.get("Object").$new());Opal.defs($scope.get("ENV"),"$[]=",TMP_3=function(name,value){var self=this;return process.env[name.$to_s()]=value.$to_s()},TMP_3.$$arity=2);return(Opal.defs($scope.get("ENV"),"$[]",TMP_4=function(name){var self=this;return process.env[name]||nil},TMP_4.$$arity=1),nil)&&"[]"};Opal.modules["nodejs/file"]=function(Opal){var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$klass=Opal.klass;Opal.add_stubs(["$include","$node_require","$size","$respond_to?","$path","$join","$raise","$message","$error","$call","$exist?","$new","$close","$match","$warn","$gsub","$attr_reader"]);(function($base,$super){function $File(){}var self=$File=$klass($base,$super,"File",$File);var def=self.$$proto,$scope=self.$$scope,TMP_1,TMP_2,TMP_3,TMP_4,TMP_5,TMP_6,TMP_7,TMP_8,TMP_9,TMP_10,TMP_11,TMP_12,TMP_13,TMP_14,TMP_15,TMP_16;if(self.__fs__==null)self.__fs__=nil;if(self.__path__==null)self.__path__=nil;def.fd=nil;self.$include(Opal.get("IO").$$scope.get("Writable"));self.$include(Opal.get("IO").$$scope.get("Readable"));self.__fs__=self.$node_require("fs");self.__path__=self.$node_require("path");var __fs__=self.__fs__;var __path__=self.__path__;Opal.defs(self,"$read",TMP_1=function ːread(path){var self=this;return __fs__.readFileSync(path).toString()},TMP_1.$$arity=1);Opal.defs(self,"$write",TMP_2=function ːwrite(path,data){var self=this;__fs__.writeFileSync(path,data);return data.$size()},TMP_2.$$arity=2);Opal.defs(self,"$exist?",TMP_3=function(path){var $a,self=this;if(($a=path["$respond_to?"]("path"))!==nil&&(!$a.$$is_boolean||$a==true)){path=path.$path()}return __fs__.existsSync(path)},TMP_3.$$arity=1);Opal.defs(self,"$realpath",TMP_4=function ːrealpath(pathname,dir_string,cache){var self=this,$iter=TMP_4.$$p,block=$iter||nil;if(dir_string==null){dir_string=nil}if(cache==null){cache=nil}TMP_4.$$p=null;if(dir_string!==false&&dir_string!==nil){pathname=self.$join(dir_string,pathname)}if(block!==nil){__fs__.realpath(pathname,cache,function(error,realpath){if(error)self.$raise(self.$error().$message());else block.$call(realpath)})}else{return __fs__.realpathSync(pathname,cache)}},TMP_4.$$arity=-2);Opal.defs(self,"$basename",TMP_5=function ːbasename(path,ext){var self=this;return __path__.basename(path,ext)},TMP_5.$$arity=-2);Opal.defs(self,"$dirname",TMP_6=function ːdirname(path){var self=this;return __path__.dirname(path)},TMP_6.$$arity=1);Opal.defs(self,"$join",TMP_7=function ːjoin($a_rest){var self=this,paths;var $args_len=arguments.length,$rest_len=$args_len-0;if($rest_len<0){$rest_len=0}paths=new Array($rest_len);for(var $arg_idx=0;$arg_idx<$args_len;$arg_idx++){paths[$arg_idx-0]=arguments[$arg_idx]}return __path__.join.apply(__path__,paths)},TMP_7.$$arity=-1);Opal.defs(self,"$directory?",TMP_8=function(path){var $a,self=this;if(($a=self["$exist?"](path))!==nil&&(!$a.$$is_boolean||$a==true)){}else{return nil}return!!__fs__.lstatSync(path).isDirectory()},TMP_8.$$arity=1);Opal.defs(self,"$file?",TMP_9=function(path){var $a,self=this;if(($a=self["$exist?"](path))!==nil&&(!$a.$$is_boolean||$a==true)){}else{return nil}return!!__fs__.lstatSync(path).isFile()},TMP_9.$$arity=1);Opal.defs(self,"$size",TMP_10=function ːsize(path){var $a,self=this;if(($a=self["$exist?"](path))!==nil&&(!$a.$$is_boolean||$a==true)){}else{return nil}return __fs__.lstatSync(path).size},TMP_10.$$arity=1);Opal.defs(self,"$open",TMP_11=function ːopen(path,flags){var self=this,$iter=TMP_11.$$p,$yield=$iter||nil,file=nil;TMP_11.$$p=null;file=self.$new(path,flags);if($yield!==nil){try{return Opal.yield1($yield,file)}finally{file.$close()}}else{return file}},TMP_11.$$arity=2);Opal.defs(self,"$stat",TMP_12=function ːstat(path){var $a,self=this;if(($a=path["$respond_to?"]("path"))!==nil&&(!$a.$$is_boolean||$a==true)){path=path.$path()}return $scope.get("File").$$scope.get("Stat").$new(path)},TMP_12.$$arity=1);Opal.defn(self,"$initialize",TMP_13=function ːinitialize(path,flags){var $a,self=this,binary_flag_regexp=nil,encoding_flag_regexp=nil;binary_flag_regexp=/b/;encoding_flag_regexp=/:(.*)/;if(($a=flags.$match(binary_flag_regexp))!==nil&&(!$a.$$is_boolean||$a==true)){self.$warn("Binary flag (b) is unsupported by Node.js openSync method, removing flag.")}flags=flags.$gsub(binary_flag_regexp,"");if(($a=flags.$match(encoding_flag_regexp))!==nil&&(!$a.$$is_boolean||$a==true)){self.$warn("Encoding flag (:encoding) is unsupported by Node.js openSync method, removing flag.")}flags=flags.$gsub(encoding_flag_regexp,"");self.path=path;self.flags=flags;return self.fd=__fs__.openSync(path,flags)},TMP_13.$$arity=2);self.$attr_reader("path");Opal.defn(self,"$write",TMP_14=function ːwrite(string){var self=this;return __fs__.writeSync(self.fd,string)},TMP_14.$$arity=1);Opal.defn(self,"$flush",TMP_15=function ːflush(){var self=this;return __fs__.fsyncSync(self.fd)},TMP_15.$$arity=0);return(Opal.defn(self,"$close",TMP_16=function ːclose(){var self=this;return __fs__.closeSync(self.fd)},TMP_16.$$arity=0),nil)&&"close"})($scope.base,$scope.get("IO"));return function($base,$super){function $Stat(){}var self=$Stat=$klass($base,$super,"Stat",$Stat);var def=self.$$proto,$scope=self.$$scope,TMP_17,TMP_18;if(self.__fs__==null)self.__fs__=nil;def.path=nil;self.__fs__=self.$node_require("fs");var __fs__=self.__fs__;Opal.defn(self,"$initialize",TMP_17=function ːinitialize(path){var self=this;return self.path=path},TMP_17.$$arity=1);return(Opal.defn(self,"$file?",TMP_18=function(){var self=this;return __fs__.statSync(self.path).isFile()},TMP_18.$$arity=0),nil)&&"file?"}($scope.get("File"),null)};Opal.modules["nodejs/dir"]=function(Opal){var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$klass=Opal.klass;Opal.add_stubs(["$node_require"]);return function($base,$super){function $Dir(){}var self=$Dir=$klass($base,$super,"Dir",$Dir);var def=self.$$proto,$scope=self.$$scope;if(self.__glob__==null)self.__glob__=nil;self.__glob__=self.$node_require("glob");var __glob__=self.__glob__;return function(self){var $scope=self.$$scope,def=self.$$proto,TMP_1,TMP_2;Opal.defn(self,"$[]",TMP_1=function(glob){var self=this;return __glob__.sync(glob)},TMP_1.$$arity=1);Opal.defn(self,"$pwd",TMP_2=function ːpwd(){var self=this;return process.cwd()},TMP_2.$$arity=0);return Opal.alias(self,"getwd","pwd")}(Opal.get_singleton_class(self))}($scope.base,null)};Opal.modules["nodejs/io"]=function(Opal){var $a,$b,$c,$d,TMP_1,$e,TMP_2,self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice;Opal.add_stubs(["$write_proc=","$lambda","$tty="]);$a=[($c=($d=self).$lambda,$c.$$p=(TMP_1=function(string){var self=TMP_1.$$s||this;if(string==null)string=nil;return process.stdout.write(string)},TMP_1.$$s=self,TMP_1.$$arity=1,TMP_1),$c).call($d)],$b=$scope.get("STDOUT"),$b["$write_proc="].apply($b,$a),$a[$a.length-1];$a=[($c=($e=self).$lambda,$c.$$p=(TMP_2=function(string){var self=TMP_2.$$s||this;if(string==null)string=nil;return process.stderr.write(string)},TMP_2.$$s=self,TMP_2.$$arity=1,TMP_2),$c).call($e)],$b=$scope.get("STDERR"),$b["$write_proc="].apply($b,$a),$a[$a.length-1];$a=[true],$b=$scope.get("STDOUT"),$b["$tty="].apply($b,$a),$a[$a.length-1];return $a=[true],$b=$scope.get("STDERR"),$b["$tty="].apply($b,$a),$a[$a.length-1]};Opal.modules["nodejs"]=function(Opal){var self=Opal.top,$scope=Opal,nil=Opal.nil,$breaker=Opal.breaker,$slice=Opal.slice,$module=Opal.module;Opal.add_stubs(["$require"]);(function($base){var $NodeJS,self=$NodeJS=$module($base,"NodeJS");var def=self.$$proto,$scope=self.$$scope;nil})($scope.base);self.$require("nodejs/kernel");self.$require("nodejs/file");self.$require("nodejs/dir");return self.$require("nodejs/io")};
