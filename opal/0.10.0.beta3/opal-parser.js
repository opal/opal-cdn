/* Generated by Opal 0.10.0.beta3 */
Opal.modules["set"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32, TMP_33, TMP_35, TMP_37, TMP_39, TMP_41, TMP_42;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(enum$) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      TMP_2.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$dup', TMP_4 = function ːdup() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$-', TMP_5 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_5.$$arity = 1);

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', TMP_6 = function ːinspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, $b, TMP_7, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
        } else {
        return false
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$add', TMP_9 = function ːadd(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_10 = function ːclassify() {
      var $a, $b, TMP_11, $c, TMP_12, self = this, $iter = TMP_10.$$p, block = $iter || nil, result = nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_11 = function(h, k){var self = TMP_11.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      return result;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, result = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$replace(result);
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', TMP_15 = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete?', TMP_16 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_17 = function ːdelete_if() {try {

      var $a, $b, TMP_18, $c, $d, TMP_19, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

      TMP_17.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)).$each, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$add?', TMP_20 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$each', TMP_21 = function ːeach() {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_22 = function() {
      var self = this;

      return self.hash['$empty?']();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_24 = function(other) {
      var $a, $b, TMP_23, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$clear', TMP_25 = function ːclear() {
      var self = this;

      self.hash.$clear();
      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$include?', TMP_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    }, TMP_26.$$arity = 1);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', TMP_28 = function ːmerge(enum$) {
      var $a, $b, TMP_27, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$replace', TMP_29 = function ːreplace(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$size', TMP_30 = function ːsize() {
      var self = this;

      return self.hash.$size();
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', TMP_32 = function ːsubtract(enum$) {
      var $a, $b, TMP_31, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$|', TMP_33 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$superset?', TMP_35 = function(set) {
      var $a, $b, TMP_34, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
    }, TMP_35.$$arity = 1);

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', TMP_37 = function(set) {
      var $a, $b, TMP_36, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', TMP_39 = function(set) {
      var $a, $b, TMP_38, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', TMP_41 = function(set) {
      var $a, $b, TMP_40, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 1);

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', TMP_42 = function ːto_a() {
      var self = this;

      return self.hash.$keys();
    }, TMP_42.$$arity = 0), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_43;

    Opal.defn(self, '$to_set', TMP_43 = function ːto_set(klass, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = $scope.get('Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_43.$$p = null;
      return ($b = ($c = klass).$new, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)));
    }, TMP_43.$$arity = -1)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser/sexp"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$[]', '$[]=', '$send', '$to_proc', '$<<', '$push', '$concat', '$new', '$dup', '$is_a?', '$==', '$array', '$join', '$map', '$inspect', '$line']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Sexp(){};
      var self = $Sexp = $klass($base, $super, 'Sexp', $Sexp);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_18;

      def.array = def.meta = def.source = nil;
      self.$attr_reader("array");

      self.$attr_accessor("source");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(args) {
        var self = this;

        return self.array = args;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$type', TMP_2 = function ːtype() {
        var self = this;

        return self.array['$[]'](0);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$type=', TMP_3 = function(type) {
        var self = this;

        return self.array['$[]='](0, type);
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$children', TMP_4 = function ːchildren() {
        var self = this;

        return self.array['$[]']($range(1, -1, false));
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$meta', TMP_5 = function ːmeta() {
        var $a, self = this;

        return ((($a = self.meta) !== false && $a !== nil) ? $a : self.meta = $hash2([], {}));
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_6 = function ːmethod_missing(sym, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_6.$$p = null;
        return ($b = ($c = self.array).$send, $b.$$p = block.$to_proc(), $b).apply($c, [sym].concat(Opal.to_a(args)));
      }, TMP_6.$$arity = -2);

      Opal.defn(self, '$<<', TMP_7 = function(other) {
        var self = this;

        self.array['$<<'](other);
        return self;
      }, TMP_7.$$arity = 1);

      Opal.defn(self, '$push', TMP_8 = function ːpush($a_rest) {
        var $b, self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self.array).$push.apply($b, Opal.to_a(parts));
        return self;
      }, TMP_8.$$arity = -1);

      Opal.defn(self, '$concat', TMP_9 = function ːconcat(children) {
        var self = this;

        self.array.$concat(children);
        return self;
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$to_ary', TMP_10 = function ːto_ary() {
        var self = this;

        return self.array;
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$dup', TMP_11 = function ːdup() {
        var self = this;

        return $scope.get('Sexp').$new(self.array.$dup());
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$==', TMP_12 = function(other) {
        var $a, self = this;

        if ((($a = other['$is_a?']($scope.get('Sexp'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.array['$=='](other.$array())
          } else {
          return self.array['$=='](other)
        };
      }, TMP_12.$$arity = 1);

      Opal.alias(self, 'eql?', '==');

      Opal.defn(self, '$line', TMP_13 = function ːline() {
        var $a, self = this;

        return ($a = self.source, $a !== false && $a !== nil ?self.source['$[]'](0) : $a);
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$column', TMP_14 = function ːcolumn() {
        var $a, self = this;

        return ($a = self.source, $a !== false && $a !== nil ?self.source['$[]'](1) : $a);
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$inspect', TMP_16 = function ːinspect() {
        var $a, $b, TMP_15, self = this;

        return "(" + (($a = ($b = self.array).$map, $a.$$p = (TMP_15 = function(e){var self = TMP_15.$$s || this;
if (e == null) e = nil;
        return e.$inspect()}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b).$join(", ")) + ")";
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$pretty_inspect', TMP_18 = function ːpretty_inspect() {
        var $a, $b, TMP_17, self = this;

        return "(" + ((function() {if ((($a = self.$line()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "" + (self.$line()) + " "
          } else {
          return ""
        }; return nil; })()) + (($a = ($b = self.array).$map, $a.$$p = (TMP_17 = function(e){var self = TMP_17.$$s || this;
if (e == null) e = nil;
        return e.$inspect()}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b).$join(", ")) + ")";
      }, TMP_18.$$arity = 0);

      return Opal.alias(self, 'to_s', 'inspect');
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'REGEXP_START', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "^"}; return nil; })());

    Opal.cdecl($scope, 'REGEXP_END', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "$"}; return nil; })());

    Opal.cdecl($scope, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'INLINE_IDENTIFIER_REGEXP', $scope.get('Regexp').$new("[^" + ($scope.get('FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($scope.get('FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));

    Opal.cdecl($scope, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'CONST_NAME_REGEXP', $scope.get('Regexp').$new("" + ($scope.get('REGEXP_START')) + "(::)?[A-Z][^" + ($scope.get('FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($scope.get('REGEXP_END'))));
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["strscan"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$private']);
  return (function($base, $super) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    self.$attr_reader("pos");

    self.$attr_reader("matched");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(string) {
      var self = this;

      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    }, TMP_1.$$arity = 1);

    self.$attr_reader("string");

    Opal.defn(self, '$beginning_of_line?', TMP_2 = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'bol?', 'beginning_of_line?');

    Opal.defn(self, '$scan', TMP_3 = function ːscan(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$scan_until', TMP_4 = function ːscan_until(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$[]', TMP_5 = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    ;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$check', TMP_6 = function ːcheck(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$check_until', TMP_7 = function ːcheck_until(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    ;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$peek', TMP_8 = function ːpeek(length) {
      var self = this;

      return self.working.substring(0, length);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$eos?', TMP_9 = function() {
      var self = this;

      return self.working.length === 0;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$exist?', TMP_10 = function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$skip', TMP_11 = function ːskip(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$skip_until', TMP_12 = function ːskip_until(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    ;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$get_byte', TMP_13 = function ːget_byte() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    ;
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'getch', 'get_byte');

    Opal.defn(self, '$match?', TMP_14 = function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$pos=', TMP_15 = function(pos) {
      var self = this;

      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$post_match', TMP_16 = function ːpost_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    ;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$pre_match', TMP_17 = function ːpre_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    ;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$reset', TMP_18 = function ːreset() {
      var self = this;

      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$rest', TMP_19 = function ːrest() {
      var self = this;

      return self.working;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$rest?', TMP_20 = function() {
      var self = this;

      return self.working.length !== 0;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$rest_size', TMP_21 = function ːrest_size() {
      var self = this;

      return self.$rest().$size();
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$terminate', TMP_22 = function ːterminate() {
      var $a, $b, self = this;

      self.match = nil;
      return (($a = [self.string.$length()]), $b = self, $b['$pos='].apply($b, $a), $a[$a.length-1]);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$unscan', TMP_23 = function ːunscan() {
      var self = this;

      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, TMP_23.$$arity = 0);

    self.$private();

    return (Opal.defn(self, '$anchor', TMP_24 = function ːanchor(pattern) {
      var self = this;

      return new RegExp('^(?:' + pattern.toString().substr(1, pattern.toString().length - 2) + ')');
    }, TMP_24.$$arity = 1), nil) && 'anchor';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser/keywords"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$map', '$new', '$each', '$[]=', '$name', '$[]']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Keywords, self = $Keywords = $module($base, 'Keywords');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2, TMP_4, TMP_5;

      (function($base, $super) {
        function $KeywordTable(){};
        var self = $KeywordTable = $klass($base, $super, 'KeywordTable', $KeywordTable);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$attr_accessor("name", "id", "state");

        return (Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(name, id, state) {
          var self = this;

          self.name = name;
          self.id = id;
          return self.state = state;
        }, TMP_1.$$arity = 3), nil) && 'initialize';
      })($scope.base, null);

      Opal.cdecl($scope, 'KEYWORDS', ($a = ($b = [["__LINE__", ["k__LINE__", "k__LINE__"], "expr_end"], ["__FILE__", ["k__FILE__", "k__FILE__"], "expr_end"], ["alias", ["kALIAS", "kALIAS"], "expr_fname"], ["and", ["kAND", "kAND"], "expr_beg"], ["begin", ["kBEGIN", "kBEGIN"], "expr_beg"], ["break", ["kBREAK", "kBREAK"], "expr_mid"], ["case", ["kCASE", "kCASE"], "expr_beg"], ["class", ["kCLASS", "kCLASS"], "expr_class"], ["def", ["kDEF", "kDEF"], "expr_fname"], ["defined?", ["kDEFINED", "kDEFINED"], "expr_arg"], ["do", ["kDO", "kDO"], "expr_beg"], ["else", ["kELSE", "kELSE"], "expr_beg"], ["elsif", ["kELSIF", "kELSIF"], "expr_beg"], ["end", ["kEND", "kEND"], "expr_end"], ["ensure", ["kENSURE", "kENSURE"], "expr_beg"], ["false", ["kFALSE", "kFALSE"], "expr_end"], ["for", ["kFOR", "kFOR"], "expr_beg"], ["if", ["kIF", "kIF_MOD"], "expr_beg"], ["in", ["kIN", "kIN"], "expr_beg"], ["module", ["kMODULE", "kMODULE"], "expr_beg"], ["nil", ["kNIL", "kNIL"], "expr_end"], ["next", ["kNEXT", "kNEXT"], "expr_mid"], ["not", ["kNOT", "kNOT"], "expr_beg"], ["or", ["kOR", "kOR"], "expr_beg"], ["redo", ["kREDO", "kREDO"], "expr_end"], ["rescue", ["kRESCUE", "kRESCUE_MOD"], "expr_mid"], ["return", ["kRETURN", "kRETURN"], "expr_mid"], ["self", ["kSELF", "kSELF"], "expr_end"], ["super", ["kSUPER", "kSUPER"], "expr_arg"], ["then", ["kTHEN", "kTHEN"], "expr_beg"], ["true", ["kTRUE", "kTRUE"], "expr_end"], ["undef", ["kUNDEF", "kUNDEF"], "expr_fname"], ["unless", ["kUNLESS", "kUNLESS_MOD"], "expr_beg"], ["until", ["kUNTIL", "kUNTIL_MOD"], "expr_beg"], ["when", ["kWHEN", "kWHEN"], "expr_beg"], ["while", ["kWHILE", "kWHILE_MOD"], "expr_beg"], ["yield", ["kYIELD", "kYIELD"], "expr_arg"]]).$map, $a.$$p = (TMP_2 = function(decl){var self = TMP_2.$$s || this, $c;
if (decl == null) decl = nil;
      return ($c = $scope.get('KeywordTable')).$new.apply($c, Opal.to_a(decl))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b));

      Opal.defs(self, '$map', TMP_4 = function ːmap() {
        var $a, $b, TMP_3, self = this;
        if (self.map == null) self.map = nil;

        if ((($a = self.map) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.map = $hash2([], {});
          ($a = ($b = $scope.get('KEYWORDS')).$each, $a.$$p = (TMP_3 = function(k){var self = TMP_3.$$s || this;
            if (self.map == null) self.map = nil;
if (k == null) k = nil;
          return self.map['$[]='](k.$name(), k)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
        };
        return self.map;
      }, TMP_4.$$arity = 0);

      Opal.defs(self, '$keyword', TMP_5 = function ːkeyword(kw) {
        var self = this;

        return self.$map()['$[]'](kw);
      }, TMP_5.$$arity = 1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser/lexer"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$|', '$attr_reader', '$attr_accessor', '$new', '$yylex', '$yylval', '$has_local?', '$scope', '$parser', '$to_sym', '$<<', '$&', '$>>', '$!=', '$include?', '$arg?', '$!', '$space?', '$check', '$after_operator?', '$scan', '$+', '$length', '$matched', '$pos=', '$-', '$pos', '$new_strterm', '$merge', '$yylval=', '$to_f', '$gsub', '$scanner', '$to_i', '$raise', '$peek', '$chr', '$%', '$[]', '$ord', '$downcase', '$escape', '$peek_variable_name', '$bol?', '$eos?', '$read_escape', '$join', '$count', '$lines', '$min', '$map', '$strterm', '$[]=', '$pushback', '$==', '$cond?', '$strterm=', '$match', '$add_string_content', '$line=', '$line', '$label_state?', '$end_with?', '$=~', '$keyword', '$state', '$name', '$id', '$cmdarg?', '$here_document', '$parse_string', '$skip', '$empty?', '$new_op_asgn', '$set_arg_state', '$spcarg?', '$beg?', '$===', '$new_strterm2', '$cond_push', '$cmdarg_push', '$cond_lexpop', '$cmdarg_lexpop', '$end?', '$heredoc_identifier', '$sub', '$inspect', '$process_numeric', '$process_identifier', '$size', '$pop', '$last']);
  self.$require("opal/regexp_anchors");
  self.$require("strscan");
  self.$require("opal/parser/keywords");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Lexer(){};
      var self = $Lexer = $klass($base, $super, 'Lexer', $Lexer);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39;

      def.scanner = def.tok_line = def.tok_column = def.column = def.line = def.cond = def.lparen_arg_seen = def.cmdarg = def.lex_state = def.space_seen = def.yylval = def.scanner_stack = def.start_of_lambda = def.file = nil;
      Opal.cdecl($scope, 'STR_FUNC_ESCAPE', 1);

      Opal.cdecl($scope, 'STR_FUNC_EXPAND', 2);

      Opal.cdecl($scope, 'STR_FUNC_REGEXP', 4);

      Opal.cdecl($scope, 'STR_FUNC_QWORDS', 8);

      Opal.cdecl($scope, 'STR_FUNC_SYMBOL', 16);

      Opal.cdecl($scope, 'STR_FUNC_INDENT', 32);

      Opal.cdecl($scope, 'STR_FUNC_XQUOTE', 64);

      Opal.cdecl($scope, 'STR_SQUOTE', 0);

      Opal.cdecl($scope, 'STR_DQUOTE', $scope.get('STR_FUNC_EXPAND'));

      Opal.cdecl($scope, 'STR_XQUOTE', $scope.get('STR_FUNC_EXPAND')['$|']($scope.get('STR_FUNC_XQUOTE')));

      Opal.cdecl($scope, 'STR_REGEXP', $scope.get('STR_FUNC_REGEXP')['$|']($scope.get('STR_FUNC_ESCAPE'))['$|']($scope.get('STR_FUNC_EXPAND')));

      Opal.cdecl($scope, 'STR_SWORD', $scope.get('STR_FUNC_QWORDS'));

      Opal.cdecl($scope, 'STR_DWORD', $scope.get('STR_FUNC_QWORDS')['$|']($scope.get('STR_FUNC_EXPAND')));

      Opal.cdecl($scope, 'STR_SSYM', $scope.get('STR_FUNC_SYMBOL'));

      Opal.cdecl($scope, 'STR_DSYM', $scope.get('STR_FUNC_SYMBOL')['$|']($scope.get('STR_FUNC_EXPAND')));

      self.$attr_reader("line", "column");

      self.$attr_reader("scope");

      self.$attr_reader("eof_content");

      self.$attr_accessor("lex_state");

      self.$attr_accessor("strterm");

      self.$attr_accessor("scanner");

      self.$attr_accessor("yylval");

      self.$attr_accessor("parser");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(source, file) {
        var self = this;

        self.lex_state = "expr_beg";
        self.cond = 0;
        self.cmdarg = 0;
        self.line = 1;
        self.tok_line = 1;
        self.column = 0;
        self.tok_column = 0;
        self.file = file;
        self.scanner = $scope.get('StringScanner').$new(source);
        self.scanner_stack = [self.scanner];
        self.case_stmt = nil;
        return self.start_of_lambda = nil;
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$next_token', TMP_2 = function ːnext_token() {
        var self = this, token = nil, value = nil, location = nil;

        token = self.$yylex();
        value = self.$yylval();
        location = [self.tok_line, self.tok_column];
        self.tok_column = self.column;
        self.tok_line = self.line;
        return [token, [value, location]];
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$has_local?', TMP_3 = function(local) {
        var self = this;

        return self.$parser().$scope()['$has_local?'](local.$to_sym());
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$cond_push', TMP_4 = function ːcond_push(n) {
        var self = this;

        return self.cond = (self.cond['$<<'](1))['$|']((n['$&'](1)));
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$cond_pop', TMP_5 = function ːcond_pop() {
        var self = this;

        return self.cond = self.cond['$>>'](1);
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$cond_lexpop', TMP_6 = function ːcond_lexpop() {
        var self = this;

        return self.cond = (self.cond['$>>'](1))['$|']((self.cond['$&'](1)));
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$cond?', TMP_7 = function() {
        var self = this;

        return (self.cond['$&'](1))['$!='](0);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$cmdarg_push', TMP_8 = function ːcmdarg_push(n) {
        var $a, self = this;

        if ((($a = self.lparen_arg_seen) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.cmdarg = (self.cmdarg['$<<'](1))['$|']((n['$&'](1)))
        };
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$cmdarg_pop', TMP_9 = function ːcmdarg_pop() {
        var self = this;

        return self.cmdarg = self.cmdarg['$>>'](1);
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$cmdarg_lexpop', TMP_10 = function ːcmdarg_lexpop() {
        var self = this;

        return self.cmdarg = (self.cmdarg['$>>'](1))['$|']((self.cmdarg['$&'](1)));
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$cmdarg?', TMP_11 = function() {
        var self = this;

        return (self.cmdarg['$&'](1))['$!='](0);
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$arg?', TMP_12 = function() {
        var self = this;

        return ["expr_arg", "expr_cmdarg"]['$include?'](self.lex_state);
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$end?', TMP_13 = function() {
        var self = this;

        return ["expr_end", "expr_endarg", "expr_endfn"]['$include?'](self.lex_state);
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$beg?', TMP_14 = function() {
        var self = this;

        return ["expr_beg", "expr_value", "expr_mid", "expr_class"]['$include?'](self.lex_state);
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$after_operator?', TMP_15 = function() {
        var self = this;

        return ["expr_fname", "expr_dot"]['$include?'](self.lex_state);
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$label_state?', TMP_16 = function() {
        var $a, self = this;

        return ((($a = ["expr_beg", "expr_endfn"]['$include?'](self.lex_state)) !== false && $a !== nil) ? $a : self['$arg?']());
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$spcarg?', TMP_17 = function() {
        var $a, $b, self = this;

        return ($a = ($b = self['$arg?'](), $b !== false && $b !== nil ?self.space_seen : $b), $a !== false && $a !== nil ?self['$space?']()['$!']() : $a);
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$space?', TMP_18 = function() {
        var self = this;

        return self.scanner.$check(/\s/);
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$set_arg_state', TMP_19 = function ːset_arg_state() {
        var $a, self = this;

        return self.lex_state = (function() {if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "expr_arg"
          } else {
          return "expr_beg"
        }; return nil; })();
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$scan', TMP_20 = function ːscan(regexp) {
        var $a, self = this, result = nil;

        if ((($a = result = self.scanner.$scan(regexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.column = $rb_plus(self.column, result.$length());
          self.yylval = $rb_plus(self.yylval, self.scanner.$matched());};
        return result;
      }, TMP_20.$$arity = 1);

      Opal.defn(self, '$skip', TMP_21 = function ːskip(regexp) {
        var $a, self = this, result = nil;

        if ((($a = result = self.scanner.$scan(regexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.column = $rb_plus(self.column, result.$length());
          self.tok_column = self.column;};
        return result;
      }, TMP_21.$$arity = 1);

      Opal.defn(self, '$check', TMP_22 = function ːcheck(regexp) {
        var self = this;

        return self.scanner.$check(regexp);
      }, TMP_22.$$arity = 1);

      Opal.defn(self, '$pushback', TMP_23 = function ːpushback(n) {
        var $a, self = this;

        return ($a = self.scanner, $a['$pos=']($rb_minus($a.$pos(), n)));
      }, TMP_23.$$arity = 1);

      Opal.defn(self, '$matched', TMP_24 = function ːmatched() {
        var self = this;

        return self.scanner.$matched();
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$line=', TMP_25 = function(line) {
        var self = this;

        self.column = self.tok_column = 0;
        return self.line = self.tok_line = line;
      }, TMP_25.$$arity = 1);

      Opal.defn(self, '$new_strterm', TMP_26 = function ːnew_strterm(func, term, paren) {
        var self = this;

        return $hash2(["type", "func", "term", "paren"], {"type": "string", "func": func, "term": term, "paren": paren});
      }, TMP_26.$$arity = 3);

      Opal.defn(self, '$new_strterm2', TMP_27 = function ːnew_strterm2(func, term, paren) {
        var self = this;

        term = self.$new_strterm(func, term, paren);
        return term.$merge($hash2(["balance", "nesting"], {"balance": true, "nesting": 0}));
      }, TMP_27.$$arity = 3);

      Opal.defn(self, '$new_op_asgn', TMP_28 = function ːnew_op_asgn(value) {
        var $a, $b, self = this;

        (($a = [value]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        self.lex_state = "expr_beg";
        return "tOP_ASGN";
      }, TMP_28.$$arity = 1);

      Opal.defn(self, '$process_numeric', TMP_29 = function ːprocess_numeric() {
        var $a, $b, self = this;

        self.lex_state = "expr_end";
        if ((($a = self.$scan(/[\d_]+\.[\d_]+\b|[\d_]+(\.[\d_]+)?[eE][-+]?[\d_]+\b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_f()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tFLOAT";
        } else if ((($a = self.$scan(/([^0][\d_]*|0)\b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_i()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[bB](0|1|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(2)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[xX](\d|[a-f]|[A-F]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(16)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[oO]?([0-7]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(8)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[dD]([0-9]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_i()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
          } else {
          return self.$raise("Lexing error on numeric type: `" + (self.$scanner().$peek(5)) + "`")
        };
      }, TMP_29.$$arity = 0);

      Opal.defn(self, '$read_escape', TMP_30 = function ːread_escape() {
        var $a, self = this;

        if ((($a = self.$scan(/\\/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\\"
        } else if ((($a = self.$scan(/n/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\n"
        } else if ((($a = self.$scan(/t/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\t"
        } else if ((($a = self.$scan(/r/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\r"
        } else if ((($a = self.$scan(/f/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\f"
        } else if ((($a = self.$scan(/v/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\v"
        } else if ((($a = self.$scan(/a/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\u0007"
        } else if ((($a = self.$scan(/b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\b"
        } else if ((($a = self.$scan(/e/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\u001b"
        } else if ((($a = self.$scan(/s/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " "
        } else if ((($a = self.$scan(/[0-7]{1,3}/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (self.$matched().$to_i(8)['$%'](256)).$chr()
        } else if ((($a = self.$scan(/x([0-9a-fA-F]{1,2})/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$scanner()['$[]'](1).$to_i(16).$chr()
        } else if ((($a = self.$scan(/u([0-9a-zA-Z]{1,4})/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$scanner()['$[]'](1).$to_i(16).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
        } else if ((($a = self.$scan(/C-([a-zA-Z])/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($rb_plus($rb_minus(self.$scanner()['$[]'](1).$downcase().$ord(), "a".$ord()), "1".$to_i(16))).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
        } else if ((($a = self.$scan(/C-([0-9])/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($rb_plus($rb_minus(self.$scanner()['$[]'](1).$ord(), "0".$ord()), "10".$to_i(16))).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
        } else if ((($a = self.$scan(/M-\\C-([a-zA-Z])/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($rb_plus($rb_minus(self.$scanner()['$[]'](1).$downcase().$ord(), "a".$ord()), "81".$to_i(16))).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
        } else if ((($a = self.$scan(/M-\\C-([0-9])/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($rb_plus($rb_minus(self.$scanner()['$[]'](1).$ord(), "0".$ord()), "90".$to_i(16))).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
          } else {
          return self.$scan(/./)
        };
      }, TMP_30.$$arity = 0);

      Opal.defn(self, '$peek_variable_name', TMP_31 = function ːpeek_variable_name() {
        var $a, self = this;

        if ((($a = self.$check(/[@$]/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tSTRING_DVAR"
        } else if ((($a = self.$scan(/\{/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tSTRING_DBEG"
          } else {
          return nil
        };
      }, TMP_31.$$arity = 0);

      Opal.defn(self, '$here_document', TMP_34 = function ːhere_document(str_parse) {
        var $a, $b, $c, TMP_32, TMP_33, $d, self = this, eos_regx = nil, expand = nil, escape = nil, str_buffer = nil, tok = nil, reg = nil, complete_str = nil, lines = nil, min_indent = nil;

        eos_regx = (new RegExp("[ \\t]*" + $scope.get('Regexp').$escape(str_parse['$[]']("term")) + "(\\r*\\n|$)"));
        expand = (str_parse['$[]']("func")['$&']($scope.get('STR_FUNC_EXPAND')))['$!='](0);
        escape = str_parse['$[]']("func")['$!=']($scope.get('STR_SQUOTE'));
        if ((($a = self.$check(eos_regx)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$scan((new RegExp("[ \\t]*" + $scope.get('Regexp').$escape(str_parse['$[]']("term")))));
          if ((($a = str_parse['$[]']("scanner")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.scanner_stack['$<<'](str_parse['$[]']("scanner"));
            self.scanner = str_parse['$[]']("scanner");};
          return "tSTRING_END";};
        str_buffer = [];
        if ((($a = self.$scan(/#/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = tok = self.$peek_variable_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return tok};
          str_buffer['$<<']("#");};
        while (!((($b = ($c = self.$check(eos_regx), $c !== false && $c !== nil ?self.$scanner()['$bol?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true)))) {
        if ((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$raise("reached EOF while in heredoc")};
        if ((($b = self.$scan(/\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_buffer['$<<'](self.$scanner().$matched())
        } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$check(/#(?=[\$\@\{])/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_buffer['$<<'](((function() {if (escape !== false && escape !== nil) {
            return self.$read_escape()
            } else {
            return self.$scanner().$matched()
          }; return nil; })()))
          } else {
          reg = $scope.get('Regexp').$new("[^#\u0000\\\\\n]+|.");
          self.$scan(reg);
          str_buffer['$<<'](self.$scanner().$matched());
        };};
        complete_str = str_buffer.$join("");
        self.line = $rb_plus(self.line, complete_str.$count("\n"));
        if ((($a = str_parse['$[]']("squiggly_heredoc")) !== nil && (!$a.$$is_boolean || $a == true))) {
          lines = complete_str.$lines();
          min_indent = ($a = ($b = lines).$map, $a.$$p = (TMP_32 = function(line){var self = TMP_32.$$s || this;
if (line == null) line = nil;
          return line.$scan((new RegExp("" + $scope.get('REGEXP_START') + "\\s+")))['$[]'](0).$length()}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $a).call($b).$min();
          complete_str = ($a = ($c = lines).$map, $a.$$p = (TMP_33 = function(line){var self = TMP_33.$$s || this;
if (line == null) line = nil;
          return line['$[]'](min_indent, line.$length())}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $a).call($c).$join();};
        (($a = [complete_str]), $d = self, $d['$yylval='].apply($d, $a), $a[$a.length-1]);
        return "tSTRING_CONTENT";
      }, TMP_34.$$arity = 1);

      Opal.defn(self, '$parse_string', TMP_35 = function ːparse_string() {
        var $a, $b, self = this, str_parse = nil, func = nil, space = nil, qwords = nil, expand = nil, regexp = nil, str_buffer = nil, complete_str = nil;

        str_parse = self.$strterm();
        func = str_parse['$[]']("func");
        space = false;
        qwords = (func['$&']($scope.get('STR_FUNC_QWORDS')))['$!='](0);
        expand = (func['$&']($scope.get('STR_FUNC_EXPAND')))['$!='](0);
        regexp = (func['$&']($scope.get('STR_FUNC_REGEXP')))['$!='](0);
        if ((($a = (($b = qwords !== false && qwords !== nil) ? self.$scan(/\s+/) : qwords)) !== nil && (!$a.$$is_boolean || $a == true))) {
          space = true};
        str_buffer = [];
        if ((($a = self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("term"))))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (($b = qwords !== false && qwords !== nil) ? str_parse['$[]']("done_last_space")['$!']() : qwords)) !== nil && (!$a.$$is_boolean || $a == true))) {
            str_parse['$[]=']("done_last_space", true);
            self.$pushback(1);
            (($a = [" "]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return "tSPACE";};
          if ((($a = str_parse['$[]']("balance")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (str_parse['$[]']("nesting")['$=='](0)) {
              if (regexp !== false && regexp !== nil) {
                (($a = [self.$scan(/\w+/)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
                return "tREGEXP_END";};
              return (function() {if ((($a = ($b = self['$cond?']()['$!'](), $b !== false && $b !== nil ?self.$scan(/:[^:]/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "tLABEL_END"
                } else {
                return "tSTRING_END"
              }; return nil; })();
              } else {
              str_buffer['$<<'](self.$scanner().$matched());
              ($a = "nesting", $b = str_parse, $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)));
              (($a = [str_parse]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
            }
          } else if (regexp !== false && regexp !== nil) {
            self.lex_state = "expr_end";
            (($a = [self.$scan(/\w+/)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return "tREGEXP_END";
            } else {
            if ((($a = str_parse['$[]']("scanner")) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.scanner_stack['$<<'](str_parse['$[]']("scanner"));
              self.scanner = str_parse['$[]']("scanner");};
            return (function() {if ((($a = ($b = self['$cond?']()['$!'](), $b !== false && $b !== nil ?self.$scan(/:[^:]/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "tLABEL_END"
              } else {
              return "tSTRING_END"
            }; return nil; })();
          };};
        if (space !== false && space !== nil) {
          (($a = [" "]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tSPACE";};
        if ((($a = ($b = str_parse['$[]']("balance"), $b !== false && $b !== nil ?self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("paren")))) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          str_buffer['$<<'](self.$scanner().$matched());
          ($a = "nesting", $b = str_parse, $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)));
        } else if ((($a = self.$check(/#[@$]/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$scan(/#/);
          if (expand !== false && expand !== nil) {
            return "tSTRING_DVAR"
            } else {
            str_buffer['$<<'](self.$scanner().$matched())
          };
        } else if ((($a = self.$scan(/#\{/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (expand !== false && expand !== nil) {
            return "tSTRING_DBEG"
            } else {
            str_buffer['$<<'](self.$scanner().$matched());
            if ((($a = (($b = qwords !== false && qwords !== nil) ? self.$scanner().$matched().$match($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("paren")))) : qwords)) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = "nesting", $b = str_parse, $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)))};
          }
        } else if ((($a = self.$scan(/\#/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          str_buffer['$<<']("#")};
        self.$add_string_content(str_buffer, str_parse);
        complete_str = str_buffer.$join("");
        self.line = $rb_plus(self.line, complete_str.$count("\n"));
        (($a = [complete_str]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        return "tSTRING_CONTENT";
      }, TMP_35.$$arity = 0);

      Opal.defn(self, '$add_string_content', TMP_36 = function ːadd_string_content(str_buffer, str_parse) {
        var $a, $b, $c, self = this, func = nil, end_str_re = nil, qwords = nil, expand = nil, regexp = nil, escape = nil, xquote = nil, c = nil, handled = nil, reg = nil;

        func = str_parse['$[]']("func");
        end_str_re = $scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("term")));
        qwords = (func['$&']($scope.get('STR_FUNC_QWORDS')))['$!='](0);
        expand = (func['$&']($scope.get('STR_FUNC_EXPAND')))['$!='](0);
        regexp = (func['$&']($scope.get('STR_FUNC_REGEXP')))['$!='](0);
        escape = (func['$&']($scope.get('STR_FUNC_ESCAPE')))['$!='](0);
        xquote = (func['$==']($scope.get('STR_XQUOTE')));
        while (!((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
        c = nil;
        handled = true;
        if ((($b = self.$check(end_str_re)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ($c = str_parse['$[]']("balance"), $c !== false && $c !== nil ?(str_parse['$[]']("nesting")['$!='](0)) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$scan(end_str_re);
            c = self.$scanner().$matched();
            ($b = "nesting", $c = str_parse, $c['$[]=']($b, $rb_minus($c['$[]']($b), 1)));
            } else {
            break;
          }
        } else if ((($b = ($c = str_parse['$[]']("balance"), $c !== false && $c !== nil ?self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("paren")))) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          ($b = "nesting", $c = str_parse, $c['$[]=']($b, $rb_plus($c['$[]']($b), 1)));
          c = self.$scanner().$matched();
        } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$pushback(1);
          break;;
        } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$check(/#(?=[\$\@\{])/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$pushback(1);
          break;;
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (xquote !== false && xquote !== nil) {
            c = $rb_plus("\\", self.$scan(/./))
          } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\n/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
            str_buffer['$<<']("\n");
            continue;;
          } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$scan(/\n/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
            continue;
          } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
            c = " "
          } else if (regexp !== false && regexp !== nil) {
            if ((($b = self.$scan(/(.)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              c = $rb_plus("\\", self.$scanner().$matched())}
          } else if (expand !== false && expand !== nil) {
            c = self.$read_escape()
          } else if ((($b = self.$scan(/\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if (escape !== false && escape !== nil) {
              c = "\\\\"
              } else {
              c = self.$scanner().$matched()
            }
          } else if ((($b = self.$scan(end_str_re)) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str_buffer['$<<']("\\")
          }
          } else {
          handled = false
        };
        if (handled !== false && handled !== nil) {
          } else {
          reg = (function() {if (qwords !== false && qwords !== nil) {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + "#\u0000\n \\\\]+|.")
          } else if ((($b = str_parse['$[]']("balance")) !== nil && (!$b.$$is_boolean || $b == true))) {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + ($scope.get('Regexp').$escape(str_parse['$[]']("paren"))) + "#\u0000\\\\]+|.")
            } else {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + "#\u0000\\\\]+|.")
          }; return nil; })();
          self.$scan(reg);
          c = self.$scanner().$matched();
        };
        ((($b = c) !== false && $b !== nil) ? $b : c = self.$scanner().$matched());
        str_buffer['$<<'](c);};
        if ((($a = self.$scanner()['$eos?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$raise("reached EOF while in string")
          } else {
          return nil
        };
      }, TMP_36.$$arity = 2);

      Opal.defn(self, '$heredoc_identifier', TMP_37 = function ːheredoc_identifier() {
        var $a, $b, self = this, starts_with_minus = nil, squiggly_heredoc = nil, escape_char = nil, regexp = nil, escape_method = nil, heredoc = nil, end_of_line = nil;

        starts_with_minus = self.$scan(/-/)['$!']()['$!']();
        squiggly_heredoc = ($a = starts_with_minus['$!'](), $a !== false && $a !== nil ?self.$scan(/~/)['$!']()['$!']() : $a);
        self.$scan(/(['"]?)/);
        escape_char = self.scanner['$[]'](0);
        if ((($a = escape_char['$!=']("")) !== nil && (!$a.$$is_boolean || $a == true))) {
          regexp = $scope.get('Regexp').$new("([^" + (escape_char) + "]+)")
          } else {
          regexp = /\w+/
        };
        if ((($a = self.$scan(regexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
          escape_method = (function() {if ((($a = (escape_char['$==']("'"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('STR_SQUOTE')
            } else {
            return $scope.get('STR_DQUOTE')
          }; return nil; })();
          heredoc = self.scanner['$[]'](0);
          (($a = [self.$new_strterm(escape_method, heredoc, heredoc)]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
          self.$strterm()['$[]=']("type", "heredoc");
          self.$strterm()['$[]=']("squiggly_heredoc", squiggly_heredoc);
          if (escape_char !== false && escape_char !== nil) {
            self.$scan($scope.get('Regexp').$new(escape_char))};
          end_of_line = self.$scan(/.*\n/);
          if ((($a = end_of_line['$!=']("\n")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$strterm()['$[]=']("scanner", $scope.get('StringScanner').$new(end_of_line))};
          ($a = self, $a['$line=']($rb_plus($a.$line(), 1)));
          (($a = [heredoc]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tSTRING_BEG";
          } else {
          return nil
        };
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$process_identifier', TMP_38 = function ːprocess_identifier(matched, cmd_start) {
        var $a, $b, $c, self = this, last_state = nil, result = nil, kw = nil, old_state = nil;

        last_state = self.lex_state;
        if ((($a = ($b = ($c = self['$label_state?'](), $c !== false && $c !== nil ?self.$check(/::/)['$!']() : $c), $b !== false && $b !== nil ?self.$scan(/:/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = "expr_beg";
          (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tLABEL";};
        if (matched['$==']("defined?")) {
          if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.lex_state = "expr_end";
            return "tIDENTIFIER";};
          self.lex_state = "expr_arg";
          return "kDEFINED";};
        if ((($a = matched['$end_with?']("?", "!")) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = "tIDENTIFIER"
        } else if (self.lex_state['$==']("expr_fname")) {
          if ((($a = ($b = self.$check(/\=\>/)['$!'](), $b !== false && $b !== nil ?self.$scan(/\=/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = "tIDENTIFIER";
            matched = $rb_plus(matched, self.$scanner().$matched());}
        } else if ((($a = matched['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[A-Z]")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = "tCONSTANT"
          } else {
          result = "tIDENTIFIER"
        };
        if ((($a = ($b = self.lex_state['$!=']("expr_dot"), $b !== false && $b !== nil ?kw = $scope.get('Keywords').$keyword(matched) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          old_state = self.lex_state;
          self.lex_state = kw.$state();
          if (old_state['$==']("expr_fname")) {
            (($a = [kw.$name()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](0);};
          if (self.lex_state['$==']("expr_beg")) {
            cmd_start = true};
          if (matched['$==']("do")) {
            if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_end";
              return "tIDENTIFIER";};
            if ((($a = self.start_of_lambda) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.start_of_lambda = false;
              self.lex_state = "expr_beg";
              return "kDO_LAMBDA";
            } else if ((($a = self['$cond?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg";
              return "kDO_COND";
            } else if ((($a = ($b = self['$cmdarg?'](), $b !== false && $b !== nil ?self.lex_state['$!=']("expr_cmdarg") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg";
              return "kDO_BLOCK";
            } else if (last_state['$==']("expr_endarg")) {
              return "kDO_BLOCK"
              } else {
              self.lex_state = "expr_beg";
              return "kDO";
            };
          } else if ((($a = ((($b = old_state['$==']("expr_beg")) !== false && $b !== nil) ? $b : old_state['$==']("expr_value"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](0);
            } else {
            if ((($a = kw.$id()['$[]'](0)['$!='](kw.$id()['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg"};
            (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](1);
          };};
        if ((($a = ["expr_beg", "expr_dot", "expr_mid", "expr_arg", "expr_cmdarg"]['$include?'](self.lex_state)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = (function() {if (cmd_start !== false && cmd_start !== nil) {
            return "expr_cmdarg"
            } else {
            return "expr_arg"
          }; return nil; })()
        } else if (self.lex_state['$==']("expr_fname")) {
          self.lex_state = "expr_endfn"
          } else {
          self.lex_state = "expr_end"
        };
        if ((($a = ($b = ["expr_dot", "expr_fname"]['$include?'](last_state)['$!'](), $b !== false && $b !== nil ?self['$has_local?'](matched) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = "expr_end"};
        (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        return (function() {if ((($a = matched['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[A-Z]")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tCONSTANT"
          } else {
          return "tIDENTIFIER"
        }; return nil; })();
      }, TMP_38.$$arity = 2);

      return (Opal.defn(self, '$yylex', TMP_39 = function ːyylex() {try {

        var $a, $b, $c, $d, $e, self = this, cmd_start = nil, c = nil, token = nil, line_count = nil, result = nil, str_type = nil, paren = nil, term = nil, $case = nil, func = nil, matched = nil, sign = nil, utype = nil;

        self.yylval = "";
        self.space_seen = false;
        cmd_start = false;
        c = "";
        if ((($a = self.$strterm()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (self.$strterm()['$[]']("type")['$==']("heredoc")) {
            token = self.$here_document(self.$strterm())
            } else {
            token = self.$parse_string()
          };
          if ((($a = ((($b = ((($c = token['$==']("tSTRING_END")) !== false && $c !== nil) ? $c : token['$==']("tREGEXP_END"))) !== false && $b !== nil) ? $b : token['$==']("tLABEL_END"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [nil]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
            self.lex_state = "expr_end";};
          return token;};
        while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
        if ((($b = self.$skip(/\ |\t|\r/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.space_seen = true;
          continue;;
        } else if ((($b = self.$skip(/(\n|#)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          c = self.$scanner().$matched();
          if (c['$==']("#")) {
            self.$skip(/(.*)/)
            } else {
            ($b = self, $b['$line=']($rb_plus($b.$line(), 1)))
          };
          self.$skip(/(\n+)/);
          if ((($b = self.$scanner().$matched()) !== nil && (!$b.$$is_boolean || $b == true))) {
            ($b = self, $b['$line=']($rb_plus($b.$line(), self.$scanner().$matched().$length())))};
          if ((($b = ["expr_beg", "expr_dot"]['$include?'](self.lex_state)) !== nil && (!$b.$$is_boolean || $b == true))) {
            continue;};
          if ((($b = self.$skip(/([\ \t\r\f\v]*)\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$scanner()['$[]'](1)['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              self.space_seen = true
            };
            self.$pushback(1);
            if ((($b = self.$check(/\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              continue;
            };};
          cmd_start = true;
          self.lex_state = "expr_beg";
          (($b = ["\\n"]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return "tNL";
        } else if ((($b = self.$scan(/\;/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tSEMI";
        } else if ((($b = self.$check(/\*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\*\*\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("**")
          } else if ((($b = self.$scan(/\*\*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ["expr_beg", "expr_mid"]['$include?'](self.lex_state)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tDSTAR"
              } else {
              self.$set_arg_state();
              return "tPOW";
            }
          } else if ((($b = self.$scan(/\*\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("*")
            } else {
            self.$scan(/\*/);
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg";
              return "tSTAR2";
            } else if ((($b = ($c = self.space_seen, $c !== false && $c !== nil ?self.$check(/\S/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_beg";
              return "tSTAR";
            } else if ((($b = ["expr_beg", "expr_mid"]['$include?'](self.lex_state)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_beg";
              return "tSTAR";
              } else {
              self.lex_state = "expr_beg";
              return "tSTAR2";
            };
          }
        } else if ((($b = self.$scan(/\!/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/@/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return ["tBANG", "!"]};
            } else {
            self.lex_state = "expr_beg"
          };
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tNEQ"
          } else if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tNMATCH"};
          return "tBANG";
        } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = (($c = self.lex_state['$==']("expr_beg")) ? self.space_seen['$!']() : self.lex_state['$==']("expr_beg"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ($c = self.$scan(/begin/), $c !== false && $c !== nil ?self['$space?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.$scan(/(.*)/);
              line_count = 0;
              while ((($c = true) !== nil && (!$c.$$is_boolean || $c == true))) {
              if ((($c = self.$scanner()['$eos?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                self.$raise("embedded document meets end of file")};
              if ((($c = ($d = self.$scan(/\=end/), $d !== false && $d !== nil ?self['$space?']() : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
                self.line = $rb_plus(self.line, line_count);
                return self.$yylex();};
              if ((($c = self.$scan(/\n/)) !== nil && (!$c.$$is_boolean || $c == true))) {
                line_count = $rb_plus(line_count, 1);
                continue;;};
              self.$scan(/(.*)/);};}};
          self.$set_arg_state();
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tEQQ"};
            return "tEQ";};
          if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tMATCH"
          } else if ((($b = self.$scan(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tASSOC"};
          return "tEQL";
        } else if ((($b = self.$scan(/\"/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_DQUOTE'), "\"", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING_BEG";
        } else if ((($b = self.$scan(/\'/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_SQUOTE'), "'", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING_BEG";
        } else if ((($b = self.$scan(/\`/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_XQUOTE'), "`", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tXSTRING_BEG";
        } else if ((($b = self.$scan(/\&/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\&/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$new_op_asgn("&&")};
            return "tANDOP";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("&")};
          if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tAMPER"
          } else if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tAMPER"
            } else {
            result = "tAMPER2"
          };
          self.$set_arg_state();
          return result;
        } else if ((($b = self.$scan(/\|/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\|/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$new_op_asgn("||")};
            return "tOROP";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("|")};
          self.$set_arg_state();
          return "tPIPE";
        } else if ((($b = self.$scan(/\%[QqWwIixrs]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_type = self.$scanner().$matched()['$[]'](1, 1);
          paren = term = self.$scan(/./);
          $case = term;if ("("['$===']($case)) {term = ")"}else if ("["['$===']($case)) {term = "]"}else if ("{"['$===']($case)) {term = "}"}else if ("<"['$===']($case)) {term = ">"}else {paren = "\x00"};
          $c = (function() {$case = str_type;if ("Q"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_DQUOTE')]}else if ("q"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_SQUOTE')]}else if ("W"['$===']($case) || "I"['$===']($case)) {self.$skip(/\s*/);
          return ["tWORDS_BEG", $scope.get('STR_DWORD')];}else if ("w"['$===']($case) || "i"['$===']($case)) {self.$skip(/\s*/);
          return ["tAWORDS_BEG", $scope.get('STR_SWORD')];}else if ("x"['$===']($case)) {return ["tXSTRING_BEG", $scope.get('STR_XQUOTE')]}else if ("r"['$===']($case)) {return ["tREGEXP_BEG", $scope.get('STR_REGEXP')]}else if ("s"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_SQUOTE')]}else { return nil }})(), $b = Opal.to_ary($c), token = ($b[0] == null ? nil : $b[0]), func = ($b[1] == null ? nil : $b[1]), $c;
          (($b = [self.$new_strterm2(func, term, paren)]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return token;
        } else if ((($b = self.$scan(/\//)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_REGEXP'), "/", "/")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
            return "tREGEXP_BEG";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("/")};
          if ((($b = self['$arg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ($c = self.$check(/\s/)['$!'](), $c !== false && $c !== nil ?self.space_seen : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              (($b = [self.$new_strterm($scope.get('STR_REGEXP'), "/", "/")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
              return "tREGEXP_BEG";}};
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg"
            } else {
            self.lex_state = "expr_beg"
          };
          return "tDIVIDE";
        } else if ((($b = self.$scan(/\%/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ($c = self.$check(/\=/), $c !== false && $c !== nil ?self.lex_state['$!=']("expr_beg") : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$scan(/\=/);
            return self.$new_op_asgn("%");
          } else if ((($b = self.$check(/[^\s]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ((($c = ((($d = self.lex_state['$==']("expr_beg")) !== false && $d !== nil) ? $d : (($e = self.lex_state['$==']("expr_arg")) ? self.space_seen : self.lex_state['$==']("expr_arg")))) !== false && $c !== nil) ? $c : self.lex_state['$==']("expr_mid"))) !== nil && (!$b.$$is_boolean || $b == true))) {
              paren = term = self.$scan(/./);
              $case = term;if ("("['$===']($case)) {term = ")"}else if ("["['$===']($case)) {term = "]"}else if ("{"['$===']($case)) {term = "}"}else if ("<"['$===']($case)) {term = ">"}else {paren = "\x00"};
              (($b = [self.$new_strterm2($scope.get('STR_DQUOTE'), term, paren)]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
              return "tSTRING_BEG";}};
          self.$set_arg_state();
          return "tPERCENT";
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\r?\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.space_seen = true;
            continue;;};
          self.$raise($scope.get('SyntaxError'), "backslash must appear before newline :" + (self.file) + ":" + (self.line));
        } else if ((($b = self.$scan(/\(/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          result = self.$scanner().$matched();
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLPAREN"
          } else if ((($b = ($c = self.space_seen, $c !== false && $c !== nil ?self['$arg?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lparen_arg_seen = true;
            result = "tLPAREN_ARG";
            } else {
            result = "tLPAREN2"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = self.$scan(/\)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          self.lparen_arg_seen = false;
          return "tRPAREN";
        } else if ((($b = self.$scan(/\[/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          result = self.$scanner().$matched();
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/\]=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tASET"
            } else if ((($b = self.$scan(/\]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tAREF"
              } else {
              self.$raise("Unexpected '[' token")
            };
          } else if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLBRACK"
          } else if ((($b = ($c = self['$arg?'](), $c !== false && $c !== nil ?self.space_seen : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLBRACK"
            } else {
            result = "tLBRACK2"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = self.$scan(/\]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          return "tRBRACK";
        } else if ((($b = self.$scan(/\}/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          return "tRCURLY";
        } else if ((($b = self.$scan(/\.\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tDOT3";
        } else if ((($b = self.$scan(/\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tDOT2";
        } else if ((($b = ($c = self.lex_state['$!=']("expr_fname"), $c !== false && $c !== nil ?self.$scan(/\.JS\[/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return "tJSLBRACK";
        } else if ((($b = ($c = self.lex_state['$!=']("expr_fname"), $c !== false && $c !== nil ?self.$scan(/\.JS\./) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_dot";
          return "tJSDOT";
        } else if ((($b = self.$scan(/\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (self.lex_state['$==']("expr_fname")) {
            } else {
            self.lex_state = "expr_dot"
          };
          return "tDOT";
        } else if ((($b = self.$scan(/\:\:/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tCOLON3";
          } else if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tCOLON3";};
          self.lex_state = "expr_dot";
          return "tCOLON2";
        } else if ((($b = self.$scan(/\:/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ((($c = self['$end?']()) !== false && $c !== nil) ? $c : self.$check(/\s/))) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$check(/\w/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              self.lex_state = "expr_beg";
              return "tCOLON";
            };
            self.lex_state = "expr_fname";
            return "tSYMBEG";};
          if ((($b = self.$scan(/\'/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_SSYM'), "'", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1])
          } else if ((($b = self.$scan(/\"/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_DSYM'), "\"", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1])};
          self.lex_state = "expr_fname";
          return "tSYMBEG";
        } else if ((($b = self.$scan(/\^\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$new_op_asgn("^")
        } else if ((($b = self.$scan(/\^/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$set_arg_state();
          return "tCARET";
        } else if ((($b = self.$check(/</)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/<<\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("<<")
          } else if ((($b = self.$scan(/<</)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg";
              return "tLSHFT";
            } else if ((($b = ($c = ($d = ($e = self['$after_operator?']()['$!'](), $e !== false && $e !== nil ?self['$end?']()['$!']() : $e), $d !== false && $d !== nil ?(((($e = self['$arg?']()['$!']()) !== false && $e !== nil) ? $e : self.space_seen)) : $d), $c !== false && $c !== nil ?self.lex_state['$!=']("expr_class") : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              if ((($b = token = self.$heredoc_identifier()) !== nil && (!$b.$$is_boolean || $b == true))) {
                return token};
              self.lex_state = "expr_beg";
              return "tLSHFT";};
            self.lex_state = "expr_beg";
            return "tLSHFT";
          } else if ((($b = self.$scan(/<\=\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg"
              } else {
              if (self.lex_state['$==']("expr_class")) {
                cmd_start = true};
              self.lex_state = "expr_beg";
            };
            return "tCMP";
          } else if ((($b = self.$scan(/<\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tLEQ";
          } else if ((($b = self.$scan(/</)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tLT";}
        } else if ((($b = self.$check(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\>\>\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn(">>")
          } else if ((($b = self.$scan(/\>\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tRSHFT";
          } else if ((($b = self.$scan(/\>\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tGEQ";
          } else if ((($b = self.$scan(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tGT";}
        } else if ((($b = self.$scan(/->/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          self.start_of_lambda = true;
          return "tLAMBDA";
        } else if ((($b = self.$scan(/[+-]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          matched = self.$scanner().$matched();
          $c = (function() {if (matched['$==']("+")) {
            return ["tPLUS", "tUPLUS"]
            } else {
            return ["tMINUS", "tUMINUS"]
          }; return nil; })(), $b = Opal.to_ary($c), sign = ($b[0] == null ? nil : $b[0]), utype = ($b[1] == null ? nil : $b[1]), $c;
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_mid";
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            if ((($b = ($c = self.$scanner().$peek(1)['$=~'](/\d/), $c !== false && $c !== nil ?Opal.ret((function() {if (utype['$==']("tUMINUS")) {
              return "-@NUM"
              } else {
              return "+@NUM"
            }; return nil; })()) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              return utype
            };
          } else if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/@/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              (($b = [$rb_plus(matched, "@")]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
              return "tIDENTIFIER";};
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return sign;};
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn(matched)};
          if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_mid";
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            if ((($b = ($c = self.$scanner().$peek(1)['$=~'](/\d/), $c !== false && $c !== nil ?Opal.ret((function() {if (utype['$==']("tUMINUS")) {
              return "-@NUM"
              } else {
              return "+@NUM"
            }; return nil; })()) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              return utype
            };};
          self.lex_state = "expr_beg";
          (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return sign;
        } else if ((($b = self.$scan(/\?/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$end?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tEH";};
          if ((($b = self.$check(/\ |\t|\r|\s/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tEH";
          } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            (($b = [self.$read_escape()]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return "tSTRING";};
          self.lex_state = "expr_end";
          (($b = [self.$scan(/./)]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING";
        } else if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$set_arg_state();
          return "tTILDE";
        } else if ((($b = self.$check(/\$/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\$([1-9]\d*)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            (($b = [self.$scanner().$matched().$sub("$", "")]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return "tNTH_REF";
          } else if ((($b = self.$scan(/(\$_)(\w+)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
          } else if ((($b = self.$scan(/\$[\+\'\`\&!@\"~*$?\/\\:;=.,<>_]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
          } else if ((($b = self.$scan(/\$\w+/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
          } else if ((($b = self.$scan(/\$-[0-9a-zA-Z]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
            } else {
            self.$raise("Bad gvar name: " + (self.$scanner().$peek(5).$inspect()))
          }
        } else if ((($b = self.$scan(/\$\w+/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tGVAR";
        } else if ((($b = self.$scan(/\@\@\w*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tCVAR";
        } else if ((($b = self.$scan(/\@\w*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tIVAR";
        } else if ((($b = self.$scan(/\,/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tCOMMA";
        } else if ((($b = self.$scan(/\{/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.start_of_lambda) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.start_of_lambda = false;
            self.lex_state = "expr_beg";
            self.$cond_push(0);
            self.$cmdarg_push(0);
            return "tLAMBEG";
          } else if ((($b = ((($c = self['$arg?']()) !== false && $c !== nil) ? $c : self.lex_state['$==']("expr_end"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.lparen_arg_seen) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lparen_arg_seen = false;
              result = "tLBRACE_ARG";
              } else {
              result = "tLCURLY"
            }
          } else if (self.lex_state['$==']("expr_endarg")) {
            result = "tLBRACE_ARG"
            } else {
            result = "tLBRACE"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = ($c = self.$scanner()['$bol?'](), $c !== false && $c !== nil ?self.$skip(/\__END__(\n|$)/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          while ((($c = true) !== nil && (!$c.$$is_boolean || $c == true))) {
          if ((($c = self.$scanner()['$eos?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.eof_content = self.$yylval();
            return false;};
          self.$scan(/(.*)/);
          self.$scan(/\n/);}
        } else if ((($b = self.$check(/[0-9]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$process_numeric()
        } else if ((($b = self.$scan($scope.get('INLINE_IDENTIFIER_REGEXP'))) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$process_identifier(self.$scanner().$matched(), cmd_start)};
        if ((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (self.scanner_stack.$size()['$=='](1)) {
            (($b = [false]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return false;
            } else {
            self.scanner_stack.$pop();
            self.scanner = self.scanner_stack.$last();
            return self.$yylex();
          }};
        self.$raise("Unexpected content in parsing stream `" + (self.$scanner().$peek(5)) + "` :" + (self.file) + ":" + (self.line));};
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_39.$$arity = 0), nil) && 'yylex';
    })($scope.base, null)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["racc/parser"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$class', '$<', '$size', '$[]=', '$__send__', '$_racc_setup', '$raise', '$_racc_init_sysvars', '$catch', '$!=', '$next_token', '$racc_read_token', '$+', '$>=', '$==', '$_racc_evalact', '$!', '$>', '$-', '$push', '$racc_shift', '$-@', '$_racc_do_reduce', '$===', '$racc_accept', '$throw', '$on_error', '$<=', '$pop', '$racc_e_pop', '$inspect', '$racc_next_state', '$*', '$racc_reduce', '$sprintf', '$token_to_str', '$print', '$racc_token2str', '$puts', '$racc_print_stacks', '$empty?', '$each', '$racc_print_states', '$each_index']);
  (function($base) {
    var $Racc, self = $Racc = $module($base, 'Racc');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ParseError(){};
      var self = $ParseError = $klass($base, $super, 'ParseError', $ParseError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'))
  })($scope.base);
  if ((($a = (Opal.Object.$$scope.ParseError == null ? nil : 'constant')) !== nil && (!$a.$$is_boolean || $a == true))) {
    } else {
    Opal.cdecl($scope, 'ParseError', (($scope.get('Racc')).$$scope.get('ParseError')))
  };
  return (function($base) {
    var $Racc, self = $Racc = $module($base, 'Racc');

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = ($scope.Racc_No_Extensions != null)) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      Opal.cdecl($scope, 'Racc_No_Extensions', false)
    };

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, TMP_29, TMP_30, TMP_31;

      def.yydebug = def.racc_debug_out = def.racc_error_status = def.racc_t = def.racc_vstack = def.racc_val = def.racc_state = def.racc_tstack = nil;
      Opal.cdecl($scope, 'Racc_Runtime_Version', "1.4.6");

      Opal.cdecl($scope, 'Racc_Runtime_Revision', ["originalRevision:", "1.8"]['$[]'](1));

      Opal.cdecl($scope, 'Racc_Runtime_Core_Version_R', "1.4.6");

      Opal.cdecl($scope, 'Racc_Runtime_Core_Revision_R', ["originalRevision:", "1.8"]['$[]'](1));

      Opal.cdecl($scope, 'Racc_Main_Parsing_Routine', "_racc_do_parse_rb");

      Opal.cdecl($scope, 'Racc_YY_Parse_Method', "_racc_yyparse_rb");

      Opal.cdecl($scope, 'Racc_Runtime_Core_Version', $scope.get('Racc_Runtime_Core_Version_R'));

      Opal.cdecl($scope, 'Racc_Runtime_Core_Revision', $scope.get('Racc_Runtime_Core_Revision_R'));

      Opal.cdecl($scope, 'Racc_Runtime_Type', "ruby");

      Opal.defs($scope.get('Parser'), '$racc_runtime_type', TMP_1 = function ːracc_runtime_type() {
        var self = this;

        return $scope.get('Racc_Runtime_Type');
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$_racc_setup', TMP_2 = function ː_racc_setup() {
        var $a, $b, self = this, arg = nil;
        if ($gvars.stderr == null) $gvars.stderr = nil;

        if ((($a = ((self.$class()).$$scope.get('Racc_debug_parser'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.yydebug = false
        };
        if ((($a = (($b = self['yydebug'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.yydebug = false
        };
        if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (($b = self['racc_debug_out'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.racc_debug_out = $gvars.stderr
          };
          ((($a = self.racc_debug_out) !== false && $a !== nil) ? $a : self.racc_debug_out = $gvars.stderr);};
        arg = ((self.$class()).$$scope.get('Racc_arg'));
        if ((($a = $rb_lt(arg.$size(), 14)) !== nil && (!$a.$$is_boolean || $a == true))) {
          arg['$[]='](13, true)};
        return arg;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$_racc_init_sysvars', TMP_3 = function ː_racc_init_sysvars() {
        var self = this;

        self.racc_state = [0];
        self.racc_tstack = [];
        self.racc_vstack = [];
        self.racc_t = nil;
        self.racc_val = nil;
        self.racc_read_next = true;
        self.racc_user_yyerror = false;
        return self.racc_error_status = 0;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$do_parse', TMP_4 = function ːdo_parse() {
        var self = this;

        return self.$__send__($scope.get('Racc_Main_Parsing_Routine'), self.$_racc_setup(), false);
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$next_token', TMP_5 = function ːnext_token() {
        var self = this;

        return self.$raise($scope.get('NotImplementedError'), "" + (self.$class()) + "#next_token is not defined");
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$_racc_do_parse_rb', TMP_7 = function ː_racc_do_parse_rb(arg, in_debug) {
        var $a, $b, TMP_6, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, tok = nil, act = nil, i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = ($a[0] == null ? nil : $a[0]), action_check = ($a[1] == null ? nil : $a[1]), action_default = ($a[2] == null ? nil : $a[2]), action_pointer = ($a[3] == null ? nil : $a[3]), _ = ($a[4] == null ? nil : $a[4]), _ = ($a[5] == null ? nil : $a[5]), _ = ($a[6] == null ? nil : $a[6]), _ = ($a[7] == null ? nil : $a[7]), _ = ($a[8] == null ? nil : $a[8]), _ = ($a[9] == null ? nil : $a[9]), token_table = ($a[10] == null ? nil : $a[10]), _ = ($a[11] == null ? nil : $a[11]), _ = ($a[12] == null ? nil : $a[12]), _ = ($a[13] == null ? nil : $a[13]), $b;
        self.$_racc_init_sysvars();
        tok = act = i = nil;
        return ($a = ($b = self).$catch, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, $e, $f;
          if (self.racc_state == null) self.racc_state = nil;
          if (self.racc_read_next == null) self.racc_read_next = nil;
          if (self.racc_t == null) self.racc_t = nil;
          if (self.yydebug == null) self.yydebug = nil;
          if (self.racc_val == null) self.racc_val = nil;

        while ((($d = true) !== nil && (!$d.$$is_boolean || $d == true))) {
          if ((($d = i = action_pointer['$[]'](self.racc_state['$[]'](-1))) !== nil && (!$d.$$is_boolean || $d == true))) {
            if ((($d = self.racc_read_next) !== nil && (!$d.$$is_boolean || $d == true))) {
              if ((($d = self.racc_t['$!='](0)) !== nil && (!$d.$$is_boolean || $d == true))) {
                $e = self.$next_token(), $d = Opal.to_ary($e), tok = ($d[0] == null ? nil : $d[0]), self.racc_val = ($d[1] == null ? nil : $d[1]), $e;
                if (tok !== false && tok !== nil) {
                  self.racc_t = (((($d = token_table['$[]'](tok)) !== false && $d !== nil) ? $d : 1))
                  } else {
                  self.racc_t = 0
                };
                if ((($d = self.yydebug) !== nil && (!$d.$$is_boolean || $d == true))) {
                  self.$racc_read_token(self.racc_t, tok, self.racc_val)};
                self.racc_read_next = false;}};
            i = $rb_plus(i, self.racc_t);
            if ((($d = ($e = ($f = $rb_ge(i, 0), $f !== false && $f !== nil ?act = action_table['$[]'](i) : $f), $e !== false && $e !== nil ?action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
              } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            } else {
            act = action_default['$[]'](self.racc_state['$[]'](-1))
          };
          while ((($e = act = self.$_racc_evalact(act, arg)) !== nil && (!$e.$$is_boolean || $e == true))) {
          };}}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, "racc_end_parse");
      }, TMP_7.$$arity = 2);

      Opal.defn(self, '$yyparse', TMP_8 = function ːyyparse(recv, mid) {
        var self = this;

        return self.$__send__($scope.get('Racc_YY_Parse_Method'), recv, mid, self.$_racc_setup(), true);
      }, TMP_8.$$arity = 2);

      Opal.defn(self, '$_racc_yyparse_rb', TMP_11 = function ː_racc_yyparse_rb(recv, mid, arg, c_debug) {
        var $a, $b, TMP_9, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, _ = nil, token_table = nil, act = nil, i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = ($a[0] == null ? nil : $a[0]), action_check = ($a[1] == null ? nil : $a[1]), action_default = ($a[2] == null ? nil : $a[2]), action_pointer = ($a[3] == null ? nil : $a[3]), _ = ($a[4] == null ? nil : $a[4]), _ = ($a[5] == null ? nil : $a[5]), _ = ($a[6] == null ? nil : $a[6]), _ = ($a[7] == null ? nil : $a[7]), _ = ($a[8] == null ? nil : $a[8]), _ = ($a[9] == null ? nil : $a[9]), token_table = ($a[10] == null ? nil : $a[10]), _ = ($a[11] == null ? nil : $a[11]), _ = ($a[12] == null ? nil : $a[12]), _ = ($a[13] == null ? nil : $a[13]), $b;
        self.$_racc_init_sysvars();
        act = nil;
        i = nil;
        return ($a = ($b = self).$catch, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $c, $d, $e, TMP_10;
          if (self.racc_state == null) self.racc_state = nil;

        while (!((($d = i = action_pointer['$[]'](self.racc_state['$[]'](-1))) !== nil && (!$d.$$is_boolean || $d == true)))) {
          while ((($e = act = self.$_racc_evalact(action_default['$[]'](self.racc_state['$[]'](-1)), arg)) !== nil && (!$e.$$is_boolean || $e == true))) {
          }};
          return ($c = ($d = recv).$__send__, $c.$$p = (TMP_10 = function(tok, val){var self = TMP_10.$$s || this, $f, $g, $h, $i, $j, $k;
            if (self.racc_t == null) self.racc_t = nil;
            if (self.racc_state == null) self.racc_state = nil;
            if (self.racc_read_next == null) self.racc_read_next = nil;
if (tok == null) tok = nil;if (val == null) val = nil;
          if (tok !== false && tok !== nil) {
              self.racc_t = (((($f = token_table['$[]'](tok)) !== false && $f !== nil) ? $f : 1))
              } else {
              self.racc_t = 0
            };
            self.racc_val = val;
            self.racc_read_next = false;
            i = $rb_plus(i, self.racc_t);
            if ((($f = ($g = ($h = $rb_ge(i, 0), $h !== false && $h !== nil ?act = action_table['$[]'](i) : $h), $g !== false && $g !== nil ?action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $g)) !== nil && (!$f.$$is_boolean || $f == true))) {
              } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ((($g = act = self.$_racc_evalact(act, arg)) !== nil && (!$g.$$is_boolean || $g == true))) {
            };
            while ((($g = ((($h = ((($i = ((i = action_pointer['$[]'](self.racc_state['$[]'](-1))))['$!']()) !== false && $i !== nil) ? $i : self.racc_read_next['$!']())) !== false && $h !== nil) ? $h : self.racc_t['$=='](0))) !== nil && (!$g.$$is_boolean || $g == true))) {
            if ((($g = ($h = ($i = ($j = (($k = i !== false && i !== nil) ? i = $rb_plus(i, self.racc_t) : i), $j !== false && $j !== nil ?$rb_ge(i, 0) : $j), $i !== false && $i !== nil ?act = action_table['$[]'](i) : $i), $h !== false && $h !== nil ?action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $h)) !== nil && (!$g.$$is_boolean || $g == true))) {
              } else {
              act = action_default['$[]'](self.racc_state['$[]'](-1))
            };
            while ((($h = act = self.$_racc_evalact(act, arg)) !== nil && (!$h.$$is_boolean || $h == true))) {
            };};}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $c).call($d, mid);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b, "racc_end_parse");
      }, TMP_11.$$arity = 4);

      Opal.defn(self, '$_racc_evalact', TMP_13 = function ː_racc_evalact(act, arg) {
        var $a, $b, TMP_12, $c, $d, $e, self = this, action_table = nil, action_check = nil, _ = nil, action_pointer = nil, shift_n = nil, reduce_n = nil, code = nil, $case = nil, i = nil;

        $b = arg, $a = Opal.to_ary($b), action_table = ($a[0] == null ? nil : $a[0]), action_check = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), action_pointer = ($a[3] == null ? nil : $a[3]), _ = ($a[4] == null ? nil : $a[4]), _ = ($a[5] == null ? nil : $a[5]), _ = ($a[6] == null ? nil : $a[6]), _ = ($a[7] == null ? nil : $a[7]), _ = ($a[8] == null ? nil : $a[8]), _ = ($a[9] == null ? nil : $a[9]), _ = ($a[10] == null ? nil : $a[10]), shift_n = ($a[11] == null ? nil : $a[11]), reduce_n = ($a[12] == null ? nil : $a[12]), _ = ($a[13] == null ? nil : $a[13]), _ = ($a[14] == null ? nil : $a[14]), $b;
        if ((($a = ($b = $rb_gt(act, 0), $b !== false && $b !== nil ?$rb_lt(act, shift_n) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_gt(self.racc_error_status, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (self.racc_t['$=='](1)) {
              } else {
              self.racc_error_status = $rb_minus(self.racc_error_status, 1)
            }};
          self.racc_vstack.$push(self.racc_val);
          self.racc_state.$push(act);
          self.racc_read_next = true;
          if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.racc_tstack.$push(self.racc_t);
            self.$racc_shift(self.racc_t, self.racc_tstack, self.racc_vstack);};
        } else if ((($a = ($b = $rb_lt(act, 0), $b !== false && $b !== nil ?$rb_gt(act, reduce_n['$-@']()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          code = ($a = ($b = self).$catch, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;
            if (self.racc_state == null) self.racc_state = nil;

          self.racc_state.$push(self.$_racc_do_reduce(arg, act));
            return false;}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b, "racc_jump");
          if (code !== false && code !== nil) {
            $case = code;if ((1)['$===']($case)) {self.racc_user_yyerror = true;
            return reduce_n['$-@']();}else if ((2)['$===']($case)) {return shift_n}else {self.$raise("[Racc Bug] unknown jump code")}};
        } else if (act['$=='](shift_n)) {
          if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$racc_accept()};
          self.$throw("racc_end_parse", self.racc_vstack['$[]'](0));
        } else if (act['$=='](reduce_n['$-@']())) {
          $case = self.racc_error_status;if ((0)['$===']($case)) {if ((($a = arg['$[]'](21)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$on_error(self.racc_t, self.racc_val, self.racc_vstack)
          }}else if ((3)['$===']($case)) {if (self.racc_t['$=='](0)) {
            self.$throw("racc_end_parse", nil)};
          self.racc_read_next = true;};
          self.racc_user_yyerror = false;
          self.racc_error_status = 3;
          while ((($c = true) !== nil && (!$c.$$is_boolean || $c == true))) {
          if ((($c = i = action_pointer['$[]'](self.racc_state['$[]'](-1))) !== nil && (!$c.$$is_boolean || $c == true))) {
            i = $rb_plus(i, 1);
            if ((($c = ($d = ($e = $rb_ge(i, 0), $e !== false && $e !== nil ?(act = action_table['$[]'](i)) : $e), $d !== false && $d !== nil ?action_check['$[]'](i)['$=='](self.racc_state['$[]'](-1)) : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
              break;};};
          if ((($c = $rb_le(self.racc_state.$size(), 1)) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.$throw("racc_end_parse", nil)};
          self.racc_state.$pop();
          self.racc_vstack.$pop();
          if ((($c = self.yydebug) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.racc_tstack.$pop();
            self.$racc_e_pop(self.racc_state, self.racc_tstack, self.racc_vstack);};};
          return act;
          } else {
          self.$raise("[Racc Bug] unknown action " + (act.$inspect()))
        };
        if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$racc_next_state(self.racc_state['$[]'](-1), self.racc_state)};
        return nil;
      }, TMP_13.$$arity = 2);

      Opal.defn(self, '$_racc_do_reduce', TMP_14 = function ː_racc_do_reduce(arg, act) {
        var $a, $b, $c, self = this, _ = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, use_result = nil, state = nil, vstack = nil, tstack = nil, i = nil, len = nil, reduce_to = nil, method_id = nil, void_array = nil, tmp_t = nil, tmp_v = nil, k1 = nil, curstate = nil;

        $b = arg, $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), _ = ($a[3] == null ? nil : $a[3]), goto_table = ($a[4] == null ? nil : $a[4]), goto_check = ($a[5] == null ? nil : $a[5]), goto_default = ($a[6] == null ? nil : $a[6]), goto_pointer = ($a[7] == null ? nil : $a[7]), nt_base = ($a[8] == null ? nil : $a[8]), reduce_table = ($a[9] == null ? nil : $a[9]), _ = ($a[10] == null ? nil : $a[10]), _ = ($a[11] == null ? nil : $a[11]), _ = ($a[12] == null ? nil : $a[12]), use_result = ($a[13] == null ? nil : $a[13]), $b;
        state = self.racc_state;
        vstack = self.racc_vstack;
        tstack = self.racc_tstack;
        i = $rb_times(act, -3);
        len = reduce_table['$[]'](i);
        reduce_to = reduce_table['$[]']($rb_plus(i, 1));
        method_id = reduce_table['$[]']($rb_plus(i, 2));
        void_array = [];
        if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
          tmp_t = tstack['$[]'](len['$-@'](), len)};
        tmp_v = vstack['$[]'](len['$-@'](), len);
        if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
          tstack['$[]='](len['$-@'](), len, void_array)};
        vstack['$[]='](len['$-@'](), len, void_array);
        state['$[]='](len['$-@'](), len, void_array);
        if (use_result !== false && use_result !== nil) {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack, tmp_v['$[]'](0)))
          } else {
          vstack.$push(self.$__send__(method_id, tmp_v, vstack))
        };
        tstack.$push(reduce_to);
        if ((($a = self.yydebug) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$racc_reduce(tmp_t, reduce_to, tstack, vstack)};
        k1 = $rb_minus(reduce_to, nt_base);
        if ((($a = i = goto_pointer['$[]'](k1)) !== nil && (!$a.$$is_boolean || $a == true))) {
          i = $rb_plus(i, state['$[]'](-1));
          if ((($a = ($b = ($c = $rb_ge(i, 0), $c !== false && $c !== nil ?(curstate = goto_table['$[]'](i)) : $c), $b !== false && $b !== nil ?goto_check['$[]'](i)['$=='](k1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return curstate};};
        return goto_default['$[]'](k1);
      }, TMP_14.$$arity = 2);

      Opal.defn(self, '$on_error', TMP_15 = function ːon_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise($scope.get('ParseError'), self.$sprintf("\nparse error on value %s (%s)", val.$inspect(), ((($a = self.$token_to_str(t)) !== false && $a !== nil) ? $a : "?")));
      }, TMP_15.$$arity = 3);

      Opal.defn(self, '$yyerror', TMP_16 = function ːyyerror() {
        var self = this;

        return self.$throw("racc_jump", 1);
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$yyaccept', TMP_17 = function ːyyaccept() {
        var self = this;

        return self.$throw("racc_jump", 2);
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$yyerrok', TMP_18 = function ːyyerrok() {
        var self = this;

        return self.racc_error_status = 0;
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$racc_read_token', TMP_19 = function ːracc_read_token(t, tok, val) {
        var self = this;

        self.racc_debug_out.$print("read    ");
        self.racc_debug_out.$print(tok.$inspect(), "(", self.$racc_token2str(t), ") ");
        self.racc_debug_out.$puts(val.$inspect());
        return self.racc_debug_out.$puts();
      }, TMP_19.$$arity = 3);

      Opal.defn(self, '$racc_shift', TMP_20 = function ːracc_shift(tok, tstack, vstack) {
        var self = this;

        self.racc_debug_out.$puts("shift   " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, TMP_20.$$arity = 3);

      Opal.defn(self, '$racc_reduce', TMP_22 = function ːracc_reduce(toks, sim, tstack, vstack) {
        var $a, $b, TMP_21, self = this, out = nil;

        out = self.racc_debug_out;
        out.$print("reduce ");
        if ((($a = toks['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          out.$print(" <none>")
          } else {
          ($a = ($b = toks).$each, $a.$$p = (TMP_21 = function(t){var self = TMP_21.$$s || this;
if (t == null) t = nil;
          return out.$print(" ", self.$racc_token2str(t))}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b)
        };
        out.$puts(" --> " + (self.$racc_token2str(sim)));
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, TMP_22.$$arity = 4);

      Opal.defn(self, '$racc_accept', TMP_23 = function ːracc_accept() {
        var self = this;

        self.racc_debug_out.$puts("accept");
        return self.racc_debug_out.$puts();
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$racc_e_pop', TMP_24 = function ːracc_e_pop(state, tstack, vstack) {
        var self = this;

        self.racc_debug_out.$puts("error recovering mode: pop token");
        self.$racc_print_states(state);
        self.$racc_print_stacks(tstack, vstack);
        return self.racc_debug_out.$puts();
      }, TMP_24.$$arity = 3);

      Opal.defn(self, '$racc_next_state', TMP_25 = function ːracc_next_state(curstate, state) {
        var self = this;

        self.racc_debug_out.$puts("goto    " + (curstate));
        self.$racc_print_states(state);
        return self.racc_debug_out.$puts();
      }, TMP_25.$$arity = 2);

      Opal.defn(self, '$racc_print_stacks', TMP_27 = function ːracc_print_stacks(t, v) {
        var $a, $b, TMP_26, self = this, out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        ($a = ($b = t).$each_index, $a.$$p = (TMP_26 = function(i){var self = TMP_26.$$s || this;
if (i == null) i = nil;
        return out.$print(" (", self.$racc_token2str(t['$[]'](i)), " ", v['$[]'](i).$inspect(), ")")}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b);
        return out.$puts(" ]");
      }, TMP_27.$$arity = 2);

      Opal.defn(self, '$racc_print_states', TMP_29 = function ːracc_print_states(s) {
        var $a, $b, TMP_28, self = this, out = nil;

        out = self.racc_debug_out;
        out.$print("        [");
        ($a = ($b = s).$each, $a.$$p = (TMP_28 = function(st){var self = TMP_28.$$s || this;
if (st == null) st = nil;
        return out.$print(" ", st)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b);
        return out.$puts(" ]");
      }, TMP_29.$$arity = 1);

      Opal.defn(self, '$racc_token2str', TMP_30 = function ːracc_token2str(tok) {
        var $a, self = this;

        return ((($a = ((self.$class()).$$scope.get('Racc_token_to_s_table'))['$[]'](tok)) !== false && $a !== nil) ? $a : self.$raise("[Racc Bug] can't convert token " + (tok) + " to string"));
      }, TMP_30.$$arity = 1);

      return (Opal.defn(self, '$token_to_str', TMP_31 = function ːtoken_to_str(t) {
        var self = this;

        return ((self.$class()).$$scope.get('Racc_token_to_s_table'))['$[]'](t);
      }, TMP_31.$$arity = 1), nil) && 'token_to_str';
    })($scope.base, null);
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser/grammar"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$require', '$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$new_compstmt', '$[]', '$new_block', '$<<', '$new_body', '$lex_state=', '$lexer', '$new_alias', '$s', '$to_sym', '$value', '$new_if', '$new_while', '$new_until', '$new_rescue_mod', '$new_op_asgn', '$op_to_setter', '$new_assign', '$new_unary_call', '$new_iter', '$new_call', '$new_js_call', '$new_super', '$new_yield', '$new_return', '$new_break', '$new_next', '$concat', '$children', '$new_assignable', '$new_js_attrasgn', '$new_attrasgn', '$new_colon2', '$new_colon3', '$new_const', '$new_sym', '$new_op_asgn1', '$raise', '$new_irange', '$new_erange', '$new_binary_call', '$new_int', '$new_float', '$include?', '$type', '$==', '$-@', '$to_f', '$new_and', '$new_or', '$cond_push', '$cond_pop', '$new_hash', '$add_block_pass', '$cmdarg_push', '$cmdarg_pop', '$new_block_pass', '$new_splat', '$line', '$new_nil', '$new_paren', '$new_array', '$new_method_call_with_block', '$new_class', '$new_sclass', '$new_module', '$push_scope', '$new_def', '$pop_scope', '$new_shadowarg', '$new_block_args', '$new_ident', '$new_optarg', '$new_restarg', '$push', '$intern', '$nil?', '$new_str', '$str_append', '$new_xstr', '$new_regexp', '$new_str_content', '$strterm', '$strterm=', '$new_evstr', '$cond_lexpop', '$cmdarg_lexpop', '$new_gvar', '$new_ivar', '$new_cvar', '$new_dsym', '$negate_num', '$new_self', '$new_true', '$new_false', '$new___FILE__', '$new___LINE__', '$new_var_ref', '$new_kwrestarg', '$new_kwoptarg', '$new_kwarg', '$new_args_tail', '$new_args', '$add_local', '$scope', '$insert', '$source', '$new_kwsplat']);
  self.$require("racc/parser.rb");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_76, TMP_77, TMP_78, TMP_79, TMP_80, TMP_81, TMP_82, TMP_83, TMP_84, TMP_85, TMP_86, TMP_87, TMP_88, TMP_89, TMP_90, TMP_91, TMP_92, TMP_93, TMP_94, TMP_95, TMP_96, TMP_97, TMP_98, TMP_99, TMP_100, TMP_101, TMP_102, TMP_103, TMP_104, TMP_105, TMP_106, TMP_107, TMP_108, TMP_109, TMP_110, TMP_111, TMP_112, TMP_113, TMP_114, TMP_115, TMP_116, TMP_117, TMP_118, TMP_119, TMP_120, TMP_121, TMP_122, TMP_123, TMP_124, TMP_125, TMP_126, TMP_127, TMP_128, TMP_129, TMP_130, TMP_131, TMP_132, TMP_133, TMP_134, TMP_135, TMP_136, TMP_137, TMP_138, TMP_139, TMP_140, TMP_141, TMP_142, TMP_143, TMP_144, TMP_145, TMP_146, TMP_147, TMP_148, TMP_149, TMP_150, TMP_151, TMP_152, TMP_153, TMP_154, TMP_155, TMP_156, TMP_157, TMP_158, TMP_159, TMP_160, TMP_161, TMP_162, TMP_163, TMP_164, TMP_165, TMP_166, TMP_167, TMP_168, TMP_169, TMP_170, TMP_171, TMP_172, TMP_173, TMP_174, TMP_175, TMP_176, TMP_177, TMP_178, TMP_179, TMP_180, TMP_181, TMP_182, TMP_183, TMP_184, TMP_185, TMP_186, TMP_187, TMP_188, TMP_189, TMP_190, TMP_191, TMP_192, TMP_193, TMP_194, TMP_195, TMP_196, TMP_197, TMP_198, TMP_199, TMP_200, TMP_201, TMP_202, TMP_203, TMP_204, TMP_205, TMP_206, TMP_207, TMP_208, TMP_209, TMP_210, TMP_211, TMP_212, TMP_213, TMP_214, TMP_215, TMP_216, TMP_217, TMP_218, TMP_219, TMP_220, TMP_221, TMP_222, TMP_223, TMP_224, TMP_225, TMP_226, TMP_227, TMP_228, TMP_229, TMP_230, TMP_231, TMP_232, TMP_233, TMP_234, TMP_235, TMP_236, TMP_237, TMP_238, TMP_239, TMP_240, TMP_241, TMP_242, TMP_243, TMP_244, TMP_245, TMP_246, TMP_247, TMP_248, TMP_249, TMP_250, TMP_251, TMP_252, TMP_253, TMP_254, TMP_255, TMP_256, TMP_257, TMP_258, TMP_259, TMP_260, TMP_261, TMP_262, TMP_263, TMP_264, TMP_265, TMP_266, TMP_267, TMP_268, TMP_269, TMP_270, TMP_271, TMP_272, TMP_273, TMP_274, TMP_275, TMP_276, TMP_277, TMP_278, TMP_279, TMP_280, TMP_281, TMP_282, TMP_283, TMP_284, TMP_285, TMP_286, TMP_287, TMP_288, TMP_289, TMP_290, TMP_291, TMP_292, TMP_293, TMP_294, TMP_295, TMP_296, TMP_297, TMP_298, TMP_299, TMP_300, TMP_301, TMP_302, TMP_303, TMP_304, TMP_305, TMP_306, TMP_307, TMP_308, TMP_309, TMP_310, TMP_311, TMP_312, TMP_313, TMP_314, TMP_315, TMP_316, TMP_317, TMP_318, TMP_319, TMP_320, TMP_321, TMP_322, TMP_323, TMP_324, TMP_325, TMP_326, TMP_327, TMP_328, TMP_329, TMP_330, TMP_331, TMP_332, TMP_333, TMP_334, TMP_335, TMP_336, TMP_337, TMP_338, TMP_339, TMP_340, TMP_341, TMP_342, TMP_343, TMP_344, TMP_345, TMP_346, TMP_347, TMP_348, TMP_349, TMP_350, TMP_351, TMP_352, TMP_353, TMP_354, TMP_355, TMP_356, TMP_357, TMP_358, TMP_359, TMP_360, TMP_361, TMP_362, TMP_363, TMP_364, TMP_365, TMP_366, TMP_367, TMP_368, TMP_369, TMP_370, TMP_371, TMP_372, TMP_373, TMP_374, TMP_375, TMP_376, TMP_377, TMP_378, TMP_379, TMP_380, TMP_381, TMP_382, TMP_383, TMP_384, TMP_385, TMP_386, TMP_387, TMP_388, TMP_389, TMP_390, TMP_391, TMP_392, TMP_393, TMP_394, TMP_395, TMP_396, TMP_397, TMP_398, TMP_399, TMP_400, TMP_401, TMP_402, TMP_403, TMP_404, TMP_405, TMP_406, TMP_407, TMP_408, TMP_409, TMP_410, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      clist = ["64,65,66,8,52,598,258,568,58,59,258,258,598,62,98,60,61,63,28,29,67", "68,-95,-477,-103,109,642,27,26,25,91,90,92,93,560,468,18,559,677,677", "-102,-87,7,42,6,9,95,94,85,51,87,86,88,-98,89,96,97,598,82,83,196,39", "40,-94,-100,-70,677,206,207,620,253,676,676,-95,-97,253,560,102,197", "562,206,207,101,37,598,-103,31,641,598,53,257,55,-95,33,257,257,-103", "41,74,676,-102,-82,206,207,-99,19,75,-87,-98,567,80,74,76,77,78,79,102", "198,597,75,81,101,-100,102,-87,597,-94,57,101,-94,54,64,65,66,673,52", "38,84,205,58,59,-97,-93,-87,62,-101,60,61,63,28,29,67,68,-87,311,-89", "835,247,27,26,25,91,90,92,93,-94,-91,18,102,-569,597,938,619,101,42", "-94,-88,95,94,85,51,87,86,88,546,89,96,97,-99,82,83,102,39,40,-93,102", "101,597,302,102,101,597,303,-95,101,-95,-90,-103,-95,-103,-570,-102", "-103,-102,211,311,-102,215,216,-98,53,-98,55,-101,-98,-465,630,400,41", "755,755,-89,-465,-100,-102,-100,19,560,-100,677,562,80,74,76,77,78,79", "-92,206,207,75,81,-97,-91,-97,755,-88,-97,57,403,-93,54,64,65,66,-569", "52,38,84,102,58,59,676,414,101,62,-90,60,61,63,28,29,67,68,-92,632,631", "628,801,27,26,25,91,90,92,93,-93,-89,220,-99,-570,-99,699,630,-99,42", "-93,427,95,94,85,51,87,86,88,467,89,96,97,-91,82,83,-88,39,40,228,102", "102,754,754,204,101,101,-89,-101,102,-101,469,-96,-101,101,-569,-90", "-89,630,211,206,207,215,-570,-92,53,102,55,754,-91,225,101,-88,41,227", "226,632,631,604,-91,605,219,-88,813,-94,795,80,74,76,77,78,79,-90,470", "-103,75,81,814,-468,907,-92,-477,-90,57,216,-468,54,64,65,66,-92,52", "38,84,-475,58,59,632,631,628,62,-475,60,61,63,28,29,67,68,560,-567,503", "562,-98,27,26,25,91,90,92,93,-87,516,220,249,250,518,-100,665,-96,42", "-95,251,95,94,85,51,87,86,88,274,89,96,97,630,82,83,520,39,40,228,232", "237,238,239,234,236,244,245,240,241,-468,-468,221,222,908,102,242,243", "-468,211,101,630,215,-567,635,53,228,55,-69,271,225,269,231,41,227,226", "223,224,235,233,229,219,230,-567,304,305,80,272,76,77,78,79,632,631", "633,75,81,225,246,546,-238,227,226,57,-97,-468,54,-468,275,341,-474", "528,38,84,64,65,66,-474,52,338,632,631,58,59,838,311,605,62,998,60,61", "63,28,29,67,68,412,413,529,-93,530,27,26,25,91,90,92,93,424,-102,220", "356,355,426,425,665,539,42,541,542,95,94,85,51,87,86,88,274,89,96,97", "630,82,83,262,39,40,228,232,237,238,239,234,236,244,245,240,241,339", "311,221,222,-473,253,242,243,341,211,630,-473,215,206,207,53,543,55", "338,271,225,269,231,41,227,226,223,224,235,233,229,219,230,206,207,547", "80,272,76,77,78,79,632,631,637,75,81,-470,246,652,356,355,-471,57,-470", "548,54,228,275,-471,-472,311,38,84,64,65,66,-472,52,632,631,643,58,59", "356,355,311,62,563,60,61,63,28,29,67,68,564,339,520,-89,571,27,26,25", "91,90,92,93,625,-98,220,203,201,102,653,626,574,42,101,202,95,94,85", "51,87,86,88,274,89,96,97,575,82,83,578,39,40,102,579,228,800,586,101", "348,346,345,586,347,348,346,345,102,347,581,-91,583,101,211,865,838", "215,865,838,53,-100,55,199,271,200,269,225,41,593,594,227,226,223,224", "416,219,-88,610,611,612,80,272,76,77,78,79,-97,636,640,75,81,-335,-335", "644,647,-264,649,57,650,-335,54,651,275,253,664,228,38,84,64,65,66,8", "52,748,228,228,58,59,930,228,311,62,688,60,61,63,28,29,67,68,104,105", "106,107,108,27,26,25,91,90,92,93,689,692,18,701,-335,-82,-335,702,7", "42,704,9,95,94,85,51,87,86,88,552,89,96,97,715,82,83,721,39,40,722,586", "311,348,346,345,586,347,348,346,345,341,347,897,898,724,729,899,96,97", "37,338,743,281,228,744,53,746,55,961,33,348,346,345,41,347,750,203,463", "589,605,758,19,797,350,464,592,80,74,76,77,78,79,356,355,225,75,81,-265", "227,226,223,224,503,57,503,503,54,64,65,66,816,52,38,84,817,58,59,824", "518,520,62,715,60,61,63,295,296,67,68,339,832,466,253,465,291,292,298", "91,90,92,93,253,833,220,538,535,253,715,228,228,293,838,536,95,94,85", "51,87,86,88,843,89,96,97,845,82,83,846,331,847,348,346,345,341,347,849", "538,549,104,105,106,107,108,338,550,586,578,348,346,345,289,347,852", "286,854,849,53,858,55,534,285,537,861,838,869,870,350,326,104,105,106", "107,108,353,352,356,355,80,74,76,77,78,79,589,872,873,75,81,-569,875", "592,466,884,465,57,578,887,54,64,65,66,889,52,299,84,891,58,59,893,895", "-266,62,339,60,61,63,295,296,67,68,910,911,311,913,914,291,292,298,91", "90,92,93,915,916,220,538,607,917,715,919,-264,293,923,608,95,94,85,51", "87,86,88,-570,89,96,97,932,82,83,933,331,935,348,346,345,341,347,941", "943,944,538,616,311,957,-267,338,963,586,614,348,346,345,289,347,849", "215,972,849,53,849,55,606,976,609,932,979,980,985,350,578,570,987,989", "991,993,353,352,356,355,80,74,76,77,78,79,589,993,1003,75,81,932,1011", "860,301,721,615,57,537,849,54,64,65,66,932,52,299,84,1026,58,59,1027", "993,993,62,339,60,61,63,295,296,67,68,993,1032,1033,993,,291,292,298", "91,90,92,93,,,220,538,616,,,,,42,,742,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,,586,,348,346,345,586,347,348,346,345,341,347,961,,348", "346,345,,347,211,338,,215,,,53,,55,615,,537,,,41,,,-288,-288,589,,,219", ",350,-288,,80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,", "52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,339,,-288,,-288,291,292", "298,91,90,92,93,,,220,538,616,,,,,42,,742,95,94,85,51,87,86,88,,89,96", "97,,82,83,,39,40,,586,,348,346,345,586,347,348,346,345,341,347,,,,,", ",,211,338,,215,,,53,,55,615,,537,,,41,,,-290,-290,589,,,219,,350,-290", ",80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,", "58,59,,,,62,,60,61,63,295,296,67,68,339,,-290,,-290,291,292,298,91,90", "92,93,,,220,538,1001,,,,,42,,1002,95,94,85,51,87,86,88,,89,96,97,,82", "83,,39,40,,228,,,,,586,,348,346,345,341,347,,,,,,242,243,211,338,,215", ",,53,,55,1000,,609,225,,41,,227,226,223,224,,,219,,350,,,80,74,76,77", "78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,18,,586,,348,346", "345,42,347,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,586,,348", "346,345,586,347,348,346,345,341,347,589,,,,242,243,,211,338,,215,,,53", ",55,,,225,,231,41,227,226,223,224,589,,229,19,230,350,,,80,74,76,77", "78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238,239,234", "236,244,245,240,241,-287,-287,221,222,,,242,243,-287,211,,,215,-570", ",53,,55,,271,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272", "76,77,78,79,,,,75,81,,246,818,,,,57,,-287,54,-287,275,,,,38,84,64,65", "66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90", "92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39", "40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,", "211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230", ",,,80,272,76,77,78,79,,,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65", "66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93", ",,18,,586,,348,346,345,42,347,,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,228,,,,,,586,,348,346,345,341,347,589,,,,242,243,,211,338,,215", ",,53,,55,,,225,,231,41,227,226,223,224,,,229,19,230,350,,,80,74,76,77", "78,79,356,355,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,28,29,67,68,339,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586,,348,346,345", "341,347,,,,,242,243,,211,338,,215,,,53,,55,,,225,,231,41,227,226,223", "224,,,229,19,230,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,,57,,,54", "64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,,,,27,26", "25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,228,,,,,,586,,348,346,345,341,347,,,,,242,243,,211,338,,215,", ",53,,55,,,225,,231,41,227,226,223,224,,,229,19,230,350,,,80,74,76,77", "78,79,356,355,,75,81,102,,,,,101,57,,,54,64,65,66,,52,38,84,,58,59,", ",,62,,60,61,63,295,296,67,68,339,,,,,291,292,298,91,90,92,93,,,220,", ",,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,331,,348,346,345,341", "347,,,,,,,,,338,,,,,,,368,,,31,,,53,,55,,33,,,,,,350,,,,,,,353,352,356", "355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58", "59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220", ",,,,,,293,,,95,94,85,51,87,86,373,,89,96,97,228,82,83,,331,,348,346", "345,341,347,,,,,,,242,243,338,,,,379,,,374,,,215,,225,53,231,55,227", "226,223,224,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,-566,-566,-566,,-566,299,84,,-566,-566,,,,-566,339,-566", "-566,-566,-566,-566,-566,-566,,-566,,,,-566,-566,-566,-566,-566,-566", "-566,,,-566,,,,,,,-566,,,-566,-566,-566,-566,-566,-566,-566,-566,-566", "-566,-566,,-566,-566,,-566,-566,228,232,237,238,239,234,236,244,245", "240,241,,,221,222,,,242,243,,-566,,,-566,-566,,-566,,-566,,-566,225", "-566,231,-566,227,226,223,224,235,233,229,-566,230,-566,,,-566,-566", "-566,-566,-566,-566,,,,-566,-566,,246,,,,,-566,,,-566,,-566,,,,-566", "-566,-567,-567,-567,,-567,,,,-567,-567,,,,-567,,-567,-567,-567,-567", "-567,-567,-567,,-567,,,,-567,-567,-567,-567,-567,-567,-567,,,-567,,", ",,,,-567,,,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,-567,,-567", "-567,,-567,-567,228,232,237,238,239,234,236,244,245,240,241,,,221,222", ",,242,243,,-567,,,-567,-567,,-567,,-567,,-567,225,-567,231,-567,227", "226,223,224,235,233,229,-567,230,-567,,,-567,-567,-567,-567,-567,-567", ",,,-567,-567,,246,,,,,-567,,,-567,,-567,,,,-567,-567,64,65,66,8,52,", ",,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,", ",,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,,,,,,586", ",348,346,345,341,347,,,,,242,243,,37,338,,31,,,53,,55,,33,225,,231,41", "227,226,223,224,,,,19,,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,416", "57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,", ",,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,,,,,,,586,,348,346,345,341,347,,,,,,,,211,338,,215,,,53", ",55,,,,,,41,,,,,,,,19,,350,,,80,74,76,77,78,79,356,355,,75,81,,,,,,", "57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,339,,", ",,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222", ",,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233", "229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,", "52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93", ",,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232", "237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,", ",53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74,76", "77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244", "245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227", "226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,", ",,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,", ",,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96", "97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222", ",,242,243,,37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233", "229,19,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8", "52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93", ",,18,,,,,,7,42,6,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228", "232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243,,37,,,31", ",,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80,74", "76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,", "62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9", "95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234", "236,244,245,240,241,,,221,222,,,242,243,,37,,,31,,,53,,55,,33,225,,231", "41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81", ",246,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67", "68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,", "89,96,97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,", ",221,222,,,242,243,,211,,,215,,,53,,55,,432,225,,231,41,227,226,223", "224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,", "54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26", "25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,228,232,237,238,239,234,236,244,245,240,241,,,221,222,,,242,243", ",211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230", ",,,80,74,76,77,78,79,,,,75,81,,246,,,,,57,,,54,64,65,66,,52,38,84,,58", "59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,", ",42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238", "239,234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55", ",271,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77", "78,79,,,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59", ",,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42", ",,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,228,232,237,238,239", "234,236,244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,271", "225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,272,76,77,78,79", ",,,75,81,,246,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62", ",60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238,239,234,236", "244,245,240,241,,,221,222,,,242,243,,211,,,215,,,53,,55,,,225,,231,41", "227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,246", ",,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,", ",,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96", "97,,82,83,,39,40,228,232,237,238,239,234,236,244,245,240,241,,,-590", "-590,,,242,243,,211,,,215,,,53,,55,,432,225,,231,41,227,226,223,224", "235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65", "66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90", "92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228", "232,237,238,239,234,236,244,245,240,241,,,-590,-590,,,242,243,,211,", ",215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,,,80", "74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62", ",60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236", ",,-590,-590,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226", "223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,", "54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26", "25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82", "83,,39,40,228,-590,-590,-590,-590,234,236,,,-590,-590,,,,,,,242,243", ",37,,,31,,,53,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230", ",,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59", ",,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42", ",,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590", "234,236,,,-590,-590,,,,,,,242,243,,211,,,215,,472,53,,55,,,225,,231", "41,227,226,223,224,235,233,229,19,230,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68", ",,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,", "89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236,,,-590,-590,", ",,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233", "229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228", "-590,-590,-590,-590,234,236,,,-590,-590,,,,,,,242,243,,211,,,215,,,53", ",55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61", "63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,228,-590,-590,-590,-590,234,236", ",,-590,-590,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231,41,227,226", "223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,", ",54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291", "292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,228,232,237,238,239,234,236,,,240,241,,,,,,,242,243,,211", ",,215,,,53,,55,,,225,,231,41,227,226,223,224,235,233,229,219,230,,,", "80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,", ",,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,", ",,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,228,232,237,238", "239,234,236,244,,240,241,,,,,,,242,243,,211,,,215,,,53,,55,,,225,,231", "41,227,226,223,224,235,233,229,219,230,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68", ",,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,", "89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41", ",,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,", "27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96", "97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,269,,41", ",,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38", "84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91", "90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,", "39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,269,,41,,,,,,,,219", ",,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66", ",52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,", ",220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,", ",,,,,,,,,,,,,,,,211,,,215,,514,53,,55,,271,,269,,41,,,,,,,,219,,,,,80", "272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,", ",58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,", "220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,", ",,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63", "295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85", "51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,", "53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,", "54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291", "292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,", "219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84", ",58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,", "220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,", ",,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63", "28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51", "87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281,,,53,", "55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54", "64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292", "298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82", "83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,215,,,53,,55,,", ",,,,,350,778,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,532", ",,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,339,60,61,63,28,29,67,68", ",,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,281,,,53,,55,,33,,,,41", ",,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,331,,348", "346,345,341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,,,,350,,,,", ",,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66", "311,52,299,84,,58,59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298", "91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,", "39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,552,,53,,55,,,,,,41,,,,,,,,219,", ",,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58", "59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7", "42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,", ",,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75", "81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67", "68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86", "88,,89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,585", ",,215,,,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,", ",75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,28", "29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86", "88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,", ",,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66", ",52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92", "93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,", ",,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61", "63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94", "85,51,87,86,373,,89,96,97,,82,83,,331,,348,346,345,341,347,,,,,,,,,338", ",,,,,,374,,,215,,,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60", "61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85", "51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,", "53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54", "64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292", "298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82", "83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219", ",,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,-571,-571,-571,,-571,38", "84,,-571,-571,,,,-571,,-571,-571,-571,-571,-571,-571,-571,,,,,,-571", "-571,-571,-571,-571,-571,-571,,,-571,,,,,,,-571,,,-571,-571,-571,-571", "-571,-571,-571,-571,-571,-571,-571,,-571,-571,,-571,-571,,,,,,,,,,,", ",,,,,,,,,-571,,,-571,-571,,-571,,-571,,-571,,-571,,-571,,,,,,,,-571", ",,,,-571,-571,-571,-571,-571,-571,,,,-571,-571,,,,,,,-571,,,-571,,-571", ",,,-571,-571,-572,-572,-572,,-572,,,,-572,-572,,,,-572,,-572,-572,-572", "-572,-572,-572,-572,,,,,,-572,-572,-572,-572,-572,-572,-572,,,-572,", ",,,,,-572,,,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,", "-572,-572,,-572,-572,,,,,,,,,,,,,,,,,,,,,-572,,,-572,-572,,-572,,-572", ",-572,,-572,,-572,,,,,,,,-572,,,,,-572,-572,-572,-572,-572,-572,,,,-572", "-572,,,,,,,-572,,,-572,,-572,,,,-572,-572,64,65,66,,52,,,,58,59,,,,62", ",60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211", ",,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81", ",,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28", "29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86", "88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55", ",271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54", ",275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,", ",,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40", ",,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,696,,269,,41,,,,,,,,219,,,,", "80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52", ",,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93", ",,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272", "76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58", "59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220", ",,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,", ",,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79", ",,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28", "29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87", "86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,", "33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,416,57,,,54,64", "65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298", "91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83", ",789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,", ",,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54", "64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,28,29,67,68,,,,,,27,26", "25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82", "83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219", ",,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66", ",52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,", ",220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,", ",,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272", "76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58", "59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220", ",,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,789,,348,346,345", "341,347,,,,,,,,,338,,,,,,,289,,,286,,,53,,55,,,,,,,,350,,,,,,,353,352", "356,355,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84", ",58,59,,,,62,339,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93", ",,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,", ",,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61", "63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215", ",,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57", ",,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291", "292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,", "219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84", ",58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,", ",,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,", ",,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,", "75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296", "67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86", "88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55", ",696,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,", "54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60,61,63,295,296,67,68", ",,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274", "89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41", ",,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38", "84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25", "91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,", "80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59", ",,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42", ",9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,", "37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68", ",,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88", ",89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,585,,,215", ",,53,,55,,,,,,,,350,778,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75", "81,,,,,,,57,,,54,64,65,66,8,52,299,84,,58,59,,,,62,339,60,61,63,28,29", "67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86", "88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33", ",,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66", "8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92", "93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,", ",,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60", "61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,", ",53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57", ",,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26", "25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82", "83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219", ",,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66", ",52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,", ",220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,", ",,,,,,,,,,,,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272", "76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58", "59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,", ",42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,", ",,,,,,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,272,76,77,78,79", ",,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,,52,,,,58,59,,,,62,,60", "61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85", "51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,", "53,,55,,,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54", "64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25", "91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39", "40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,,80,74", "76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,", ",95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211", ",,215,,,53,,55,,799,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68", ",,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,", ",220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,", ",,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63", "28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87", "86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55", ",,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65", "66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91", "90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39", "40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80", "74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62", ",60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,", ",,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52", "38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,", ",18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,", ",,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63", "28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51", "87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55", ",33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64", "65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298", "91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83", ",39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,696,,269,,41,,,,,,,,219", ",,,,80,272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66", ",52,,,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40", ",,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,269,,41,,,,,,,,219,,,,,80", "272,76,77,78,79,,,,75,81,,,,,,,57,,,54,,275,,,,38,84,64,65,66,8,52,", ",,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,", ",,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,", ",,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79", ",,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28", "29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87", "86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,", "33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65", "66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91", "90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39", "40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80", "74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62", ",60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42", ",,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211", ",,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,", ",,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,", ",,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,", "89,96,97,,82,83,,789,,348,346,345,341,347,,,,,,,,,338,,,,,,,289,,,286", ",,53,,55,,,,,,,,350,,,,,,,353,352,356,355,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,339,60,61,63,295,296", "67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,293,,,95,94,85,51,87", "86,88,,89,96,97,,82,83,,,,,,,,,,,,,,,,,,,,,,,,289,,,286,,,53,,55,,,", ",,,,,,,,,,,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "299,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,432,,,,41,,,,,,,,219,,,,,80,74", "76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,", ",95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211", ",,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68", ",,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96", "97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,", ",,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38", "84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18", ",,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,", ",,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79", ",,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28", "29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87", "86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,", "33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65", "66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90", "92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40", ",,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60", "61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95", "94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,", "215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,", ",57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,", ",27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96", "97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,", ",,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84", ",58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,", "220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,", ",,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63", "28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87", "86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55", ",,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65", "66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90", "92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40", ",,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74", "76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,", "60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,", ",95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211", ",,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,", ",,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,", ",,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,", ",,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52", "38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92", "93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,", ",,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76", "77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60", "61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,", ",53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57", ",,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26", "25,91,90,92,93,,,18,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,19,,,,", "80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59", ",,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42", ",9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,", "37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81", ",,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68", ",,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89", "96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,", ",,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38", "84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93", ",,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,", ",,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61", "63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94", "85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215", ",,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57", ",,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291", "292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97", ",82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,", "219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84", ",58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90,92,93,,", "220,,,,,,,42,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,", ",,,,,,,,,,,,211,,,215,,,53,,55,,,,,,41,,,,,,,,219,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,,,,62,,60,61,63", "295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85", "51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215", ",,53,,55,,,,269,,41,,,,,,,,219,,,,,80,272,76,77,78,79,,,,75,81,,,,,", ",57,,,54,,275,,,,38,84,64,65,66,8,52,,,,58,59,,,,62,,60,61,63,28,29", "67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86", "88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33", ",,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66", ",52,38,84,,58,59,,,,62,,60,61,63,295,296,67,68,,,,,,291,292,298,91,90", "92,93,,,220,,,,,,,293,,,95,94,85,51,87,86,88,,89,96,97,,82,83,,,,,,", ",,,,,,,,,,,,,,,,,968,,,215,,,53,,55,,,,,,,,,,,,,,,,,,,80,74,76,77,78", "79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,299,84,,58,59,,,,62,,60,61,63", "295,296,67,68,,,,,,291,292,298,91,90,92,93,,,220,,,,,,,42,,,95,94,85", "51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,211,,,215,,", "53,,55,,696,,,,41,,,,,,,,219,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57", ",,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27", "26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,", "82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19", ",,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58", "59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7", "42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,", ",,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75", "81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67", "68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88", ",89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,", "41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8", "52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93", ",,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83,,39,40,,,,,", ",,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77", "78,79,,,,75,81,,,,,,,57,,,54,64,65,66,8,52,38,84,,58,59,,,,62,,60,61", "63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,7,42,,9,95,94,85", "51,87,86,88,,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53", ",55,,33,,,,41,,,,,,,,19,,,,,80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54", "64,65,66,8,52,38,84,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25", "91,90,92,93,,,18,,,,,,7,42,,9,95,94,85,51,87,86,88,,89,96,97,,82,83", ",39,40,,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,,55,,33,,,,41,,,,,,,,19,,,,", "80,74,76,77,78,79,,,,75,81,,,,,,,57,,,54,64,65,66,,52,38,84,,58,59,", ",,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,220,,,,,,,42", ",,95,94,85,51,87,86,88,274,89,96,97,,82,83,,39,40,,,,,,,,,,,,,,,,,,", ",,211,,,215,,,53,,55,,271,,,,41,,,,,,,,219,,,,-573,80,272,76,77,78,79", "-573,-573,-573,75,81,,-573,-573,,-573,,57,,,54,,275,,-573,,38,84,,,", ",,,,-573,-573,,-573,-573,-573,-573,-573,,,,,,,,,,,,,,,,,,,,,,-573,-573", "-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,,,-573", "-573,-573,,658,,,,-573,,,,,,-573,,-573,,-573,-573,-573,-573,-573,-573", "-573,,-573,-573,-573,,,,,,,,,,,,,-573,-573,,-90,,-573,,-287,-573,,-573", ",,-99,-287,-287,-287,,,,-287,-287,,-287,,,,,,,,,,,,,,,,,,,,-287,-287", ",-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,,,,,-287,-287,-287,-287,-287", "-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,,,-287,-287,-287,", "661,,,,-287,,,,,,-287,,-287,,-287,-287,-287,-287,-287,-287,-287,,-287", ",-287,,,,,,,,,,,,,-287,-287,,-92,,-287,,-573,-287,,-287,,,-101,-573", "-573,-573,,,-573,-573,-573,,-573,,,,,,,,,-573,-573,-573,,,,,,,,,-573", "-573,,-573,-573,-573,-573,-573,,,,,,,,,,,,,,,,,,,,,,-573,-573,-573,-573", "-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573,,,-573,-573,-573", ",815,-573,,,-573,,-573,,-573,,-573,,-573,,-573,-573,-573,-573,-573,-573", "-573,,-573,-573,-573,,,,,,,,,,,,,-573,-573,-573,-573,,-573,,-287,-573", ",-573,,,-99,-287,-287,-287,,,-287,-287,-287,,-287,,,,,,,,,,-287,-287", ",,,,,,,,-287,-287,,-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,,,,,-287", "-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287", ",,-287,-287,-287,,661,-287,,,-287,,-287,,-287,,-287,,-287,,-287,-287", "-287,-287,-287,-287,-287,,-287,,-287,,,,,,,,,,,,,-287,-287,-287,-287", ",-287,,-401,-287,,-287,,,-101,-401,-401,-401,,,-401,-401,-401,,-401", ",,,,,,,,-401,-401,-401,,,,,,,,,-401,-401,,-401,-401,-401,-401,-401,", ",,,,,,,,,,,,,,,,,,,,-401,-401,-401,-401,-401,-401,-401,-401,-401,-401", "-401,-401,-401,-401,-401,,,-401,-401,-401,,,-401,,253,-401,,-401,,-401", ",-401,,-401,,-401,-401,-401,-401,-401,-401,-401,,-401,-401,-401,,,,", ",,,,,,,,-401,-401,-401,-401,-296,-401,,,-401,,-401,-296,-296,-296,,", "-296,-296,-296,,-296,,,,,,,,,,-296,-296,,,,,,,,,-296,-296,,-296,-296", "-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296", "-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,262", "-296,,-296,,-296,,-296,,-296,,-296,-296,-296,-296,-296,-296,-296,,-296", ",-296,,,,,,,,,,,,,-296,-296,-296,-296,-279,-296,,,-296,,-296,-279,-279", "-279,,,-279,-279,-279,,-279,,,,,,,,,,-279,-279,-279,,,,,,,,-279,-279", ",-279,-279,-279,-279,-279,,,,,,,,,,,,,,,,,,,,,,-279,-279,-279,-279,-279", "-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,,,-279,-279,-279,", ",-279,,,-279,,-279,,-279,,-279,,-279,,-279,-279,-279,-279,-279,-279", "-279,,-279,,-279,,,,,,,,,,,,,-279,-279,-279,-279,-589,-279,,-279,-279", ",-279,-589,-589,-589,,,-589,-589,-589,,-589,,,,,,,,,-589,-589,-589,", ",,,,,,,-589,-589,,-589,-589,-589,-589,-589,,,,,,,,,,,,,,,,,,,,,,-589", "-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589", ",,-589,-589,-589,,,-589,,253,-589,,-589,,-589,,-589,,-589,,-589,-589", "-589,-589,-589,-589,-589,,-589,-589,-589,,,,,,,,,,,,,-589,-589,-589", "-589,-589,-589,,,-589,,-589,-589,-589,-589,,,-589,-589,-589,,-589,,", ",,,,,,-589,-589,-589,,,,,,,,,-589,-589,,-589,-589,-589,-589,-589,,,", ",,,,,,,,,,,,,,,,,,-589,-589,-589,-589,-589,-589,-589,-589,-589,-589", "-589,-589,-589,-589,-589,,,-589,-589,-589,,,-589,,253,-589,,-589,,-589", ",-589,,-589,,-589,-589,-589,-589,-589,-589,-589,,-589,-589,-589,,,,", ",,,,,,,,-589,-589,-589,-589,-589,-589,,,-589,,-589,-589,-589,-589,,", "-589,-589,-589,,-589,,,,,,,,,,-589,,,,,,,,,,-589,-589,,-589,-589,-589", "-589,-589,,,,,,,,,,,,-589,,,,,,,-589,-589,-589,,,-589,-589,-589,,-589", ",,,,-589,-589,,,,-589,,,-589,,,,,253,-589,-589,-589,,-589,-589,-589", "-589,-589,,,,,,,,,,,,-589,,,,,,,,,,,,,-589,,-589,,,-589,,,-589,-589", ",-589,,,,,-589,,-589,-589,-589,253,-589,-589,-589,-589,,-589,,,,,,,", ",,-589,,,,,-589,,,,,-589,-589,,-589,-589,-589,-589,-589,-589,,-589,", ",-589,444,448,,,446,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125", "126,-589,-589,,,145,146,132,133,-589,,,,,253,-589,,,,,137,136,,121,142", "139,138,134,135,129,127,119,141,120,,-589,147,,,,,,,,,,,,-589,,-589", ",,-589,157,168,158,181,154,174,164,163,189,192,179,162,161,156,182,190", "191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172", "171,184,185,186,187,188,152,159,150,151,148,149,112,114,111,,113,,,", ",,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133", ",,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,,,147", "193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192,179,162,161", "156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178,177,170,180", "165,153,172,171,184,185,186,187,188,152,159,150,151,148,149,112,114", ",,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145", "146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119", "141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164,163,189,192", "179,162,161,156,182,190,191,166,155,169,173,175,167,160,,,,176,183,178", "177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151,148", "149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125", "126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135", "129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154,174,164", "163,189,192,179,162,161,156,182,190,191,166,155,169,173,175,167,160", ",,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152,159", "150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123,124,131,128", "130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138", "134,135,129,127,119,141,120,,,147,193,,,,,,,,,,81,157,168,158,181,154", "174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173,175", "167,160,,,,176,183,178,388,387,389,386,153,172,171,184,185,186,187,188", "152,159,150,151,384,385,382,114,87,86,383,,89,,,,,,,143,144,140,122", "123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,393,,,,,,137", "136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181", "154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173", "175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187", "188,152,159,150,151,148,149,112,114,410,409,113,,411,,,,,,,143,144,140", "122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137", "136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181", "154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173", "175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187", "188,152,159,150,151,148,149,112,114,410,409,113,,411,,,,,,,143,144,140", "122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137", "136,,121,142,139,138,134,135,129,127,119,141,120,,,147,157,168,158,181", "154,174,164,163,189,192,179,162,161,156,182,190,191,166,155,169,173", "175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187", "188,152,159,150,151,148,149,112,114,,,113,,,,,,,,,143,144,140,122,123", "124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121", "142,139,138,134,135,129,127,119,141,120,438,442,147,,439,,,,,,,,,143", "144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,253", ",,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120,451,442,147", ",452,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146", "132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141", "120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125", "126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135", "129,127,119,141,120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124", "131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142", "139,138,134,135,129,127,119,141,120,451,442,147,,452,,,,,,,,,143,144", "140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,", ",137,136,,121,142,139,138,134,135,129,127,119,141,120,666,442,147,,667", ",,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132", "133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120", "668,448,147,,669,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126", ",,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129", "127,119,141,120,706,442,147,,707,,,,,,,,,143,144,140,122,123,124,131", "128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142", "139,138,134,135,129,127,119,141,120,709,448,147,,710,,,,,,,,,143,144", "140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,", ",137,136,,121,142,139,138,134,135,129,127,119,141,120,451,442,147,,452", ",,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132", "133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120", "666,442,147,,667,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126", ",,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129", "127,119,141,120,668,448,147,,669,,,,,,,,,143,144,140,122,123,124,131", "128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139", "138,134,135,129,127,119,141,120,762,442,147,,763,,,,,,,,,143,144,140", "122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,", "137,136,,121,142,139,138,134,135,129,127,119,141,120,764,448,147,,765", ",,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146,132", "133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141,120", "770,448,147,,768,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126", ",,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134,135,129", "127,119,141,120,451,442,147,,452,,,,,,,,,143,144,140,122,123,124,131", "128,130,,,125,126,,,,,145,146,132,133,,,,,,253,,,,,,137,136,,121,142", "139,138,134,135,129,127,119,141,120,770,448,147,,857,,,,,,,,,143,144", "140,122,123,124,131,128,130,,,125,126,,,,,145,146,132,133,,,,,,,,,,", ",137,136,,121,142,139,138,134,135,129,127,119,141,120,1020,442,147,", "1021,,,,,,,,,143,144,140,122,123,124,131,128,130,,,125,126,,,,,145,146", "132,133,,,,,,253,,,,,,137,136,,121,142,139,138,134,135,129,127,119,141", "120,1022,448,147,,1023,,,,,,,,,143,144,140,122,123,124,131,128,130,", ",125,126,,,,,145,146,132,133,,,,,,,,,,,,137,136,,121,142,139,138,134", "135,129,127,119,141,120,,,147"];

      racc_action_table = arr = Opal.get('Array').$new(25645, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a.$$p = (TMP_1 = function(str){var self = TMP_1.$$s || this, $c, $d, TMP_2;
if (str == null) str = nil;
      return ($c = ($d = str.$split(",", -1)).$each, $c.$$p = (TMP_2 = function(i){var self = TMP_2.$$s || this, $e;
if (i == null) i = nil;
        if ((($e = i['$empty?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

      clist = ["0,0,0,0,0,359,24,325,0,0,56,294,360,0,1,0,0,0,0,0,0,0,366,210,369,6", "404,0,0,0,0,0,0,0,317,212,0,317,499,503,610,287,0,0,0,0,0,0,0,0,0,0", "0,762,0,0,0,871,0,0,9,0,0,290,763,701,511,627,627,378,24,499,503,210", "872,294,318,3,11,318,471,471,3,0,922,212,0,404,934,0,24,0,966,0,56,294", "969,0,72,511,1003,701,719,719,764,0,72,287,1020,325,0,0,0,0,0,0,359", "12,359,0,0,359,1021,360,366,360,369,0,360,290,0,18,18,18,471,18,0,0", "15,18,18,1033,610,287,18,765,18,18,18,18,18,18,18,287,627,762,719,21", "18,18,18,18,18,18,18,290,763,18,871,764,871,871,378,871,18,290,872,18", "18,18,18,18,18,18,467,18,18,18,1022,18,18,378,18,18,539,922,378,922", "35,934,922,934,37,966,934,966,764,969,966,969,765,1003,969,1003,18,42", "1003,18,18,1020,18,1020,18,1023,1020,382,522,78,18,600,601,706,382,1021", "467,1021,18,321,1021,512,321,18,18,18,18,18,18,765,775,775,18,18,1033", "707,1033,874,832,1033,18,79,539,18,19,19,19,1022,19,18,18,278,19,19", "512,98,278,19,709,19,19,19,19,19,19,19,710,522,522,522,651,19,19,19", "19,19,19,19,539,706,19,1022,1023,1022,522,638,1022,19,539,194,19,19", "19,19,19,19,19,211,19,19,19,707,19,19,832,19,19,475,600,601,600,601", "14,600,601,706,1023,775,1023,213,651,1023,775,709,709,706,395,19,16", "16,19,710,710,19,874,19,874,707,475,874,832,19,475,475,638,638,364,707", "364,19,832,666,14,638,19,19,19,19,19,19,709,214,14,19,19,667,383,816", "710,36,709,19,220,383,19,27,27,27,710,27,19,19,384,27,27,395,395,395", "27,384,27,27,27,27,27,27,27,725,373,252,725,666,27,27,27,27,27,27,27", "36,266,27,23,23,267,667,459,816,27,36,23,27,27,27,27,27,27,27,27,27", "27,27,397,27,27,270,27,27,459,459,459,459,459,459,459,459,459,459,459", "373,373,459,459,817,363,459,459,373,27,363,399,27,373,399,27,476,27", "280,27,459,27,459,27,459,459,459,459,459,459,459,27,459,373,38,38,27", "27,27,27,27,27,397,397,397,27,27,476,459,303,459,476,476,27,817,373", "27,373,27,575,385,282,27,27,28,28,28,385,28,575,399,399,28,28,982,959", "982,28,959,28,28,28,28,28,28,28,84,84,283,303,284,28,28,28,28,28,28", "28,111,303,28,575,575,111,111,672,289,28,299,299,28,28,28,28,28,28,28", "28,28,28,28,401,28,28,292,28,28,672,672,672,672,672,672,672,672,672", "672,672,575,293,672,672,386,298,672,672,884,28,406,386,28,313,313,28", "300,28,884,28,672,28,672,28,672,672,672,672,672,672,672,28,672,358,358", "304,28,28,28,28,28,28,401,401,401,28,28,387,672,438,884,884,388,28,387", "305,28,308,28,388,389,314,28,28,29,29,29,389,29,406,406,406,29,29,578", "578,316,29,319,29,29,29,29,29,29,29,320,884,322,438,330,29,29,29,29", "29,29,29,391,438,29,13,13,620,439,391,331,29,620,13,29,29,29,29,29,29", "29,29,29,29,29,332,29,29,333,29,29,773,335,494,650,592,773,592,592,592", "860,592,860,860,860,779,860,336,439,340,779,29,749,749,29,1006,1006", "29,439,29,13,29,13,29,494,29,354,357,494,494,494,494,365,29,650,368", "370,374,29,29,29,29,29,29,650,400,403,29,29,43,43,422,428,430,433,29", "436,43,29,437,29,445,456,477,29,29,31,31,31,31,31,592,478,479,31,31", "860,480,505,31,508,31,31,31,31,31,31,31,5,5,5,5,5,31,31,31,31,31,31", "31,509,513,31,527,43,528,43,531,31,31,533,31,31,31,31,31,31,31,31,540", "31,31,31,544,31,31,553,31,31,554,350,555,350,350,350,581,350,581,581", "581,581,581,793,793,556,569,793,793,793,31,581,585,31,495,587,31,591", "31,910,31,910,910,910,31,910,596,209,209,350,602,603,31,642,581,209", "350,31,31,31,31,31,31,581,581,495,31,31,648,495,495,495,495,654,31,659", "662,31,32,32,32,670,32,31,31,671,32,32,687,693,695,32,703,32,32,32,32", "32,32,32,581,705,209,708,209,32,32,32,32,32,32,32,711,712,32,288,288", "713,714,717,718,32,720,288,32,32,32,32,32,32,32,723,32,32,32,727,32", "32,728,57,732,57,57,57,57,57,733,306,306,279,279,279,279,279,57,306", "589,735,589,589,589,32,589,738,32,739,741,32,745,32,288,32,288,747,751", "757,759,57,57,700,700,700,700,700,57,57,57,57,32,32,32,32,32,32,589", "761,766,32,32,770,771,589,306,782,306,32,783,785,32,33,33,33,786,33", "32,32,787,33,33,789,792,798,33,57,33,33,33,33,33,33,33,819,820,821,822", "823,33,33,33,33,33,33,33,825,826,33,367,367,827,831,836,839,33,840,367", "33,33,33,33,33,33,33,857,33,33,33,862,33,33,863,326,866,326,326,326", "326,326,876,879,880,376,376,881,901,902,326,912,746,376,746,746,746", "33,746,925,33,926,927,33,928,33,367,929,367,931,936,937,945,326,947", "326,949,950,951,952,326,326,326,326,33,33,33,33,33,33,746,954,968,33", "33,977,984,746,33,999,376,33,376,1004,33,39,39,39,1005,39,33,33,1010", "39,39,1012,1013,1014,39,326,39,39,39,39,39,39,39,1015,1016,1019,1034", ",39,39,39,39,39,39,39,,,39,584,584,,,,,39,,584,39,39,39,39,39,39,39", ",39,39,39,,39,39,,39,39,,748,,748,748,748,847,748,847,847,847,847,847", "998,,998,998,998,,998,39,847,,39,,,39,,39,584,,584,,,39,,,612,612,748", ",,39,,847,612,,39,39,39,39,39,39,847,847,,39,39,,,,,,,39,,,39,40,40", "40,,40,39,39,,40,40,,,,40,,40,40,40,40,40,40,40,847,,612,,612,40,40", "40,40,40,40,40,,,40,734,734,,,,,40,,734,40,40,40,40,40,40,40,,40,40", "40,,40,40,,40,40,,861,,861,861,861,849,861,849,849,849,849,849,,,,,", ",,40,849,,40,,,40,,40,734,,734,,,40,,,873,873,861,,,40,,849,873,,40", "40,40,40,40,40,849,849,,40,40,,,,,,,40,,,40,41,41,41,,41,40,40,,41,41", ",,,41,,41,41,41,41,41,41,41,849,,873,,873,41,41,41,41,41,41,41,,,41", "967,967,,,,,41,,967,41,41,41,41,41,41,41,,41,41,41,,41,41,,41,41,,483", ",,,,854,,854,854,854,854,854,,,,,,483,483,41,854,,41,,,41,,41,967,,967", "483,,41,,483,483,483,483,,,41,,854,,,41,41,41,41,41,41,854,854,,41,41", ",,,,,,41,,,41,53,53,53,,53,41,41,,53,53,,,,53,,53,53,53,53,53,53,53", "854,,,,,53,53,53,53,53,53,53,,,53,,930,,930,930,930,53,930,,53,53,53", "53,53,53,53,,53,53,53,,53,53,,53,53,485,932,,932,932,932,891,932,891", "891,891,891,891,930,,,,485,485,,53,891,,53,,,53,,53,,,485,,485,53,485", "485,485,485,932,,485,53,485,891,,,53,53,53,53,53,53,891,891,,53,53,", ",,,,,53,,,53,54,54,54,,54,53,53,,54,54,,,,54,,54,54,54,54,54,54,54,891", ",,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54", "54,54,,54,54,,54,54,674,674,674,674,674,674,674,674,674,674,674,768", "768,674,674,,,674,674,768,54,,,54,768,,54,,54,,54,674,,674,54,674,674", "674,674,674,674,674,54,674,,,,54,54,54,54,54,54,,,,54,54,,674,674,,", ",54,,768,54,768,54,,,,54,54,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55", "55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55", "55,55,55,55,55,,55,55,,55,55,20,20,20,20,20,20,20,20,20,20,20,,,20,20", ",,20,20,,55,,,55,,,55,,55,,,20,,20,55,20,20,20,20,20,20,20,55,20,,,", "55,55,55,55,55,55,,,,55,55,,20,,,,,55,,,55,,55,,,,55,55,58,58,58,,58", ",,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58", ",976,,976,976,976,58,976,,58,58,58,58,58,58,58,,58,58,58,,58,58,,58", "58,486,,,,,,972,,972,972,972,972,972,976,,,,486,486,,58,972,,58,,,58", ",58,,,486,,486,58,486,486,486,486,,,486,58,486,972,,,58,58,58,58,58", "58,972,972,,58,58,,,,,,,58,,,58,59,59,59,,59,58,58,,59,59,,,,59,,59", "59,59,59,59,59,59,972,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59", "59,59,59,59,59,,59,59,59,,59,59,,59,59,487,,,,,,989,,989,989,989,989", "989,,,,,487,487,,59,989,,59,,,59,,59,,,487,,487,59,487,487,487,487,", ",487,59,487,989,,,59,59,59,59,59,59,989,989,,59,59,,,,,,,59,,,59,62", "62,62,,62,59,59,,62,62,,,,62,,62,62,62,62,62,62,62,989,,,,,62,62,62", "62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,,62,62,62,,62,62,,62", "62,488,,,,,,991,,991,991,991,991,991,,,,,488,488,,62,991,,62,,,62,,62", ",,488,,488,62,488,488,488,488,,,488,62,488,991,,,62,62,62,62,62,62,991", "991,,62,62,62,,,,,62,62,,,62,63,63,63,,63,62,62,,63,63,,,,63,,63,63", "63,63,63,63,63,991,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63", "63,63,63,63,,63,63,63,,63,63,,571,,571,571,571,571,571,,,,,,,,,571,", ",,,,,63,,,63,,,63,,63,,63,,,,,,571,,,,,,,571,571,571,571,63,63,63,63", "63,63,,,,63,63,,,,,,,63,,,63,64,64,64,,64,63,63,,64,64,,,,64,571,64", "64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64", "64,64,64,64,,64,64,64,481,64,64,,579,,579,579,579,579,579,,,,,,,481", "481,579,,,,64,,,64,,,64,,481,64,481,64,481,481,481,481,,,,579,,,,,,", "579,579,579,579,64,64,64,64,64,64,,,,64,64,,,,,,,64,,,64,85,85,85,,85", "64,64,,85,85,,,,85,579,85,85,85,85,85,85,85,,85,,,,85,85,85,85,85,85", "85,,,85,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,264", "264,264,264,264,264,264,264,264,264,264,,,264,264,,,264,264,,85,,,85", "85,,85,,85,,85,264,85,264,85,264,264,264,264,264,264,264,85,264,85,", ",85,85,85,85,85,85,,,,85,85,,264,,,,,85,,,85,,85,,,,85,85,88,88,88,", "88,,,,88,88,,,,88,,88,88,88,88,88,88,88,,88,,,,88,88,88,88,88,88,88", ",,88,,,,,,,88,,,88,88,88,88,88,88,88,88,88,88,88,,88,88,,88,88,435,435", "435,435,435,435,435,435,435,435,435,,,435,435,,,435,435,,88,,,88,88", ",88,,88,,88,435,88,435,88,435,435,435,435,435,435,435,88,435,88,,,88", "88,88,88,88,88,,,,88,88,,435,,,,,88,,,88,,88,,,,88,88,100,100,100,100", "100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100,100", "100,100,100,100,,,100,,,,,,100,100,100,100,100,100,100,100,100,100,100", ",100,100,100,,100,100,,100,100,482,,,,,,993,,993,993,993,993,993,,,", ",482,482,,100,993,,100,,,100,,100,,100,482,,482,100,482,482,482,482", ",,,100,,993,,,100,100,100,100,100,100,993,993,,100,100,,,,,,100,100", ",,100,104,104,104,,104,100,100,,104,104,,,,104,,104,104,104,104,104", "104,104,993,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104", "104,104,104,104,104,,104,104,104,,104,104,,104,104,,,,,,,1027,,1027", "1027,1027,1027,1027,,,,,,,,104,1027,,104,,,104,,104,,,,,,104,,,,,,,", "104,,1027,,,104,104,104,104,104,104,1027,1027,,104,104,,,,,,,104,,,104", "105,105,105,,105,104,104,,105,105,,,,105,,105,105,105,105,105,105,105", "1027,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105,105,105", "105,105,105,,105,105,105,,105,105,,105,105,454,454,454,454,454,454,454", "454,454,454,454,,,454,454,,,454,454,,105,,,105,,,105,,105,,,454,,454", "105,454,454,454,454,454,454,454,105,454,,,,105,105,105,105,105,105,", ",,105,105,,454,,,,,105,,,105,106,106,106,,106,105,105,,106,106,,,,106", ",106,106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106", ",,,,,,106,,,106,106,106,106,106,106,106,,106,106,106,,106,106,,106,106", "551,551,551,551,551,551,551,551,551,551,551,,,551,551,,,551,551,,106", ",,106,,,106,,106,,,551,,551,106,551,551,551,551,551,551,551,106,551", ",,,106,106,106,106,106,106,,,,106,106,,551,,,,,106,,,106,107,107,107", ",107,106,106,,107,107,,,,107,,107,107,107,107,107,107,107,,,,,,107,107", "107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,,107", "107,107,,107,107,,107,107,716,716,716,716,716,716,716,716,716,716,716", ",,716,716,,,716,716,,107,,,107,,,107,,107,,,716,,716,107,716,716,716", "716,716,716,716,107,716,,,,107,107,107,107,107,107,,,,107,107,,716,", ",,,107,,,107,108,108,108,108,108,107,107,,108,108,,,,108,,108,108,108", "108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,,108,108", ",108,108,108,108,108,108,108,108,,108,108,108,,108,108,,108,108,803", "803,803,803,803,803,803,803,803,803,803,,,803,803,,,803,803,,108,,,108", ",,108,,108,,108,803,,803,108,803,803,803,803,803,803,803,108,803,,,", "108,108,108,108,108,108,,,,108,108,,803,,,,,108,,,108,109,109,109,109", "109,108,108,,109,109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109", "109,109,109,109,109,,,109,,,,,,109,109,109,109,109,109,109,109,109,109", "109,,109,109,109,,109,109,,109,109,805,805,805,805,805,805,805,805,805", "805,805,,,805,805,,,805,805,,109,,,109,,,109,,109,,109,805,,805,109", "805,805,805,805,805,805,805,109,805,,,,109,109,109,109,109,109,,,,109", "109,,805,,,,,109,,,109,196,196,196,196,196,109,109,,196,196,,,,196,", "196,196,196,196,196,196,196,,,,,,196,196,196,196,196,196,196,,,196,", ",,,,196,196,,196,196,196,196,196,196,196,196,,196,196,196,,196,196,", "196,196,808,808,808,808,808,808,808,808,808,808,808,,,808,808,,,808", "808,,196,,,196,,,196,,196,,196,808,,808,196,808,808,808,808,808,808", "808,196,808,,,,196,196,196,196,196,196,,,,196,196,,808,,,,,196,,,196", "197,197,197,,197,196,196,,197,197,,,,197,,197,197,197,197,197,197,197", ",,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197", "197,197,,197,197,197,,197,197,,197,197,810,810,810,810,810,810,810,810", "810,810,810,,,810,810,,,810,810,,197,,,197,,,197,,197,,197,810,,810", "197,810,810,810,810,810,810,810,197,810,,,,197,197,197,197,197,197,", ",,197,197,,810,,,,,197,,,197,198,198,198,,198,197,197,,198,198,,,,198", ",198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198,198,,,198", ",,,,,,198,,,198,198,198,198,198,198,198,,198,198,198,,198,198,,198,198", "812,812,812,812,812,812,812,812,812,812,812,,,812,812,,,812,812,,198", ",,198,,,198,,198,,,812,,812,198,812,812,812,812,812,812,812,198,812", ",,,198,198,198,198,198,198,,,,198,198,,812,,,,,198,,,198,199,199,199", ",199,198,198,,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199", "199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199", "199,199,199,,199,199,,199,199,904,904,904,904,904,904,904,904,904,904", "904,,,904,904,,,904,904,,199,,,199,,,199,,199,,199,904,,904,199,904", "904,904,904,904,904,904,199,904,,,,199,199,199,199,199,199,,,,199,199", ",904,,,,,199,,,199,,199,,,,199,199,200,200,200,,200,,,,200,200,,,,200", ",200,200,200,200,200,200,200,,,,,,200,200,200,200,200,200,200,,,200", ",,,,,,200,,,200,200,200,200,200,200,200,200,200,200,200,,200,200,,200", "200,906,906,906,906,906,906,906,906,906,906,906,,,906,906,,,906,906", ",200,,,200,,,200,,200,,200,906,,906,200,906,906,906,906,906,906,906", "200,906,,,,200,200,200,200,200,200,,,,200,200,,906,,,,,200,,,200,,200", ",,,200,200,204,204,204,,204,,,,204,204,,,,204,,204,204,204,204,204,204", "204,,,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204", "204,204,204,,204,204,204,,204,204,,204,204,958,958,958,958,958,958,958", "958,958,958,958,,,958,958,,,958,958,,204,,,204,,,204,,204,,,958,,958", "204,958,958,958,958,958,958,958,204,958,,,,204,204,204,204,204,204,", ",,204,204,,958,,,,,204,,,204,205,205,205,,205,204,204,,205,205,,,,205", ",205,205,205,205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205", ",,,,,,205,,,205,205,205,205,205,205,205,,205,205,205,,205,205,,205,205", "473,473,473,473,473,473,473,473,473,473,473,,,473,473,,,473,473,,205", ",,205,,,205,,205,,205,473,,473,205,473,473,473,473,473,473,473,205,473", ",,,205,205,205,205,205,205,,,,205,205,,,,,,,205,,,205,206,206,206,,206", "205,205,,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206,206", "206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206,206,206,,206,206", "206,,206,206,,206,206,474,474,474,474,474,474,474,474,474,474,474,,", "474,474,,,474,474,,206,,,206,,,206,,206,,,474,,474,206,474,474,474,474", "474,474,474,206,474,,,,206,206,206,206,206,206,,,,206,206,,,,,,,206", ",,206,207,207,207,,207,206,206,,207,207,,,,207,,207,207,207,207,207", "207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207", "207,207,207,207,,207,207,207,,207,207,,207,207,484,484,484,484,484,484", "484,,,484,484,,,,,,,484,484,,207,,,207,,,207,,207,,,484,,484,207,484", "484,484,484,484,484,484,207,484,,,,207,207,207,207,207,207,,,,207,207", ",,,,,,207,,,207,215,215,215,215,215,207,207,,215,215,,,,215,,215,215", "215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,215", "215,,215,215,215,215,215,215,215,215,,215,215,215,,215,215,,215,215", "489,489,489,489,489,489,489,,,489,489,,,,,,,489,489,,215,,,215,,,215", ",215,,215,489,,489,215,489,489,489,489,489,489,489,215,489,,,,215,215", "215,215,215,215,,,,215,215,,,,,,,215,,,215,216,216,216,,216,215,215", ",216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216", "216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,,216,216,216,", "216,216,,216,216,490,490,490,490,490,490,490,,,490,490,,,,,,,490,490", ",216,,,216,,216,216,,216,,,490,,490,216,490,490,490,490,490,490,490", "216,490,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,219,219", "219,,219,216,216,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219", "219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219", ",219,219,219,,219,219,,219,219,491,491,491,491,491,491,491,,,491,491", ",,,,,,491,491,,219,,,219,,,219,,219,,,491,,491,219,491,491,491,491,491", "491,491,219,491,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219", "221,221,221,,221,219,219,,221,221,,,,221,,221,221,221,221,221,221,221", ",,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221", "221,221,,221,221,221,,221,221,,221,221,492,492,492,492,492,492,492,", ",492,492,,,,,,,492,492,,221,,,221,,,221,,221,,,492,,492,221,492,492", "492,492,492,492,492,221,492,,,,221,221,221,221,221,221,,,,221,221,,", ",,,,221,,,221,222,222,222,,222,221,221,,222,222,,,,222,,222,222,222", "222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222", "222,222,222,222,222,222,,222,222,222,,222,222,,222,222,493,493,493,493", "493,493,493,,,493,493,,,,,,,493,493,,222,,,222,,,222,,222,,,493,,493", "222,493,493,493,493,493,493,493,222,493,,,,222,222,222,222,222,222,", ",,222,222,,,,,,,222,,,222,223,223,223,,223,222,222,,223,223,,,,223,", "223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,", ",,,,,223,,,223,223,223,223,223,223,223,,223,223,223,,223,223,,223,223", "496,496,496,496,496,496,496,,,496,496,,,,,,,496,496,,223,,,223,,,223", ",223,,,496,,496,223,496,496,496,496,496,496,496,223,496,,,,223,223,223", "223,223,223,,,,223,223,,,,,,,223,,,223,224,224,224,,224,223,223,,224", "224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224", "224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,,224,224,224,,224", "224,,224,224,497,497,497,497,497,497,497,497,,497,497,,,,,,,497,497", ",224,,,224,,,224,,224,,,497,,497,224,497,497,497,497,497,497,497,224", "497,,,,224,224,224,224,224,224,,,,224,224,,,,,,,224,,,224,225,225,225", ",225,224,224,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225", "225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,,225", "225,225,,225,225,,225,225,,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,,225,", ",,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,,,,,,,225", ",,225,226,226,226,,226,225,225,,226,226,,,,226,,226,226,226,226,226", "226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226", "226,226,226,226,,226,226,226,,226,226,,226,226,,,,,,,,,,,,,,,,,,,,,226", ",,226,,,226,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,", "226,226,,,,,,,226,,,226,227,227,227,,227,226,226,,227,227,,,,227,,227", "227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,", ",227,,,227,227,227,227,227,227,227,,227,227,227,,227,227,,227,227,,", ",,,,,,,,,,,,,,,,,,227,,,227,,,227,,227,,,,,,227,,,,,,,,227,,,,,227,227", "227,227,227,227,,,,227,227,,,,,,,227,,,227,228,228,228,,228,227,227", ",228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228", "228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,,228,228,228,", "228,228,,228,228,,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,,228,,,,,,228,", ",,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,,,,,,,228,,,228,229", "229,229,,229,228,228,,229,229,,,,229,,229,229,229,229,229,229,229,,", ",,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229", "229,229,,229,229,229,,229,229,,229,229,,,,,,,,,,,,,,,,,,,,,229,,,229", ",,229,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229", ",,,,,,229,,,229,230,230,230,,230,229,229,,230,230,,,,230,,230,230,230", "230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230", "230,230,230,230,230,230,,230,230,230,,230,230,,230,230,,,,,,,,,,,,,", ",,,,,,,230,,,230,,,230,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230", "230,230,,,,230,230,,,,,,,230,,,230,231,231,231,,231,230,230,,231,231", ",,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231", ",,231,,,,,,,231,,,231,231,231,231,231,231,231,,231,231,231,,231,231", ",231,231,,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,,231,,,,,,231,,,,,,,,231", ",,,,231,231,231,231,231,231,,,,231,231,,,,,,,231,,,231,232,232,232,", "232,231,231,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232", "232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,,232", "232,232,,232,232,,232,232,,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,,232,", ",,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232", ",,232,233,233,233,,233,232,232,,233,233,,,,233,,233,233,233,233,233", "233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233", "233,233,233,233,,233,233,233,,233,233,,233,233,,,,,,,,,,,,,,,,,,,,,233", ",,233,,,233,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,", "233,233,,,,,,,233,,,233,234,234,234,,234,233,233,,234,234,,,,234,,234", "234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,", ",234,,,234,234,234,234,234,234,234,,234,234,234,,234,234,,234,234,,", ",,,,,,,,,,,,,,,,,,234,,,234,,,234,,234,,,,,,234,,,,,,,,234,,,,,234,234", "234,234,234,234,,,,234,234,,,,,,,234,,,234,235,235,235,,235,234,234", ",235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235", "235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,,235,235,235,", "235,235,,235,235,,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,,235,,,,,,235,", ",,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,236", "236,236,,236,235,235,,236,236,,,,236,,236,236,236,236,236,236,236,,", ",,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236", "236,236,,236,236,236,,236,236,,236,236,,,,,,,,,,,,,,,,,,,,,236,,,236", ",,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236", ",,,,,,236,,,236,237,237,237,,237,236,236,,237,237,,,,237,,237,237,237", "237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237", "237,237,237,237,237,237,,237,237,237,,237,237,,237,237,,,,,,,,,,,,,", ",,,,,,,237,,,237,,,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237", "237,237,,,,237,237,,,,,,,237,,,237,238,238,238,,238,237,237,,238,238", ",,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238", ",,238,,,,,,,238,,,238,238,238,238,238,238,238,,238,238,238,,238,238", ",238,238,,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,,238,,,,,,238,,,,,,,,238", ",,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,239,239,239,", "239,238,238,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239", "239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,,239", "239,239,,239,239,,239,239,,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,,239,", ",,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239", ",,239,240,240,240,,240,239,239,,240,240,,,,240,,240,240,240,240,240", "240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240", "240,240,240,240,,240,240,240,,240,240,,240,240,,,,,,,,,,,,,,,,,,,,,240", ",,240,,,240,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,", "240,240,,,,,,,240,,,240,241,241,241,,241,240,240,,241,241,,,,241,,241", "241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,", ",241,,,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241,,", ",,,,,,,,,,,,,,,,,,241,,,241,,,241,,241,,,,,,241,,,,,,,,241,,,,,241,241", "241,241,241,241,,,,241,241,,,,,,,241,,,241,242,242,242,,242,241,241", ",242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242", "242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,,242,242,242,", "242,242,,242,242,,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,,242,,,,,,242,", ",,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,243", "243,243,,243,242,242,,243,243,,,,243,,243,243,243,243,243,243,243,,", ",,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243", "243,243,,243,243,243,,243,243,,243,243,,,,,,,,,,,,,,,,,,,,,243,,,243", ",,243,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243", ",,,,,,243,,,243,244,244,244,,244,243,243,,244,244,,,,244,,244,244,244", "244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244", "244,244,244,244,244,244,,244,244,244,,244,244,,244,244,,,,,,,,,,,,,", ",,,,,,,244,,,244,,,244,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244", "244,244,,,,244,244,,,,,,,244,,,244,245,245,245,,245,244,244,,245,245", ",,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245", ",,245,,,,,,,245,,,245,245,245,245,245,245,245,,245,245,245,,245,245", ",245,245,,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,,245,,,,,,245,,,,,,,,245", ",,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,253,253,253,", "253,245,245,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253", "253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253", "253,253,253,,253,253,,253,253,,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,,253", ",253,,253,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,", ",,,253,,,253,,253,,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254", "254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,", ",254,,,254,254,254,254,254,254,254,254,254,254,254,,254,254,,254,254", ",,,,,,,,,,,,,,,,,,,,254,,,254,,,254,,254,,254,,254,,254,,,,,,,,254,", ",,,254,254,254,254,254,254,,,,254,254,,,,,,,254,,,254,,254,,,,254,254", "262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,", ",262,262,262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262", "262,262,262,262,262,,262,262,,262,262,,,,,,,,,,,,,,,,,,,,,262,,,262", ",262,262,,262,,262,,262,,262,,,,,,,,262,,,,,262,262,262,262,262,262", ",,,262,262,,,,,,,262,,,262,,262,,,,262,262,269,269,269,,269,,,,269,269", ",,,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269", ",,269,,,,,,,269,,,269,269,269,269,269,269,269,,269,269,269,,269,269", ",269,269,,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,,269,,,,,,269,,,,,,,,269", ",,,,269,269,269,269,269,269,,,,269,269,,,,,,,269,,,269,271,271,271,", "271,269,269,,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271", "271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,,271", "271,271,,271,271,,271,271,,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,,271,", ",,,,271,,,,,,,,271,,,,,271,271,271,271,271,271,,,,271,271,,,,,,,271", ",,271,274,274,274,,274,271,271,,274,274,,,,274,,274,274,274,274,274", "274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274", "274,274,274,274,,274,274,274,,274,274,,274,274,,,,,,,,,,,,,,,,,,,,,274", ",,274,,,274,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274,,,", "274,274,,,,,,,274,,,274,275,275,275,,275,274,274,,275,275,,,,275,,275", "275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,", ",275,,,275,275,275,275,275,275,275,,275,275,275,,275,275,,275,275,,", ",,,,,,,,,,,,,,,,,,275,,,275,,,275,,275,,,,,,275,,,,,,,,275,,,,,275,275", "275,275,275,275,,,,275,275,,,,,,,275,,,275,281,281,281,281,281,275,275", ",281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281", "281,281,,,281,,,,,,281,281,,281,281,281,281,281,281,281,281,,281,281", "281,,281,281,,281,281,,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,,281,,281", ",,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281,", ",281,285,285,285,,285,281,281,,285,285,,,,285,,285,285,285,285,285,285", "285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285", "285,285,285,,285,285,285,,285,285,,623,,623,623,623,623,623,,,,,,,,", "623,,,,,,,285,,,285,,,285,,285,,,,,,,,623,623,,,,,,623,623,623,623,285", "285,285,285,285,285,,,,285,285,,,,285,,,285,,,285,286,286,286,286,286", "285,285,,286,286,,,,286,623,286,286,286,286,286,286,286,,,,,,286,286", "286,286,286,286,286,,,286,,,,,,286,286,,286,286,286,286,286,286,286", "286,,286,286,286,,286,286,,286,286,,,,,,,,,,,,,,,,,,,,,286,,,286,,,286", ",286,,286,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,", ",,,,,286,,,286,301,301,301,,301,286,286,,301,301,,,,301,,301,301,301", "301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,,301,,,301", "301,301,301,301,301,301,,301,301,301,,301,301,,676,,676,676,676,676", "676,,,,,,,,,676,,,,,,,301,,,301,,,301,,301,,,,,,,,676,,,,,,,676,676", "676,676,301,301,301,301,301,301,,,,301,301,,,,,,,301,,,301,310,310,310", "676,310,301,301,,310,310,,,,310,676,310,310,310,310,310,310,310,,,,", ",310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310,310,310,310", "310,,310,310,310,,310,310,,310,310,,,,,,,,,,,,,,,,,,,,,310,,,310,310", ",310,,310,,,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310", ",,,,,,310,,,310,312,312,312,312,312,310,310,,312,312,,,,312,,312,312", "312,312,312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,312", "312,,312,312,312,312,312,312,312,312,,312,312,312,,312,312,,312,312", ",,,,,,,,,,,,,,,,,,,,312,,,312,,,312,,312,,312,,,,312,,,,,,,,312,,,,", "312,312,312,312,312,312,,,,312,312,,,,,,,312,,,312,342,342,342,,342", "312,312,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342", "342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,,342,342", "342,,342,342,,778,,778,778,778,778,778,,,,,,,,,778,,,,,,,342,,,342,", ",342,,342,,,,,,,,778,,,,,,,778,778,778,778,342,342,342,342,342,342,", ",,342,342,,,,,,,342,,,342,361,361,361,,361,342,342,,361,361,,,,361,778", "361,361,361,361,361,361,361,,,,,,361,361,361,361,361,361,361,,,361,", ",,,,,361,,,361,361,361,361,361,361,361,,361,361,361,,361,361,,361,361", ",,,,,,,,,,,,,,,,,,,,361,,,361,,,361,,361,,,,,,361,,,,,,,,361,,,,,361", "361,361,361,361,361,,,,361,361,,,,,,,361,,,361,362,362,362,,362,361", "361,,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362,362,362,362", "362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362,,362,362,362", ",362,362,,362,362,,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,,362,,,,,,362", ",,,,,,,362,,,,,362,362,362,362,362,362,,,,362,362,,,,,,,362,,,362,381", "381,381,,381,362,362,,381,381,,,,381,,381,381,381,381,381,381,381,,", ",,,381,381,381,381,381,381,381,,,381,,,,,,,381,,,381,381,381,381,381", "381,381,,381,381,381,,381,381,,852,,852,852,852,852,852,,,,,,,,,852", ",,,,,,381,,,381,,,381,,381,,,,,,,,852,,,,,,,852,852,852,852,381,381", "381,381,381,381,,,,381,381,,,,,,,381,,,381,393,393,393,,393,381,381", ",393,393,,,,393,852,393,393,393,393,393,393,393,,,,,,393,393,393,393", "393,393,393,,,393,,,,,,,393,,,393,393,393,393,393,393,393,,393,393,393", ",393,393,,393,393,,,,,,,,,,,,,,,,,,,,,393,,,393,,,393,,393,,,,,,393", ",,,,,,,393,,,,,393,393,393,393,393,393,,,,393,393,,,,,,,393,,,393,432", "432,432,,432,393,393,,432,432,,,,432,,432,432,432,432,432,432,432,,", ",,,432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432,432,432", "432,432,,432,432,432,,432,432,,432,432,,,,,,,,,,,,,,,,,,,,,432,,,432", ",,432,,432,,,,,,432,,,,,,,,432,,,,,432,432,432,432,432,432,,,,432,432", ",,,,,,432,,,432,448,448,448,,448,432,432,,448,448,,,,448,,448,448,448", "448,448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448", "448,448,448,448,448,448,448,448,448,448,,448,448,,448,448,,,,,,,,,,", ",,,,,,,,,,448,,,448,448,,448,,448,,448,,448,,448,,,,,,,,448,,,,,448", "448,448,448,448,448,,,,448,448,,,,,,,448,,,448,,448,,,,448,448,449,449", "449,,449,,,,449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449,449", "449,449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449", "449,449,449,,449,449,,449,449,,,,,,,,,,,,,,,,,,,,,449,,,449,449,,449", ",449,,449,,449,,449,,,,,,,,449,,,,,449,449,449,449,449,449,,,,449,449", ",,,,,,449,,,449,,449,,,,449,449,465,465,465,,465,,,,465,465,,,,465,", "465,465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465,,,465,", ",,,,,465,,,465,465,465,465,465,465,465,465,465,465,465,,465,465,,465", "465,,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,,465,,465,,,,465,,,,,,,,465", ",,,,465,465,465,465,465,465,,,,465,465,,,,,,,465,,,465,,465,,,,465,465", "466,466,466,,466,,,,466,466,,,,466,,466,466,466,466,466,466,466,,,,", ",466,466,466,466,466,466,466,,,466,,,,,,,466,,,466,466,466,466,466,466", "466,466,466,466,466,,466,466,,466,466,,,,,,,,,,,,,,,,,,,,,466,,,466", ",,466,,466,,466,,,,466,,,,,,,,466,,,,,466,466,466,466,466,466,,,,466", "466,,,,,,,466,,,466,,466,,,,466,466,468,468,468,,468,,,,468,468,,,,468", ",468,468,468,468,468,468,468,,,,,,468,468,468,468,468,468,468,,,468", ",,,,,,468,,,468,468,468,468,468,468,468,,468,468,468,,468,468,,468,468", ",,,,,,,,,,,,,,,,,,,,468,,,468,,,468,,468,,,,,,468,,,,,,,,468,,,,,468", "468,468,468,468,468,,,,468,468,,,,,,,468,,,468,469,469,469,,469,468", "468,,469,469,,,,469,,469,469,469,469,469,469,469,,,,,,469,469,469,469", "469,469,469,,,469,,,,,,,469,,,469,469,469,469,469,469,469,,469,469,469", ",469,469,,469,469,,,,,,,,,,,,,,,,,,,,,469,,,469,,,469,,469,,,,,,469", ",,,,,,,469,,,,,469,469,469,469,469,469,,,,469,469,,,,,,,469,,,469,470", "470,470,,470,469,469,,470,470,,,,470,,470,470,470,470,470,470,470,,", ",,,470,470,470,470,470,470,470,,,470,,,,,,,470,,,470,470,470,470,470", "470,470,,470,470,470,,470,470,,470,470,,,,,,,,,,,,,,,,,,,,,470,,,470", ",,470,,470,,,,,,470,,,,,,,,470,,,,,470,470,470,470,470,470,,,,470,470", ",,,,,,470,,,470,498,498,498,,498,470,470,,498,498,,,,498,,498,498,498", "498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498", "498,498,498,498,498,498,,498,498,498,,498,498,,498,498,,,,,,,,,,,,,", ",,,,,,,498,,,498,,,498,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498", "498,498,,,,498,498,,,,,,,498,,,498,516,516,516,,516,498,498,,516,516", ",,,516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516", ",,516,,,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,,516,516", ",516,516,,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,,516,,516,,516,,516,,,", ",,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516,,,516,,516", ",,,516,516,518,518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518", "518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518", "518,518,518,518,518,518,518,,518,518,,518,518,,,,,,,,,,,,,,,,,,,,,518", ",,518,,,518,,518,,,,518,,518,,,,,,,,518,,,,,518,518,518,518,518,518", ",,,518,518,,,,,,,518,,,518,,518,,,,518,518,520,520,520,,520,,,,520,520", ",,,520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520", ",,520,,,,,,,520,,,520,520,520,520,520,520,520,,520,520,520,,520,520", ",520,520,,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,,520,,,,,,520,,,,,,,,520", ",,,,520,520,520,520,520,520,,,,520,520,,,,,,,520,,,520,526,526,526,526", "526,520,520,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526", "526,526,526,526,526,,,526,,,,,,526,526,,526,526,526,526,526,526,526", "526,,526,526,526,,526,526,,526,526,,,,,,,,,,,,,,,,,,,,,526,,,526,,,526", ",526,,526,,,,526,,,,,,,,526,,,,,526,526,526,526,526,526,,,,526,526,", ",,,,526,526,,,526,532,532,532,,532,526,526,,532,532,,,,532,,532,532", "532,532,532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,,,532", ",,532,532,532,532,532,532,532,,532,532,532,,532,532,,887,,887,887,887", "887,887,,,,,,,,,887,,,,,,,532,,,532,,,532,,532,,,,,,,,887,,,,,,,887", "887,887,887,532,532,532,532,532,532,,,,532,532,,,,,,,532,,,532,534,534", "534,,534,532,532,,534,534,,,,534,887,534,534,534,534,534,534,534,,,", ",,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534", "534,534,534,534,534,534,,534,534,,534,534,,,,,,,,,,,,,,,,,,,,,534,,", "534,,,534,,534,,534,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,", ",534,534,,,,,,,534,,,534,,534,,,,534,534,537,537,537,,537,,,,537,537", ",,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537", ",,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537,,537,537", ",537,537,,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,,537,,537,,,,537,,,,,,", ",537,,,,,537,537,537,537,537,537,,,,537,537,,,,,,,537,,,537,,537,,,", "537,537,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543", "543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543", "543,543,543,,543,543,543,,543,543,,889,,889,889,889,889,889,,,,,,,,", "889,,,,,,,543,,,543,,,543,,543,,,,,,,,889,,,,,,,889,889,889,889,543", "543,543,543,543,543,,,,543,543,,,,,,,543,,,543,546,546,546,,546,543", "543,,546,546,,,,546,889,546,546,546,546,546,546,546,,,,,,546,546,546", "546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,,546,546", "546,,546,546,,546,546,,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,,546,,,,,", "546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,,,,,,,546,,,546", "547,547,547,,547,546,546,,547,547,,,,547,,547,547,547,547,547,547,547", ",,,,,547,547,547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547", "547,547,,547,547,547,,547,547,,547,547,,,,,,,,,,,,,,,,,,,,,547,,,547", ",,547,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547", ",,,,,,547,,,547,548,548,548,,548,547,547,,548,548,,,,548,,548,548,548", "548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,,548,,,548", "548,548,548,548,548,548,,548,548,548,,548,548,,548,548,,,,,,,,,,,,,", ",,,,,,,548,,,548,,,548,,548,,,,,,548,,,,,,,,548,,,,,548,548,548,548", "548,548,,,,548,548,,,,,,,548,,,548,552,552,552,,552,548,548,,552,552", ",,,552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552", ",,552,,,,,,,552,,,552,552,552,552,552,552,552,,552,552,552,,552,552", ",552,552,,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,,552,,,,,,552,,,,,,,,552", ",,,,552,552,552,552,552,552,,,,552,552,,,,,,,552,,,552,559,559,559,", "559,552,552,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559", "559,559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559,559,559,559", "559,559,559,,559,559,,559,559,,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,,559", ",559,,559,,559,,,,,,,,559,,,,,559,559,559,559,559,559,,,,559,559,,,", ",,,559,,,559,,559,,,,559,559,562,562,562,,562,,,,562,562,,,,562,,562", "562,562,562,562,562,562,,,,,,562,562,562,562,562,562,562,,,562,,,,,", ",562,,,562,562,562,562,562,562,562,562,562,562,562,,562,562,,562,562", ",,,,,,,,,,,,,,,,,,,,562,,,562,,,562,,562,,,,,,562,,,,,,,,562,,,,,562", "562,562,562,562,562,,,,562,562,,,,,,,562,,,562,,562,,,,562,562,567,567", "567,567,567,,,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,,567", "567,567,567,567,567,567,,,567,,,,,,567,567,,567,567,567,567,567,567", "567,567,,567,567,567,,567,567,,567,567,,,,,,,,,,,,,,,,,,,,,567,,,567", ",,567,,567,,567,,,,567,,,,,,,,567,,,,,567,567,567,567,567,567,,,,567", "567,,,,,,,567,,,567,568,568,568,568,568,567,567,,568,568,,,,568,,568", "568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,", "568,568,,568,568,568,568,568,568,568,568,,568,568,568,,568,568,,568", "568,,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,,568,,568,,,,568,,,,,,,,568", ",,,,568,568,568,568,568,568,,,,568,568,,,,,,,568,,,568,574,574,574,", "574,568,568,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574", "574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574,574,,574", "574,574,,574,574,,956,,956,956,956,956,956,,,,,,,,,956,,,,,,,574,,,574", ",,574,,574,,,,,,,,956,956,,,,,,956,956,956,956,574,574,574,574,574,574", ",,,574,574,,,,,,,574,,,574,595,595,595,595,595,574,574,,595,595,,,,595", "956,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595", ",,,,,595,595,,595,595,595,595,595,595,595,595,,595,595,595,,595,595", ",595,595,,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,,595,,595,,,,595,,,,,,", ",595,,,,,595,595,595,595,595,595,,,,595,595,,,,,,,595,,,595,599,599", "599,599,599,595,595,,599,599,,,,599,,599,599,599,599,599,599,599,,,", ",,599,599,599,599,599,599,599,,,599,,,,,,599,599,,599,599,599,599,599", "599,599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,", ",599,,,599,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,", ",,599,599,,,,,,,599,,,599,604,604,604,604,604,599,599,,604,604,,,,604", ",604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604", ",,,,,604,604,,604,604,604,604,604,604,604,604,,604,604,604,,604,604", ",604,604,,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,,604,,604,,,,604,,,,,,", ",604,,,,,604,604,604,604,604,604,,,,604,604,,,,,,,604,,,604,606,606", "606,,606,604,604,,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606", "606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606", "606,606,606,606,,606,606,,606,606,,,,,,,,,,,,,,,,,,,,,606,,,606,,,606", ",606,,606,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606,", ",,,,,606,,,606,,606,,,,606,606,609,609,609,,609,,,,609,609,,,,609,,609", "609,609,609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,", ",609,,,609,609,609,609,609,609,609,609,609,609,609,,609,609,,609,609", ",,,,,,,,,,,,,,,,,,,,609,,,609,,,609,,609,,609,,,,609,,,,,,,,609,,,,", "609,609,609,609,609,609,,,,609,609,,,,,,,609,,,609,,609,,,,609,609,615", "615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615", "615,615,615,615,615,615,,,615,,,,,,,615,,,615,615,615,615,615,615,615", "615,615,615,615,,615,615,,615,615,,,,,,,,,,,,,,,,,,,,,615,,,615,,,615", ",615,,615,,,,615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,", ",,,,,615,,,615,,615,,,,615,615,619,619,619,,619,,,,619,619,,,,619,,619", "619,619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,", ",619,,,619,619,619,619,619,619,619,,619,619,619,,619,619,,619,619,,", ",,,,,,,,,,,,,,,,,,619,,,619,,,619,,619,,,,,,619,,,,,,,,619,,,,,619,619", "619,619,619,619,,,,619,619,,,,,,,619,,,619,621,621,621,,621,619,619", ",621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621,621,621,621,621", "621,621,,,621,,,,,,,621,,,621,621,621,621,621,621,621,,621,621,621,", "621,621,,621,621,,,,,,,,,,,,,,,,,,,,,621,,,621,,,621,,621,,,,,,621,", ",,,,,,621,,,,,621,621,621,621,621,621,,,,621,621,,,,,,,621,,,621,649", "649,649,,649,621,621,,649,649,,,,649,,649,649,649,649,649,649,649,,", ",,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649", "649,649,,649,649,649,,649,649,,649,649,,,,,,,,,,,,,,,,,,,,,649,,,649", ",,649,,649,,649,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649", "649,,,,,,,649,,,649,652,652,652,,652,649,649,,652,652,,,,652,,652,652", "652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652", ",,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652,,,,,,,", ",,,,,,,,,,,,,652,,,652,,,652,,652,,,,,,652,,,,,,,,652,,,,,652,652,652", "652,652,652,,,,652,652,,,,,,,652,,,652,653,653,653,,653,652,652,,653", "653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653", "653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,,653,653,653,,653", "653,,653,653,,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,,653,,,,,,653,,,,,", ",,653,,,,,653,653,653,653,653,653,,,,653,653,,,,,,,653,,,653,658,658", "658,,658,653,653,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,,658", "658,658,658,658,658,658,,,658,,,,,,,658,,,658,658,658,658,658,658,658", ",658,658,658,,658,658,,658,658,,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,", "658,,,,,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,,,,,", ",658,,,658,661,661,661,,661,658,658,,661,661,,,,661,,661,661,661,661", "661,661,661,,,,,,661,661,661,661,661,661,661,,,661,,,,,,,661,,,661,661", "661,661,661,661,661,,661,661,661,,661,661,,661,661,,,,,,,,,,,,,,,,,", ",,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661,,,,,661,661,661,661,661", "661,,,,661,661,,,,,,,661,,,661,664,664,664,,664,661,661,,664,664,,,", "664,,664,664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,", "664,,,,,,,664,,,664,664,664,664,664,664,664,,664,664,664,,664,664,,664", "664,,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664,,,", ",664,664,664,664,664,664,,,,664,664,,,,,,,664,,,664,665,665,665,,665", "664,664,,665,665,,,,665,,665,665,665,665,665,665,665,,,,,,665,665,665", "665,665,665,665,,,665,,,,,,,665,,,665,665,665,665,665,665,665,,665,665", "665,,665,665,,665,665,,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,,665,,,,,", "665,,,,,,,,665,,,,,665,665,665,665,665,665,,,,665,665,,,,,,,665,,,665", "678,678,678,678,678,665,665,,678,678,,,,678,,678,678,678,678,678,678", "678,,,,,,678,678,678,678,678,678,678,,,678,,,,,,678,678,,678,678,678", "678,678,678,678,678,,678,678,678,,678,678,,678,678,,,,,,,,,,,,,,,,,", ",,,678,,,678,,,678,,678,,678,,,,678,,,,,,,,678,,,,,678,678,678,678,678", "678,,,,678,678,,,,,,,678,,,678,685,685,685,685,685,678,678,,685,685", ",,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685", ",,685,,,,,,685,685,,685,685,685,685,685,685,685,685,,685,685,685,,685", "685,,685,685,,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,,685,,685,,,,685,,", ",,,,,685,,,,,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,688", "688,688,,688,685,685,,688,688,,,,688,,688,688,688,688,688,688,688,,", ",,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688", "688,688,688,688,688,688,,688,688,,688,688,,,,,,,,,,,,,,,,,,,,,688,,", "688,,,688,,688,,688,,688,,688,,,,,,,,688,,,,,688,688,688,688,688,688", ",,,688,688,,,,,,,688,,,688,,688,,,,688,688,689,689,689,,689,,,,689,689", ",,,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689", ",,689,,,,,,,689,,,689,689,689,689,689,689,689,689,689,689,689,,689,689", ",689,689,,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,,689,,,,689,,689,,,,,,", ",689,,,,,689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,,689,,,", "689,689,690,690,690,690,690,,,,690,690,,,,690,,690,690,690,690,690,690", "690,,,,,,690,690,690,690,690,690,690,,,690,,,,,,690,690,,690,690,690", "690,690,690,690,690,,690,690,690,,690,690,,690,690,,,,,,,,,,,,,,,,,", ",,,690,,,690,,,690,,690,,690,,,,690,,,,,,,,690,,,,,690,690,690,690,690", "690,,,,690,690,,,,,,,690,,,690,691,691,691,691,691,690,690,,691,691", ",,,691,,691,691,691,691,691,691,691,,,,,,691,691,691,691,691,691,691", ",,691,,,,,,691,691,,691,691,691,691,691,691,691,691,,691,691,691,,691", "691,,691,691,,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,,691,,691,,,,691,,", ",,,,,691,,,,,691,691,691,691,691,691,,,,691,691,,,,,,,691,,,691,696", "696,696,,696,691,691,,696,696,,,,696,,696,696,696,696,696,696,696,,", ",,,696,696,696,696,696,696,696,,,696,,,,,,,696,,,696,696,696,696,696", "696,696,,696,696,696,,696,696,,696,696,,,,,,,,,,,,,,,,,,,,,696,,,696", ",,696,,696,,,,,,696,,,,,,,,696,,,,,696,696,696,696,696,696,,,,696,696", ",,,,,,696,,,696,699,699,699,,699,696,696,,699,699,,,,699,,699,699,699", "699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699", "699,699,699,699,699,699,,699,699,699,,699,699,,699,699,,,,,,,,,,,,,", ",,,,,,,699,,,699,,,699,,699,,,,,,699,,,,,,,,699,,,,,699,699,699,699", "699,699,,,,699,699,,,,,,,699,,,699,702,702,702,,702,699,699,,702,702", ",,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702,702", ",,702,,,,,,,702,,,702,702,702,702,702,702,702,,702,702,702,,702,702", ",987,,987,987,987,987,987,,,,,,,,,987,,,,,,,702,,,702,,,702,,702,,,", ",,,,987,,,,,,,987,987,987,987,702,702,702,702,702,702,,,,702,702,,,", ",,,702,,,702,715,715,715,,715,702,702,,715,715,,,,715,987,715,715,715", "715,715,715,715,,,,,,715,715,715,715,715,715,715,,,715,,,,,,,715,,,715", "715,715,715,715,715,715,,715,715,715,,715,715,,,,,,,,,,,,,,,,,,,,,,", ",715,,,715,,,715,,715,,,,,,,,,,,,,,,,,,,715,715,715,715,715,715,,,,715", "715,,,,,,,715,,,715,721,721,721,,721,715,715,,721,721,,,,721,,721,721", "721,721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721", ",,721,721,721,721,721,721,721,,721,721,721,,721,721,,721,721,,,,,,,", ",,,,,,,,,,,,,721,,,721,,,721,,721,,721,,,,721,,,,,,,,721,,,,,721,721", "721,721,721,721,,,,721,721,,,,,,,721,,,721,760,760,760,,760,721,721", ",760,760,,,,760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760", "760,760,,,760,,,,,,,760,,,760,760,760,760,760,760,760,,760,760,760,", "760,760,,760,760,,,,,,,,,,,,,,,,,,,,,760,,,760,,,760,,760,,760,,,,760", ",,,,,,,760,,,,,760,760,760,760,760,760,,,,760,760,,,,,,,760,,,760,767", "767,767,,767,760,760,,767,767,,,,767,,767,767,767,767,767,767,767,,", ",,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767,767,767", "767,767,,767,767,767,,767,767,,767,767,,,,,,,,,,,,,,,,,,,,,767,,,767", ",,767,,767,,,,,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767", ",,,,,,767,,,767,772,772,772,772,772,767,767,,772,772,,,,772,,772,772", "772,772,772,772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,772", "772,,772,772,772,772,772,772,772,772,,772,772,772,,772,772,,772,772", ",,,,,,,,,,,,,,,,,,,,772,,,772,,,772,,772,,772,,,,772,,,,,,,,772,,,,", "772,772,772,772,772,772,,,,772,772,,,,,,,772,,,772,776,776,776,776,776", "772,772,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776", "776,776,776,776,,,776,,,,,,776,776,,776,776,776,776,776,776,776,776", ",776,776,776,,776,776,,776,776,,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,", "776,,776,,,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,", ",,,,776,,,776,777,777,777,777,777,776,776,,777,777,,,,777,,777,777,777", "777,777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,777,777", ",777,777,777,777,777,777,777,777,,777,777,777,,777,777,,777,777,,,,", ",,,,,,,,,,,,,,,,777,,,777,,,777,,777,,777,,,,777,,,,,,,,777,,,,,777", "777,777,777,777,777,,,,777,777,,,,,,,777,,,777,780,780,780,,780,777", "777,,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780,780,780", "780,780,780,,,780,,,,,,,780,,,780,780,780,780,780,780,780,,780,780,780", ",780,780,,780,780,,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,,780,,,,,,780", ",,,,,,,780,,,,,780,780,780,780,780,780,,,,780,780,,,,,,,780,,,780,794", "794,794,794,794,780,780,,794,794,,,,794,,794,794,794,794,794,794,794", ",,,,,794,794,794,794,794,794,794,,,794,,,,,,794,794,,794,794,794,794", "794,794,794,794,,794,794,794,,794,794,,794,794,,,,,,,,,,,,,,,,,,,,,794", ",,794,,,794,,794,,794,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794", ",,,794,794,,,,,,,794,,,794,799,799,799,,799,794,794,,799,799,,,,799", ",799,799,799,799,799,799,799,,,,,,799,799,799,799,799,799,799,,,799", ",,,,,,799,,,799,799,799,799,799,799,799,,799,799,799,,799,799,,799,799", ",,,,,,,,,,,,,,,,,,,,799,,,799,,,799,,799,,,,,,799,,,,,,,,799,,,,,799", "799,799,799,799,799,,,,799,799,,,,,,,799,,,799,800,800,800,,800,799", "799,,800,800,,,,800,,800,800,800,800,800,800,800,,,,,,800,800,800,800", "800,800,800,,,800,,,,,,,800,,,800,800,800,800,800,800,800,,800,800,800", ",800,800,,800,800,,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,,800,,,,,,800", ",,,,,,,800,,,,,800,800,800,800,800,800,,,,800,800,,,,,,,800,,,800,801", "801,801,,801,800,800,,801,801,,,,801,,801,801,801,801,801,801,801,,", ",,,801,801,801,801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801", "801,801,,801,801,801,,801,801,,801,801,,,,,,,,,,,,,,,,,,,,,801,,,801", ",,801,,801,,,,,,801,,,,,,,,801,,,,,801,801,801,801,801,801,,,,801,801", ",,,,,,801,,,801,813,813,813,,813,801,801,,813,813,,,,813,,813,813,813", "813,813,813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813", "813,813,813,813,813,813,,813,813,813,,813,813,,813,813,,,,,,,,,,,,,", ",,,,,,,813,,,813,,,813,,813,,,,,,813,,,,,,,,813,,,,,813,813,813,813", "813,813,,,,813,813,,,,,,,813,,,813,814,814,814,,814,813,813,,814,814", ",,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814", ",,814,,,,,,,814,,,814,814,814,814,814,814,814,,814,814,814,,814,814", ",814,814,,,,,,,,,,,,,,,,,,,,,814,,,814,,,814,,814,,,,,,814,,,,,,,,814", ",,,,814,814,814,814,814,814,,,,814,814,,,,,,,814,,,814,815,815,815,", "815,814,814,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815", "815,815,815,815,815,,,815,,,,,,,815,,,815,815,815,815,815,815,815,,815", "815,815,,815,815,,815,815,,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,,815,", ",,,,815,,,,,,,,815,,,,,815,815,815,815,815,815,,,,815,815,,,,,,,815", ",,815,838,838,838,838,838,815,815,,838,838,,,,838,,838,838,838,838,838", "838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,,838,838,,838,838", "838,838,838,838,838,838,,838,838,838,,838,838,,838,838,,,,,,,,,,,,,", ",,,,,,,838,,,838,,,838,,838,,838,,,,838,,,,,,,,838,,,,,838,838,838,838", "838,838,,,,838,838,,,,,,,838,,,838,865,865,865,,865,838,838,,865,865", ",,,865,,865,865,865,865,865,865,865,,,,,,865,865,865,865,865,865,865", ",,865,,,,,,,865,,,865,865,865,865,865,865,865,,865,865,865,,865,865", ",865,865,,,,,,,,,,,,,,,,,,,,,865,,,865,,,865,,865,,,,,,865,,,,,,,,865", ",,,,865,865,865,865,865,865,,,,865,865,,,,,,,865,,,865,867,867,867,867", "867,865,865,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867", "867,867,867,867,867,,,867,,,,,,867,867,,867,867,867,867,867,867,867", "867,,867,867,867,,867,867,,867,867,,,,,,,,,,,,,,,,,,,,,867,,,867,,,867", ",867,,867,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867,", ",,,,,867,,,867,868,868,868,868,868,867,867,,868,868,,,,868,,868,868", "868,868,868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868", "868,,868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868", ",,,,,,,,,,,,,,,,,,,,868,,,868,,,868,,868,,868,,,,868,,,,,,,,868,,,,", "868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,893,893,893,,893", "868,868,,893,893,,,,893,,893,893,893,893,893,893,893,,,,,,893,893,893", "893,893,893,893,,,893,,,,,,,893,,,893,893,893,893,893,893,893,,893,893", "893,,893,893,,893,893,,,,,,,,,,,,,,,,,,,,,893,,,893,,,893,,893,,,,,", "893,,,,,,,,893,,,,,893,893,893,893,893,893,,,,893,893,,,,,,,893,,,893", "907,907,907,,907,893,893,,907,907,,,,907,,907,907,907,907,907,907,907", ",,,,,907,907,907,907,907,907,907,,,907,,,,,,,907,,,907,907,907,907,907", "907,907,,907,907,907,,907,907,,907,907,,,,,,,,,,,,,,,,,,,,,907,,,907", ",,907,,907,,,,,,907,,,,,,,,907,,,,,907,907,907,907,907,907,,,,907,907", ",,,,,,907,,,907,908,908,908,,908,907,907,,908,908,,,,908,,908,908,908", "908,908,908,908,,,,,,908,908,908,908,908,908,908,,,908,,,,,,,908,,,908", "908,908,908,908,908,908,,908,908,908,,908,908,,908,908,,,,,,,,,,,,,", ",,,,,,,908,,,908,,,908,,908,,,,,,908,,,,,,,,908,,,,,908,908,908,908", "908,908,,,,908,908,,,,,,,908,,,908,909,909,909,,909,908,908,,909,909", ",,,909,,909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909", ",,909,,,,,,,909,,,909,909,909,909,909,909,909,,909,909,909,,909,909", ",909,909,,,,,,,,,,,,,,,,,,,,,909,,,909,,,909,,909,,,,,,909,,,,,,,,909", ",,,,909,909,909,909,909,909,,,,909,909,,,,,,,909,,,909,915,915,915,", "915,909,909,,915,915,,,,915,,915,915,915,915,915,915,915,,,,,,915,915", "915,915,915,915,915,,,915,,,,,,,915,,,915,915,915,915,915,915,915,915", "915,915,915,,915,915,,915,915,,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,,915", ",,,915,,915,,,,,,,,915,,,,,915,915,915,915,915,915,,,,915,915,,,,,,", "915,,,915,,915,,,,915,915,919,919,919,919,919,,,,919,919,,,,919,,919", "919,919,919,919,919,919,,,,,,919,919,919,919,919,919,919,,,919,,,,,", "919,919,,919,919,919,919,919,919,919,919,,919,919,919,,919,919,,919", "919,,,,,,,,,,,,,,,,,,,,,919,,,919,,,919,,919,,919,,,,919,,,,,,,,919", ",,,,919,919,919,919,919,919,,,,919,919,,,,,,,919,,,919,923,923,923,", "923,919,919,,923,923,,,,923,,923,923,923,923,923,923,923,,,,,,923,923", "923,923,923,923,923,,,923,,,,,,,923,,,923,923,923,923,923,923,923,,923", "923,923,,923,923,,,,,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,,923,,,,,,,", ",,,,,,,,,,,923,923,923,923,923,923,,,,923,923,,,,,,,923,,,923,938,938", "938,,938,923,923,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938", "938,938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938,938,938,938", ",938,938,938,,938,938,,938,938,,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,", "938,,938,,,,938,,,,,,,,938,,,,,938,938,938,938,938,938,,,,938,938,,", ",,,,938,,,938,939,939,939,939,939,938,938,,939,939,,,,939,,939,939,939", "939,939,939,939,,,,,,939,939,939,939,939,939,939,,,939,,,,,,939,939", ",939,939,939,939,939,939,939,939,,939,939,939,,939,939,,939,939,,,,", ",,,,,,,,,,,,,,,,939,,,939,,,939,,939,,939,,,,939,,,,,,,,939,,,,,939", "939,939,939,939,939,,,,939,939,,,,,,,939,,,939,942,942,942,942,942,939", "939,,942,942,,,,942,,942,942,942,942,942,942,942,,,,,,942,942,942,942", "942,942,942,,,942,,,,,,942,942,,942,942,942,942,942,942,942,942,,942", "942,942,,942,942,,942,942,,,,,,,,,,,,,,,,,,,,,942,,,942,,,942,,942,", "942,,,,942,,,,,,,,942,,,,,942,942,942,942,942,942,,,,942,942,,,,,,,942", ",,942,965,965,965,965,965,942,942,,965,965,,,,965,,965,965,965,965,965", "965,965,,,,,,965,965,965,965,965,965,965,,,965,,,,,,965,965,,965,965", "965,965,965,965,965,965,,965,965,965,,965,965,,965,965,,,,,,,,,,,,,", ",,,,,,,965,,,965,,,965,,965,,965,,,,965,,,,,,,,965,,,,,965,965,965,965", "965,965,,,,965,965,,,,,,,965,,,965,978,978,978,978,978,965,965,,978", "978,,,,978,,978,978,978,978,978,978,978,,,,,,978,978,978,978,978,978", "978,,,978,,,,,,978,978,,978,978,978,978,978,978,978,978,,978,978,978", ",978,978,,978,978,,,,,,,,,,,,,,,,,,,,,978,,,978,,,978,,978,,978,,,,978", ",,,,,,,978,,,,,978,978,978,978,978,978,,,,978,978,,,,,,,978,,,978,983", "983,983,983,983,978,978,,983,983,,,,983,,983,983,983,983,983,983,983", ",,,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983,983,983,983", "983,983,983,983,,983,983,983,,983,983,,983,983,,,,,,,,,,,,,,,,,,,,,983", ",,983,,,983,,983,,983,,,,983,,,,,,,,983,,,,,983,983,983,983,983,983", ",,,983,983,,,,,,,983,,,983,996,996,996,996,996,983,983,,996,996,,,,996", ",996,996,996,996,996,996,996,,,,,,996,996,996,996,996,996,996,,,996", ",,,,,996,996,,996,996,996,996,996,996,996,996,,996,996,996,,996,996", ",996,996,,,,,,,,,,,,,,,,,,,,,996,,,996,,,996,,996,,996,,,,996,,,,,,", ",996,,,,,996,996,996,996,996,996,,,,996,996,,,,,,,996,,,996,1000,1000", "1000,,1000,996,996,,1000,1000,,,,1000,,1000,1000,1000,1000,1000,1000", "1000,,,,,,1000,1000,1000,1000,1000,1000,1000,,,1000,,,,,,,1000,,,1000", "1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,,1000,1000,,1000,1000", ",,,,,,,,,,,,,,,,,,,,1000,,,1000,,,1000,,1000,,1000,,,,1000,,,,,,,,1000", ",,,444,1000,1000,1000,1000,1000,1000,444,444,444,1000,1000,,444,444", ",444,,1000,,,1000,,1000,,444,,1000,1000,,,,,,,,444,444,,444,444,444", "444,444,,,,,,,,,,,,,,,,,,,,,,444,444,444,444,444,444,444,444,444,444", "444,444,444,444,444,,,444,444,444,,444,,,,444,,,,,,444,,444,,444,444", "444,444,444,444,444,,444,444,444,,,,,,,,,,,,,444,444,,444,,444,,446", "444,,444,,,444,446,446,446,,,,446,446,,446,,,,,,,,,,,,,,,,,,,,446,446", ",446,446,446,446,446,,,,,,,,,,,,,,,,,,,,,,446,446,446,446,446,446,446", "446,446,446,446,446,446,446,446,,,446,446,446,,446,,,,446,,,,,,446,", "446,,446,446,446,446,446,446,446,,446,,446,,,,,,,,,,,,,446,446,,446", ",446,,668,446,,446,,,446,668,668,668,,,668,668,668,,668,,,,,,,,,668", "668,668,,,,,,,,,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,,,668", "668,668,668,668,668,668,668,668,668,668,668,668,668,668,,,668,668,668", ",668,668,,,668,,668,,668,,668,,668,,668,668,668,668,668,668,668,,668", "668,668,,,,,,,,,,,,,668,668,668,668,,668,,669,668,,668,,,668,669,669", "669,,,669,669,669,,669,,,,,,,,,,669,669,,,,,,,,,669,669,,669,669,669", "669,669,,,,,,,,,,,,,,,,,,,,,,669,669,669,669,669,669,669,669,669,669", "669,669,669,669,669,,,669,669,669,,669,669,,,669,,669,,669,,669,,669", ",669,669,669,669,669,669,669,,669,,669,,,,,,,,,,,,,669,669,669,669,", "669,,25,669,,669,,,669,25,25,25,,,25,25,25,,25,,,,,,,,,25,25,25,,,,", ",,,,25,25,,25,25,25,25,25,,,,,,,,,,,,,,,,,,,,,,25,25,25,25,25,25,25", "25,25,25,25,25,25,25,25,,,25,25,25,,,25,,25,25,,25,,25,,25,,25,,25,25", "25,25,25,25,25,,25,25,25,,,,,,,,,,,,,25,25,25,25,26,25,,,25,,25,26,26", "26,,,26,26,26,,26,,,,,,,,,,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,", ",,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,26,26", "26,,,26,,26,26,,26,,26,,26,,26,,26,26,26,26,26,26,26,,26,,26,,,,,,,", ",,,,,26,26,26,26,51,26,,,26,,26,51,51,51,,,51,51,51,,51,,,,,,,,,,51", "51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,,,,,,,,,,,,,,,,,51,51,51,51", "51,51,51,51,51,51,51,51,51,51,51,,,51,51,51,,,51,,,51,,51,,51,,51,,51", ",51,51,51,51,51,51,51,,51,,51,,,,,,,,,,,,,51,51,51,51,440,51,,51,51", ",51,440,440,440,,,440,440,440,,440,,,,,,,,,440,440,440,,,,,,,,,440,440", ",440,440,440,440,440,,,,,,,,,,,,,,,,,,,,,,440,440,440,440,440,440,440", "440,440,440,440,440,440,440,440,,,440,440,440,,,440,,440,440,,440,,440", ",440,,440,,440,440,440,440,440,440,440,,440,440,440,,,,,,,,,,,,,440", "440,440,440,450,440,,,440,,440,450,450,450,,,450,450,450,,450,,,,,,", ",,450,450,450,,,,,,,,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,", ",,,,450,450,450,450,450,450,450,450,450,450,450,450,450,450,450,,,450", "450,450,,,450,,450,450,,450,,450,,450,,450,,450,450,450,450,450,450", "450,,450,450,450,,,,,,,,,,,,,450,450,450,450,500,450,,,450,,450,500", "500,500,,,500,500,500,,500,,,,,,,,,,500,,,,,,,,,,500,500,,500,500,500", "500,500,,,,,,,,,,,,501,,,,,,,501,501,501,,,501,501,501,,501,,,,,500", "500,,,,501,,,500,,,,,500,500,501,501,,501,501,501,501,501,,,,,,,,,,", ",500,,,,,,,,,,,,,500,,500,,,500,,,501,501,,502,,,,,501,,502,502,502", "501,501,502,502,502,,502,,,,,,,,,,502,,,,,501,,,,,502,502,,502,502,502", "502,502,501,,501,,,501,202,202,,,202,,,,,,,,,202,202,202,202,202,202", "202,202,202,,,202,202,502,502,,,202,202,202,202,502,,,,,502,502,,,,", "202,202,,202,202,202,202,202,202,202,202,202,202,202,,502,202,,,,,,", ",,,,,502,,502,,,502,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7", ",,,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,,,,,7,7,7", "7,7,7,7,7,7,,,7,7,,,,,7,7,7,7,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7", ",,7,7,,,,,,,,,,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,", "8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,8,,,,,,,,,8,8,8,8,8", "8,8,8,8,,,8,8,,,,,8,8,8,8,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8", "8,,,,,,,,,,8,423,423,423,423,423,423,423,423,423,423,423,423,423,423", "423,423,423,423,423,423,423,423,423,423,,,,423,423,423,423,423,423,423", "423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,423,,,423", ",,,,,,,,423,423,423,423,423,423,423,423,423,,,423,423,,,,,423,423,423", "423,,,,,,,,,,,,423,423,,423,423,423,423,423,423,423,423,423,423,423", ",,423,423,,,,,,,,,,423,427,427,427,427,427,427,427,427,427,427,427,427", "427,427,427,427,427,427,427,427,427,427,427,427,,,,427,427,427,427,427", "427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427", "427,,,427,,,,,,,,,427,427,427,427,427,427,427,427,427,,,427,427,,,,", "427,427,427,427,,,,,,,,,,,,427,427,,427,427,427,427,427,427,427,427", "427,427,427,,,427,427,,,,,,,,,,427,66,66,66,66,66,66,66,66,66,66,66", "66,66,66,66,66,66,66,66,66,66,66,66,66,,,,66,66,66,66,66,66,66,66,66", "66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,66,,,,,,,66,66,66", "66,66,66,66,66,66,,,66,66,,,,,66,66,66,66,,,,,,66,,,,,,66,66,,66,66", "66,66,66,66,66,66,66,66,66,,,66,80,80,80,80,80,80,80,80,80,80,80,80", "80,80,80,80,80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80,80,80", "80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,80,,,,,,,80,80,80,80", "80,80,80,80,80,,,80,80,,,,,80,80,80,80,,,,,,,,,,,,80,80,,80,80,80,80", "80,80,80,80,80,80,80,,,80,193,193,193,193,193,193,193,193,193,193,193", "193,193,193,193,193,193,193,193,193,193,193,193,193,,,,193,193,193,193", "193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193", "193,193,193,193,193,,193,,,,,,,193,193,193,193,193,193,193,193,193,", ",193,193,,,,,193,193,193,193,,,,,,,,,,,,193,193,,193,193,193,193,193", "193,193,193,193,193,193,,,193,791,791,791,791,791,791,791,791,791,791", "791,791,791,791,791,791,791,791,791,791,791,791,791,791,,,,791,791,791", "791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791,791", "791,791,791,,,791,,,,,,,,,791,791,791,791,791,791,791,791,791,,,791", "791,,,,,791,791,791,791,,,,,,,,,,,,791,791,,791,791,791,791,791,791", "791,791,791,791,791,201,201,791,,201,,,,,,,,,201,201,201,201,201,201", "201,201,201,,,201,201,,,,,201,201,201,201,,,,,,201,,,,,,201,201,,201", "201,201,201,201,201,201,201,201,201,201,203,203,201,,203,,,,,,,,,203", "203,203,203,203,203,203,203,203,,,203,203,,,,,203,203,203,203,,,,,,", ",,,,,203,203,,203,203,203,203,203,203,203,203,203,203,203,249,249,203", ",249,,,,,,,,,249,249,249,249,249,249,249,249,249,,,249,249,,,,,249,249", "249,249,,,,,,,,,,,,249,249,,249,249,249,249,249,249,249,249,249,249", "249,250,250,249,,250,,,,,,,,,250,250,250,250,250,250,250,250,250,,,250", "250,,,,,250,250,250,250,,,,,,,,,,,,250,250,,250,250,250,250,250,250", "250,250,250,250,250,251,251,250,,251,,,,,,,,,251,251,251,251,251,251", "251,251,251,,,251,251,,,,,251,251,251,251,,,,,,,,,,,,251,251,,251,251", "251,251,251,251,251,251,251,251,251,463,463,251,,463,,,,,,,,,463,463", "463,463,463,463,463,463,463,,,463,463,,,,,463,463,463,463,,,,,,463,", ",,,,463,463,,463,463,463,463,463,463,463,463,463,463,463,464,464,463", ",464,,,,,,,,,464,464,464,464,464,464,464,464,464,,,464,464,,,,,464,464", "464,464,,,,,,,,,,,,464,464,,464,464,464,464,464,464,464,464,464,464", "464,535,535,464,,535,,,,,,,,,535,535,535,535,535,535,535,535,535,,,535", "535,,,,,535,535,535,535,,,,,,535,,,,,,535,535,,535,535,535,535,535,535", "535,535,535,535,535,536,536,535,,536,,,,,,,,,536,536,536,536,536,536", "536,536,536,,,536,536,,,,,536,536,536,536,,,,,,,,,,,,536,536,,536,536", "536,536,536,536,536,536,536,536,536,538,538,536,,538,,,,,,,,,538,538", "538,538,538,538,538,538,538,,,538,538,,,,,538,538,538,538,,,,,,,,,,", ",538,538,,538,538,538,538,538,538,538,538,538,538,538,549,549,538,,549", ",,,,,,,,549,549,549,549,549,549,549,549,549,,,549,549,,,,,549,549,549", "549,,,,,,549,,,,,,549,549,,549,549,549,549,549,549,549,549,549,549,549", "550,550,549,,550,,,,,,,,,550,550,550,550,550,550,550,550,550,,,550,550", ",,,,550,550,550,550,,,,,,,,,,,,550,550,,550,550,550,550,550,550,550", "550,550,550,550,607,607,550,,607,,,,,,,,,607,607,607,607,607,607,607", "607,607,,,607,607,,,,,607,607,607,607,,,,,,607,,,,,,607,607,,607,607", "607,607,607,607,607,607,607,607,607,608,608,607,,608,,,,,,,,,608,608", "608,608,608,608,608,608,608,,,608,608,,,,,608,608,608,608,,,,,,,,,,", ",608,608,,608,608,608,608,608,608,608,608,608,608,608,614,614,608,,614", ",,,,,,,,614,614,614,614,614,614,614,614,614,,,614,614,,,,,614,614,614", "614,,,,,,,,,,,,614,614,,614,614,614,614,614,614,614,614,614,614,614", "616,616,614,,616,,,,,,,,,616,616,616,616,616,616,616,616,616,,,616,616", ",,,,616,616,616,616,,,,,,616,,,,,,616,616,,616,616,616,616,616,616,616", "616,616,616,616,742,742,616,,742,,,,,,,,,742,742,742,742,742,742,742", "742,742,,,742,742,,,,,742,742,742,742,,,,,,,,,,,,742,742,,742,742,742", "742,742,742,742,742,742,742,742,1001,1001,742,,1001,,,,,,,,,1001,1001", "1001,1001,1001,1001,1001,1001,1001,,,1001,1001,,,,,1001,1001,1001,1001", ",,,,,1001,,,,,,1001,1001,,1001,1001,1001,1001,1001,1001,1001,1001,1001", "1001,1001,1002,1002,1001,,1002,,,,,,,,,1002,1002,1002,1002,1002,1002", "1002,1002,1002,,,1002,1002,,,,,1002,1002,1002,1002,,,,,,,,,,,,1002,1002", ",1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,1002,,,1002"];

      racc_action_check = arr = Opal.get('Array').$new(25645, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a.$$p = (TMP_3 = function(str){var self = TMP_3.$$s || this, $d, $e, TMP_4;
if (str == null) str = nil;
      return ($d = ($e = str.$split(",", -1)).$each, $d.$$p = (TMP_4 = function(i){var self = TMP_4.$$s || this, $f;
if (i == null) i = nil;
        if ((($f = i['$empty?']()) !== nil && (!$f.$$is_boolean || $f == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $d).call($e)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c);

      racc_action_pointer = [-2, 14, nil, -46, nil, 790, -84, 23598, 23719, -49, nil, -58, 31, 630, 244, 2, 310, nil, 129, 260, 1860, 130, nil, 354, -19, 22702, 22829, 391, 529, 667, nil, 805, 936, 1067, nil, 72, 301, 148, 441, 1198, 1329, 1460, 92, 714, nil, nil, nil, nil, nil, nil, nil, 22956, nil, 1591, 1722, 1860, -15, 949, 1998, 2129, nil, nil, 2260, 2391, 2522, nil, 24082, nil, nil, nil, nil, nil, -15, nil, nil, nil, nil, nil, 100, 132, 24192, nil, nil, nil, 493, 2653, nil, nil, 2791, nil, nil, nil, nil, nil, nil, nil, nil, nil, 273, nil, 2929, nil, nil, nil, 3060, 3191, 3322, 3453, 3584, 3715, nil, 513, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 24302, 181, nil, 3846, 3977, 4108, 4239, 4377, 24471, 23471, 24530, 4515, 4646, 4777, 4908, nil, 831, -63, 261, -51, 201, 293, 5039, 5170, nil, nil, 5301, 301, 5432, 5563, 5694, 5825, 5956, 6087, 6218, 6349, 6480, 6611, 6742, 6873, 7004, 7135, 7266, 7397, 7528, 7659, 7790, 7921, 8052, 8183, 8314, 8445, 8576, nil, nil, nil, 24589, 24648, 24707, 323, 8707, 8845, nil, nil, nil, nil, nil, nil, nil, 8983, nil, 2653, nil, 302, 306, nil, 9121, 366, 9252, nil, nil, 9383, 9514, nil, nil, 146, 970, 395, 9645, 438, 465, 431, 9776, 9907, 17, 899, 519, 39, nil, 502, 483, -14, nil, nil, nil, 521, 515, 495, 10038, nil, 430, 575, 595, 931, nil, 597, nil, 10169, nil, 10300, 582, 543, nil, 558, -89, -47, 591, 581, 114, 606, nil, nil, -21, 1080, nil, nil, nil, 569, 575, 600, 603, nil, 607, 622, nil, nil, nil, 700, nil, 10431, nil, nil, nil, nil, nil, nil, nil, 821, nil, nil, nil, 717, nil, nil, 718, 602, -7, 0, 10562, 10693, 349, 350, 645, -2, 1030, 722, 0, 753, nil, nil, 391, 724, nil, 1064, nil, 68, nil, nil, 10824, 148, 307, 323, 450, 532, 575, 580, 588, nil, 626, nil, 10955, nil, 285, nil, 391, nil, 419, 666, 529, nil, 667, -33, nil, 556, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 682, 23840, nil, nil, nil, 23961, 683, nil, 668, nil, 11086, 669, nil, 2791, 705, 708, 568, 623, 23083, nil, nil, nil, 22182, 713, 22312, nil, 11217, 11355, 23210, nil, nil, nil, 3191, nil, 667, nil, nil, 391, nil, nil, nil, 24766, 24825, 11493, 11631, 98, 11769, 11900, 12031, 44, nil, 4646, 4777, 260, 418, 739, 748, 749, 753, 2516, 2929, 1461, 4908, 1591, 1998, 2129, 2260, 5039, 5170, 5301, 5432, 5563, 669, 829, 5694, 5825, 12162, -35, 23337, 23392, 23471, -34, nil, 696, nil, nil, 695, 715, nil, -7, 166, 752, nil, nil, 12293, nil, 12431, nil, 12569, nil, 167, nil, nil, nil, 12700, 754, 720, nil, nil, 722, 12831, 761, 12962, 24884, 24943, 13100, 25002, 170, 771, nil, nil, 13238, 738, nil, 13369, 13500, 13631, 25061, 25120, 3322, 13762, 860, 861, 749, 795, nil, nil, 13893, nil, nil, 14031, nil, nil, nil, nil, 14169, 14300, 796, nil, 2404, nil, nil, 14431, 471, nil, nil, 582, 2535, nil, 826, nil, nil, 1161, 838, nil, 805, nil, 966, nil, 771, 686, nil, nil, 14562, 894, nil, nil, 14693, 203, 204, 894, 902, 14824, nil, 14955, 25179, 25238, 15093, 16, nil, 1224, nil, 25297, 15231, 25356, nil, nil, 15369, 585, 15500, nil, 9789, nil, nil, nil, 31, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 244, nil, nil, nil, 786, nil, nil, nil, nil, nil, 802, 15631, 649, 202, 15762, 15893, 839, nil, nil, nil, 16024, 841, nil, 16155, 842, nil, 16286, 16417, 283, 297, 22442, 22572, 849, 853, 529, nil, 1722, nil, 10051, nil, 16548, nil, nil, nil, nil, nil, nil, 16679, nil, 858, 16810, 16948, 17086, 17217, nil, 823, nil, 863, 17348, nil, nil, 17479, 1000, -25, 17610, 826, nil, 869, 207, 229, 874, 252, 260, 883, 881, 888, 852, 17741, 3453, 914, 915, 66, 968, 17872, nil, 901, nil, 292, nil, 885, 989, nil, nil, nil, 874, 880, 1292, 891, nil, nil, 897, 899, nil, 900, 25415, nil, nil, 938, 1097, 907, 1214, 740, nil, 1020, nil, nil, nil, nil, nil, 1026, nil, 1027, 18003, 963, 29, 40, 80, 121, 964, 18134, 1722, nil, 970, 968, 18265, 609, nil, 212, 18396, 18527, 10444, 623, 18658, nil, 937, 940, nil, 941, 946, 950, nil, 943, nil, 24412, 990, 831, 18789, nil, nil, nil, 955, 18920, 19051, 19182, nil, 3584, nil, 3715, nil, nil, 3846, nil, 3977, nil, 4108, 19313, 19444, 19575, 299, 385, nil, 963, 986, 970, 1085, 985, nil, 977, 994, 1099, nil, nil, nil, 983, 232, nil, nil, nil, 1102, nil, 19706, 985, 1026, nil, nil, nil, nil, nil, nil, 1219, nil, 1350, nil, nil, 10837, nil, 1481, nil, nil, 1033, nil, nil, 691, 1345, 1000, 1120, nil, 19837, 1122, 19968, 20099, nil, nil, 45, 50, 1355, 229, nil, 1128, nil, nil, 1129, 1130, 1019, nil, nil, 558, nil, nil, 12844, nil, 13251, nil, 1612, nil, 20230, nil, nil, nil, nil, nil, nil, nil, 1033, 1018, nil, 4239, nil, 4377, 20361, 20492, 20623, 849, nil, 1040, nil, nil, 20754, nil, nil, nil, 20892, nil, nil, 72, 21023, nil, 1028, 1030, 1031, 1033, 1036, 1581, 1038, 1607, nil, 76, nil, 1156, 1157, 21154, 21285, nil, nil, 21416, nil, nil, 1077, nil, 1043, nil, 1045, 1046, 1047, 1048, nil, 1060, nil, 14444, nil, 4515, 419, nil, nil, nil, nil, nil, 21547, 80, 1423, 1133, 84, nil, nil, 2019, nil, nil, nil, 1988, 1064, 21678, nil, nil, nil, 527, 21809, 1182, nil, nil, 17623, nil, 2150, nil, 2281, nil, 2950, nil, nil, 21940, nil, 1226, 1187, 22071, 25474, 25533, 88, 1072, 1077, 743, nil, nil, nil, 1198, nil, 1084, 1085, 1086, 1096, 1214, nil, nil, 1132, 96, 110, 176, 211, nil, nil, nil, 3081, nil, nil, nil, nil, nil, 129, 1099, nil];

      racc_action_default = [-3, -590, -1, -578, -4, -6, -590, -590, -590, -590, -25, -590, -590, -590, -278, -590, -37, -40, -590, -590, -45, -47, -48, -49, -259, -259, -259, -293, -331, -332, -67, -10, -71, -79, -81, -590, -476, -590, -590, -590, -590, -590, -580, -237, -271, -272, -273, -274, -275, -276, -277, -568, -280, -284, -589, -558, -301, -589, -590, -590, -306, -309, -578, -590, -590, -323, -590, -333, -334, -419, -420, -421, -422, -423, -589, -426, -589, -589, -589, -589, -589, -453, -459, -460, -590, -465, -466, -467, -468, -469, -470, -471, -472, -473, -474, -475, -478, -479, -590, -2, -579, -585, -586, -587, -590, -590, -590, -590, -590, -3, -13, -590, -108, -109, -110, -111, -112, -113, -114, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -590, -18, -115, -10, -590, -590, -589, -589, -590, -590, -590, -590, -590, -590, -590, -43, -590, -476, -590, -278, -590, -590, -10, -590, -44, -227, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -590, -234, -388, -390, -590, -590, -590, -54, -589, -590, -300, -394, -402, -404, -62, -400, -63, -590, -64, -238, -254, -263, -263, -258, -590, -264, -590, -589, -560, -590, -590, -65, -66, -578, -11, -67, -10, -590, -590, -72, -75, -10, -476, -590, -590, -278, -293, -296, -580, -590, -331, -332, -335, -401, -590, -77, -590, -83, -288, -461, -462, -590, -212, -213, -228, -590, -581, -10, -282, -580, -239, -580, -582, -582, -590, -590, -582, -590, -302, -303, -590, -590, -352, -353, -360, -589, -520, -555, -555, -370, -589, -589, -387, -485, -486, -488, -489, -493, -494, -519, -521, -522, -523, -524, -525, -590, -542, -547, -548, -550, -551, -552, -590, -46, -590, -590, -590, -590, -578, -590, -579, -476, -590, -590, -278, -590, -527, -528, -104, -590, -106, -590, -278, -590, -320, -476, -590, -108, -109, -146, -147, -163, -168, -175, -178, -326, -590, -556, -590, -424, -590, -439, -590, -441, -590, -590, -590, -431, -590, -590, -437, -590, -452, -454, -455, -456, -457, -463, -464, 1036, -5, -588, -19, -20, -21, -22, -23, -590, -590, -15, -16, -17, -590, -590, -26, -35, -36, -590, -590, -27, -193, -590, -590, -569, -570, -259, -397, -571, -572, -569, -259, -570, -399, -574, -575, -259, -569, -570, -33, -201, -34, -590, -38, -39, -191, -264, -41, -42, -590, -590, -589, -589, -288, -590, -590, -590, -590, -299, -202, -203, -204, -205, -206, -207, -208, -209, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -229, -230, -231, -232, -590, -589, -259, -259, -259, -589, -55, -580, -249, -250, -263, -263, -260, -589, -589, -590, -295, -255, -590, -256, -590, -261, -590, -265, -590, -563, -565, -9, -579, -590, -68, -286, -84, -73, -590, -590, -589, -590, -590, -589, -590, -288, -590, -461, -462, -590, -80, -85, -590, -590, -590, -590, -590, -233, -590, -411, -590, -580, -590, -240, -241, -584, -583, -243, -584, -291, -292, -559, -349, -10, -10, -590, -351, -590, -372, -383, -590, -590, -368, -369, -590, -378, -380, -590, -385, -487, -492, -590, -520, -590, -529, -590, -531, -533, -540, -549, -553, -10, -336, -337, -338, -10, -590, -590, -590, -590, -10, -406, -589, -590, -590, -589, -288, -315, -104, -105, -590, -589, -590, -318, -480, -590, -590, -590, -324, -518, -328, -576, -577, -580, -425, -440, -443, -444, -446, -427, -442, -428, -429, -430, -590, -433, -435, -436, -590, -458, -7, -14, -116, -24, -270, -590, -289, -290, -590, -590, -58, -247, -248, -395, -590, -60, -398, -590, -56, -396, -590, -590, -569, -570, -569, -570, -590, -590, -191, -298, -590, -363, -580, -365, -10, -50, -391, -51, -392, -52, -393, -10, -245, -590, -251, -253, -10, -10, -294, -263, -262, -266, -590, -561, -562, -590, -12, -68, -590, -76, -82, -590, -569, -570, -589, -573, -287, -590, -590, -589, -78, -590, -200, -210, -211, -590, -589, -589, -281, -590, -285, -582, -244, -590, -590, -350, -361, -371, -589, -589, -362, -555, -495, -554, -589, -589, -543, -589, -590, -288, -526, -590, -590, -538, -590, -589, -339, -589, -307, -340, -341, -342, -310, -590, -313, -590, -590, -590, -569, -570, -573, -287, -590, -590, -104, -107, -573, -590, -10, -590, -482, -590, -10, -10, -518, -590, -491, -496, -555, -555, -501, -503, -503, -503, -517, -520, -545, -590, -590, -590, -10, -432, -434, -438, -268, -590, -590, -590, -30, -196, -31, -197, -59, -32, -198, -61, -199, -57, -192, -590, -590, -590, -290, -289, -235, -343, -590, -580, -590, -590, -246, -263, -590, -590, -257, -267, -564, -74, -289, -290, -86, -297, -589, -358, -10, -412, -589, -413, -414, -283, -242, -354, -355, -590, -381, -590, -384, -367, -590, -375, -590, -377, -386, -287, -530, -532, -536, -590, -541, -590, -356, -590, -590, -10, -10, -312, -314, -590, -289, -96, -590, -289, -590, -481, -321, -590, -590, -580, -484, -490, -590, -499, -500, -590, -510, -590, -513, -590, -515, -590, -329, -557, -445, -448, -449, -450, -451, -590, -269, -28, -194, -29, -195, -590, -590, -590, -590, -364, -590, -389, -53, -252, -403, -405, -8, -10, -418, -359, -590, -590, -416, -589, -589, -589, -589, -534, -590, -539, -590, -304, -590, -305, -590, -590, -590, -10, -316, -319, -10, -325, -327, -590, -497, -555, -502, -503, -503, -503, -503, -546, -503, -544, -518, -447, -236, -580, -345, -347, -348, -366, -417, -10, -476, -590, -590, -278, -415, -382, -590, -373, -376, -379, -590, -537, -10, -308, -311, -266, -589, -10, -590, -483, -498, -590, -506, -590, -508, -590, -511, -590, -514, -516, -10, -344, -590, -411, -589, -590, -590, -288, -589, -535, -589, -407, -408, -409, -590, -322, -503, -503, -503, -503, -590, -346, -410, -590, -569, -570, -573, -287, -374, -357, -317, -590, -504, -507, -509, -512, -330, -289, -503, -505];

      clist = ["13,390,5,265,265,265,603,115,115,256,260,554,504,327,720,408,310,544", "209,209,319,12,284,337,297,297,378,209,209,209,316,13,288,288,100,359", "360,458,103,363,863,431,517,440,445,450,777,576,577,455,730,300,12,209", "209,297,297,99,209,209,740,280,209,367,376,836,115,752,756,266,266,266", "110,195,395,595,599,788,613,2,115,417,418,419,420,118,118,587,859,953", "217,500,501,502,558,561,866,103,565,282,13,960,5,962,209,209,209,209", "13,13,421,5,663,629,14,820,364,1,862,639,415,12,918,697,267,267,267", "194,408,12,12,397,399,372,423,406,678,263,276,277,685,498,694,909,694", "14,290,290,690,691,505,686,321,573,392,320,323,324,580,582,370,617,680", "682,684,436,437,697,391,624,312,555,314,361,867,316,316,369,377,362", "868,767,983,772,621,726,942,953,422,1017,381,962,776,115,623,791,13", "209,209,209,209,956,449,959,209,209,209,209,325,566,738,248,499,511", "14,13,209,12,888,890,892,512,14,14,1007,760,840,922,394,265,265,931", "788,401,638,404,12,896,265,433,629,793,794,881,757,946,736,433,703,949", ",588,,209,209,,,,15,714,912,,209,252,259,261,,540,429,434,,,522,,859", "453,457,297,,256,,13,569,260,517,288,13,,556,15,557,545,337,297,697", "508,266,1025,,,977,288,12,531,266,440,445,12,,526,14,280,13,103,694", "694,280,,769,,945,371,,,,,745,1008,,14,740,730,525,12,297,,,,600,601", ",940,584,622,,,1005,,,527,509,267,732,,533,,796,322,15,267,739,209,209", "507,510,,15,15,740,,,,513,297,,663,,708,,996,713,376,988,990,992,994", ",995,,,,708,,209,,14,,,103,290,14,,,,787,,,,,,788,,,618,806,290,,602", "831,809,,283,811,115,,656,14,115,,,660,670,671,,,656,,,,,,316,316,,", "1028,1029,1030,1031,708,851,,,,15,,377,,708,,1018,,,456,449,209,209", "1035,828,,,876,,15,740,879,880,,,687,,,,,,656,656,656,645,,588,,646", "747,,377,458,885,886,430,705,118,844,712,,118,,460,,,316,,,316,,,,,", ",697,,545,,297,,13,,700,723,,,288,545,209,297,449,209,,15,,694,,288", "15,,,12,,,449,,209,,,848,850,,,787,,853,855,,856,841,297,13,13,,15,519", "761,521,734,766,523,524,,,,771,316,,,316,428,939,12,12,,316,,,,13,773", ",,13,828,792,,,13,283,209,,449,209,,,,693,449,209,12,,,209,12,209,,", "1009,12,,,,,,,821,926,,753,753,,965,,14,984,337,,,,290,588,,588,978", ",209,209,,774,725,290,209,,,,986,,209,,,,950,,951,283,,,,,283,,13,654", ",14,14,,659,13,,,377,662,13,13,545,656,297,1016,660,,656,12,,,288,,", "834,12,297,,14,,12,12,14,,288,,,14,,,,,802,804,,894,,,807,,,,,648,457", ",787,,679,681,683,449,,874,,,,971,973,974,975,,,,,,,,,,929,588,433,", ",,209,1012,,,,13,,,,13,13,,,,,,,15,825,,,,,,115,14,12,13,,,12,12,14", "209,209,871,,14,14,,,877,,878,,,,882,12,290,36,695,,322,,698,,,15,15", "1024,,290,,588,,588,,,,,13,,,,934,708,,,,,36,287,287,,,15,,,,15,,12", ",695,15,,322,209,,13,13,,,903,905,,,,,588,,,366,380,,380,,,14,735,12", "12,14,14,733,,,,,,,,,,741,,,,,900,14,753,780,,,,,297,,36,,13,,,456,967", ",36,36,,,,,,,997,,783,15,,,13,12,,13,15,785,,,,15,15,,798,14,,,,,727", "728,,12,,,12,,13,1019,,,,,,,,,,316,,13,,,14,14,13,,749,12,,,751,695", "322,,,759,,13,,829,12,209,830,449,,12,,,,,,,,,36,,,,12,,,208,,,839,", ",,,,,15,,36,14,15,15,,969,,,,,,,,,,,,,,,15,14,,313,14,,,,358,358,460", ",358,780,,,822,,,,,,,823,,,,14,826,827,883,,,737,,,737,,783,,14,,,,15", "14,36,785,,902,287,36,,,358,358,358,358,14,,,,,,,,287,,,,,,,15,15,315", ",36,328,,,784,,,,,,,,,,,,,,396,,398,398,402,405,398,,,,,,380,,,,,,,", ",925,,,780,,927,780,928,780,15,780,,,970,,,901,,,,,,,,,,,955,947,15", "380,783,15,783,,783,,,,,461,462,952,,954,,,,,322,471,,,,,15,218,,,,921", ",,,264,264,264,,15,,,,981,15,,780,307,308,309,,,,,,,,15,,,936,937,264", "264,,,,,,,,783,,,,315,315,780,,780,785,780,,780,,,,,,,,784,,,,,1004", ",,,,,783,,783,,783,,783,,,1013,964,1014,,1015,,780,,,,,,,,,,,,506,,", "982,,,,,,,,,,783,,,,36,,396,,,1034,287,,,,,,999,,,,,287,,,358,358,,", ",1006,,,,,1010,,,,,,,,,,,36,36,,,,,,380,,,737,627,,784,,784,,784,264", "435,264,264,,,,454,459,,36,,,,36,,,,,36,,,218,,473,474,475,476,477,478", "479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495", "496,497,,,,,,,,264,264,,,,,,,784,264,,,,,,,264,,264,,,264,264,,,,,,", ",,,,,,,,36,,784,,784,,784,36,784,,,,36,36,,,,,655,,551,,,,287,,,,655", ",,,,,,,,287,,,,,784,315,315,,,,,,,,,,,,,,,719,,,,,,,,,,,,,,,,,,675,655", "655,655,675,,,,,,,,675,675,,,,36,,,,36,36,,,,,,,,,,,,,315,,,315,36,", ",,,,,,,,358,,775,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,", "264,264,,454,672,435,,,,315,,,315,,36,36,,,315,,,,,,,,,,,,,,,674,,,", ",,,,,,,,,,,,,,264,,264,,264,,,,,,,,,,,36,,,264,966,,264,,,,,,,,,716", "717,718,,,36,,,36,,,,,264,,,264,,358,,,,,,,,,,,,655,36,,,,655,,,,,,", "837,842,36,,,,,36,,,,,,,,,,,264,,36,264,,,,,,264,,837,,837,,,,,,,,,", ",,,,,,,294,294,,,,,,294,294,294,,,,264,,,803,805,,,,,808,294,,810,358", ",672,812,,294,294,,,,,,,,,,,,,,,,,,,,264,264,,,,,,,264,,,264,,,,,920", ",,,924,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,,,", ",,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,264,904,906,,,,,,,,,,,,803,805", "808,,,,,,,,294,,294,294,294,294,294,294,294,294,294,294,294,294,294", "294,294,294,294,294,294,294,294,294,294,294,294,837,,,,,,,,,,,,,,,,", ",315,,,,,294,837,294,,,294,294,,,,,,,,,,294,,,,264,,,,,,,,,,,,294,,906", "904,958,,,,,294,264,,,,,,,,,,,,,,,,,,,,,,,264,,,,,,,,294,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,264,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,294,294,", ",,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,294,,294,,294,,,,,,,", ",,,,294,,,,,,,,,,,294,,,294,294,294,,,,,,,,,,,294,,,294,,,,,,,,,,,,294", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,294,,,,,,,,,,,,294,,,,294,,,,,,,,,,,,,,,,,,,,,,,294,294,,,,,,", "294,,,294,,,294,,,,,,,,,,,,,294,,,,,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,294,,,,,,,,", ",,,,,294,294,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,294,294,294,,,,,,294,,,,", ",,,294,,,,,,,,,,,,,,,294"];

      racc_goto_table = arr = Opal.get('Array').$new(2748, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a.$$p = (TMP_5 = function(str){var self = TMP_5.$$s || this, $e, $f, TMP_6;
if (str == null) str = nil;
      return ($e = ($f = str.$split(",", -1)).$each, $e.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this, $g;
if (i == null) i = nil;
        if ((($g = i['$empty?']()) !== nil && (!$g.$$is_boolean || $g == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $e).call($f)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);

      clist = ["21,48,7,30,30,30,81,49,49,61,61,8,35,111,10,48,52,44,21,21,22,20,42", "114,53,53,47,21,21,21,30,21,21,21,6,16,16,17,84,16,79,25,65,33,33,33", "85,117,117,25,113,43,20,21,21,53,53,4,21,21,155,39,21,21,21,11,49,80", "80,57,57,57,14,14,135,78,78,151,46,2,49,16,16,16,16,51,51,156,157,159", "19,33,33,33,58,58,11,84,58,40,21,107,7,108,21,21,21,21,21,21,7,7,64", "139,23,105,4,1,158,139,5,20,12,162,59,59,59,15,48,20,20,136,136,18,28", "136,36,38,38,38,36,54,60,55,60,23,23,23,36,36,62,63,59,119,73,74,75", "77,119,119,82,83,64,64,64,22,22,162,86,87,88,89,90,91,92,30,30,23,23", "93,94,95,96,97,98,60,99,159,2,107,100,108,101,49,102,103,21,21,21,21", "21,104,49,106,21,21,21,21,109,110,112,122,123,125,23,21,21,20,152,152", "152,126,23,23,127,128,129,130,134,30,30,158,151,137,138,140,20,141,30", "57,139,142,143,145,81,148,149,57,44,153,,154,,21,21,,,,24,44,105,,21", "34,34,34,,52,19,19,,,135,,157,19,19,53,,61,,21,111,61,65,21,21,,52,24", "52,42,114,53,162,57,57,79,,,158,21,20,43,57,33,33,20,,6,23,39,21,84", "60,60,39,,46,,105,24,,,,,156,11,,23,155,113,4,20,53,,,,16,16,,80,21", "47,,,158,,,40,59,59,121,,40,,139,26,24,59,121,21,21,38,38,,24,24,155", ",,,38,53,,64,,33,,85,33,21,152,152,152,152,,152,,,,33,,21,,23,,,84,23", "23,,,,121,,,,,,151,,,84,35,23,,4,44,35,,9,35,49,,61,23,49,,,61,22,22", ",,61,,,,,,30,30,,,152,152,152,152,33,117,,,,24,,23,,33,,10,,,24,49,21", "21,152,65,,,8,,24,155,8,8,,,52,,,,,,61,61,61,14,,154,,14,154,,23,17", "117,117,26,22,51,58,22,,51,,26,,,30,,,30,,,,,,,162,,42,,53,,21,,7,52", ",,21,42,21,53,49,21,,24,,60,,21,24,,,20,,,49,,21,,,119,119,,,121,,119", "119,,119,25,53,21,21,,24,26,22,26,21,22,26,26,,,,22,30,,,30,9,78,20", "20,,30,,,,21,16,,,21,65,52,,,21,9,21,,49,21,,,,59,49,21,20,,,21,20,21", ",,81,20,,,,,,,111,121,,84,84,,78,,23,8,114,,,,23,154,,154,78,,21,21", ",84,59,23,21,,,,117,,21,,,,121,,121,9,,,,,9,,21,34,,23,23,,34,21,,,23", "34,21,21,42,61,53,8,61,,61,20,,,21,,,42,20,53,,23,,20,20,23,,21,,,23", ",,,,19,19,,48,,,19,,,,,26,19,,121,,34,34,34,49,,16,,,,119,119,119,119", ",,,,,,,,,154,154,57,,,,21,121,,,,21,,,,21,21,,,,,,,24,59,,,,,,49,23", "20,21,,,20,20,23,21,21,57,,23,23,,,84,,84,,,,84,20,23,45,26,,26,,26", ",,24,24,119,,23,,154,,154,,,,,21,,,,16,33,,,,,45,45,45,,,24,,,,24,,20", ",26,24,,26,21,,21,21,,,19,19,,,,,154,,,45,45,,45,,,23,116,20,20,23,23", "120,,,,,,,,,,120,,,,,23,23,84,147,,,,,53,,45,,21,,,24,21,,45,45,,,,", ",,52,,116,24,,,21,20,,21,24,120,,,,24,24,,26,23,,,,,9,9,,20,,,20,,21", "22,,,,,,,,,,30,,21,,,23,23,21,,9,20,,,9,26,26,,,9,,21,,26,20,21,26,49", ",20,,,,,,,,,45,,,,20,,,27,,,26,,,,,,,24,,45,23,24,24,,23,,,,,,,,,,,", ",,,24,23,,27,23,,,,27,27,26,,27,147,,,9,,,,,,,9,,,,23,9,9,26,,,118,", ",118,,116,,23,,,,24,23,45,120,,26,45,45,,,27,27,27,27,23,,,,,,,,45,", ",,,,,24,24,56,,45,56,,,118,,,,,,,,,,,,,,56,,56,56,56,56,56,,,,,,45,", ",,,,,,,120,,,147,,120,147,120,147,24,147,,,24,,,9,,,,,,,,,,,26,116,24", "45,116,24,116,,116,,,,,27,27,120,,120,,,,,26,27,,,,,24,29,,,,9,,,,29", "29,29,,24,,,,26,24,,147,29,29,29,,,,,,,,24,,,9,9,29,29,,,,,,,,116,,", ",56,56,147,,147,120,147,,147,,,,,,,,118,,,,,120,,,,,,116,,116,,116,", "116,,,120,9,120,,120,,147,,,,,,,,,,,,56,,,9,,,,,,,,,,116,,,,45,,56,", ",120,45,,,,,,9,,,,,45,,,27,27,,,,9,,,,,9,,,,,,,,,,,45,45,,,,,,45,,,118", "27,,118,,118,,118,29,29,29,29,,,,29,29,,45,,,,45,,,,,45,,,29,,29,29", "29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29", ",,,,,,,29,29,,,,,,,118,29,,,,,,,29,,29,,,29,29,,,,,,,,,,,,,,,45,,118", ",118,,118,45,118,,,,45,45,,,,,56,,29,,,,45,,,,56,,,,,,,,,45,,,,,118", "56,56,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,56,56,56,56,56,,,,,,,,56,56", ",,,45,,,,45,45,,,,,,,,,,,,,56,,,56,45,,,,,,,,,,27,,27,,,,,,,,,,,,,,29", ",,,,,,,,,,,,,,,,,45,,,,,,,,,,,,,,,29,29,,29,29,29,,,,56,,,56,,45,45", ",,56,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,29,,29,,29,,,,,,,,,,,45,,,29", "45,,29,,,,,,,,,29,29,29,,,45,,,45,,,,,29,,,29,,27,,,,,,,,,,,,56,45,", ",,56,,,,,,,56,56,45,,,,,45,,,,,,,,,,,29,,45,29,,,,,,29,,56,,56,,,,,", ",,,,,,,,,,,37,37,,,,,,37,37,37,,,,29,,,29,29,,,,,29,37,,29,27,,29,29", ",37,37,,,,,,,,,,,,,,,,,,,,29,29,,,,,,,29,,,29,,,,,56,,,,56,,,,,,,,,", ",,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,29", ",,,,,,,,,,,,,,,,,,29,29,29,,,,,,,,,,,,29,29,29,,,,,,,,37,,37,37,37,37", "37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,56,,", ",,,,,,,,,,,,,,,56,,,,,37,56,37,,,37,37,,,,,,,,,,37,,,,29,,,,,,,,,,,", "37,,29,29,29,,,,,37,29,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,37,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,37,,,,,,", ",,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,37,,37,,37,,,,,,,,,,,,37,,", ",,,,,,,,37,,,37,37,37,,,,,,,,,,,37,,,37,,,,,,,,,,,,37,,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,", ",,,,,,37,,,,37,,,,,,,,,,,,,,,,,,,,,,,37,37,,,,,,,37,,,37,,,37,,,,,,", ",,,,,,37,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,", ",,,,,,,,,37,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,37,37,37,,,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,", ",,,,,,,,,,,,37,37,37,,,,,,37,,,,,,,,37,,,,,,,,,,,,,,,37"];

      racc_goto_check = arr = Opal.get('Array').$new(2748, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a.$$p = (TMP_7 = function(str){var self = TMP_7.$$s || this, $f, $g, TMP_8;
if (str == null) str = nil;
      return ($f = ($g = str.$split(",", -1)).$each, $f.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this, $h;
if (i == null) i = nil;
        if ((($h = i['$empty?']()) !== nil && (!$h.$$is_boolean || $h == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $f).call($g)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 117, 79, nil, 54, 20, 31, 2, -301, 390, -539, -655, -714, nil, 65, 119, -23, -168, 70, 71, 21, 0, -34, 114, 258, -156, 302, 1002, 24, 1205, -24, nil, nil, -158, 239, -240, -363, 1809, 110, 30, 68, nil, -10, 18, -284, 817, -296, -38, -65, 0, nil, 78, -26, -8, -105, -675, 1073, 42, -223, 97, -374, -15, -103, -354, -338, -225, nil, nil, nil, nil, nil, nil, nil, 88, 100, 100, nil, 100, -284, -709, -533, -358, 97, -217, 35, -577, 102, -222, 118, -142, 119, 113, -578, 118, -576, -430, -758, -434, -195, -692, 125, -430, -196, -429, -693, -561, -707, -809, -807, 151, -116, -44, -369, -521, -34, nil, 312, -285, 510, -177, 321, -219, 190, -35, nil, -44, -37, -758, -380, -495, -613, nil, nil, nil, 156, 0, 55, 155, -167, -282, 156, -556, -390, -390, nil, -535, nil, 287, -639, -329, nil, -546, -567, -638, -99, -519, -263, -658, -630, -800, nil, nil, -395];

      racc_goto_default = [nil, nil, nil, 3, nil, 4, 365, 279, nil, 553, nil, 864, nil, 278, nil, nil, nil, 10, 11, 17, 214, 306, nil, 212, 213, nil, 270, 16, nil, 20, 21, 22, 23, 711, nil, nil, nil, 24, nil, 30, nil, 32, 35, 34, nil, 210, 375, nil, 117, 443, 116, 70, 819, 43, nil, nil, 572, 317, nil, 318, 268, 441, nil, nil, 657, 515, 254, 44, 45, 46, 47, 48, 49, 50, nil, 255, 56, nil, nil, nil, nil, nil, nil, nil, 596, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 344, nil, nil, nil, 330, 329, 731, 332, 333, nil, 334, nil, 335, 336, nil, nil, 447, nil, nil, nil, nil, nil, nil, 69, 71, 72, 73, nil, nil, nil, nil, 634, nil, nil, nil, nil, 407, 779, 340, 342, 781, 343, 782, 948, nil, 786, 349, 351, nil, 590, 591, 790, 354, 357, 273];

      racc_reduce_table = [0, 0, "racc_error", 1, 141, "_reduce_none", 2, 142, "_reduce_2", 0, 143, "_reduce_3", 1, 143, "_reduce_4", 3, 143, "_reduce_5", 1, 145, "_reduce_none", 4, 145, "_reduce_7", 4, 148, "_reduce_8", 2, 149, "_reduce_9", 0, 153, "_reduce_10", 1, 153, "_reduce_11", 3, 153, "_reduce_12", 0, 168, "_reduce_13", 4, 147, "_reduce_14", 3, 147, "_reduce_15", 3, 147, "_reduce_none", 3, 147, "_reduce_17", 2, 147, "_reduce_18", 3, 147, "_reduce_19", 3, 147, "_reduce_20", 3, 147, "_reduce_21", 3, 147, "_reduce_22", 3, 147, "_reduce_23", 4, 147, "_reduce_none", 1, 147, "_reduce_none", 3, 147, "_reduce_26", 3, 147, "_reduce_27", 6, 147, "_reduce_none", 6, 147, "_reduce_none", 5, 147, "_reduce_30", 5, 147, "_reduce_none", 5, 147, "_reduce_none", 3, 147, "_reduce_none", 3, 147, "_reduce_34", 3, 147, "_reduce_35", 3, 147, "_reduce_36", 1, 147, "_reduce_none", 3, 157, "_reduce_38", 3, 157, "_reduce_39", 1, 167, "_reduce_none", 3, 167, "_reduce_41", 3, 167, "_reduce_42", 2, 167, "_reduce_43", 2, 167, "_reduce_44", 1, 167, "_reduce_none", 1, 156, "_reduce_none", 1, 159, "_reduce_none", 1, 159, "_reduce_none", 1, 171, "_reduce_none", 4, 171, "_reduce_none", 4, 171, "_reduce_none", 4, 171, "_reduce_none", 4, 175, "_reduce_53", 2, 170, "_reduce_54", 3, 170, "_reduce_55", 4, 170, "_reduce_56", 5, 170, "_reduce_57", 4, 170, "_reduce_58", 5, 170, "_reduce_59", 4, 170, "_reduce_60", 5, 170, "_reduce_61", 2, 170, "_reduce_62", 2, 170, "_reduce_63", 2, 170, "_reduce_64", 2, 170, "_reduce_65", 2, 170, "_reduce_66", 1, 158, "_reduce_67", 3, 158, "_reduce_68", 1, 180, "_reduce_69", 3, 180, "_reduce_70", 1, 179, "_reduce_71", 2, 179, "_reduce_72", 3, 179, "_reduce_73", 5, 179, "_reduce_74", 2, 179, "_reduce_75", 4, 179, "_reduce_76", 2, 179, "_reduce_77", 4, 179, "_reduce_78", 1, 179, "_reduce_79", 3, 179, "_reduce_80", 1, 182, "_reduce_81", 3, 182, "_reduce_82", 2, 181, "_reduce_83", 3, 181, "_reduce_84", 1, 184, "_reduce_85", 3, 184, "_reduce_86", 1, 183, "_reduce_87", 4, 183, "_reduce_88", 3, 183, "_reduce_89", 3, 183, "_reduce_none", 3, 183, "_reduce_none", 3, 183, "_reduce_none", 2, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 164, "_reduce_95", 4, 164, "_reduce_96", 4, 164, "_reduce_97", 3, 164, "_reduce_98", 3, 164, "_reduce_99", 3, 164, "_reduce_100", 3, 164, "_reduce_101", 2, 164, "_reduce_102", 1, 164, "_reduce_none", 1, 186, "_reduce_none", 2, 187, "_reduce_105", 1, 187, "_reduce_106", 3, 187, "_reduce_107", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_111", 1, 188, "_reduce_112", 1, 154, "_reduce_113", 1, 154, "_reduce_none", 1, 155, "_reduce_115", 3, 155, "_reduce_116", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 1, 190, "_reduce_none", 3, 169, "_reduce_191", 5, 169, "_reduce_192", 3, 169, "_reduce_193", 6, 169, "_reduce_194", 6, 169, "_reduce_195", 5, 169, "_reduce_196", 5, 169, "_reduce_none", 5, 169, "_reduce_none", 5, 169, "_reduce_none", 4, 169, "_reduce_none", 3, 169, "_reduce_none", 3, 169, "_reduce_202", 3, 169, "_reduce_203", 3, 169, "_reduce_204", 3, 169, "_reduce_205", 3, 169, "_reduce_206", 3, 169, "_reduce_207", 3, 169, "_reduce_208", 3, 169, "_reduce_209", 4, 169, "_reduce_210", 4, 169, "_reduce_211", 2, 169, "_reduce_212", 2, 169, "_reduce_213", 3, 169, "_reduce_214", 3, 169, "_reduce_215", 3, 169, "_reduce_216", 3, 169, "_reduce_217", 3, 169, "_reduce_218", 3, 169, "_reduce_219", 3, 169, "_reduce_220", 3, 169, "_reduce_221", 3, 169, "_reduce_222", 3, 169, "_reduce_223", 3, 169, "_reduce_224", 3, 169, "_reduce_225", 3, 169, "_reduce_226", 2, 169, "_reduce_227", 2, 169, "_reduce_228", 3, 169, "_reduce_229", 3, 169, "_reduce_230", 3, 169, "_reduce_231", 3, 169, "_reduce_232", 3, 169, "_reduce_233", 0, 194, "_reduce_234", 0, 195, "_reduce_235", 7, 169, "_reduce_236", 1, 169, "_reduce_none", 1, 166, "_reduce_none", 1, 162, "_reduce_239", 2, 162, "_reduce_240", 2, 162, "_reduce_241", 4, 162, "_reduce_242", 2, 162, "_reduce_243", 3, 162, "_reduce_244", 3, 201, "_reduce_245", 2, 203, "_reduce_none", 1, 204, "_reduce_247", 1, 204, "_reduce_none", 1, 202, "_reduce_249", 1, 202, "_reduce_none", 2, 202, "_reduce_251", 4, 202, "_reduce_252", 2, 202, "_reduce_253", 1, 178, "_reduce_254", 2, 178, "_reduce_255", 2, 178, "_reduce_256", 4, 178, "_reduce_257", 1, 178, "_reduce_258", 0, 206, "_reduce_259", 2, 174, "_reduce_260", 2, 200, "_reduce_261", 2, 205, "_reduce_262", 0, 205, "_reduce_263", 1, 197, "_reduce_264", 2, 197, "_reduce_265", 3, 197, "_reduce_266", 4, 197, "_reduce_267", 3, 165, "_reduce_268", 4, 165, "_reduce_269", 2, 165, "_reduce_270", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 1, 193, "_reduce_none", 0, 228, "_reduce_280", 4, 193, "_reduce_281", 0, 229, "_reduce_282", 5, 193, "_reduce_283", 0, 230, "_reduce_284", 4, 193, "_reduce_285", 3, 193, "_reduce_286", 3, 193, "_reduce_287", 2, 193, "_reduce_288", 4, 193, "_reduce_289", 4, 193, "_reduce_290", 3, 193, "_reduce_291", 3, 193, "_reduce_292", 1, 193, "_reduce_293", 4, 193, "_reduce_294", 3, 193, "_reduce_295", 1, 193, "_reduce_296", 5, 193, "_reduce_297", 4, 193, "_reduce_298", 3, 193, "_reduce_299", 2, 193, "_reduce_300", 1, 193, "_reduce_none", 2, 193, "_reduce_302", 2, 193, "_reduce_303", 6, 193, "_reduce_304", 6, 193, "_reduce_305", 0, 231, "_reduce_306", 0, 232, "_reduce_307", 7, 193, "_reduce_308", 0, 233, "_reduce_309", 0, 234, "_reduce_310", 7, 193, "_reduce_311", 5, 193, "_reduce_312", 4, 193, "_reduce_313", 5, 193, "_reduce_314", 0, 235, "_reduce_315", 0, 236, "_reduce_316", 9, 193, "_reduce_317", 0, 237, "_reduce_318", 6, 193, "_reduce_319", 0, 238, "_reduce_320", 0, 239, "_reduce_321", 8, 193, "_reduce_322", 0, 240, "_reduce_323", 0, 241, "_reduce_324", 6, 193, "_reduce_325", 0, 242, "_reduce_326", 6, 193, "_reduce_327", 0, 243, "_reduce_328", 0, 244, "_reduce_329", 9, 193, "_reduce_330", 1, 193, "_reduce_331", 1, 193, "_reduce_332", 1, 193, "_reduce_333", 1, 193, "_reduce_none", 1, 161, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 2, 218, "_reduce_none", 1, 220, "_reduce_none", 1, 220, "_reduce_none", 1, 220, "_reduce_none", 1, 245, "_reduce_343", 4, 245, "_reduce_344", 1, 246, "_reduce_345", 3, 246, "_reduce_346", 1, 247, "_reduce_347", 1, 247, "_reduce_none", 2, 217, "_reduce_349", 3, 249, "_reduce_350", 2, 249, "_reduce_351", 1, 249, "_reduce_352", 1, 249, "_reduce_none", 3, 250, "_reduce_354", 3, 250, "_reduce_355", 1, 219, "_reduce_356", 5, 219, "_reduce_357", 1, 151, "_reduce_none", 2, 151, "_reduce_359", 1, 252, "_reduce_360", 3, 252, "_reduce_361", 3, 253, "_reduce_362", 1, 176, "_reduce_none", 3, 176, "_reduce_364", 1, 176, "_reduce_365", 4, 176, "_reduce_366", 4, 254, "_reduce_367", 2, 254, "_reduce_368", 2, 254, "_reduce_369", 1, 254, "_reduce_370", 2, 259, "_reduce_371", 1, 259, "_reduce_372", 6, 251, "_reduce_373", 8, 251, "_reduce_374", 4, 251, "_reduce_375", 6, 251, "_reduce_376", 4, 251, "_reduce_377", 2, 251, "_reduce_378", 6, 251, "_reduce_379", 2, 251, "_reduce_380", 4, 251, "_reduce_381", 6, 251, "_reduce_382", 2, 251, "_reduce_383", 4, 251, "_reduce_384", 2, 251, "_reduce_385", 4, 251, "_reduce_386", 1, 251, "_reduce_387", 0, 263, "_reduce_388", 5, 262, "_reduce_389", 2, 172, "_reduce_390", 4, 172, "_reduce_none", 4, 172, "_reduce_none", 4, 172, "_reduce_none", 2, 216, "_reduce_394", 4, 216, "_reduce_395", 4, 216, "_reduce_396", 3, 216, "_reduce_397", 4, 216, "_reduce_398", 3, 216, "_reduce_399", 2, 216, "_reduce_400", 1, 216, "_reduce_401", 0, 265, "_reduce_402", 5, 215, "_reduce_403", 0, 266, "_reduce_404", 5, 215, "_reduce_405", 0, 268, "_reduce_406", 6, 221, "_reduce_407", 1, 267, "_reduce_408", 1, 267, "_reduce_none", 6, 150, "_reduce_410", 0, 150, "_reduce_411", 1, 269, "_reduce_412", 1, 269, "_reduce_none", 1, 269, "_reduce_none", 2, 270, "_reduce_415", 1, 270, "_reduce_416", 2, 152, "_reduce_417", 1, 152, "_reduce_none", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 207, "_reduce_none", 1, 208, "_reduce_422", 1, 273, "_reduce_none", 2, 273, "_reduce_424", 3, 274, "_reduce_425", 1, 274, "_reduce_426", 3, 209, "_reduce_427", 3, 210, "_reduce_428", 3, 211, "_reduce_429", 3, 211, "_reduce_430", 1, 277, "_reduce_431", 3, 277, "_reduce_432", 1, 278, "_reduce_433", 2, 278, "_reduce_434", 3, 212, "_reduce_435", 3, 212, "_reduce_436", 1, 280, "_reduce_437", 3, 280, "_reduce_438", 1, 275, "_reduce_439", 2, 275, "_reduce_440", 1, 276, "_reduce_441", 2, 276, "_reduce_442", 1, 279, "_reduce_443", 0, 282, "_reduce_444", 3, 279, "_reduce_445", 0, 283, "_reduce_446", 4, 279, "_reduce_447", 1, 281, "_reduce_448", 1, 281, "_reduce_449", 1, 281, "_reduce_450", 1, 281, "_reduce_none", 2, 191, "_reduce_452", 1, 191, "_reduce_453", 1, 284, "_reduce_none", 1, 284, "_reduce_none", 1, 284, "_reduce_none", 1, 284, "_reduce_none", 3, 272, "_reduce_458", 1, 271, "_reduce_459", 1, 271, "_reduce_460", 2, 271, "_reduce_461", 2, 271, "_reduce_462", 2, 271, "_reduce_463", 2, 271, "_reduce_464", 1, 185, "_reduce_465", 1, 185, "_reduce_466", 1, 185, "_reduce_467", 1, 185, "_reduce_468", 1, 185, "_reduce_469", 1, 185, "_reduce_470", 1, 185, "_reduce_471", 1, 185, "_reduce_472", 1, 185, "_reduce_473", 1, 185, "_reduce_474", 1, 185, "_reduce_475", 1, 213, "_reduce_476", 1, 160, "_reduce_477", 1, 163, "_reduce_478", 1, 163, "_reduce_none", 1, 223, "_reduce_480", 3, 223, "_reduce_481", 2, 223, "_reduce_482", 4, 225, "_reduce_483", 2, 225, "_reduce_484", 1, 286, "_reduce_none", 1, 286, "_reduce_none", 2, 256, "_reduce_487", 1, 256, "_reduce_488", 1, 287, "_reduce_489", 2, 288, "_reduce_490", 1, 288, "_reduce_491", 2, 289, "_reduce_492", 1, 289, "_reduce_493", 1, 255, "_reduce_494", 3, 255, "_reduce_495", 1, 290, "_reduce_496", 3, 290, "_reduce_497", 4, 291, "_reduce_498", 2, 291, "_reduce_499", 2, 291, "_reduce_500", 1, 291, "_reduce_501", 2, 292, "_reduce_502", 0, 292, "_reduce_503", 6, 285, "_reduce_504", 8, 285, "_reduce_505", 4, 285, "_reduce_506", 6, 285, "_reduce_507", 4, 285, "_reduce_508", 6, 285, "_reduce_509", 2, 285, "_reduce_510", 4, 285, "_reduce_511", 6, 285, "_reduce_512", 2, 285, "_reduce_513", 4, 285, "_reduce_514", 2, 285, "_reduce_515", 4, 285, "_reduce_516", 1, 285, "_reduce_517", 0, 285, "_reduce_518", 1, 294, "_reduce_none", 1, 294, "_reduce_520", 1, 248, "_reduce_521", 1, 248, "_reduce_522", 1, 248, "_reduce_523", 1, 248, "_reduce_524", 1, 295, "_reduce_525", 3, 295, "_reduce_526", 1, 222, "_reduce_none", 1, 222, "_reduce_none", 1, 297, "_reduce_529", 3, 297, "_reduce_530", 1, 298, "_reduce_531", 3, 298, "_reduce_532", 1, 296, "_reduce_none", 4, 296, "_reduce_534", 6, 296, "_reduce_535", 3, 296, "_reduce_536", 5, 296, "_reduce_537", 2, 296, "_reduce_538", 4, 296, "_reduce_539", 1, 296, "_reduce_540", 3, 296, "_reduce_541", 1, 260, "_reduce_542", 3, 260, "_reduce_543", 3, 299, "_reduce_544", 1, 293, "_reduce_545", 3, 293, "_reduce_546", 1, 300, "_reduce_none", 1, 300, "_reduce_none", 2, 261, "_reduce_549", 1, 261, "_reduce_550", 1, 301, "_reduce_none", 1, 301, "_reduce_none", 2, 258, "_reduce_553", 2, 257, "_reduce_554", 0, 257, "_reduce_555", 1, 226, "_reduce_556", 4, 226, "_reduce_557", 0, 214, "_reduce_558", 2, 214, "_reduce_559", 1, 199, "_reduce_560", 3, 199, "_reduce_561", 3, 302, "_reduce_562", 2, 302, "_reduce_563", 4, 302, "_reduce_564", 2, 302, "_reduce_565", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 264, "_reduce_none", 1, 264, "_reduce_none", 1, 264, "_reduce_none", 1, 227, "_reduce_none", 1, 227, "_reduce_none", 0, 144, "_reduce_none", 1, 144, "_reduce_none", 0, 192, "_reduce_none", 1, 192, "_reduce_none", 0, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 198, "_reduce_none", 1, 224, "_reduce_none", 1, 224, "_reduce_none", 1, 146, "_reduce_none", 2, 146, "_reduce_none", 0, 196, "_reduce_589"];

      racc_reduce_n = 590;

      racc_shift_n = 1036;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "tIDENTIFIER", 50, "tFID", 51, "tGVAR", 52, "tIVAR", 53, "tCONSTANT", 54, "tLABEL", 55, "tCVAR", 56, "tNTH_REF", 57, "tBACK_REF", 58, "tSTRING_CONTENT", 59, "tINTEGER", 60, "tFLOAT", 61, "tREGEXP_END", 62, "tUPLUS", 63, "tUMINUS", 64, "tPOW", 65, "tCMP", 66, "tEQ", 67, "tEQQ", 68, "tNEQ", 69, "tGEQ", 70, "tLEQ", 71, "tANDOP", 72, "tOROP", 73, "tMATCH", 74, "tNMATCH", 75, "tJSDOT", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tRBRACK", 92, "tLBRACE", 93, "tLBRACE_ARG", 94, "tSTAR", 95, "tSTAR2", 96, "tAMPER", 97, "tAMPER2", 98, "tTILDE", 99, "tPERCENT", 100, "tDIVIDE", 101, "tPLUS", 102, "tMINUS", 103, "tLT", 104, "tGT", 105, "tPIPE", 106, "tBANG", 107, "tCARET", 108, "tLCURLY", 109, "tRCURLY", 110, "tBACK_REF2", 111, "tSYMBEG", 112, "tSTRING_BEG", 113, "tXSTRING_BEG", 114, "tREGEXP_BEG", 115, "tWORDS_BEG", 116, "tAWORDS_BEG", 117, "tSTRING_DBEG", 118, "tSTRING_DVAR", 119, "tSTRING_END", 120, "tSTRING", 121, "tSYMBOL", 122, "tNL", 123, "tEH", 124, "tCOLON", 125, "tCOMMA", 126, "tSPACE", 127, "tSEMI", 128, "tLAMBDA", 129, "tLAMBEG", 130, "tLBRACK2", 131, "tLBRACK", 132, "tJSLBRACK", 133, "tDSTAR", 134, "tLABEL_END", 135, "tEQL", 136, "tLOWEST", 137, "-@NUM", 138, "+@NUM", 139);

      racc_nt_base = 140;

      racc_use_result_var = true;

      Opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      Opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tJSDOT", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tWORDS_BEG", "tAWORDS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tLBRACK2", "tLBRACK", "tJSLBRACK", "tDSTAR", "tLABEL_END", "tEQL", "tLOWEST", "\"-@NUM\"", "\"+@NUM\"", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "fitem", "undef_list", "expr_value", "command_asgn", "mlhs", "command_call", "var_lhs", "primary_value", "aref_args", "backref", "lhs", "mrhs", "arg_value", "expr", "@1", "arg", "command", "block_command", "block_call", "operation2", "command_args", "cmd_brace_block", "opt_block_var", "operation", "call_args", "mlhs_basic", "mlhs_entry", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "variable", "cname", "cpath", "fname", "op", "reswords", "symbol", "opt_nl", "primary", "@2", "@3", "none", "args", "trailer", "assocs", "block_arg", "paren_args", "opt_call_args", "rparen", "opt_paren_args", "opt_block_arg", "@4", "literal", "strings", "xstring", "regexp", "words", "awords", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "dot_or_colon", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", "@20", "@21", "opt_bv_decl", "bv_decls", "bvar", "f_bad_arg", "f_larglist", "lambda_body", "block_param", "f_block_optarg", "f_block_opt", "block_args_tail", "f_block_kwarg", "f_kwrest", "opt_f_block_arg", "f_block_arg", "opt_block_args_tail", "f_arg", "f_rest_arg", "do_block", "@22", "operation3", "@23", "@24", "cases", "@25", "exc_list", "exc_var", "numeric", "dsym", "string", "string1", "string_contents", "xstring_contents", "word_list", "word", "string_content", "qword_list", "string_dvar", "@26", "@27", "sym", "f_args", "kwrest_mark", "f_label", "f_kw", "f_block_kw", "f_kwarg", "args_tail", "opt_args_tail", "f_optarg", "f_norm_arg", "f_arg_item", "f_margs", "f_marg", "f_marg_list", "f_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      Opal.cdecl($scope, 'Racc_debug_parser', false);

      Opal.defn(self, '$_reduce_2', TMP_9 = function ː_reduce_2(val, _values, result) {
        var self = this;

        result = self.$new_compstmt(val['$[]'](0));
        return result;
      }, TMP_9.$$arity = 3);

      Opal.defn(self, '$_reduce_3', TMP_10 = function ː_reduce_3(val, _values, result) {
        var self = this;

        result = self.$new_block();
        return result;
      }, TMP_10.$$arity = 3);

      Opal.defn(self, '$_reduce_4', TMP_11 = function ː_reduce_4(val, _values, result) {
        var self = this;

        result = self.$new_block(val['$[]'](0));
        return result;
      }, TMP_11.$$arity = 3);

      Opal.defn(self, '$_reduce_5', TMP_12 = function ː_reduce_5(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      }, TMP_12.$$arity = 3);

      Opal.defn(self, '$_reduce_7', TMP_13 = function ː_reduce_7(val, _values, result) {
        var self = this;

        result = val['$[]'](2);
        return result;
      }, TMP_13.$$arity = 3);

      Opal.defn(self, '$_reduce_8', TMP_14 = function ː_reduce_8(val, _values, result) {
        var self = this;

        result = self.$new_body(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_14.$$arity = 3);

      Opal.defn(self, '$_reduce_9', TMP_15 = function ː_reduce_9(val, _values, result) {
        var self = this;

        result = self.$new_compstmt(val['$[]'](0));
        return result;
      }, TMP_15.$$arity = 3);

      Opal.defn(self, '$_reduce_10', TMP_16 = function ː_reduce_10(val, _values, result) {
        var self = this;

        result = self.$new_block();
        return result;
      }, TMP_16.$$arity = 3);

      Opal.defn(self, '$_reduce_11', TMP_17 = function ː_reduce_11(val, _values, result) {
        var self = this;

        result = self.$new_block(val['$[]'](0));
        return result;
      }, TMP_17.$$arity = 3);

      Opal.defn(self, '$_reduce_12', TMP_18 = function ː_reduce_12(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      }, TMP_18.$$arity = 3);

      Opal.defn(self, '$_reduce_13', TMP_19 = function ː_reduce_13(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_fname"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_19.$$arity = 3);

      Opal.defn(self, '$_reduce_14', TMP_20 = function ː_reduce_14(val, _values, result) {
        var self = this;

        result = self.$new_alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      }, TMP_20.$$arity = 3);

      Opal.defn(self, '$_reduce_15', TMP_21 = function ː_reduce_15(val, _values, result) {
        var self = this;

        result = self.$s("valias", self.$value(val['$[]'](1)).$to_sym(), self.$value(val['$[]'](2)).$to_sym());
        return result;
      }, TMP_21.$$arity = 3);

      Opal.defn(self, '$_reduce_17', TMP_22 = function ː_reduce_17(val, _values, result) {
        var self = this;

        result = self.$s("valias", self.$value(val['$[]'](1)).$to_sym(), self.$value(val['$[]'](2)).$to_sym());
        return result;
      }, TMP_22.$$arity = 3);

      Opal.defn(self, '$_reduce_18', TMP_23 = function ː_reduce_18(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_23.$$arity = 3);

      Opal.defn(self, '$_reduce_19', TMP_24 = function ː_reduce_19(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](2), val['$[]'](0), nil);
        return result;
      }, TMP_24.$$arity = 3);

      Opal.defn(self, '$_reduce_20', TMP_25 = function ː_reduce_20(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](2), nil, val['$[]'](0));
        return result;
      }, TMP_25.$$arity = 3);

      Opal.defn(self, '$_reduce_21', TMP_26 = function ː_reduce_21(val, _values, result) {
        var self = this;

        result = self.$new_while(val['$[]'](1), val['$[]'](2), val['$[]'](0));
        return result;
      }, TMP_26.$$arity = 3);

      Opal.defn(self, '$_reduce_22', TMP_27 = function ː_reduce_22(val, _values, result) {
        var self = this;

        result = self.$new_until(val['$[]'](1), val['$[]'](2), val['$[]'](0));
        return result;
      }, TMP_27.$$arity = 3);

      Opal.defn(self, '$_reduce_23', TMP_28 = function ː_reduce_23(val, _values, result) {
        var self = this;

        result = self.$new_rescue_mod(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_28.$$arity = 3);

      Opal.defn(self, '$_reduce_26', TMP_29 = function ː_reduce_26(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), self.$s("to_ary", val['$[]'](2)));
        return result;
      }, TMP_29.$$arity = 3);

      Opal.defn(self, '$_reduce_27', TMP_30 = function ː_reduce_27(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_30.$$arity = 3);

      Opal.defn(self, '$_reduce_30', TMP_31 = function ː_reduce_30(val, _values, result) {
        var self = this;

        result = self.$s("op_asgn2", val['$[]'](0), self.$op_to_setter(val['$[]'](2)), self.$value(val['$[]'](3)).$to_sym(), val['$[]'](4));
        return result;
      }, TMP_31.$$arity = 3);

      Opal.defn(self, '$_reduce_34', TMP_32 = function ː_reduce_34(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), self.$s("svalue", val['$[]'](2)));
        return result;
      }, TMP_32.$$arity = 3);

      Opal.defn(self, '$_reduce_35', TMP_33 = function ː_reduce_35(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), self.$s("to_ary", val['$[]'](2)));
        return result;
      }, TMP_33.$$arity = 3);

      Opal.defn(self, '$_reduce_36', TMP_34 = function ː_reduce_36(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_34.$$arity = 3);

      Opal.defn(self, '$_reduce_38', TMP_35 = function ː_reduce_38(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_35.$$arity = 3);

      Opal.defn(self, '$_reduce_39', TMP_36 = function ː_reduce_39(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_36.$$arity = 3);

      Opal.defn(self, '$_reduce_41', TMP_37 = function ː_reduce_41(val, _values, result) {
        var self = this;

        result = self.$s("and", val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_37.$$arity = 3);

      Opal.defn(self, '$_reduce_42', TMP_38 = function ː_reduce_42(val, _values, result) {
        var self = this;

        result = self.$s("or", val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_38.$$arity = 3);

      Opal.defn(self, '$_reduce_43', TMP_39 = function ː_reduce_43(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], val['$[]'](1));
        return result;
      }, TMP_39.$$arity = 3);

      Opal.defn(self, '$_reduce_44', TMP_40 = function ː_reduce_44(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_40.$$arity = 3);

      Opal.defn(self, '$_reduce_53', TMP_41 = function ː_reduce_53(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_41.$$arity = 3);

      Opal.defn(self, '$_reduce_54', TMP_42 = function ː_reduce_54(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_42.$$arity = 3);

      Opal.defn(self, '$_reduce_55', TMP_43 = function ː_reduce_55(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), val['$[]'](1))['$<<'](val['$[]'](2));
        return result;
      }, TMP_43.$$arity = 3);

      Opal.defn(self, '$_reduce_56', TMP_44 = function ː_reduce_56(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_44.$$arity = 3);

      Opal.defn(self, '$_reduce_57', TMP_45 = function ː_reduce_57(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), val['$[]'](2), val['$[]'](3))['$<<'](val['$[]'](4));
        return result;
      }, TMP_45.$$arity = 3);

      Opal.defn(self, '$_reduce_58', TMP_46 = function ː_reduce_58(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_46.$$arity = 3);

      Opal.defn(self, '$_reduce_59', TMP_47 = function ː_reduce_59(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3))['$<<'](val['$[]'](4));
        return result;
      }, TMP_47.$$arity = 3);

      Opal.defn(self, '$_reduce_60', TMP_48 = function ː_reduce_60(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_48.$$arity = 3);

      Opal.defn(self, '$_reduce_61', TMP_49 = function ː_reduce_61(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3))['$<<'](val['$[]'](4));
        return result;
      }, TMP_49.$$arity = 3);

      Opal.defn(self, '$_reduce_62', TMP_50 = function ː_reduce_62(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_50.$$arity = 3);

      Opal.defn(self, '$_reduce_63', TMP_51 = function ː_reduce_63(val, _values, result) {
        var self = this;

        result = self.$new_yield(val['$[]'](1));
        return result;
      }, TMP_51.$$arity = 3);

      Opal.defn(self, '$_reduce_64', TMP_52 = function ː_reduce_64(val, _values, result) {
        var self = this;

        result = self.$new_return(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_52.$$arity = 3);

      Opal.defn(self, '$_reduce_65', TMP_53 = function ː_reduce_65(val, _values, result) {
        var self = this;

        result = self.$new_break(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_53.$$arity = 3);

      Opal.defn(self, '$_reduce_66', TMP_54 = function ː_reduce_66(val, _values, result) {
        var self = this;

        result = self.$new_next(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_54.$$arity = 3);

      Opal.defn(self, '$_reduce_67', TMP_55 = function ː_reduce_67(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_55.$$arity = 3);

      Opal.defn(self, '$_reduce_68', TMP_56 = function ː_reduce_68(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_56.$$arity = 3);

      Opal.defn(self, '$_reduce_69', TMP_57 = function ː_reduce_69(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_57.$$arity = 3);

      Opal.defn(self, '$_reduce_70', TMP_58 = function ː_reduce_70(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_58.$$arity = 3);

      Opal.defn(self, '$_reduce_71', TMP_59 = function ː_reduce_71(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_59.$$arity = 3);

      Opal.defn(self, '$_reduce_72', TMP_60 = function ː_reduce_72(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, TMP_60.$$arity = 3);

      Opal.defn(self, '$_reduce_73', TMP_61 = function ː_reduce_73(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](2)));
        return result;
      }, TMP_61.$$arity = 3);

      Opal.defn(self, '$_reduce_74', TMP_62 = function ː_reduce_74(val, _values, result) {
        var self = this;

        result = (val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](2)))).$concat(val['$[]'](4).$children());
        return result;
      }, TMP_62.$$arity = 3);

      Opal.defn(self, '$_reduce_75', TMP_63 = function ː_reduce_75(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("splat"));
        return result;
      }, TMP_63.$$arity = 3);

      Opal.defn(self, '$_reduce_76', TMP_64 = function ː_reduce_76(val, _values, result) {
        var self = this;

        result = (val['$[]'](0)['$<<'](self.$s("splat"))).$concat(val['$[]'](3).$children());
        return result;
      }, TMP_64.$$arity = 3);

      Opal.defn(self, '$_reduce_77', TMP_65 = function ː_reduce_77(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat", val['$[]'](1)));
        return result;
      }, TMP_65.$$arity = 3);

      Opal.defn(self, '$_reduce_78', TMP_66 = function ː_reduce_78(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat", val['$[]'](1))).$concat(val['$[]'](3).$children());
        return result;
      }, TMP_66.$$arity = 3);

      Opal.defn(self, '$_reduce_79', TMP_67 = function ː_reduce_79(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat"));
        return result;
      }, TMP_67.$$arity = 3);

      Opal.defn(self, '$_reduce_80', TMP_68 = function ː_reduce_80(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat")).$concat(val['$[]'](2).$children());
        return result;
      }, TMP_68.$$arity = 3);

      Opal.defn(self, '$_reduce_81', TMP_69 = function ː_reduce_81(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_69.$$arity = 3);

      Opal.defn(self, '$_reduce_82', TMP_70 = function ː_reduce_82(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_70.$$arity = 3);

      Opal.defn(self, '$_reduce_83', TMP_71 = function ː_reduce_83(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      }, TMP_71.$$arity = 3);

      Opal.defn(self, '$_reduce_84', TMP_72 = function ː_reduce_84(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      }, TMP_72.$$arity = 3);

      Opal.defn(self, '$_reduce_85', TMP_73 = function ː_reduce_85(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      }, TMP_73.$$arity = 3);

      Opal.defn(self, '$_reduce_86', TMP_74 = function ː_reduce_86(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_74.$$arity = 3);

      Opal.defn(self, '$_reduce_87', TMP_75 = function ː_reduce_87(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      }, TMP_75.$$arity = 3);

      Opal.defn(self, '$_reduce_88', TMP_76 = function ː_reduce_88(val, _values, result) {
        var $a, self = this, args = nil;

        args = (function() {if ((($a = val['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return val['$[]'](2)
          } else {
          return []
        }; return nil; })();
        result = self.$s("attrasgn", val['$[]'](0), "[]=", ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
        return result;
      }, TMP_76.$$arity = 3);

      Opal.defn(self, '$_reduce_89', TMP_77 = function ː_reduce_89(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), []);
        return result;
      }, TMP_77.$$arity = 3);

      Opal.defn(self, '$_reduce_95', TMP_78 = function ː_reduce_95(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      }, TMP_78.$$arity = 3);

      Opal.defn(self, '$_reduce_96', TMP_79 = function ː_reduce_96(val, _values, result) {
        var self = this;

        result = self.$new_js_attrasgn(val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_79.$$arity = 3);

      Opal.defn(self, '$_reduce_97', TMP_80 = function ː_reduce_97(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), "[]=", val['$[]'](2));
        return result;
      }, TMP_80.$$arity = 3);

      Opal.defn(self, '$_reduce_98', TMP_81 = function ː_reduce_98(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      }, TMP_81.$$arity = 3);

      Opal.defn(self, '$_reduce_99', TMP_82 = function ː_reduce_99(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      }, TMP_82.$$arity = 3);

      Opal.defn(self, '$_reduce_100', TMP_83 = function ː_reduce_100(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      }, TMP_83.$$arity = 3);

      Opal.defn(self, '$_reduce_101', TMP_84 = function ː_reduce_101(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_84.$$arity = 3);

      Opal.defn(self, '$_reduce_102', TMP_85 = function ː_reduce_102(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_85.$$arity = 3);

      Opal.defn(self, '$_reduce_105', TMP_86 = function ː_reduce_105(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_86.$$arity = 3);

      Opal.defn(self, '$_reduce_106', TMP_87 = function ː_reduce_106(val, _values, result) {
        var self = this;

        result = self.$new_const(val['$[]'](0));
        return result;
      }, TMP_87.$$arity = 3);

      Opal.defn(self, '$_reduce_107', TMP_88 = function ː_reduce_107(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_88.$$arity = 3);

      Opal.defn(self, '$_reduce_111', TMP_89 = function ː_reduce_111(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        result = val['$[]'](0);
        return result;
      }, TMP_89.$$arity = 3);

      Opal.defn(self, '$_reduce_112', TMP_90 = function ː_reduce_112(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        result = val['$[]'](0);
        return result;
      }, TMP_90.$$arity = 3);

      Opal.defn(self, '$_reduce_113', TMP_91 = function ː_reduce_113(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      }, TMP_91.$$arity = 3);

      Opal.defn(self, '$_reduce_115', TMP_92 = function ː_reduce_115(val, _values, result) {
        var self = this;

        result = self.$s("undef", val['$[]'](0));
        return result;
      }, TMP_92.$$arity = 3);

      Opal.defn(self, '$_reduce_116', TMP_93 = function ː_reduce_116(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_93.$$arity = 3);

      Opal.defn(self, '$_reduce_191', TMP_94 = function ː_reduce_191(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_94.$$arity = 3);

      Opal.defn(self, '$_reduce_192', TMP_95 = function ː_reduce_192(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), self.$s("rescue_mod", val['$[]'](2), val['$[]'](4)));
        return result;
      }, TMP_95.$$arity = 3);

      Opal.defn(self, '$_reduce_193', TMP_96 = function ː_reduce_193(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_96.$$arity = 3);

      Opal.defn(self, '$_reduce_194', TMP_97 = function ː_reduce_194(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn1(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, TMP_97.$$arity = 3);

      Opal.defn(self, '$_reduce_195', TMP_98 = function ː_reduce_195(val, _values, result) {
        var self = this;

        self.$raise(".JS[...] " + (val['$[]'](4)) + " is not supported");
        return result;
      }, TMP_98.$$arity = 3);

      Opal.defn(self, '$_reduce_196', TMP_99 = function ː_reduce_196(val, _values, result) {
        var self = this;

        result = self.$s("op_asgn2", val['$[]'](0), self.$op_to_setter(val['$[]'](2)), self.$value(val['$[]'](3)).$to_sym(), val['$[]'](4));
        return result;
      }, TMP_99.$$arity = 3);

      Opal.defn(self, '$_reduce_202', TMP_100 = function ː_reduce_202(val, _values, result) {
        var self = this;

        result = self.$new_irange(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_100.$$arity = 3);

      Opal.defn(self, '$_reduce_203', TMP_101 = function ː_reduce_203(val, _values, result) {
        var self = this;

        result = self.$new_erange(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_101.$$arity = 3);

      Opal.defn(self, '$_reduce_204', TMP_102 = function ː_reduce_204(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_102.$$arity = 3);

      Opal.defn(self, '$_reduce_205', TMP_103 = function ː_reduce_205(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_103.$$arity = 3);

      Opal.defn(self, '$_reduce_206', TMP_104 = function ː_reduce_206(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_104.$$arity = 3);

      Opal.defn(self, '$_reduce_207', TMP_105 = function ː_reduce_207(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_105.$$arity = 3);

      Opal.defn(self, '$_reduce_208', TMP_106 = function ː_reduce_208(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_106.$$arity = 3);

      Opal.defn(self, '$_reduce_209', TMP_107 = function ː_reduce_209(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_107.$$arity = 3);

      Opal.defn(self, '$_reduce_210', TMP_108 = function ː_reduce_210(val, _values, result) {
        var self = this;

        result = self.$new_call(self.$new_binary_call(self.$new_int(val['$[]'](1)), val['$[]'](2), val['$[]'](3)), ["-@", []], []);
        return result;
      }, TMP_108.$$arity = 3);

      Opal.defn(self, '$_reduce_211', TMP_109 = function ː_reduce_211(val, _values, result) {
        var self = this;

        result = self.$new_call(self.$new_binary_call(self.$new_float(val['$[]'](1)), val['$[]'](2), val['$[]'](3)), ["-@", []], []);
        return result;
      }, TMP_109.$$arity = 3);

      Opal.defn(self, '$_reduce_212', TMP_110 = function ː_reduce_212(val, _values, result) {
        var $a, self = this;

        result = self.$new_call(val['$[]'](1), ["+@", []], []);
        if ((($a = ["int", "float"]['$include?'](val['$[]'](1).$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = val['$[]'](1)};
        return result;
      }, TMP_110.$$arity = 3);

      Opal.defn(self, '$_reduce_213', TMP_111 = function ː_reduce_213(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](1), ["-@", []], []);
        if (val['$[]'](1).$type()['$==']("int")) {
          val['$[]'](1)['$[]='](1, val['$[]'](1)['$[]'](1)['$-@']());
          result = val['$[]'](1);
        } else if (val['$[]'](1).$type()['$==']("float")) {
          val['$[]'](1)['$[]='](1, val['$[]'](1)['$[]'](1).$to_f()['$-@']());
          result = val['$[]'](1);};
        return result;
      }, TMP_111.$$arity = 3);

      Opal.defn(self, '$_reduce_214', TMP_112 = function ː_reduce_214(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_112.$$arity = 3);

      Opal.defn(self, '$_reduce_215', TMP_113 = function ː_reduce_215(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_113.$$arity = 3);

      Opal.defn(self, '$_reduce_216', TMP_114 = function ː_reduce_216(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_114.$$arity = 3);

      Opal.defn(self, '$_reduce_217', TMP_115 = function ː_reduce_217(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_115.$$arity = 3);

      Opal.defn(self, '$_reduce_218', TMP_116 = function ː_reduce_218(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_116.$$arity = 3);

      Opal.defn(self, '$_reduce_219', TMP_117 = function ː_reduce_219(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_117.$$arity = 3);

      Opal.defn(self, '$_reduce_220', TMP_118 = function ː_reduce_220(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_118.$$arity = 3);

      Opal.defn(self, '$_reduce_221', TMP_119 = function ː_reduce_221(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_119.$$arity = 3);

      Opal.defn(self, '$_reduce_222', TMP_120 = function ː_reduce_222(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_120.$$arity = 3);

      Opal.defn(self, '$_reduce_223', TMP_121 = function ː_reduce_223(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_121.$$arity = 3);

      Opal.defn(self, '$_reduce_224', TMP_122 = function ː_reduce_224(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_122.$$arity = 3);

      Opal.defn(self, '$_reduce_225', TMP_123 = function ː_reduce_225(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_123.$$arity = 3);

      Opal.defn(self, '$_reduce_226', TMP_124 = function ː_reduce_226(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_124.$$arity = 3);

      Opal.defn(self, '$_reduce_227', TMP_125 = function ː_reduce_227(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_125.$$arity = 3);

      Opal.defn(self, '$_reduce_228', TMP_126 = function ː_reduce_228(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_126.$$arity = 3);

      Opal.defn(self, '$_reduce_229', TMP_127 = function ː_reduce_229(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_127.$$arity = 3);

      Opal.defn(self, '$_reduce_230', TMP_128 = function ː_reduce_230(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_128.$$arity = 3);

      Opal.defn(self, '$_reduce_231', TMP_129 = function ː_reduce_231(val, _values, result) {
        var self = this;

        result = self.$new_and(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_129.$$arity = 3);

      Opal.defn(self, '$_reduce_232', TMP_130 = function ː_reduce_232(val, _values, result) {
        var self = this;

        result = self.$new_or(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_130.$$arity = 3);

      Opal.defn(self, '$_reduce_233', TMP_131 = function ː_reduce_233(val, _values, result) {
        var self = this;

        result = self.$s("defined", val['$[]'](2));
        return result;
      }, TMP_131.$$arity = 3);

      Opal.defn(self, '$_reduce_234', TMP_132 = function ː_reduce_234(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        return result;
      }, TMP_132.$$arity = 3);

      Opal.defn(self, '$_reduce_235', TMP_133 = function ː_reduce_235(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      }, TMP_133.$$arity = 3);

      Opal.defn(self, '$_reduce_236', TMP_134 = function ː_reduce_236(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](0), val['$[]'](3), val['$[]'](6));
        return result;
      }, TMP_134.$$arity = 3);

      Opal.defn(self, '$_reduce_239', TMP_135 = function ː_reduce_239(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_135.$$arity = 3);

      Opal.defn(self, '$_reduce_240', TMP_136 = function ː_reduce_240(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_136.$$arity = 3);

      Opal.defn(self, '$_reduce_241', TMP_137 = function ː_reduce_241(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_137.$$arity = 3);

      Opal.defn(self, '$_reduce_242', TMP_138 = function ː_reduce_242(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(val['$[]'](2)))));
        result = val['$[]'](0);
        return result;
      }, TMP_138.$$arity = 3);

      Opal.defn(self, '$_reduce_243', TMP_139 = function ː_reduce_243(val, _values, result) {
        var $a, self = this;

        result = [($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(val['$[]'](0))))];
        return result;
      }, TMP_139.$$arity = 3);

      Opal.defn(self, '$_reduce_244', TMP_140 = function ː_reduce_244(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_140.$$arity = 3);

      Opal.defn(self, '$_reduce_245', TMP_141 = function ː_reduce_245(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_141.$$arity = 3);

      Opal.defn(self, '$_reduce_247', TMP_142 = function ː_reduce_247(val, _values, result) {
        var self = this;

        result = [];
        return result;
      }, TMP_142.$$arity = 3);

      Opal.defn(self, '$_reduce_249', TMP_143 = function ː_reduce_249(val, _values, result) {
        var self = this;

        result = [];
        return result;
      }, TMP_143.$$arity = 3);

      Opal.defn(self, '$_reduce_251', TMP_144 = function ː_reduce_251(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_144.$$arity = 3);

      Opal.defn(self, '$_reduce_252', TMP_145 = function ː_reduce_252(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        result['$<<'](self.$new_hash(nil, val['$[]'](2), nil));
        return result;
      }, TMP_145.$$arity = 3);

      Opal.defn(self, '$_reduce_253', TMP_146 = function ː_reduce_253(val, _values, result) {
        var self = this;

        result = [self.$new_hash(nil, val['$[]'](0), nil)];
        return result;
      }, TMP_146.$$arity = 3);

      Opal.defn(self, '$_reduce_254', TMP_147 = function ː_reduce_254(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_147.$$arity = 3);

      Opal.defn(self, '$_reduce_255', TMP_148 = function ː_reduce_255(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        self.$add_block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_148.$$arity = 3);

      Opal.defn(self, '$_reduce_256', TMP_149 = function ː_reduce_256(val, _values, result) {
        var self = this;

        result = [self.$new_hash(nil, val['$[]'](0), nil)];
        self.$add_block_pass(result, val['$[]'](1));
        return result;
      }, TMP_149.$$arity = 3);

      Opal.defn(self, '$_reduce_257', TMP_150 = function ː_reduce_257(val, _values, result) {
        var $a, self = this;

        result = val['$[]'](0);
        result['$<<'](self.$new_hash(nil, val['$[]'](2), nil));
        if ((($a = val['$[]'](3)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](val['$[]'](3))};
        return result;
      }, TMP_150.$$arity = 3);

      Opal.defn(self, '$_reduce_258', TMP_151 = function ː_reduce_258(val, _values, result) {
        var self = this;

        result = [];
        self.$add_block_pass(result, val['$[]'](0));
        return result;
      }, TMP_151.$$arity = 3);

      Opal.defn(self, '$_reduce_259', TMP_152 = function ː_reduce_259(val, _values, result) {
        var self = this;

        self.$lexer().$cmdarg_push(1);
        return result;
      }, TMP_152.$$arity = 3);

      Opal.defn(self, '$_reduce_260', TMP_153 = function ː_reduce_260(val, _values, result) {
        var self = this;

        self.$lexer().$cmdarg_pop();
        result = val['$[]'](1);
        return result;
      }, TMP_153.$$arity = 3);

      Opal.defn(self, '$_reduce_261', TMP_154 = function ː_reduce_261(val, _values, result) {
        var self = this;

        result = self.$new_block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_154.$$arity = 3);

      Opal.defn(self, '$_reduce_262', TMP_155 = function ː_reduce_262(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_155.$$arity = 3);

      Opal.defn(self, '$_reduce_263', TMP_156 = function ː_reduce_263(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_156.$$arity = 3);

      Opal.defn(self, '$_reduce_264', TMP_157 = function ː_reduce_264(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_157.$$arity = 3);

      Opal.defn(self, '$_reduce_265', TMP_158 = function ː_reduce_265(val, _values, result) {
        var self = this;

        result = [self.$new_splat(val['$[]'](0), val['$[]'](1))];
        return result;
      }, TMP_158.$$arity = 3);

      Opal.defn(self, '$_reduce_266', TMP_159 = function ː_reduce_266(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_159.$$arity = 3);

      Opal.defn(self, '$_reduce_267', TMP_160 = function ː_reduce_267(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$new_splat(val['$[]'](2), val['$[]'](3)));
        return result;
      }, TMP_160.$$arity = 3);

      Opal.defn(self, '$_reduce_268', TMP_161 = function ː_reduce_268(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](0))));
        return result;
      }, TMP_161.$$arity = 3);

      Opal.defn(self, '$_reduce_269', TMP_162 = function ː_reduce_269(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](3)));
        result = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](0))));
        return result;
      }, TMP_162.$$arity = 3);

      Opal.defn(self, '$_reduce_270', TMP_163 = function ː_reduce_270(val, _values, result) {
        var self = this;

        result = self.$s("splat", val['$[]'](1));
        return result;
      }, TMP_163.$$arity = 3);

      Opal.defn(self, '$_reduce_280', TMP_164 = function ː_reduce_280(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      }, TMP_164.$$arity = 3);

      Opal.defn(self, '$_reduce_281', TMP_165 = function ː_reduce_281(val, _values, result) {
        var self = this;

        result = self.$s("begin", val['$[]'](2));
        return result;
      }, TMP_165.$$arity = 3);

      Opal.defn(self, '$_reduce_282', TMP_166 = function ː_reduce_282(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_endarg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_166.$$arity = 3);

      Opal.defn(self, '$_reduce_283', TMP_167 = function ː_reduce_283(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_167.$$arity = 3);

      Opal.defn(self, '$_reduce_284', TMP_168 = function ː_reduce_284(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_endarg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_168.$$arity = 3);

      Opal.defn(self, '$_reduce_285', TMP_169 = function ː_reduce_285(val, _values, result) {
        var self = this;

        result = self.$new_nil(val['$[]'](0));
        return result;
      }, TMP_169.$$arity = 3);

      Opal.defn(self, '$_reduce_286', TMP_170 = function ː_reduce_286(val, _values, result) {
        var self = this;

        result = self.$new_paren(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_170.$$arity = 3);

      Opal.defn(self, '$_reduce_287', TMP_171 = function ː_reduce_287(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_171.$$arity = 3);

      Opal.defn(self, '$_reduce_288', TMP_172 = function ː_reduce_288(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_172.$$arity = 3);

      Opal.defn(self, '$_reduce_289', TMP_173 = function ː_reduce_289(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), ["[]", []], val['$[]'](2));
        return result;
      }, TMP_173.$$arity = 3);

      Opal.defn(self, '$_reduce_290', TMP_174 = function ː_reduce_290(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), ["[]", []], val['$[]'](2));
        return result;
      }, TMP_174.$$arity = 3);

      Opal.defn(self, '$_reduce_291', TMP_175 = function ː_reduce_291(val, _values, result) {
        var self = this;

        result = self.$new_array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_175.$$arity = 3);

      Opal.defn(self, '$_reduce_292', TMP_176 = function ː_reduce_292(val, _values, result) {
        var self = this;

        result = self.$new_hash(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_176.$$arity = 3);

      Opal.defn(self, '$_reduce_293', TMP_177 = function ː_reduce_293(val, _values, result) {
        var self = this;

        result = self.$new_return(val['$[]'](0));
        return result;
      }, TMP_177.$$arity = 3);

      Opal.defn(self, '$_reduce_294', TMP_178 = function ː_reduce_294(val, _values, result) {
        var self = this;

        result = self.$new_yield(val['$[]'](2));
        return result;
      }, TMP_178.$$arity = 3);

      Opal.defn(self, '$_reduce_295', TMP_179 = function ː_reduce_295(val, _values, result) {
        var self = this;

        result = self.$s("yield");
        return result;
      }, TMP_179.$$arity = 3);

      Opal.defn(self, '$_reduce_296', TMP_180 = function ː_reduce_296(val, _values, result) {
        var self = this;

        result = self.$s("yield");
        return result;
      }, TMP_180.$$arity = 3);

      Opal.defn(self, '$_reduce_297', TMP_181 = function ː_reduce_297(val, _values, result) {
        var self = this;

        result = self.$s("defined", val['$[]'](3));
        return result;
      }, TMP_181.$$arity = 3);

      Opal.defn(self, '$_reduce_298', TMP_182 = function ː_reduce_298(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], val['$[]'](2));
        return result;
      }, TMP_182.$$arity = 3);

      Opal.defn(self, '$_reduce_299', TMP_183 = function ː_reduce_299(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], self.$new_nil(val['$[]'](0)));
        return result;
      }, TMP_183.$$arity = 3);

      Opal.defn(self, '$_reduce_300', TMP_184 = function ː_reduce_300(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), []);
        result['$<<'](val['$[]'](1));
        return result;
      }, TMP_184.$$arity = 3);

      Opal.defn(self, '$_reduce_302', TMP_185 = function ː_reduce_302(val, _values, result) {
        var self = this;

        result = self.$new_method_call_with_block(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_185.$$arity = 3);

      Opal.defn(self, '$_reduce_303', TMP_186 = function ː_reduce_303(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_186.$$arity = 3);

      Opal.defn(self, '$_reduce_304', TMP_187 = function ː_reduce_304(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        return result;
      }, TMP_187.$$arity = 3);

      Opal.defn(self, '$_reduce_305', TMP_188 = function ː_reduce_305(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](4), val['$[]'](3));
        return result;
      }, TMP_188.$$arity = 3);

      Opal.defn(self, '$_reduce_306', TMP_189 = function ː_reduce_306(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      }, TMP_189.$$arity = 3);

      Opal.defn(self, '$_reduce_307', TMP_190 = function ː_reduce_307(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      }, TMP_190.$$arity = 3);

      Opal.defn(self, '$_reduce_308', TMP_191 = function ː_reduce_308(val, _values, result) {
        var self = this;

        result = self.$s("while", val['$[]'](2), val['$[]'](5));
        return result;
      }, TMP_191.$$arity = 3);

      Opal.defn(self, '$_reduce_309', TMP_192 = function ː_reduce_309(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      }, TMP_192.$$arity = 3);

      Opal.defn(self, '$_reduce_310', TMP_193 = function ː_reduce_310(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      }, TMP_193.$$arity = 3);

      Opal.defn(self, '$_reduce_311', TMP_194 = function ː_reduce_311(val, _values, result) {
        var self = this;

        result = self.$s("until", val['$[]'](2), val['$[]'](5));
        return result;
      }, TMP_194.$$arity = 3);

      Opal.defn(self, '$_reduce_312', TMP_195 = function ː_reduce_312(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$s.apply($a, ["case", val['$[]'](1)].concat(Opal.to_a(val['$[]'](3))));
        return result;
      }, TMP_195.$$arity = 3);

      Opal.defn(self, '$_reduce_313', TMP_196 = function ː_reduce_313(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$s.apply($a, ["case", nil].concat(Opal.to_a(val['$[]'](2))));
        return result;
      }, TMP_196.$$arity = 3);

      Opal.defn(self, '$_reduce_314', TMP_197 = function ː_reduce_314(val, _values, result) {
        var self = this;

        result = self.$s("case", nil, val['$[]'](3));
        return result;
      }, TMP_197.$$arity = 3);

      Opal.defn(self, '$_reduce_315', TMP_198 = function ː_reduce_315(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      }, TMP_198.$$arity = 3);

      Opal.defn(self, '$_reduce_316', TMP_199 = function ː_reduce_316(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      }, TMP_199.$$arity = 3);

      Opal.defn(self, '$_reduce_317', TMP_200 = function ː_reduce_317(val, _values, result) {
        var self = this;

        result = self.$s("for", val['$[]'](4), val['$[]'](1), val['$[]'](7));
        return result;
      }, TMP_200.$$arity = 3);

      Opal.defn(self, '$_reduce_318', TMP_201 = function ː_reduce_318(val, _values, result) {
        var self = this;

        return result;
      }, TMP_201.$$arity = 3);

      Opal.defn(self, '$_reduce_319', TMP_202 = function ː_reduce_319(val, _values, result) {
        var self = this;

        result = self.$new_class(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, TMP_202.$$arity = 3);

      Opal.defn(self, '$_reduce_320', TMP_203 = function ː_reduce_320(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      }, TMP_203.$$arity = 3);

      Opal.defn(self, '$_reduce_321', TMP_204 = function ː_reduce_321(val, _values, result) {
        var self = this;

        return result;
      }, TMP_204.$$arity = 3);

      Opal.defn(self, '$_reduce_322', TMP_205 = function ː_reduce_322(val, _values, result) {
        var self = this;

        result = self.$new_sclass(val['$[]'](0), val['$[]'](3), val['$[]'](6), val['$[]'](7));
        return result;
      }, TMP_205.$$arity = 3);

      Opal.defn(self, '$_reduce_323', TMP_206 = function ː_reduce_323(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      }, TMP_206.$$arity = 3);

      Opal.defn(self, '$_reduce_324', TMP_207 = function ː_reduce_324(val, _values, result) {
        var self = this;

        return result;
      }, TMP_207.$$arity = 3);

      Opal.defn(self, '$_reduce_325', TMP_208 = function ː_reduce_325(val, _values, result) {
        var self = this;

        result = self.$new_module(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      }, TMP_208.$$arity = 3);

      Opal.defn(self, '$_reduce_326', TMP_209 = function ː_reduce_326(val, _values, result) {
        var self = this;

        self.$push_scope();
        return result;
      }, TMP_209.$$arity = 3);

      Opal.defn(self, '$_reduce_327', TMP_210 = function ː_reduce_327(val, _values, result) {
        var self = this;

        result = self.$new_def(val['$[]'](0), nil, val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.$pop_scope();
        return result;
      }, TMP_210.$$arity = 3);

      Opal.defn(self, '$_reduce_328', TMP_211 = function ː_reduce_328(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_fname"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_211.$$arity = 3);

      Opal.defn(self, '$_reduce_329', TMP_212 = function ː_reduce_329(val, _values, result) {
        var $a, $b, self = this;

        self.$push_scope();
        (($a = ["expr_endfn"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_212.$$arity = 3);

      Opal.defn(self, '$_reduce_330', TMP_213 = function ː_reduce_330(val, _values, result) {
        var self = this;

        result = self.$new_def(val['$[]'](0), val['$[]'](1), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.$pop_scope();
        return result;
      }, TMP_213.$$arity = 3);

      Opal.defn(self, '$_reduce_331', TMP_214 = function ː_reduce_331(val, _values, result) {
        var self = this;

        result = self.$new_break(val['$[]'](0));
        return result;
      }, TMP_214.$$arity = 3);

      Opal.defn(self, '$_reduce_332', TMP_215 = function ː_reduce_332(val, _values, result) {
        var self = this;

        result = self.$s("next");
        return result;
      }, TMP_215.$$arity = 3);

      Opal.defn(self, '$_reduce_333', TMP_216 = function ː_reduce_333(val, _values, result) {
        var self = this;

        result = self.$s("redo");
        return result;
      }, TMP_216.$$arity = 3);

      Opal.defn(self, '$_reduce_343', TMP_217 = function ː_reduce_343(val, _values, result) {
        var self = this;

        result = [];
        return result;
      }, TMP_217.$$arity = 3);

      Opal.defn(self, '$_reduce_344', TMP_218 = function ː_reduce_344(val, _values, result) {
        var self = this;

        result = val['$[]'](2);
        return result;
      }, TMP_218.$$arity = 3);

      Opal.defn(self, '$_reduce_345', TMP_219 = function ː_reduce_345(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_219.$$arity = 3);

      Opal.defn(self, '$_reduce_346', TMP_220 = function ː_reduce_346(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_220.$$arity = 3);

      Opal.defn(self, '$_reduce_347', TMP_221 = function ː_reduce_347(val, _values, result) {
        var self = this;

        result = self.$new_shadowarg(val['$[]'](0));
        return result;
      }, TMP_221.$$arity = 3);

      Opal.defn(self, '$_reduce_349', TMP_222 = function ː_reduce_349(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, ["lambda", []], []);
        result['$<<'](self.$new_iter(val['$[]'](0), val['$[]'](1)));
        return result;
      }, TMP_222.$$arity = 3);

      Opal.defn(self, '$_reduce_350', TMP_223 = function ː_reduce_350(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$new_block_args.apply($a, Opal.to_a(val['$[]'](1)));
        return result;
      }, TMP_223.$$arity = 3);

      Opal.defn(self, '$_reduce_351', TMP_224 = function ː_reduce_351(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_224.$$arity = 3);

      Opal.defn(self, '$_reduce_352', TMP_225 = function ː_reduce_352(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$new_block_args.apply($a, Opal.to_a(val['$[]'](0)));
        return result;
      }, TMP_225.$$arity = 3);

      Opal.defn(self, '$_reduce_354', TMP_226 = function ː_reduce_354(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_226.$$arity = 3);

      Opal.defn(self, '$_reduce_355', TMP_227 = function ː_reduce_355(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_227.$$arity = 3);

      Opal.defn(self, '$_reduce_356', TMP_228 = function ː_reduce_356(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_228.$$arity = 3);

      Opal.defn(self, '$_reduce_357', TMP_229 = function ː_reduce_357(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        return result;
      }, TMP_229.$$arity = 3);

      Opal.defn(self, '$_reduce_359', TMP_230 = function ː_reduce_359(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_230.$$arity = 3);

      Opal.defn(self, '$_reduce_360', TMP_231 = function ː_reduce_360(val, _values, result) {
        var self = this;

        result = self.$s("block", val['$[]'](0));
        return result;
      }, TMP_231.$$arity = 3);

      Opal.defn(self, '$_reduce_361', TMP_232 = function ː_reduce_361(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      }, TMP_232.$$arity = 3);

      Opal.defn(self, '$_reduce_362', TMP_233 = function ː_reduce_362(val, _values, result) {
        var self = this;

        result = self.$new_assign(self.$new_assignable(self.$new_ident(val['$[]'](0))), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_233.$$arity = 3);

      Opal.defn(self, '$_reduce_364', TMP_234 = function ː_reduce_364(val, _values, result) {
        var self = this;

        result = self.$new_block_args(nil, [val['$[]'](1)]);
        return result;
      }, TMP_234.$$arity = 3);

      Opal.defn(self, '$_reduce_365', TMP_235 = function ː_reduce_365(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_235.$$arity = 3);

      Opal.defn(self, '$_reduce_366', TMP_236 = function ː_reduce_366(val, _values, result) {
        var $a, self = this;

        val['$[]'](1)['$<<'](val['$[]'](2));
        result = ($a = self).$new_block_args.apply($a, Opal.to_a(val['$[]'](1)));
        return result;
      }, TMP_236.$$arity = 3);

      Opal.defn(self, '$_reduce_367', TMP_237 = function ː_reduce_367(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2), val['$[]'](3)];
        return result;
      }, TMP_237.$$arity = 3);

      Opal.defn(self, '$_reduce_368', TMP_238 = function ː_reduce_368(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), nil, val['$[]'](1)];
        return result;
      }, TMP_238.$$arity = 3);

      Opal.defn(self, '$_reduce_369', TMP_239 = function ː_reduce_369(val, _values, result) {
        var self = this;

        result = [nil, val['$[]'](0), val['$[]'](1)];
        return result;
      }, TMP_239.$$arity = 3);

      Opal.defn(self, '$_reduce_370', TMP_240 = function ː_reduce_370(val, _values, result) {
        var self = this;

        result = [nil, nil, val['$[]'](0)];
        return result;
      }, TMP_240.$$arity = 3);

      Opal.defn(self, '$_reduce_371', TMP_241 = function ː_reduce_371(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_241.$$arity = 3);

      Opal.defn(self, '$_reduce_372', TMP_242 = function ː_reduce_372(val, _values, result) {
        var self = this;

        nil;
        return result;
      }, TMP_242.$$arity = 3);

      Opal.defn(self, '$_reduce_373', TMP_243 = function ː_reduce_373(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        restarg = self.$new_restarg(val['$[]'](4));
        result = [$rb_plus($rb_plus(val['$[]'](0), optarg), restarg), val['$[]'](5)];
        return result;
      }, TMP_243.$$arity = 3);

      Opal.defn(self, '$_reduce_374', TMP_244 = function ː_reduce_374(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        restarg = self.$new_restarg(val['$[]'](4));
        result = [$rb_plus($rb_plus($rb_plus(val['$[]'](0), optarg), restarg), val['$[]'](6)), val['$[]'](7)];
        return result;
      }, TMP_244.$$arity = 3);

      Opal.defn(self, '$_reduce_375', TMP_245 = function ː_reduce_375(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        result = [$rb_plus(val['$[]'](0), optarg), val['$[]'](3)];
        return result;
      }, TMP_245.$$arity = 3);

      Opal.defn(self, '$_reduce_376', TMP_246 = function ː_reduce_376(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        result = [$rb_plus($rb_plus(val['$[]'](0), optarg), val['$[]'](4)), val['$[]'](5)];
        return result;
      }, TMP_246.$$arity = 3);

      Opal.defn(self, '$_reduce_377', TMP_247 = function ː_reduce_377(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](2));
        result = [$rb_plus(val['$[]'](0), restarg), val['$[]'](3)];
        return result;
      }, TMP_247.$$arity = 3);

      Opal.defn(self, '$_reduce_378', TMP_248 = function ː_reduce_378(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](nil);
        result = [val['$[]'](0), nil];
        return result;
      }, TMP_248.$$arity = 3);

      Opal.defn(self, '$_reduce_379', TMP_249 = function ː_reduce_379(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](2));
        result = [$rb_plus($rb_plus(val['$[]'](0), restarg), val['$[]'](4)), val['$[]'](5)];
        return result;
      }, TMP_249.$$arity = 3);

      Opal.defn(self, '$_reduce_380', TMP_250 = function ː_reduce_380(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](1)];
        return result;
      }, TMP_250.$$arity = 3);

      Opal.defn(self, '$_reduce_381', TMP_251 = function ː_reduce_381(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        restarg = self.$new_restarg(val['$[]'](2));
        result = [$rb_plus(optarg, restarg), val['$[]'](3)];
        return result;
      }, TMP_251.$$arity = 3);

      Opal.defn(self, '$_reduce_382', TMP_252 = function ː_reduce_382(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        restarg = self.$new_restarg(val['$[]'](2));
        result = [$rb_plus($rb_plus(optarg, restarg), val['$[]'](4)), val['$[]'](5)];
        return result;
      }, TMP_252.$$arity = 3);

      Opal.defn(self, '$_reduce_383', TMP_253 = function ː_reduce_383(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        result = [optarg, val['$[]'](1)];
        return result;
      }, TMP_253.$$arity = 3);

      Opal.defn(self, '$_reduce_384', TMP_254 = function ː_reduce_384(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        result = [$rb_plus(optarg, val['$[]'](2)), val['$[]'](3)];
        return result;
      }, TMP_254.$$arity = 3);

      Opal.defn(self, '$_reduce_385', TMP_255 = function ː_reduce_385(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](0));
        result = [restarg, val['$[]'](1)];
        return result;
      }, TMP_255.$$arity = 3);

      Opal.defn(self, '$_reduce_386', TMP_256 = function ː_reduce_386(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](0));
        result = [$rb_plus(restarg, val['$[]'](2)), val['$[]'](3)];
        return result;
      }, TMP_256.$$arity = 3);

      Opal.defn(self, '$_reduce_387', TMP_257 = function ː_reduce_387(val, _values, result) {
        var self = this;

        result = [nil, val['$[]'](0)];
        return result;
      }, TMP_257.$$arity = 3);

      Opal.defn(self, '$_reduce_388', TMP_258 = function ː_reduce_388(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      }, TMP_258.$$arity = 3);

      Opal.defn(self, '$_reduce_389', TMP_259 = function ː_reduce_389(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      }, TMP_259.$$arity = 3);

      Opal.defn(self, '$_reduce_390', TMP_260 = function ː_reduce_390(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](1));
        result = val['$[]'](0);
        return result;
      }, TMP_260.$$arity = 3);

      Opal.defn(self, '$_reduce_394', TMP_261 = function ː_reduce_394(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_261.$$arity = 3);

      Opal.defn(self, '$_reduce_395', TMP_262 = function ː_reduce_395(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_262.$$arity = 3);

      Opal.defn(self, '$_reduce_396', TMP_263 = function ː_reduce_396(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_263.$$arity = 3);

      Opal.defn(self, '$_reduce_397', TMP_264 = function ː_reduce_397(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), ["call", []], val['$[]'](2));
        return result;
      }, TMP_264.$$arity = 3);

      Opal.defn(self, '$_reduce_398', TMP_265 = function ː_reduce_398(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_265.$$arity = 3);

      Opal.defn(self, '$_reduce_399', TMP_266 = function ː_reduce_399(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2));
        return result;
      }, TMP_266.$$arity = 3);

      Opal.defn(self, '$_reduce_400', TMP_267 = function ː_reduce_400(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_267.$$arity = 3);

      Opal.defn(self, '$_reduce_401', TMP_268 = function ː_reduce_401(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), nil);
        return result;
      }, TMP_268.$$arity = 3);

      Opal.defn(self, '$_reduce_402', TMP_269 = function ː_reduce_402(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      }, TMP_269.$$arity = 3);

      Opal.defn(self, '$_reduce_403', TMP_270 = function ː_reduce_403(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      }, TMP_270.$$arity = 3);

      Opal.defn(self, '$_reduce_404', TMP_271 = function ː_reduce_404(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      }, TMP_271.$$arity = 3);

      Opal.defn(self, '$_reduce_405', TMP_272 = function ː_reduce_405(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      }, TMP_272.$$arity = 3);

      Opal.defn(self, '$_reduce_406', TMP_273 = function ː_reduce_406(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      }, TMP_273.$$arity = 3);

      Opal.defn(self, '$_reduce_407', TMP_274 = function ː_reduce_407(val, _values, result) {
        var $a, $b, self = this, part = nil;

        part = self.$s("when", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](2)))), val['$[]'](4));
        result = [part];
        if ((($b = val['$[]'](5)) !== nil && (!$b.$$is_boolean || $b == true))) {
          ($b = result).$push.apply($b, Opal.to_a(val['$[]'](5)))};
        return result;
      }, TMP_274.$$arity = 3);

      Opal.defn(self, '$_reduce_408', TMP_275 = function ː_reduce_408(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_275.$$arity = 3);

      Opal.defn(self, '$_reduce_410', TMP_276 = function ː_reduce_410(val, _values, result) {
        var $a, self = this, exc = nil;

        exc = ((($a = val['$[]'](1)) !== false && $a !== nil) ? $a : self.$s("array"));
        if ((($a = val['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          exc['$<<'](self.$new_assign(val['$[]'](2), val['$[]'](2), self.$s("gvar", "$!".$intern())))};
        result = [self.$s("resbody", exc, val['$[]'](4))];
        if ((($a = val['$[]'](5)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result.$concat(val['$[]'](5))};
        return result;
      }, TMP_276.$$arity = 3);

      Opal.defn(self, '$_reduce_411', TMP_277 = function ː_reduce_411(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_277.$$arity = 3);

      Opal.defn(self, '$_reduce_412', TMP_278 = function ː_reduce_412(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      }, TMP_278.$$arity = 3);

      Opal.defn(self, '$_reduce_415', TMP_279 = function ː_reduce_415(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_279.$$arity = 3);

      Opal.defn(self, '$_reduce_416', TMP_280 = function ː_reduce_416(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_280.$$arity = 3);

      Opal.defn(self, '$_reduce_417', TMP_281 = function ː_reduce_417(val, _values, result) {
        var $a, self = this;

        result = (function() {if ((($a = val['$[]'](1)['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s("nil")
          } else {
          return val['$[]'](1)
        }; return nil; })();
        return result;
      }, TMP_281.$$arity = 3);

      Opal.defn(self, '$_reduce_422', TMP_282 = function ː_reduce_422(val, _values, result) {
        var self = this;

        result = self.$new_str(val['$[]'](0));
        return result;
      }, TMP_282.$$arity = 3);

      Opal.defn(self, '$_reduce_424', TMP_283 = function ː_reduce_424(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_283.$$arity = 3);

      Opal.defn(self, '$_reduce_425', TMP_284 = function ː_reduce_425(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_284.$$arity = 3);

      Opal.defn(self, '$_reduce_426', TMP_285 = function ː_reduce_426(val, _values, result) {
        var self = this;

        result = self.$s("str", self.$value(val['$[]'](0)));
        return result;
      }, TMP_285.$$arity = 3);

      Opal.defn(self, '$_reduce_427', TMP_286 = function ː_reduce_427(val, _values, result) {
        var self = this;

        result = self.$new_xstr(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_286.$$arity = 3);

      Opal.defn(self, '$_reduce_428', TMP_287 = function ː_reduce_428(val, _values, result) {
        var self = this;

        result = self.$new_regexp(val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_287.$$arity = 3);

      Opal.defn(self, '$_reduce_429', TMP_288 = function ː_reduce_429(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      }, TMP_288.$$arity = 3);

      Opal.defn(self, '$_reduce_430', TMP_289 = function ː_reduce_430(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_289.$$arity = 3);

      Opal.defn(self, '$_reduce_431', TMP_290 = function ː_reduce_431(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      }, TMP_290.$$arity = 3);

      Opal.defn(self, '$_reduce_432', TMP_291 = function ː_reduce_432(val, _values, result) {
        var self = this, part = nil;

        part = val['$[]'](1);
        if (part.$type()['$==']("evstr")) {
          part = self.$s("dstr", "", val['$[]'](1))};
        result = val['$[]'](0)['$<<'](part);
        return result;
      }, TMP_291.$$arity = 3);

      Opal.defn(self, '$_reduce_433', TMP_292 = function ː_reduce_433(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_292.$$arity = 3);

      Opal.defn(self, '$_reduce_434', TMP_293 = function ː_reduce_434(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat([val['$[]'](1)]);
        return result;
      }, TMP_293.$$arity = 3);

      Opal.defn(self, '$_reduce_435', TMP_294 = function ː_reduce_435(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      }, TMP_294.$$arity = 3);

      Opal.defn(self, '$_reduce_436', TMP_295 = function ː_reduce_436(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_295.$$arity = 3);

      Opal.defn(self, '$_reduce_437', TMP_296 = function ː_reduce_437(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      }, TMP_296.$$arity = 3);

      Opal.defn(self, '$_reduce_438', TMP_297 = function ː_reduce_438(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("str", self.$value(val['$[]'](1))));
        return result;
      }, TMP_297.$$arity = 3);

      Opal.defn(self, '$_reduce_439', TMP_298 = function ː_reduce_439(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_298.$$arity = 3);

      Opal.defn(self, '$_reduce_440', TMP_299 = function ː_reduce_440(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_299.$$arity = 3);

      Opal.defn(self, '$_reduce_441', TMP_300 = function ː_reduce_441(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_300.$$arity = 3);

      Opal.defn(self, '$_reduce_442', TMP_301 = function ː_reduce_442(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_301.$$arity = 3);

      Opal.defn(self, '$_reduce_443', TMP_302 = function ː_reduce_443(val, _values, result) {
        var self = this;

        result = self.$new_str_content(val['$[]'](0));
        return result;
      }, TMP_302.$$arity = 3);

      Opal.defn(self, '$_reduce_444', TMP_303 = function ː_reduce_444(val, _values, result) {
        var $a, $b, self = this;

        result = self.$lexer().$strterm();
        (($a = [nil]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_303.$$arity = 3);

      Opal.defn(self, '$_reduce_445', TMP_304 = function ː_reduce_445(val, _values, result) {
        var $a, $b, self = this;

        (($a = [val['$[]'](1)]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        result = self.$new_evstr(val['$[]'](2));
        return result;
      }, TMP_304.$$arity = 3);

      Opal.defn(self, '$_reduce_446', TMP_305 = function ː_reduce_446(val, _values, result) {
        var $a, $b, self = this;

        self.$lexer().$cond_push(0);
        self.$lexer().$cmdarg_push(0);
        result = self.$lexer().$strterm();
        (($a = [nil]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_305.$$arity = 3);

      Opal.defn(self, '$_reduce_447', TMP_306 = function ː_reduce_447(val, _values, result) {
        var $a, $b, self = this;

        (($a = [val['$[]'](1)]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        self.$lexer().$cond_lexpop();
        self.$lexer().$cmdarg_lexpop();
        result = self.$new_evstr(val['$[]'](2));
        return result;
      }, TMP_306.$$arity = 3);

      Opal.defn(self, '$_reduce_448', TMP_307 = function ː_reduce_448(val, _values, result) {
        var self = this;

        result = self.$new_gvar(val['$[]'](0));
        return result;
      }, TMP_307.$$arity = 3);

      Opal.defn(self, '$_reduce_449', TMP_308 = function ː_reduce_449(val, _values, result) {
        var self = this;

        result = self.$new_ivar(val['$[]'](0));
        return result;
      }, TMP_308.$$arity = 3);

      Opal.defn(self, '$_reduce_450', TMP_309 = function ː_reduce_450(val, _values, result) {
        var self = this;

        result = self.$new_cvar(val['$[]'](0));
        return result;
      }, TMP_309.$$arity = 3);

      Opal.defn(self, '$_reduce_452', TMP_310 = function ː_reduce_452(val, _values, result) {
        var $a, $b, self = this;

        result = self.$new_sym(val['$[]'](1));
        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_310.$$arity = 3);

      Opal.defn(self, '$_reduce_453', TMP_311 = function ː_reduce_453(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      }, TMP_311.$$arity = 3);

      Opal.defn(self, '$_reduce_458', TMP_312 = function ː_reduce_458(val, _values, result) {
        var self = this;

        result = self.$new_dsym(val['$[]'](1));
        return result;
      }, TMP_312.$$arity = 3);

      Opal.defn(self, '$_reduce_459', TMP_313 = function ː_reduce_459(val, _values, result) {
        var self = this;

        result = self.$new_int(val['$[]'](0));
        return result;
      }, TMP_313.$$arity = 3);

      Opal.defn(self, '$_reduce_460', TMP_314 = function ː_reduce_460(val, _values, result) {
        var self = this;

        result = self.$new_float(val['$[]'](0));
        return result;
      }, TMP_314.$$arity = 3);

      Opal.defn(self, '$_reduce_461', TMP_315 = function ː_reduce_461(val, _values, result) {
        var self = this;

        result = self.$negate_num(self.$new_int(val['$[]'](1)));
        return result;
      }, TMP_315.$$arity = 3);

      Opal.defn(self, '$_reduce_462', TMP_316 = function ː_reduce_462(val, _values, result) {
        var self = this;

        result = self.$negate_num(self.$new_float(val['$[]'](1)));
        return result;
      }, TMP_316.$$arity = 3);

      Opal.defn(self, '$_reduce_463', TMP_317 = function ː_reduce_463(val, _values, result) {
        var self = this;

        result = self.$new_int(val['$[]'](1));
        return result;
      }, TMP_317.$$arity = 3);

      Opal.defn(self, '$_reduce_464', TMP_318 = function ː_reduce_464(val, _values, result) {
        var self = this;

        result = self.$new_float(val['$[]'](1));
        return result;
      }, TMP_318.$$arity = 3);

      Opal.defn(self, '$_reduce_465', TMP_319 = function ː_reduce_465(val, _values, result) {
        var self = this;

        result = self.$new_ident(val['$[]'](0));
        return result;
      }, TMP_319.$$arity = 3);

      Opal.defn(self, '$_reduce_466', TMP_320 = function ː_reduce_466(val, _values, result) {
        var self = this;

        result = self.$new_ivar(val['$[]'](0));
        return result;
      }, TMP_320.$$arity = 3);

      Opal.defn(self, '$_reduce_467', TMP_321 = function ː_reduce_467(val, _values, result) {
        var self = this;

        result = self.$new_gvar(val['$[]'](0));
        return result;
      }, TMP_321.$$arity = 3);

      Opal.defn(self, '$_reduce_468', TMP_322 = function ː_reduce_468(val, _values, result) {
        var self = this;

        result = self.$new_const(val['$[]'](0));
        return result;
      }, TMP_322.$$arity = 3);

      Opal.defn(self, '$_reduce_469', TMP_323 = function ː_reduce_469(val, _values, result) {
        var self = this;

        result = self.$new_cvar(val['$[]'](0));
        return result;
      }, TMP_323.$$arity = 3);

      Opal.defn(self, '$_reduce_470', TMP_324 = function ː_reduce_470(val, _values, result) {
        var self = this;

        result = self.$new_nil(val['$[]'](0));
        return result;
      }, TMP_324.$$arity = 3);

      Opal.defn(self, '$_reduce_471', TMP_325 = function ː_reduce_471(val, _values, result) {
        var self = this;

        result = self.$new_self(val['$[]'](0));
        return result;
      }, TMP_325.$$arity = 3);

      Opal.defn(self, '$_reduce_472', TMP_326 = function ː_reduce_472(val, _values, result) {
        var self = this;

        result = self.$new_true(val['$[]'](0));
        return result;
      }, TMP_326.$$arity = 3);

      Opal.defn(self, '$_reduce_473', TMP_327 = function ː_reduce_473(val, _values, result) {
        var self = this;

        result = self.$new_false(val['$[]'](0));
        return result;
      }, TMP_327.$$arity = 3);

      Opal.defn(self, '$_reduce_474', TMP_328 = function ː_reduce_474(val, _values, result) {
        var self = this;

        result = self.$new___FILE__(val['$[]'](0));
        return result;
      }, TMP_328.$$arity = 3);

      Opal.defn(self, '$_reduce_475', TMP_329 = function ː_reduce_475(val, _values, result) {
        var self = this;

        result = self.$new___LINE__(val['$[]'](0));
        return result;
      }, TMP_329.$$arity = 3);

      Opal.defn(self, '$_reduce_476', TMP_330 = function ː_reduce_476(val, _values, result) {
        var self = this;

        result = self.$new_var_ref(val['$[]'](0));
        return result;
      }, TMP_330.$$arity = 3);

      Opal.defn(self, '$_reduce_477', TMP_331 = function ː_reduce_477(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      }, TMP_331.$$arity = 3);

      Opal.defn(self, '$_reduce_478', TMP_332 = function ː_reduce_478(val, _values, result) {
        var self = this;

        result = self.$s("nth_ref", self.$value(val['$[]'](0)));
        return result;
      }, TMP_332.$$arity = 3);

      Opal.defn(self, '$_reduce_480', TMP_333 = function ː_reduce_480(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_333.$$arity = 3);

      Opal.defn(self, '$_reduce_481', TMP_334 = function ː_reduce_481(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_334.$$arity = 3);

      Opal.defn(self, '$_reduce_482', TMP_335 = function ː_reduce_482(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_335.$$arity = 3);

      Opal.defn(self, '$_reduce_483', TMP_336 = function ː_reduce_483(val, _values, result) {
        var $a, $b, self = this;

        result = val['$[]'](1);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_336.$$arity = 3);

      Opal.defn(self, '$_reduce_484', TMP_337 = function ː_reduce_484(val, _values, result) {
        var $a, $b, self = this;

        result = val['$[]'](0);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      }, TMP_337.$$arity = 3);

      Opal.defn(self, '$_reduce_487', TMP_338 = function ː_reduce_487(val, _values, result) {
        var self = this;

        result = self.$new_kwrestarg(val['$[]'](1));
        return result;
      }, TMP_338.$$arity = 3);

      Opal.defn(self, '$_reduce_488', TMP_339 = function ː_reduce_488(val, _values, result) {
        var self = this;

        result = self.$new_kwrestarg();
        return result;
      }, TMP_339.$$arity = 3);

      Opal.defn(self, '$_reduce_489', TMP_340 = function ː_reduce_489(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      }, TMP_340.$$arity = 3);

      Opal.defn(self, '$_reduce_490', TMP_341 = function ː_reduce_490(val, _values, result) {
        var self = this;

        result = self.$new_kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_341.$$arity = 3);

      Opal.defn(self, '$_reduce_491', TMP_342 = function ː_reduce_491(val, _values, result) {
        var self = this;

        result = self.$new_kwarg(val['$[]'](0));
        return result;
      }, TMP_342.$$arity = 3);

      Opal.defn(self, '$_reduce_492', TMP_343 = function ː_reduce_492(val, _values, result) {
        var self = this;

        result = self.$new_kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_343.$$arity = 3);

      Opal.defn(self, '$_reduce_493', TMP_344 = function ː_reduce_493(val, _values, result) {
        var self = this;

        result = self.$new_kwarg(val['$[]'](0));
        return result;
      }, TMP_344.$$arity = 3);

      Opal.defn(self, '$_reduce_494', TMP_345 = function ː_reduce_494(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_345.$$arity = 3);

      Opal.defn(self, '$_reduce_495', TMP_346 = function ː_reduce_495(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        result['$<<'](val['$[]'](2));
        return result;
      }, TMP_346.$$arity = 3);

      Opal.defn(self, '$_reduce_496', TMP_347 = function ː_reduce_496(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_347.$$arity = 3);

      Opal.defn(self, '$_reduce_497', TMP_348 = function ː_reduce_497(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        result['$<<'](val['$[]'](2));
        return result;
      }, TMP_348.$$arity = 3);

      Opal.defn(self, '$_reduce_498', TMP_349 = function ː_reduce_498(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      }, TMP_349.$$arity = 3);

      Opal.defn(self, '$_reduce_499', TMP_350 = function ː_reduce_499(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(val['$[]'](0), nil, val['$[]'](1));
        return result;
      }, TMP_350.$$arity = 3);

      Opal.defn(self, '$_reduce_500', TMP_351 = function ː_reduce_500(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_351.$$arity = 3);

      Opal.defn(self, '$_reduce_501', TMP_352 = function ː_reduce_501(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, nil, val['$[]'](0));
        return result;
      }, TMP_352.$$arity = 3);

      Opal.defn(self, '$_reduce_502', TMP_353 = function ː_reduce_502(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_353.$$arity = 3);

      Opal.defn(self, '$_reduce_503', TMP_354 = function ː_reduce_503(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, nil, nil);
        return result;
      }, TMP_354.$$arity = 3);

      Opal.defn(self, '$_reduce_504', TMP_355 = function ː_reduce_504(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        restarg = self.$new_restarg(val['$[]'](4));
        result = self.$new_args($rb_plus($rb_plus(val['$[]'](0), optarg), restarg), val['$[]'](5));
        return result;
      }, TMP_355.$$arity = 3);

      Opal.defn(self, '$_reduce_505', TMP_356 = function ː_reduce_505(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        restarg = self.$new_restarg(val['$[]'](4));
        result = self.$new_args($rb_plus($rb_plus($rb_plus(val['$[]'](0), optarg), restarg), val['$[]'](6)), val['$[]'](7));
        return result;
      }, TMP_356.$$arity = 3);

      Opal.defn(self, '$_reduce_506', TMP_357 = function ː_reduce_506(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        result = self.$new_args($rb_plus(val['$[]'](0), optarg), val['$[]'](3));
        return result;
      }, TMP_357.$$arity = 3);

      Opal.defn(self, '$_reduce_507', TMP_358 = function ː_reduce_507(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](2));
        result = self.$new_args($rb_plus($rb_plus(val['$[]'](0), optarg), val['$[]'](4)), val['$[]'](5));
        return result;
      }, TMP_358.$$arity = 3);

      Opal.defn(self, '$_reduce_508', TMP_359 = function ː_reduce_508(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](2));
        result = self.$new_args($rb_plus(val['$[]'](0), restarg), val['$[]'](3));
        return result;
      }, TMP_359.$$arity = 3);

      Opal.defn(self, '$_reduce_509', TMP_360 = function ː_reduce_509(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](2));
        result = self.$new_args($rb_plus($rb_plus(val['$[]'](0), restarg), val['$[]'](4)), val['$[]'](5));
        return result;
      }, TMP_360.$$arity = 3);

      Opal.defn(self, '$_reduce_510', TMP_361 = function ː_reduce_510(val, _values, result) {
        var self = this;

        result = self.$new_args(val['$[]'](0), val['$[]'](1));
        return result;
      }, TMP_361.$$arity = 3);

      Opal.defn(self, '$_reduce_511', TMP_362 = function ː_reduce_511(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        restarg = self.$new_restarg(val['$[]'](2));
        result = self.$new_args($rb_plus(optarg, restarg), val['$[]'](3));
        return result;
      }, TMP_362.$$arity = 3);

      Opal.defn(self, '$_reduce_512', TMP_363 = function ː_reduce_512(val, _values, result) {
        var self = this, optarg = nil, restarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        restarg = self.$new_restarg(val['$[]'](2));
        result = self.$new_args($rb_plus($rb_plus(optarg, restarg), val['$[]'](4)), val['$[]'](5));
        return result;
      }, TMP_363.$$arity = 3);

      Opal.defn(self, '$_reduce_513', TMP_364 = function ː_reduce_513(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        result = self.$new_args(optarg, val['$[]'](1));
        return result;
      }, TMP_364.$$arity = 3);

      Opal.defn(self, '$_reduce_514', TMP_365 = function ː_reduce_514(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_optarg(val['$[]'](0));
        result = self.$new_args($rb_plus(optarg, val['$[]'](2)), val['$[]'](3));
        return result;
      }, TMP_365.$$arity = 3);

      Opal.defn(self, '$_reduce_515', TMP_366 = function ː_reduce_515(val, _values, result) {
        var self = this, optarg = nil;

        optarg = self.$new_restarg(val['$[]'](0));
        result = self.$new_args(optarg, val['$[]'](1));
        return result;
      }, TMP_366.$$arity = 3);

      Opal.defn(self, '$_reduce_516', TMP_367 = function ː_reduce_516(val, _values, result) {
        var self = this, restarg = nil;

        restarg = self.$new_restarg(val['$[]'](0));
        result = self.$new_args($rb_plus(restarg, val['$[]'](2)), val['$[]'](3));
        return result;
      }, TMP_367.$$arity = 3);

      Opal.defn(self, '$_reduce_517', TMP_368 = function ː_reduce_517(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, val['$[]'](0));
        return result;
      }, TMP_368.$$arity = 3);

      Opal.defn(self, '$_reduce_518', TMP_369 = function ː_reduce_518(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, nil);
        return result;
      }, TMP_369.$$arity = 3);

      Opal.defn(self, '$_reduce_520', TMP_370 = function ː_reduce_520(val, _values, result) {
        var self = this;

        result = self.$value(val['$[]'](0)).$to_sym();
        self.$scope().$add_local(result);
        return result;
      }, TMP_370.$$arity = 3);

      Opal.defn(self, '$_reduce_521', TMP_371 = function ː_reduce_521(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a constant");
        return result;
      }, TMP_371.$$arity = 3);

      Opal.defn(self, '$_reduce_522', TMP_372 = function ː_reduce_522(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be an instance variable");
        return result;
      }, TMP_372.$$arity = 3);

      Opal.defn(self, '$_reduce_523', TMP_373 = function ː_reduce_523(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a class variable");
        return result;
      }, TMP_373.$$arity = 3);

      Opal.defn(self, '$_reduce_524', TMP_374 = function ː_reduce_524(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a global variable");
        return result;
      }, TMP_374.$$arity = 3);

      Opal.defn(self, '$_reduce_525', TMP_375 = function ː_reduce_525(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_375.$$arity = 3);

      Opal.defn(self, '$_reduce_526', TMP_376 = function ː_reduce_526(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_376.$$arity = 3);

      Opal.defn(self, '$_reduce_529', TMP_377 = function ː_reduce_529(val, _values, result) {
        var self = this;

        result = self.$s("arg", val['$[]'](0));
        return result;
      }, TMP_377.$$arity = 3);

      Opal.defn(self, '$_reduce_530', TMP_378 = function ː_reduce_530(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_378.$$arity = 3);

      Opal.defn(self, '$_reduce_531', TMP_379 = function ː_reduce_531(val, _values, result) {
        var self = this;

        result = self.$s("mlhs", val['$[]'](0));
        return result;
      }, TMP_379.$$arity = 3);

      Opal.defn(self, '$_reduce_532', TMP_380 = function ː_reduce_532(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      }, TMP_380.$$arity = 3);

      Opal.defn(self, '$_reduce_534', TMP_381 = function ː_reduce_534(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.$s("restarg", val['$[]'](3)));
        return result;
      }, TMP_381.$$arity = 3);

      Opal.defn(self, '$_reduce_535', TMP_382 = function ː_reduce_535(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.$s("restarg", val['$[]'](3))).$concat(val['$[]'](5)['$[]']($range(1, -1, false)));
        return result;
      }, TMP_382.$$arity = 3);

      Opal.defn(self, '$_reduce_536', TMP_383 = function ː_reduce_536(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.$s("restarg"));
        return result;
      }, TMP_383.$$arity = 3);

      Opal.defn(self, '$_reduce_537', TMP_384 = function ː_reduce_537(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$push(self.$s("restarg")).$concat(val['$[]'](4)['$[]']($range(1, -1, false)));
        return result;
      }, TMP_384.$$arity = 3);

      Opal.defn(self, '$_reduce_538', TMP_385 = function ː_reduce_538(val, _values, result) {
        var self = this;

        result = self.$s("mlhs", self.$s("restarg", val['$[]'](1)));
        return result;
      }, TMP_385.$$arity = 3);

      Opal.defn(self, '$_reduce_539', TMP_386 = function ː_reduce_539(val, _values, result) {
        var self = this;

        val['$[]'](3).$insert(1, self.$s("restarg", val['$[]'](1)));
        result = val['$[]'](3);
        return result;
      }, TMP_386.$$arity = 3);

      Opal.defn(self, '$_reduce_540', TMP_387 = function ː_reduce_540(val, _values, result) {
        var self = this;

        result = self.$s("mlhs", self.$s("restarg"));
        return result;
      }, TMP_387.$$arity = 3);

      Opal.defn(self, '$_reduce_541', TMP_388 = function ː_reduce_541(val, _values, result) {
        var self = this;

        val['$[]'](2).$insert(1, self.$s("restarg"));
        result = val['$[]'](2);
        return result;
      }, TMP_388.$$arity = 3);

      Opal.defn(self, '$_reduce_542', TMP_389 = function ː_reduce_542(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      }, TMP_389.$$arity = 3);

      Opal.defn(self, '$_reduce_543', TMP_390 = function ː_reduce_543(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      }, TMP_390.$$arity = 3);

      Opal.defn(self, '$_reduce_544', TMP_391 = function ː_reduce_544(val, _values, result) {
        var self = this;

        result = self.$new_assign(self.$new_assignable(self.$new_ident(val['$[]'](0))), val['$[]'](1), val['$[]'](2));
        return result;
      }, TMP_391.$$arity = 3);

      Opal.defn(self, '$_reduce_545', TMP_392 = function ː_reduce_545(val, _values, result) {
        var self = this;

        result = self.$s("block", val['$[]'](0));
        return result;
      }, TMP_392.$$arity = 3);

      Opal.defn(self, '$_reduce_546', TMP_393 = function ː_reduce_546(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      }, TMP_393.$$arity = 3);

      Opal.defn(self, '$_reduce_549', TMP_394 = function ː_reduce_549(val, _values, result) {
        var self = this;

        result = (("*") + (self.$value(val['$[]'](1)))).$to_sym();
        return result;
      }, TMP_394.$$arity = 3);

      Opal.defn(self, '$_reduce_550', TMP_395 = function ː_reduce_550(val, _values, result) {
        var self = this;

        result = "*";
        return result;
      }, TMP_395.$$arity = 3);

      Opal.defn(self, '$_reduce_553', TMP_396 = function ː_reduce_553(val, _values, result) {
        var self = this;

        result = (("&") + (self.$value(val['$[]'](1)))).$to_sym();
        return result;
      }, TMP_396.$$arity = 3);

      Opal.defn(self, '$_reduce_554', TMP_397 = function ː_reduce_554(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_397.$$arity = 3);

      Opal.defn(self, '$_reduce_555', TMP_398 = function ː_reduce_555(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_398.$$arity = 3);

      Opal.defn(self, '$_reduce_556', TMP_399 = function ː_reduce_556(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_399.$$arity = 3);

      Opal.defn(self, '$_reduce_557', TMP_400 = function ː_reduce_557(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      }, TMP_400.$$arity = 3);

      Opal.defn(self, '$_reduce_558', TMP_401 = function ː_reduce_558(val, _values, result) {
        var self = this;

        result = [];
        return result;
      }, TMP_401.$$arity = 3);

      Opal.defn(self, '$_reduce_559', TMP_402 = function ː_reduce_559(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_402.$$arity = 3);

      Opal.defn(self, '$_reduce_560', TMP_403 = function ː_reduce_560(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      }, TMP_403.$$arity = 3);

      Opal.defn(self, '$_reduce_561', TMP_404 = function ː_reduce_561(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat(val['$[]'](2));
        return result;
      }, TMP_404.$$arity = 3);

      Opal.defn(self, '$_reduce_562', TMP_405 = function ː_reduce_562(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      }, TMP_405.$$arity = 3);

      Opal.defn(self, '$_reduce_563', TMP_406 = function ː_reduce_563(val, _values, result) {
        var self = this;

        result = [self.$new_sym(val['$[]'](0)), val['$[]'](1)];
        return result;
      }, TMP_406.$$arity = 3);

      Opal.defn(self, '$_reduce_564', TMP_407 = function ː_reduce_564(val, _values, result) {
        var self = this;

        result = [self.$s("sym", self.$source(val['$[]'](1)).$to_sym()), val['$[]'](3)];
        return result;
      }, TMP_407.$$arity = 3);

      Opal.defn(self, '$_reduce_565', TMP_408 = function ː_reduce_565(val, _values, result) {
        var self = this;

        result = [self.$new_kwsplat(val['$[]'](1))];
        return result;
      }, TMP_408.$$arity = 3);

      Opal.defn(self, '$_reduce_589', TMP_409 = function ː_reduce_589(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      }, TMP_409.$$arity = 3);

      return (Opal.defn(self, '$_reduce_none', TMP_410 = function ː_reduce_none(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }, TMP_410.$$arity = 3), nil) && '_reduce_none';
    })($scope.base, (($scope.get('Racc')).$$scope.get('Parser')))
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser/parser_scope"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$==', '$<<', '$include?', '$has_local?']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ParserScope(){};
      var self = $ParserScope = $klass($base, $super, 'ParserScope', $ParserScope);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.locals = def.parent = def.block = nil;
      self.$attr_reader("locals");

      self.$attr_accessor("parent");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(type) {
        var self = this;

        self.block = type['$==']("block");
        self.locals = [];
        return self.parent = nil;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$add_local', TMP_2 = function ːadd_local(local) {
        var self = this;

        return self.locals['$<<'](local);
      }, TMP_2.$$arity = 1);

      return (Opal.defn(self, '$has_local?', TMP_3 = function(local) {
        var $a, $b, self = this;

        if ((($a = self.locals['$include?'](local)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        if ((($a = ($b = self.parent, $b !== false && $b !== nil ?self.block : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.parent['$has_local?'](local)};
        return false;
      }, TMP_3.$$arity = 1), nil) && 'has_local?';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$!', '$[]', '$new', '$parser=', '$parse_to_sexp', '$join', '$message', '$line', '$lexer', '$column', '$split', '$-', '$+', '$*', '$>', '$raise', '$class', '$backtrace', '$push_scope', '$do_parse', '$pop_scope', '$next_token', '$last', '$parent=', '$<<', '$pop', '$inspect', '$value', '$token_to_str', '$s', '$source=', '$s0', '$source', '$s1', '$file', '$to_sym', '$nil?', '$==', '$length', '$size', '$type', '$each', '$!=', '$empty?', '$add_local', '$scope', '$map', '$is_a?', '$to_s', '$children', '$===', '$new_splat', '$[]=', '$meta', '$concat', '$new_call', '$array', '$-@', '$new_gettable', '$type=', '$has_local?']);
  self.$require("opal/parser/sexp");
  self.$require("opal/parser/lexer");
  self.$require("opal/parser/grammar");
  self.$require("opal/parser/parser_scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_52, TMP_53, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_61, TMP_62, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_76, TMP_77, TMP_78, TMP_79, TMP_80, TMP_81, TMP_82, TMP_83, TMP_84, TMP_85, TMP_86, TMP_87, TMP_88, TMP_89, TMP_90, TMP_91, TMP_92, TMP_93, TMP_94, TMP_95;

      def.lexer = def.file = def.scopes = nil;
      self.$attr_reader("lexer", "file", "scope");

      Opal.defn(self, '$parse', TMP_1 = function ːparse(source, file) {
        var $a, $b, self = this, error = nil, message = nil;

        if (file == null) {
          file = "(string)";
        }
        try {
          if ((($a = $scope.get('ENV')['$[]']("RACC_DEBUG")['$!']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.yydebug = true};
          self.file = file;
          self.scopes = [];
          self.lexer = $scope.get('Lexer').$new(source, file);
          (($a = [self]), $b = self.lexer, $b['$parser='].apply($b, $a), $a[$a.length-1]);
          return self.$parse_to_sexp();
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {error = $err;
            try {
              message = [nil, error.$message(), "Source: " + (self.file) + ":" + (self.$lexer().$line()) + ":" + (self.$lexer().$column()), source.$split("\n")['$[]']($rb_minus(self.$lexer().$line(), 1)), $rb_plus($rb_times("~", ((function() {if ((($a = $rb_gt($rb_minus(self.$lexer().$column(), 1), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return $rb_minus(self.$lexer().$column(), 1)
                } else {
                return 0
              }; return nil; })())), "^")].$join("\n");
              return self.$raise(error.$class(), message, error.$backtrace());
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$parse_to_sexp', TMP_2 = function ːparse_to_sexp() {
        var self = this, result = nil;

        self.$push_scope();
        result = self.$do_parse();
        self.$pop_scope();
        return result;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$next_token', TMP_3 = function ːnext_token() {
        var self = this;

        return self.lexer.$next_token();
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$s', TMP_4 = function ːs($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $scope.get('Sexp').$new(parts);
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$push_scope', TMP_5 = function ːpush_scope(type) {
        var $a, $b, self = this, top = nil, scope = nil;

        if (type == null) {
          type = nil;
        }
        top = self.scopes.$last();
        scope = $scope.get('ParserScope').$new(type);
        (($a = [top]), $b = scope, $b['$parent='].apply($b, $a), $a[$a.length-1]);
        self.scopes['$<<'](scope);
        return self.scope = scope;
      }, TMP_5.$$arity = -1);

      Opal.defn(self, '$pop_scope', TMP_6 = function ːpop_scope() {
        var self = this;

        self.scopes.$pop();
        return self.scope = self.scopes.$last();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$on_error', TMP_7 = function ːon_error(t, val, vstack) {
        var $a, self = this;

        return self.$raise("parse error on value " + (self.$value(val).$inspect()) + " (" + (((($a = self.$token_to_str(t)) !== false && $a !== nil) ? $a : "?")) + ") :" + (self.file) + ":" + (self.$lexer().$line()));
      }, TMP_7.$$arity = 3);

      Opal.defn(self, '$value', TMP_8 = function ːvalue(tok) {
        var self = this;

        return tok['$[]'](0);
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$source', TMP_9 = function ːsource(tok) {
        var self = this;

        if (tok !== false && tok !== nil) {
          return tok['$[]'](1)
          } else {
          return nil
        };
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$s0', TMP_10 = function ːs0(type, source) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s(type);
        (($a = [source]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_10.$$arity = 2);

      Opal.defn(self, '$s1', TMP_11 = function ːs1(type, first, source) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s(type, first);
        (($a = [source]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_11.$$arity = 3);

      Opal.defn(self, '$new_nil', TMP_12 = function ːnew_nil(tok) {
        var self = this;

        return self.$s0("nil", self.$source(tok));
      }, TMP_12.$$arity = 1);

      Opal.defn(self, '$new_self', TMP_13 = function ːnew_self(tok) {
        var self = this;

        return self.$s0("self", self.$source(tok));
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$new_true', TMP_14 = function ːnew_true(tok) {
        var self = this;

        return self.$s0("true", self.$source(tok));
      }, TMP_14.$$arity = 1);

      Opal.defn(self, '$new_false', TMP_15 = function ːnew_false(tok) {
        var self = this;

        return self.$s0("false", self.$source(tok));
      }, TMP_15.$$arity = 1);

      Opal.defn(self, '$new___FILE__', TMP_16 = function ːnew___FILE__(tok) {
        var self = this;

        return self.$s1("str", self.$file(), self.$source(tok));
      }, TMP_16.$$arity = 1);

      Opal.defn(self, '$new___LINE__', TMP_17 = function ːnew___LINE__(tok) {
        var self = this;

        return self.$s1("int", self.$lexer().$line(), self.$source(tok));
      }, TMP_17.$$arity = 1);

      Opal.defn(self, '$new_ident', TMP_18 = function ːnew_ident(tok) {
        var self = this;

        return self.$s1("identifier", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_18.$$arity = 1);

      Opal.defn(self, '$new_int', TMP_19 = function ːnew_int(tok) {
        var self = this;

        return self.$s1("int", self.$value(tok), self.$source(tok));
      }, TMP_19.$$arity = 1);

      Opal.defn(self, '$new_float', TMP_20 = function ːnew_float(tok) {
        var self = this;

        return self.$s1("float", self.$value(tok), self.$source(tok));
      }, TMP_20.$$arity = 1);

      Opal.defn(self, '$new_ivar', TMP_21 = function ːnew_ivar(tok) {
        var self = this;

        return self.$s1("ivar", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_21.$$arity = 1);

      Opal.defn(self, '$new_gvar', TMP_22 = function ːnew_gvar(tok) {
        var self = this;

        return self.$s1("gvar", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_22.$$arity = 1);

      Opal.defn(self, '$new_cvar', TMP_23 = function ːnew_cvar(tok) {
        var self = this;

        return self.$s1("cvar", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_23.$$arity = 1);

      Opal.defn(self, '$new_const', TMP_24 = function ːnew_const(tok) {
        var self = this;

        return self.$s1("const", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$new_colon2', TMP_25 = function ːnew_colon2(lhs, tok, name) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("colon2", lhs, self.$value(name).$to_sym());
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_25.$$arity = 3);

      Opal.defn(self, '$new_colon3', TMP_26 = function ːnew_colon3(tok, name) {
        var self = this;

        return self.$s1("colon3", self.$value(name).$to_sym(), self.$source(name));
      }, TMP_26.$$arity = 2);

      Opal.defn(self, '$new_sym', TMP_27 = function ːnew_sym(tok) {
        var self = this;

        return self.$s1("sym", self.$value(tok).$to_sym(), self.$source(tok));
      }, TMP_27.$$arity = 1);

      Opal.defn(self, '$new_alias', TMP_28 = function ːnew_alias(kw, new$, old) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("alias", new$, old);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_28.$$arity = 3);

      Opal.defn(self, '$new_break', TMP_29 = function ːnew_break(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = nil;
        }
        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("break")
        } else if (args.$length()['$=='](1)) {
          sexp = self.$s("break", args['$[]'](0))
          } else {
          sexp = self.$s("break", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      }, TMP_29.$$arity = -2);

      Opal.defn(self, '$new_return', TMP_30 = function ːnew_return(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = nil;
        }
        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("return")
        } else if (args.$length()['$=='](1)) {
          sexp = self.$s("return", args['$[]'](0))
          } else {
          sexp = self.$s("return", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      }, TMP_30.$$arity = -2);

      Opal.defn(self, '$new_next', TMP_31 = function ːnew_next(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = [];
        }
        if (args.$length()['$=='](1)) {
          sexp = self.$s("next", args['$[]'](0))
          } else {
          sexp = self.$s("next", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      }, TMP_31.$$arity = -2);

      Opal.defn(self, '$new_block', TMP_32 = function ːnew_block(stmt) {
        var self = this, sexp = nil;

        if (stmt == null) {
          stmt = nil;
        }
        sexp = self.$s("block");
        if (stmt !== false && stmt !== nil) {
          sexp['$<<'](stmt)};
        return sexp;
      }, TMP_32.$$arity = -1);

      Opal.defn(self, '$new_compstmt', TMP_33 = function ːnew_compstmt(block) {
        var $a, $b, $c, self = this, comp = nil, result = nil;

        comp = (function() {if (block.$size()['$=='](1)) {
          return nil
        } else if (block.$size()['$=='](2)) {
          return block['$[]'](1)
          } else {
          return block
        }; return nil; })();
        if ((($a = ($b = (($c = comp !== false && comp !== nil) ? comp.$type()['$==']("begin") : comp), $b !== false && $b !== nil ?comp.$size()['$=='](2) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = comp['$[]'](1)
          } else {
          result = comp
        };
        return result;
      }, TMP_33.$$arity = 1);

      Opal.defn(self, '$new_body', TMP_35 = function ːnew_body(compstmt, res, els, ens) {
        var $a, $b, TMP_34, self = this, s = nil;

        s = ((($a = compstmt) !== false && $a !== nil) ? $a : self.$s("block"));
        if (res !== false && res !== nil) {
          s = self.$s("rescue", s);
          ($a = ($b = res).$each, $a.$$p = (TMP_34 = function(r){var self = TMP_34.$$s || this;
if (r == null) r = nil;
          return s['$<<'](r)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
          if (els !== false && els !== nil) {
            s['$<<'](els)};};
        if (ens !== false && ens !== nil) {
          return self.$s("ensure", s, ens)
          } else {
          return s
        };
      }, TMP_35.$$arity = 4);

      Opal.defn(self, '$new_def', TMP_36 = function ːnew_def(kw, recv, name, args, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        if ((($a = body.$type()['$!=']("block")) !== nil && (!$a.$$is_boolean || $a == true))) {
          body = self.$s("block", body)};
        if (body.$size()['$=='](1)) {
          body['$<<'](self.$s("nil"))};
        sexp = self.$s("def", recv, self.$value(name).$to_sym(), args, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_36.$$arity = 6);

      Opal.defn(self, '$new_class', TMP_37 = function ːnew_class(start, path, sup, body, endt) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("class", path, sup, body);
        (($a = [self.$source(start)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_37.$$arity = 5);

      Opal.defn(self, '$new_sclass', TMP_38 = function ːnew_sclass(kw, expr, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("sclass", expr, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_38.$$arity = 4);

      Opal.defn(self, '$new_module', TMP_39 = function ːnew_module(kw, path, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("module", path, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_39.$$arity = 4);

      Opal.defn(self, '$new_iter', TMP_40 = function ːnew_iter(args, body) {
        var $a, self = this, s = nil;

        ((($a = args) !== false && $a !== nil) ? $a : args = nil);
        s = self.$s("iter", args);
        if (body !== false && body !== nil) {
          s['$<<'](body)};
        return s;
      }, TMP_40.$$arity = 2);

      Opal.defn(self, '$new_if', TMP_41 = function ːnew_if(if_tok, expr, stmt, tail) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("if", expr, stmt, tail);
        (($a = [self.$source(if_tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_41.$$arity = 4);

      Opal.defn(self, '$new_while', TMP_42 = function ːnew_while(kw, test, body) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("while", test, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_42.$$arity = 3);

      Opal.defn(self, '$new_until', TMP_43 = function ːnew_until(kw, test, body) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("until", test, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_43.$$arity = 3);

      Opal.defn(self, '$new_rescue_mod', TMP_44 = function ːnew_rescue_mod(kw, expr, resc) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("rescue_mod", expr, resc);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_44.$$arity = 3);

      Opal.defn(self, '$new_array', TMP_45 = function ːnew_array(start, args, finish) {
        var $a, $b, $c, self = this, sexp = nil;

        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        sexp = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args)));
        (($b = [self.$source(start)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      }, TMP_45.$$arity = 3);

      Opal.defn(self, '$new_hash', TMP_46 = function ːnew_hash(open, assocs, close) {
        var $a, $b, $c, self = this, sexp = nil;

        sexp = ($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(assocs)));
        (($b = [self.$source(open)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      }, TMP_46.$$arity = 3);

      Opal.defn(self, '$new_not', TMP_47 = function ːnew_not(kw, expr) {
        var self = this;

        return self.$s1("not", expr, self.$source(kw));
      }, TMP_47.$$arity = 2);

      Opal.defn(self, '$new_paren', TMP_48 = function ːnew_paren(open, expr, close) {
        var $a, $b, self = this;

        if ((($a = ((($b = expr['$nil?']()) !== false && $b !== nil) ? $b : expr['$=='](["block"]))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s1("paren", self.$s0("nil", self.$source(open)), self.$source(open))
          } else {
          return self.$s1("paren", expr, self.$source(open))
        };
      }, TMP_48.$$arity = 3);

      Opal.defn(self, '$new_args_tail', TMP_49 = function ːnew_args_tail(kwarg, kwrest, block) {
        var self = this;

        return [kwarg, kwrest, block];
      }, TMP_49.$$arity = 3);

      Opal.defn(self, '$new_restarg', TMP_50 = function ːnew_restarg(rest) {
        var $a, self = this, restname = nil;

        restname = rest['$[]']($range(1, -1, false));
        if ((($a = restname['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return [self.$s("restarg")]
          } else {
          self.$scope().$add_local(restname.$to_sym());
          return [self.$s("restarg", restname.$to_sym())];
        };
      }, TMP_50.$$arity = 1);

      Opal.defn(self, '$new_optarg', TMP_52 = function ːnew_optarg(opt) {
        var $a, $b, TMP_51, self = this;

        if (opt !== false && opt !== nil) {
          return ($a = ($b = opt['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_51 = function(_opt){var self = TMP_51.$$s || this;
if (_opt == null) _opt = nil;
          return self.$s("optarg", _opt['$[]'](1), _opt['$[]'](2))}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51), $a).call($b)
          } else {
          return nil
        };
      }, TMP_52.$$arity = 1);

      Opal.defn(self, '$new_shadowarg', TMP_53 = function ːnew_shadowarg(shadowarg) {
        var self = this, shadowname = nil;

        if (shadowarg !== false && shadowarg !== nil) {
          shadowname = self.$value(shadowarg).$to_sym();
          self.$scope().$add_local(shadowname);
          return self.$s("shadowarg", shadowname);
          } else {
          return nil
        };
      }, TMP_53.$$arity = 1);

      Opal.defn(self, '$new_args', TMP_56 = function ːnew_args(norm, tail) {
        var $a, $b, TMP_54, $c, TMP_55, $d, self = this, res = nil, blockname = nil;

        res = self.$s("args");
        if (norm !== false && norm !== nil) {
          ($a = ($b = norm).$each, $a.$$p = (TMP_54 = function(arg){var self = TMP_54.$$s || this, $c;
if (arg == null) arg = nil;
          if ((($c = arg['$is_a?']($scope.get('Sexp'))) !== nil && (!$c.$$is_boolean || $c == true))) {
              return res['$<<'](arg)
              } else {
              self.$scope().$add_local(arg);
              return res['$<<'](self.$s("arg", arg));
            }}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54), $a).call($b)};
        if ((($a = (($c = tail !== false && tail !== nil) ? tail['$[]'](0) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = tail['$[]'](0)).$each, $a.$$p = (TMP_55 = function(kwarg){var self = TMP_55.$$s || this;
if (kwarg == null) kwarg = nil;
          return res['$<<'](kwarg)}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55), $a).call($c)};
        if ((($a = (($d = tail !== false && tail !== nil) ? tail['$[]'](1) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          res['$<<'](tail['$[]'](1))};
        if ((($a = (($d = tail !== false && tail !== nil) ? tail['$[]'](2) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          blockname = tail['$[]'](2).$to_s()['$[]']($range(1, -1, false)).$to_sym();
          self.$scope().$add_local(blockname);
          res['$<<'](self.$s("blockarg", blockname));};
        return res;
      }, TMP_56.$$arity = 2);

      Opal.defn(self, '$new_kwarg', TMP_57 = function ːnew_kwarg(name) {
        var self = this;

        self.$scope().$add_local(name['$[]'](1));
        return self.$s("kwarg", name['$[]'](1));
      }, TMP_57.$$arity = 1);

      Opal.defn(self, '$new_kwoptarg', TMP_58 = function ːnew_kwoptarg(name, val) {
        var self = this;

        self.$scope().$add_local(name['$[]'](1));
        return self.$s("kwoptarg", name['$[]'](1), val);
      }, TMP_58.$$arity = 2);

      Opal.defn(self, '$new_kwrestarg', TMP_59 = function ːnew_kwrestarg(name) {
        var self = this, result = nil;

        if (name == null) {
          name = nil;
        }
        result = self.$s("kwrestarg");
        if (name !== false && name !== nil) {
          self.$scope().$add_local(name['$[]'](0).$to_sym());
          result['$<<'](name['$[]'](0).$to_sym());};
        return result;
      }, TMP_59.$$arity = -1);

      Opal.defn(self, '$new_kwsplat', TMP_60 = function ːnew_kwsplat(hash) {
        var self = this;

        return self.$s("kwsplat", hash);
      }, TMP_60.$$arity = 1);

      Opal.defn(self, '$new_method_call_with_block', TMP_61 = function ːnew_method_call_with_block(method_call, block_arg) {
        var $a, $b, self = this, receiver = nil, method_name = nil, call_args = nil, last_arg = nil;

        $a = Opal.to_a(method_call.$children()), receiver = ($a[0] == null ? nil : $a[0]), method_name = ($a[1] == null ? nil : $a[1]), call_args = ($a[2] == null ? nil : $a[2]), $a;
        if ((($a = (($b = call_args !== false && call_args !== nil) ? block_arg : call_args)) !== nil && (!$a.$$is_boolean || $a == true))) {
          last_arg = call_args.$last();
          if ((($a = ($b = $scope.get('Sexp')['$==='](last_arg), $b !== false && $b !== nil ?last_arg.$type()['$==']("block_pass") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("both block argument and literal block are passed")};};
        return method_call['$<<'](block_arg);
      }, TMP_61.$$arity = 2);

      Opal.defn(self, '$new_block_arg_splat', TMP_62 = function ːnew_block_arg_splat(rest) {
        var self = this, r = nil;

        if (rest !== false && rest !== nil) {
          r = rest.$to_s()['$[]']($range(1, -1, false)).$to_sym();
          self.$scope().$add_local(r);
          return self.$new_splat(nil, self.$s("lasgn", r));
          } else {
          return nil
        };
      }, TMP_62.$$arity = 1);

      Opal.defn(self, '$new_block_args', TMP_65 = function ːnew_block_args(norm, tail, shadow_args) {
        var $a, $b, TMP_63, $c, TMP_64, $d, self = this, res = nil, block = nil;

        if (shadow_args == null) {
          shadow_args = nil;
        }
        res = self.$s("args");
        if (norm !== false && norm !== nil) {
          ($a = ($b = norm).$each, $a.$$p = (TMP_63 = function(arg){var self = TMP_63.$$s || this, $c;
if (arg == null) arg = nil;
          if ((($c = arg['$is_a?']($scope.get('Symbol'))) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$scope().$add_local(arg);
              return res['$<<'](self.$s("arg", arg));
            } else if ((($c = arg['$is_a?']($scope.get('Sexp'))) !== nil && (!$c.$$is_boolean || $c == true))) {
              return res['$<<'](arg)
            } else if ((($c = arg['$nil?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return res.$meta()['$[]=']("has_trailing_comma", true)
              } else {
              return nil
            }}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63), $a).call($b)};
        if ((($a = (($c = tail !== false && tail !== nil) ? tail['$[]'](0) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = tail['$[]'](0)).$each, $a.$$p = (TMP_64 = function(kwarg){var self = TMP_64.$$s || this;
if (kwarg == null) kwarg = nil;
          return res['$<<'](kwarg)}, TMP_64.$$s = self, TMP_64.$$arity = 1, TMP_64), $a).call($c)};
        if ((($a = (($d = tail !== false && tail !== nil) ? tail['$[]'](1) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          res['$<<'](tail['$[]'](1))};
        if ((($a = (($d = tail !== false && tail !== nil) ? tail['$[]'](2) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          block = tail['$[]'](2).$to_s()['$[]']($range(1, -1, false)).$to_sym();
          res['$<<'](self.$s("block_pass", self.$s("lasgn", block)));
          self.$scope().$add_local(block);};
        if (shadow_args !== false && shadow_args !== nil) {
          res.$concat(shadow_args)};
        return self.$s("masgn", res);
      }, TMP_65.$$arity = -3);

      Opal.defn(self, '$new_call', TMP_66 = function ːnew_call(recv, meth, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if (args == null) {
          args = nil;
        }
        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        sexp = self.$s("call", recv, self.$value(meth).$to_sym(), ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
        (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      }, TMP_66.$$arity = -3);

      Opal.defn(self, '$new_js_call', TMP_67 = function ːnew_js_call(recv, meth, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if (args == null) {
          args = nil;
        }
        if (args !== false && args !== nil) {
          sexp = self.$s("jscall", recv, self.$value(meth).$to_sym(), ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
          (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
          } else {
          sexp = self.$s("jscall", recv, self.$value(meth).$to_sym(), nil);
          (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        };
        return sexp;
      }, TMP_67.$$arity = -3);

      Opal.defn(self, '$new_binary_call', TMP_68 = function ːnew_binary_call(recv, meth, arg) {
        var self = this;

        return self.$new_call(recv, meth, [arg]);
      }, TMP_68.$$arity = 3);

      Opal.defn(self, '$new_unary_call', TMP_69 = function ːnew_unary_call(op, recv) {
        var self = this;

        return self.$new_call(recv, op, []);
      }, TMP_69.$$arity = 2);

      Opal.defn(self, '$new_and', TMP_70 = function ːnew_and(lhs, tok, rhs) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("and", lhs, rhs);
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_70.$$arity = 3);

      Opal.defn(self, '$new_or', TMP_71 = function ːnew_or(lhs, tok, rhs) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("or", lhs, rhs);
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_71.$$arity = 3);

      Opal.defn(self, '$new_irange', TMP_72 = function ːnew_irange(beg, op, finish) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("irange", beg, finish);
        (($a = [self.$source(op)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_72.$$arity = 3);

      Opal.defn(self, '$new_erange', TMP_73 = function ːnew_erange(beg, op, finish) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("erange", beg, finish);
        (($a = [self.$source(op)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      }, TMP_73.$$arity = 3);

      Opal.defn(self, '$negate_num', TMP_74 = function ːnegate_num(sexp) {
        var self = this;

        sexp.$array()['$[]='](1, sexp.$array()['$[]'](1)['$-@']());
        return sexp;
      }, TMP_74.$$arity = 1);

      Opal.defn(self, '$add_block_pass', TMP_75 = function ːadd_block_pass(arglist, block) {
        var self = this;

        if (block !== false && block !== nil) {
          arglist['$<<'](block)};
        return arglist;
      }, TMP_75.$$arity = 2);

      Opal.defn(self, '$new_block_pass', TMP_76 = function ːnew_block_pass(amper_tok, val) {
        var self = this;

        return self.$s1("block_pass", val, self.$source(amper_tok));
      }, TMP_76.$$arity = 2);

      Opal.defn(self, '$new_splat', TMP_77 = function ːnew_splat(tok, value) {
        var self = this;

        return self.$s1("splat", value, self.$source(tok));
      }, TMP_77.$$arity = 2);

      Opal.defn(self, '$new_op_asgn', TMP_78 = function ːnew_op_asgn(op, lhs, rhs) {
        var self = this, $case = nil, result = nil;

        $case = self.$value(op).$to_sym();if ("||"['$===']($case)) {result = self.$s("op_asgn_or", self.$new_gettable(lhs));
        result['$<<']((lhs['$<<'](rhs)));}else if ("&&"['$===']($case)) {result = self.$s("op_asgn_and", self.$new_gettable(lhs));
        result['$<<']((lhs['$<<'](rhs)));}else {result = lhs;
        result['$<<'](self.$new_call(self.$new_gettable(lhs), op, [rhs]));};
        return result;
      }, TMP_78.$$arity = 3);

      Opal.defn(self, '$new_op_asgn1', TMP_79 = function ːnew_op_asgn1(lhs, args, op, rhs) {
        var $a, $b, $c, self = this, arglist = nil, sexp = nil;

        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("op_asgn1", lhs, arglist, self.$value(op), rhs);
        (($b = [self.$source(op)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      }, TMP_79.$$arity = 4);

      Opal.defn(self, '$op_to_setter', TMP_80 = function ːop_to_setter(op) {
        var self = this;

        return ((("") + (self.$value(op))) + "=").$to_sym();
      }, TMP_80.$$arity = 1);

      Opal.defn(self, '$new_attrasgn', TMP_81 = function ːnew_attrasgn(recv, op, args) {
        var $a, self = this, arglist = nil, sexp = nil;

        if (args == null) {
          args = [];
        }
        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("attrasgn", recv, op, arglist);
        return sexp;
      }, TMP_81.$$arity = -3);

      Opal.defn(self, '$new_js_attrasgn', TMP_82 = function ːnew_js_attrasgn(recv, args) {
        var $a, self = this, arglist = nil, sexp = nil;

        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("jsattrasgn", recv, nil, arglist);
        return sexp;
      }, TMP_82.$$arity = 2);

      Opal.defn(self, '$new_assign', TMP_83 = function ːnew_assign(lhs, tok, rhs) {
        var $a, $b, self = this, $case = nil;

        return (function() {$case = lhs.$type();if ("iasgn"['$===']($case) || "cdecl"['$===']($case) || "lasgn"['$===']($case) || "gasgn"['$===']($case) || "cvdecl"['$===']($case) || "nth_ref"['$===']($case)) {lhs['$<<'](rhs);
        return lhs;}else if ("call"['$===']($case) || "attrasgn"['$===']($case) || "jsattrasgn"['$===']($case)) {lhs.$last()['$<<'](rhs);
        return lhs;}else if ("colon2"['$===']($case)) {lhs['$<<'](rhs);
        (($a = ["casgn"]), $b = lhs, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return lhs;}else if ("colon3"['$===']($case)) {lhs['$<<'](rhs);
        (($a = ["casgn3"]), $b = lhs, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return lhs;}else {return self.$raise("Bad lhs for new_assign: " + (lhs.$type()))}})();
      }, TMP_83.$$arity = 3);

      Opal.defn(self, '$new_assignable', TMP_84 = function ːnew_assignable(ref) {
        var $a, $b, self = this, $case = nil;

        $case = ref.$type();if ("ivar"['$===']($case)) {(($a = ["iasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("const"['$===']($case)) {(($a = ["cdecl"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("identifier"['$===']($case)) {if ((($a = self.$scope()['$has_local?'](ref['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$scope().$add_local(ref['$[]'](1))
        };
        (($a = ["lasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1]);}else if ("gvar"['$===']($case)) {(($a = ["gasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("cvar"['$===']($case)) {(($a = ["cvdecl"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else {self.$raise($scope.get('SyntaxError'), "Bad new_assignable type: " + (ref.$type()))};
        return ref;
      }, TMP_84.$$arity = 1);

      Opal.defn(self, '$new_gettable', TMP_85 = function ːnew_gettable(ref) {
        var $a, $b, self = this, res = nil, $case = nil;

        res = (function() {$case = ref.$type();if ("lasgn"['$===']($case)) {return self.$s("lvar", ref['$[]'](1))}else if ("iasgn"['$===']($case)) {return self.$s("ivar", ref['$[]'](1))}else if ("gasgn"['$===']($case)) {return self.$s("gvar", ref['$[]'](1))}else if ("cvdecl"['$===']($case)) {return self.$s("cvar", ref['$[]'](1))}else if ("cdecl"['$===']($case)) {return self.$s("const", ref['$[]'](1))}else {return self.$raise("Bad new_gettable ref: " + (ref.$type()))}})();
        (($a = [ref.$source()]), $b = res, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return res;
      }, TMP_85.$$arity = 1);

      Opal.defn(self, '$new_var_ref', TMP_86 = function ːnew_var_ref(ref) {
        var $a, $b, self = this, $case = nil, result = nil;

        return (function() {$case = ref.$type();if ("self"['$===']($case) || "nil"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "line"['$===']($case) || "file"['$===']($case)) {return ref}else if ("const"['$===']($case)) {return ref}else if ("ivar"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case)) {return ref}else if ("int"['$===']($case)) {return ref}else if ("str"['$===']($case)) {return ref}else if ("identifier"['$===']($case)) {result = (function() {if ((($a = self.$scope()['$has_local?'](ref['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s("lvar", ref['$[]'](1))
          } else {
          return self.$s("call", nil, ref['$[]'](1), self.$s("arglist"))
        }; return nil; })();
        (($a = [ref.$source()]), $b = result, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return result;}else {return self.$raise("Bad var_ref type: " + (ref.$type()))}})();
      }, TMP_86.$$arity = 1);

      Opal.defn(self, '$new_super', TMP_87 = function ːnew_super(kw, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("super", nil)
          } else {
          sexp = self.$s("super", ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))))
        };
        (($b = [self.$source(kw)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      }, TMP_87.$$arity = 2);

      Opal.defn(self, '$new_yield', TMP_88 = function ːnew_yield(args) {
        var $a, self = this;

        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        return ($a = self).$s.apply($a, ["yield"].concat(Opal.to_a(args)));
      }, TMP_88.$$arity = 1);

      Opal.defn(self, '$new_xstr', TMP_89 = function ːnew_xstr(start_t, str, end_t) {
        var $a, $b, self = this, $case = nil;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("xstr", "")
        };
        $case = str.$type();if ("str"['$===']($case)) {(($a = ["xstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("dstr"['$===']($case)) {(($a = ["dxstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("evstr"['$===']($case)) {str = self.$s("dxstr", "", str)};
        (($a = [self.$source(start_t)]), $b = str, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return str;
      }, TMP_89.$$arity = 3);

      Opal.defn(self, '$new_dsym', TMP_90 = function ːnew_dsym(str) {
        var $a, $b, self = this, $case = nil;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("sym", "")
        };
        $case = str.$type();if ("str"['$===']($case)) {(($a = ["sym"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1]);
        str['$[]='](1, str['$[]'](1).$to_sym());}else if ("dstr"['$===']($case)) {(($a = ["dsym"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("evstr"['$===']($case)) {str = self.$s("dsym", str)};
        return str;
      }, TMP_90.$$arity = 1);

      Opal.defn(self, '$new_evstr', TMP_91 = function ːnew_evstr(str) {
        var self = this;

        return self.$s("evstr", str);
      }, TMP_91.$$arity = 1);

      Opal.defn(self, '$new_str', TMP_92 = function ːnew_str(str) {
        var $a, $b, $c, self = this;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("str", "")
        };
        if ((($a = ($b = (($c = str.$size()['$=='](3)) ? str['$[]'](1)['$==']("") : str.$size()['$=='](3)), $b !== false && $b !== nil ?str.$type()['$==']("str") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return str['$[]'](2)
        } else if ((($a = (($b = str.$type()['$==']("str")) ? $rb_gt(str.$size(), 3) : str.$type()['$==']("str"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = ["dstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1]);
          return str;
        } else if (str.$type()['$==']("evstr")) {
          return self.$s("dstr", "", str)
          } else {
          return str
        };
      }, TMP_92.$$arity = 1);

      Opal.defn(self, '$new_regexp', TMP_93 = function ːnew_regexp(reg, ending) {
        var $a, $b, self = this, $case = nil;

        if (reg !== false && reg !== nil) {
          } else {
          return self.$s("regexp", "")
        };
        return (function() {$case = reg.$type();if ("str"['$===']($case)) {return self.$s("regexp", reg['$[]'](1), self.$value(ending))}else if ("evstr"['$===']($case)) {return self.$s("dregx", "", reg)}else if ("dstr"['$===']($case)) {(($a = ["dregx"]), $b = reg, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return reg;}else { return nil }})();
      }, TMP_93.$$arity = 2);

      Opal.defn(self, '$str_append', TMP_94 = function ːstr_append(str, str2) {
        var self = this;

        if (str !== false && str !== nil) {
          } else {
          return str2
        };
        if (str2 !== false && str2 !== nil) {
          } else {
          return str
        };
        if (str.$type()['$==']("evstr")) {
          str = self.$s("dstr", "", str)
        } else if (str.$type()['$==']("str")) {
          str = self.$s("dstr", str['$[]'](1))};
        str['$<<'](str2);
        return str;
      }, TMP_94.$$arity = 2);

      return (Opal.defn(self, '$new_str_content', TMP_95 = function ːnew_str_content(tok) {
        var self = this;

        return self.$s1("str", self.$value(tok), self.$source(tok));
      }, TMP_95.$$arity = 1), nil) && 'new_str_content';
    })($scope.base, (($scope.get('Racc')).$$scope.get('Parser')))
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/fragment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_s', '$inspect', '$def?', '$find_parent_def', '$mid', '$line', '$column']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Fragment(){};
      var self = $Fragment = $klass($base, $super, 'Fragment', $Fragment);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      def.code = def.scope = def.sexp = nil;
      self.$attr_reader("code");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(code, scope, sexp) {
        var self = this;

        if (sexp == null) {
          sexp = nil;
        }
        self.code = code.$to_s();
        self.sexp = sexp;
        return self.scope = scope;
      }, TMP_1.$$arity = -3);

      Opal.defn(self, '$inspect', TMP_2 = function ːinspect() {
        var self = this;

        return "f(" + (self.code.$inspect()) + ")";
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$source_map_name', TMP_3 = function ːsource_map_name() {
        var $a, self = this, def_node = nil;

        if ((($a = self.scope) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        def_node = (function() {if ((($a = self.scope['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.scope
          } else {
          return self.scope.$find_parent_def()
        }; return nil; })();
        return (($a = def_node !== false && def_node !== nil) ? def_node.$mid() : def_node);
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$line', TMP_4 = function ːline() {
        var $a, self = this;

        if ((($a = self.sexp) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.sexp.$line()
          } else {
          return nil
        };
      }, TMP_4.$$arity = 0);

      return (Opal.defn(self, '$column', TMP_5 = function ːcolumn() {
        var $a, self = this;

        if ((($a = self.sexp) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.sexp.$column()
          } else {
          return nil
        };
      }, TMP_5.$$arity = 0), nil) && 'column';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$valid_name?', '$inspect', '$=~', '$!', '$to_s', '$valid_ivar_name?', '$to_sym', '$+', '$indent', '$to_proc', '$compiler', '$parser_indent', '$push', '$current_indent', '$js_truthy_optimize', '$with_temp', '$fragment', '$expr', '$==', '$type', '$[]', '$uses_block!', '$scope', '$block_name', '$handlers', '$include?', '$truthy_optimize?', '$dup']);
  self.$require("opal/regexp_anchors");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Helpers, self = $Helpers = $module($base, 'Helpers');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16;

        Opal.cdecl($scope, 'ES51_RESERVED_WORD', (new RegExp("" + $scope.get('REGEXP_START') + "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'ES3_RESERVED_WORD_EXCLUSIVE', (new RegExp("" + $scope.get('REGEXP_START') + "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'PROTO_SPECIAL_PROPS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'PROTO_SPECIAL_METHODS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:hasOwnProperty|valueOf)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'IMMUTABLE_PROPS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:NaN|Infinity|undefined)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'BASIC_IDENTIFIER_RULES', (new RegExp("" + $scope.get('REGEXP_START') + "[$_a-z][$_a-z\\d]*" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'RESERVED_FUNCTION_NAMES', (new RegExp("" + $scope.get('REGEXP_START') + "(?:Array)" + $scope.get('REGEXP_END'))));

        Opal.defn(self, '$property', TMP_1 = function ːproperty(name) {
          var $a, self = this;

          if ((($a = self['$valid_name?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "." + (name)
            } else {
            return "[" + (name.$inspect()) + "]"
          };
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$valid_name?', TMP_2 = function(name) {
          var $a, $b, $c, self = this;

          return ($a = $scope.get('BASIC_IDENTIFIER_RULES')['$=~'](name), $a !== false && $a !== nil ?(((($b = ((($c = $scope.get('ES51_RESERVED_WORD')['$=~'](name)) !== false && $c !== nil) ? $c : $scope.get('ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name))) !== false && $b !== nil) ? $b : $scope.get('IMMUTABLE_PROPS')['$=~'](name)))['$!']() : $a);
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$variable', TMP_3 = function ːvariable(name) {
          var $a, self = this;

          if ((($a = self['$valid_name?'](name.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return name
            } else {
            return "" + (name) + "$"
          };
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$valid_ivar_name?', TMP_4 = function(name) {
          var $a, self = this;

          return (((($a = $scope.get('PROTO_SPECIAL_PROPS')['$=~'](name)) !== false && $a !== nil) ? $a : $scope.get('PROTO_SPECIAL_METHODS')['$=~'](name)))['$!']();
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$ivar', TMP_5 = function ːivar(name) {
          var $a, self = this;

          if ((($a = self['$valid_ivar_name?'](name.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return name
            } else {
            return "" + (name) + "$"
          };
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$lvar_to_js', TMP_6 = function ːlvar_to_js(var$) {
          var $a, self = this, var$ = nil;

          if ((($a = self['$valid_name?'](var$.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            var$ = "" + (var$) + "$"
          };
          return var$.$to_sym();
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$mid_to_jsid', TMP_7 = function ːmid_to_jsid(mid) {
          var $a, self = this;

          if ((($a = /\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[/['$=~'](mid.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "['$" + (mid) + "']"
            } else {
            return $rb_plus(".$", mid)
          };
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$indent', TMP_8 = function ːindent() {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          TMP_8.$$p = null;
          return ($a = ($b = self.$compiler()).$indent, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$current_indent', TMP_9 = function ːcurrent_indent() {
          var self = this;

          return self.$compiler().$parser_indent();
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$line', TMP_10 = function ːline($a_rest) {
          var $b, self = this, strs;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          strs = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            strs[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.$push("\n" + (self.$current_indent()));
          return ($b = self).$push.apply($b, Opal.to_a(strs));
        }, TMP_10.$$arity = -1);

        Opal.defn(self, '$empty_line', TMP_11 = function ːempty_line() {
          var self = this;

          return self.$push("\n");
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$js_truthy', TMP_13 = function ːjs_truthy(sexp) {
          var $a, $b, TMP_12, self = this, optimize = nil;

          if ((($a = optimize = self.$js_truthy_optimize(sexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return optimize};
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_12 = function(tmp){var self = TMP_12.$$s || this;
if (tmp == null) tmp = nil;
          return [self.$fragment("((" + (tmp) + " = "), self.$expr(sexp), self.$fragment(") !== nil && (!" + (tmp) + ".$$is_boolean || " + (tmp) + " == true))")]}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$js_falsy', TMP_15 = function ːjs_falsy(sexp) {
          var $a, $b, TMP_14, self = this, mid = nil;

          if (sexp.$type()['$==']("call")) {
            mid = sexp['$[]'](2);
            if (mid['$==']("block_given?")) {
              self.$scope()['$uses_block!']();
              return "" + (self.$scope().$block_name()) + " === nil";};};
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_14 = function(tmp){var self = TMP_14.$$s || this;
if (tmp == null) tmp = nil;
          return [self.$fragment("((" + (tmp) + " = "), self.$expr(sexp), self.$fragment(") === nil || (" + (tmp) + ".$$is_boolean && " + (tmp) + " == false))")]}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$js_truthy_optimize', TMP_16 = function ːjs_truthy_optimize(sexp) {
          var $a, $b, $c, self = this, mid = nil, receiver_handler_class = nil, receiver = nil, allow_optimization_on_type = nil;

          if (sexp.$type()['$==']("call")) {
            mid = sexp['$[]'](2);
            receiver_handler_class = ($a = (receiver = sexp['$[]'](1)), $a !== false && $a !== nil ?self.$compiler().$handlers()['$[]'](receiver.$type()) : $a);
            allow_optimization_on_type = ($a = ($b = (($scope.get('Compiler')).$$scope.get('COMPARE'))['$include?'](mid.$to_s()), $b !== false && $b !== nil ?receiver_handler_class : $b), $a !== false && $a !== nil ?receiver_handler_class['$truthy_optimize?']() : $a);
            if ((($a = ((($b = ((($c = allow_optimization_on_type) !== false && $c !== nil) ? $c : mid['$==']("block_given?"))) !== false && $b !== nil) ? $b : mid['$==']("=="))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$expr(sexp)
              } else {
              return nil
            };
          } else if ((($a = ["lvar", "self"]['$include?'](sexp.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return [self.$expr(sexp.$dup()), self.$fragment(" !== false && "), self.$expr(sexp.$dup()), self.$fragment(" !== nil")]
            } else {
            return nil
          };
        }, TMP_16.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/base"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$each_with_index', '$define_method', '$[]', '$+', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$unshift', '$reverse', '$push', '$new', '$scope', '$error', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get', '$has_rescue_else?', '$in_ensure', '$in_ensure?']);
  self.$require("opal/nodes/helpers");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39;

        def.sexp = def.fragments = def.compiler = def.level = nil;
        self.$include($scope.get('Helpers'));

        Opal.defs(self, '$handlers', TMP_1 = function ːhandlers() {
          var $a, self = this;
          if (self.handlers == null) self.handlers = nil;

          return ((($a = self.handlers) !== false && $a !== nil) ? $a : self.handlers = $hash2([], {}));
        }, TMP_1.$$arity = 0);

        Opal.defs(self, '$handle', TMP_3 = function ːhandle($a_rest) {
          var $b, $c, TMP_2, self = this, types;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          types = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            types[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = types).$each, $b.$$p = (TMP_2 = function(type){var self = TMP_2.$$s || this;
if (type == null) type = nil;
          return $scope.get('Base').$handlers()['$[]='](type, self)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
        }, TMP_3.$$arity = -1);

        Opal.defs(self, '$children', TMP_6 = function ːchildren($a_rest) {
          var $b, $c, TMP_4, self = this, names;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = names).$each_with_index, $b.$$p = (TMP_4 = function(name, idx){var self = TMP_4.$$s || this, $a, $d, TMP_5;
if (name == null) name = nil;if (idx == null) idx = nil;
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;
              if (self.sexp == null) self.sexp = nil;

            return self.sexp['$[]']($rb_plus(idx, 1))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d, name)}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $b).call($c);
        }, TMP_6.$$arity = -1);

        Opal.defs(self, '$truthy_optimize?', TMP_7 = function() {
          var self = this;

          return false;
        }, TMP_7.$$arity = 0);

        self.$attr_reader("compiler", "type");

        Opal.defn(self, '$initialize', TMP_8 = function ːinitialize(sexp, level, compiler) {
          var self = this;

          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return self.compiler = compiler;
        }, TMP_8.$$arity = 3);

        Opal.defn(self, '$children', TMP_9 = function ːchildren() {
          var self = this;

          return self.sexp['$[]']($range(1, -1, false));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$compile_to_fragments', TMP_10 = function ːcompile_to_fragments() {
          var $a, $b, self = this;

          if ((($a = (($b = self['fragments'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$compile', TMP_11 = function ːcompile() {
          var self = this;

          return self.$raise("Not Implemented");
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$push', TMP_13 = function ːpush($a_rest) {
          var $b, $c, TMP_12, self = this, strs;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          strs = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            strs[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = strs).$each, $b.$$p = (TMP_12 = function(str){var self = TMP_12.$$s || this, $a;
            if (self.fragments == null) self.fragments = nil;
if (str == null) str = nil;
          if ((($a = str['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
        }, TMP_13.$$arity = -1);

        Opal.defn(self, '$unshift', TMP_15 = function ːunshift($a_rest) {
          var $b, $c, TMP_14, self = this, strs;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          strs = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            strs[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = ($c = strs.$reverse()).$each, $b.$$p = (TMP_14 = function(str){var self = TMP_14.$$s || this, $a;
            if (self.fragments == null) self.fragments = nil;
if (str == null) str = nil;
          if ((($a = str['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($c);
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$wrap', TMP_16 = function ːwrap(pre, post) {
          var self = this;

          self.$unshift(pre);
          return self.$push(post);
        }, TMP_16.$$arity = 2);

        Opal.defn(self, '$fragment', TMP_17 = function ːfragment(str) {
          var self = this;

          return (($scope.get('Opal')).$$scope.get('Fragment')).$new(str, self.$scope(), self.sexp);
        }, TMP_17.$$arity = 1);

        Opal.defn(self, '$error', TMP_18 = function ːerror(msg) {
          var self = this;

          return self.compiler.$error(msg);
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$scope', TMP_19 = function ːscope() {
          var self = this;

          return self.compiler.$scope();
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$s', TMP_20 = function ːs($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = self.compiler).$s.apply($b, Opal.to_a(args));
        }, TMP_20.$$arity = -1);

        Opal.defn(self, '$expr?', TMP_21 = function() {
          var self = this;

          return self.level['$==']("expr");
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$recv?', TMP_22 = function() {
          var self = this;

          return self.level['$==']("recv");
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$stmt?', TMP_23 = function() {
          var self = this;

          return self.level['$==']("stmt");
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$process', TMP_24 = function ːprocess(sexp, level) {
          var self = this;

          if (level == null) {
            level = "expr";
          }
          return self.compiler.$process(sexp, level);
        }, TMP_24.$$arity = -2);

        Opal.defn(self, '$expr', TMP_25 = function ːexpr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr");
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$recv', TMP_26 = function ːrecv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv");
        }, TMP_26.$$arity = 1);

        Opal.defn(self, '$stmt', TMP_27 = function ːstmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt");
        }, TMP_27.$$arity = 1);

        Opal.defn(self, '$expr_or_nil', TMP_28 = function ːexpr_or_nil(sexp) {
          var self = this;

          if (sexp !== false && sexp !== nil) {
            return self.$expr(sexp)
            } else {
            return "nil"
          };
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$add_local', TMP_29 = function ːadd_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym());
        }, TMP_29.$$arity = 1);

        Opal.defn(self, '$add_ivar', TMP_30 = function ːadd_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name);
        }, TMP_30.$$arity = 1);

        Opal.defn(self, '$add_gvar', TMP_31 = function ːadd_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name);
        }, TMP_31.$$arity = 1);

        Opal.defn(self, '$add_temp', TMP_32 = function ːadd_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp);
        }, TMP_32.$$arity = 1);

        Opal.defn(self, '$helper', TMP_33 = function ːhelper(name) {
          var self = this;

          return self.compiler.$helper(name);
        }, TMP_33.$$arity = 1);

        Opal.defn(self, '$with_temp', TMP_34 = function ːwith_temp() {
          var $a, $b, self = this, $iter = TMP_34.$$p, block = $iter || nil;

          TMP_34.$$p = null;
          return ($a = ($b = self.compiler).$with_temp, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$in_while?', TMP_35 = function() {
          var self = this;

          return self.compiler['$in_while?']();
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$while_loop', TMP_36 = function ːwhile_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop");
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$has_rescue_else?', TMP_37 = function() {
          var self = this;

          return self.$scope()['$has_rescue_else?']();
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$in_ensure', TMP_38 = function ːin_ensure() {
          var $a, $b, self = this, $iter = TMP_38.$$p, block = $iter || nil;

          TMP_38.$$p = null;
          return ($a = ($b = self.$scope()).$in_ensure, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_38.$$arity = 0);

        return (Opal.defn(self, '$in_ensure?', TMP_39 = function() {
          var self = this;

          return self.$scope()['$in_ensure?']();
        }, TMP_39.$$arity = 0), nil) && 'in_ensure?';
      })($scope.base, null)
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/literal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$join', '$keys', '$gsub', '$even?', '$length', '$+', '$chop', '$[]', '$translate_escape_chars', '$inspect', '$===', '$new', '$flags', '$each_line', '$==', '$s', '$source=', '$line', '$include', '$stmt?', '$!', '$include?', '$compile_split_lines', '$needs_semicolon?', '$each_with_index', '$expr', '$raise', '$last', '$each', '$requires_semicolon', '$helper', '$start', '$finish']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ValueNode(){};
        var self = $ValueNode = $klass($base, $super, 'ValueNode', $ValueNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$handle("true", "false", "self", "nil");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this;

          return self.$push(self.$type().$to_s());
        }, TMP_1.$$arity = 0);

        return (Opal.defs(self, '$truthy_optimize?', TMP_2 = function() {
          var self = this;

          return true;
        }, TMP_2.$$arity = 0), nil) && 'truthy_optimize?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $NumericNode(){};
        var self = $NumericNode = $klass($base, $super, 'NumericNode', $NumericNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

        self.$handle("int", "float");

        self.$children("value");

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, self = this;

          self.$push(self.$value().$to_s());
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0);

        return (Opal.defs(self, '$truthy_optimize?', TMP_4 = function() {
          var self = this;

          return true;
        }, TMP_4.$$arity = 0), nil) && 'truthy_optimize?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $StringNode(){};
        var self = $StringNode = $klass($base, $super, 'StringNode', $StringNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

        self.$handle("str");

        self.$children("value");

        Opal.cdecl($scope, 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}));

        Opal.cdecl($scope, 'ESCAPE_REGEX', (new RegExp("(\\\\+)([" + $scope.get('ESCAPE_CHARS').$keys().$join("") + "])")));

        Opal.defn(self, '$translate_escape_chars', TMP_6 = function ːtranslate_escape_chars(inspect_string) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = inspect_string).$gsub, $a.$$p = (TMP_5 = function(original){var self = TMP_5.$$s || this, $c, $d;
if (original == null) original = nil;
          if ((($c = (($d = $gvars['~']) === nil ? nil : $d['$[]'](1)).$length()['$even?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return original
              } else {
              return $rb_plus((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$chop(), $scope.get('ESCAPE_CHARS')['$[]']((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))
            }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b, $scope.get('ESCAPE_REGEX'));
        }, TMP_6.$$arity = 1);

        return (Opal.defn(self, '$compile', TMP_7 = function ːcompile() {
          var self = this;

          return self.$push(self.$translate_escape_chars(self.$value().$inspect()));
        }, TMP_7.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $SymbolNode(){};
        var self = $SymbolNode = $klass($base, $super, 'SymbolNode', $SymbolNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_8;

        self.$handle("sym");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_8 = function ːcompile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect());
        }, TMP_8.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RegexpNode(){};
        var self = $RegexpNode = $klass($base, $super, 'RegexpNode', $RegexpNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_9;

        self.$handle("regexp");

        self.$children("value", "flags");

        return (Opal.defn(self, '$compile', TMP_9 = function ːcompile() {
          var self = this, $case = nil, message = nil;

          return (function() {$case = self.$value();if (""['$===']($case)) {return self.$push("/(?:)/")}else if (/\?<\w+\>/['$===']($case)) {message = "named captures are not supported in javascript: " + (self.$value().$inspect());
          return self.$push("self.$raise(new SyntaxError('" + (message) + "'))");}else {return self.$push("" + ($scope.get('Regexp').$new(self.$value()).$inspect()) + (self.$flags()))}})();
        }, TMP_9.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base) {
        var $XStringLineSplitter, self = $XStringLineSplitter = $module($base, 'XStringLineSplitter');

        var def = self.$$proto, $scope = self.$$scope, TMP_11;

        Opal.defn(self, '$compile_split_lines', TMP_11 = function ːcompile_split_lines(value, sexp) {
          var $a, $b, TMP_10, self = this, idx = nil;

          idx = 0;
          return ($a = ($b = value).$each_line, $a.$$p = (TMP_10 = function(line){var self = TMP_10.$$s || this, $c, $d, line_sexp = nil, frag = nil;
if (line == null) line = nil;
          if (idx['$=='](0)) {
              self.$push(line)
              } else {
              line_sexp = self.$s();
              (($c = [[$rb_plus(sexp.$line(), idx), 0]]), $d = line_sexp, $d['$source='].apply($d, $c), $c[$c.length-1]);
              frag = $scope.get('Fragment').$new(line, line_sexp);
              self.$push(frag);
            };
            return idx = $rb_plus(idx, 1);}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 2)
      })($scope.base);

      (function($base, $super) {
        function $XStringNode(){};
        var self = $XStringNode = $klass($base, $super, 'XStringNode', $XStringNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13, TMP_14;

        def.sexp = nil;
        self.$include($scope.get('XStringLineSplitter'));

        self.$handle("xstr");

        self.$children("value");

        Opal.defn(self, '$needs_semicolon?', TMP_12 = function() {
          var $a, self = this;

          return ($a = self['$stmt?'](), $a !== false && $a !== nil ?self.$value().$to_s()['$include?'](";")['$!']() : $a);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$compile', TMP_13 = function ːcompile() {
          var $a, self = this;

          self.$compile_split_lines(self.$value().$to_s(), self.sexp);
          if ((($a = self['$needs_semicolon?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(";")};
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }, TMP_13.$$arity = 0);

        return (Opal.defn(self, '$start_line', TMP_14 = function ːstart_line() {
          var self = this;

          return self.sexp.$line();
        }, TMP_14.$$arity = 0), nil) && 'start_line';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicStringNode(){};
        var self = $DynamicStringNode = $klass($base, $super, 'DynamicStringNode', $DynamicStringNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_16;

        self.$handle("dstr");

        return (Opal.defn(self, '$compile', TMP_16 = function ːcompile() {
          var $a, $b, TMP_15, self = this;

          return ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_15 = function(part, idx){var self = TMP_15.$$s || this, $c;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($c = $scope.get('String')['$==='](part)) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$push(part.$inspect())
            } else if (part.$type()['$==']("evstr")) {
              self.$push("(");
              self.$push((function() {if ((($c = part['$[]'](1)) !== nil && (!$c.$$is_boolean || $c == true))) {
                return self.$expr(part['$[]'](1))
                } else {
                return "\"\""
              }; return nil; })());
              self.$push(")");
            } else if (part.$type()['$==']("str")) {
              self.$push(part['$[]'](1).$inspect())
            } else if (part.$type()['$==']("dstr")) {
              self.$push("(");
              self.$push(self.$expr(part));
              self.$push(")");
              } else {
              self.$raise("Bad dstr part " + (part.$inspect()))
            };
            if ((($c = self['$recv?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.$wrap("(", ")")
              } else {
              return nil
            };}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b);
        }, TMP_16.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicSymbolNode(){};
        var self = $DynamicSymbolNode = $klass($base, $super, 'DynamicSymbolNode', $DynamicSymbolNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_18;

        self.$handle("dsym");

        return (Opal.defn(self, '$compile', TMP_18 = function ːcompile() {
          var $a, $b, TMP_17, self = this;

          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_17 = function(part, idx){var self = TMP_17.$$s || this, $c;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($c = $scope.get('String')['$==='](part)) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.$push(part.$inspect())
            } else if (part.$type()['$==']("evstr")) {
              return self.$push(self.$expr(self.$s("call", part.$last(), "to_s", self.$s("arglist"))))
            } else if (part.$type()['$==']("str")) {
              return self.$push(part.$last().$inspect())
              } else {
              return self.$raise("Bad dsym part")
            };}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $a).call($b);
          return self.$wrap("(", ")");
        }, TMP_18.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicXStringNode(){};
        var self = $DynamicXStringNode = $klass($base, $super, 'DynamicXStringNode', $DynamicXStringNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_21;

        self.$include($scope.get('XStringLineSplitter'));

        self.$handle("dxstr");

        Opal.defn(self, '$requires_semicolon', TMP_19 = function ːrequires_semicolon(code) {
          var $a, self = this;

          return ($a = self['$stmt?'](), $a !== false && $a !== nil ?code['$include?'](";")['$!']() : $a);
        }, TMP_19.$$arity = 1);

        return (Opal.defn(self, '$compile', TMP_21 = function ːcompile() {
          var $a, $b, TMP_20, self = this, needs_semicolon = nil;

          needs_semicolon = false;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_20 = function(part){var self = TMP_20.$$s || this, $c;
            if (self.sexp == null) self.sexp = nil;
if (part == null) part = nil;
          if ((($c = $scope.get('String')['$==='](part)) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$compile_split_lines(part.$to_s(), self.sexp);
              if ((($c = self.$requires_semicolon(part.$to_s())) !== nil && (!$c.$$is_boolean || $c == true))) {
                return needs_semicolon = true
                } else {
                return nil
              };
            } else if (part.$type()['$==']("evstr")) {
              return self.$push(self.$expr(part['$[]'](1)))
            } else if (part.$type()['$==']("str")) {
              self.$compile_split_lines(part.$last().$to_s(), part);
              if ((($c = self.$requires_semicolon(part.$last().$to_s())) !== nil && (!$c.$$is_boolean || $c == true))) {
                return needs_semicolon = true
                } else {
                return nil
              };
              } else {
              return self.$raise("Bad dxstr part")
            }}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
          if (needs_semicolon !== false && needs_semicolon !== nil) {
            self.$push(";")};
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }, TMP_21.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicRegexpNode(){};
        var self = $DynamicRegexpNode = $klass($base, $super, 'DynamicRegexpNode', $DynamicRegexpNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_23;

        self.$handle("dregx");

        return (Opal.defn(self, '$compile', TMP_23 = function ːcompile() {
          var $a, $b, TMP_22, self = this;

          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_22 = function(part, idx){var self = TMP_22.$$s || this, $c;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($c = $scope.get('String')['$==='](part)) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.$push(part.$inspect())
            } else if (part.$type()['$==']("str")) {
              return self.$push(part['$[]'](1).$inspect())
              } else {
              return self.$push(self.$expr(part['$[]'](1)))
            };}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22), $a).call($b);
          return self.$wrap("(new RegExp(", "))");
        }, TMP_23.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InclusiveRangeNode(){};
        var self = $InclusiveRangeNode = $klass($base, $super, 'InclusiveRangeNode', $InclusiveRangeNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_24;

        self.$handle("irange");

        self.$children("start", "finish");

        return (Opal.defn(self, '$compile', TMP_24 = function ːcompile() {
          var self = this;

          self.$helper("range");
          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)");
        }, TMP_24.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ExclusiveRangeNode(){};
        var self = $ExclusiveRangeNode = $klass($base, $super, 'ExclusiveRangeNode', $ExclusiveRangeNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_25;

        self.$handle("erange");

        self.$children("start", "finish");

        return (Opal.defn(self, '$compile', TMP_25 = function ːcompile() {
          var self = this;

          self.$helper("range");
          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", true)");
        }, TMP_25.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/variables"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$variable', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$[]', '$name', '$ivar', '$add_ivar', '$helper', '$==', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$add_gvar', '$index']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $LocalVariableNode(){};
        var self = $LocalVariableNode = $klass($base, $super, 'LocalVariableNode', $LocalVariableNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

        self.$handle("lvar");

        self.$children("var_name");

        Opal.defn(self, '$using_irb?', TMP_1 = function() {
          var $a, self = this;

          return ($a = self.$compiler()['$irb?'](), $a !== false && $a !== nil ?self.$scope()['$top?']() : $a);
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_2, self = this;

          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return self.$push(self.$variable(self.$var_name().$to_s()))
          };
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
          self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("((" + (tmp) + " = Opal.irb_vars", ") == null ? nil : " + (tmp) + ")");}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $LocalAssignNode(){};
        var self = $LocalAssignNode = $klass($base, $super, 'LocalAssignNode', $LocalAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

        self.$handle("lasgn");

        self.$children("var_name", "value");

        Opal.defn(self, '$using_irb?', TMP_4 = function() {
          var $a, self = this;

          return ($a = self.$compiler()['$irb?'](), $a !== false && $a !== nil ?self.$scope()['$top?']() : $a);
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_5 = function ːcompile() {
          var $a, self = this;

          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push("Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
            } else {
            self.$add_local(self.$variable(self.$var_name().$to_s()));
            self.$push("" + (self.$variable(self.$var_name().$to_s())) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }, TMP_5.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InstanceVariableNode(){};
        var self = $InstanceVariableNode = $klass($base, $super, 'InstanceVariableNode', $InstanceVariableNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

        self.$handle("ivar");

        self.$children("name");

        Opal.defn(self, '$var_name', TMP_6 = function ːvar_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        }, TMP_6.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_7 = function ːcompile() {
          var self = this, name = nil;

          name = self.$property(self.$ivar(self.$var_name()));
          self.$add_ivar(name);
          return self.$push("self" + (name));
        }, TMP_7.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InstanceAssignNode(){};
        var self = $InstanceAssignNode = $klass($base, $super, 'InstanceAssignNode', $InstanceAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

        self.$handle("iasgn");

        self.$children("name", "value");

        Opal.defn(self, '$var_name', TMP_8 = function ːvar_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_9 = function ːcompile() {
          var self = this, name = nil;

          name = self.$property(self.$ivar(self.$var_name()));
          self.$push("self" + (name) + " = ");
          return self.$push(self.$expr(self.$value()));
        }, TMP_9.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $GlobalVariableNode(){};
        var self = $GlobalVariableNode = $klass($base, $super, 'GlobalVariableNode', $GlobalVariableNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_13, TMP_15, TMP_17;

        self.$handle("gvar");

        self.$children("name");

        Opal.defn(self, '$var_name', TMP_10 = function ːvar_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$compile', TMP_11 = function ːcompile() {
          var self = this, name = nil;

          self.$helper("gvars");
          if (self.$var_name()['$==']("&")) {
            return self.$handle_global_match()
          } else if (self.$var_name()['$==']("'")) {
            return self.$handle_post_match()
          } else if (self.$var_name()['$==']("`")) {
            return self.$handle_pre_match()};
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("$gvars" + (name));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$handle_global_match', TMP_13 = function ːhandle_global_match() {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_12 = function(tmp){var self = TMP_12.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))")}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$handle_pre_match', TMP_15 = function ːhandle_pre_match() {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_14 = function(tmp){var self = TMP_14.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())")}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_15.$$arity = 0);

        return (Opal.defn(self, '$handle_post_match', TMP_17 = function ːhandle_post_match() {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_16 = function(tmp){var self = TMP_16.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())")}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
        }, TMP_17.$$arity = 0), nil) && 'handle_post_match';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $GlobalAssignNode(){};
        var self = $GlobalAssignNode = $klass($base, $super, 'GlobalAssignNode', $GlobalAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_18, TMP_19;

        self.$handle("gasgn");

        self.$children("name", "value");

        Opal.defn(self, '$var_name', TMP_18 = function ːvar_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_19 = function ːcompile() {
          var self = this, name = nil;

          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("$gvars" + (name) + " = ");
          return self.$push(self.$expr(self.$value()));
        }, TMP_19.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BackrefNode(){};
        var self = $BackrefNode = $klass($base, $super, 'BackrefNode', $BackrefNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_21;

        self.$handle("nth_ref");

        self.$children("index");

        return (Opal.defn(self, '$compile', TMP_21 = function ːcompile() {
          var $a, $b, TMP_20, self = this;

          self.$helper("gvars");
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_20 = function(tmp){var self = TMP_20.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))")}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
        }, TMP_21.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVariableNode(){};
        var self = $ClassVariableNode = $klass($base, $super, 'ClassVariableNode', $ClassVariableNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_23;

        self.$handle("cvar");

        self.$children("name");

        return (Opal.defn(self, '$compile', TMP_23 = function ːcompile() {
          var $a, $b, TMP_22, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_22 = function(tmp){var self = TMP_22.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = Opal.cvars['" + (self.$name()) + "']) == null ? nil : " + (tmp) + ")")}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
        }, TMP_23.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVarAssignNode(){};
        var self = $ClassVarAssignNode = $klass($base, $super, 'ClassVarAssignNode', $ClassVarAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_24;

        self.$handle("casgn");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', TMP_24 = function ːcompile() {
          var self = this;

          self.$push("(Opal.cvars['" + (self.$name()) + "'] = ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }, TMP_24.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVarDeclNode(){};
        var self = $ClassVarDeclNode = $klass($base, $super, 'ClassVarDeclNode', $ClassVarDeclNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_25;

        self.$handle("cvdecl");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', TMP_25 = function ːcompile() {
          var self = this;

          self.$push("(Opal.cvars['" + (self.$name()) + "'] = ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }, TMP_25.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/constants"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$==', '$name', '$eof_content', '$compiler', '$push', '$expr', '$base', '$wrap', '$value']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ConstNode(){};
        var self = $ConstNode = $klass($base, $super, 'ConstNode', $ConstNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$handle("const");

        self.$children("name");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, $b, self = this;

          if ((($a = (($b = self.$name()['$==']("DATA")) ? self.$compiler().$eof_content() : self.$name()['$==']("DATA"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("$__END__")
            } else {
            return self.$push("$scope.get('" + (self.$name()) + "')")
          };
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstDeclarationNode(){};
        var self = $ConstDeclarationNode = $klass($base, $super, 'ConstDeclarationNode', $ConstDeclarationNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        self.$handle("cdecl");

        self.$children("name", "base");

        return (Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var self = this;

          self.$push(self.$expr(self.$base()));
          return self.$wrap("Opal.cdecl($scope, '" + (self.$name()) + "', ", ")");
        }, TMP_2.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstAssignNode(){};
        var self = $ConstAssignNode = $klass($base, $super, 'ConstAssignNode', $ConstAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        self.$handle("casgn");

        self.$children("base", "name", "value");

        return (Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var self = this;

          self.$push("Opal.casgn(");
          self.$push(self.$expr(self.$base()));
          self.$push(", '" + (self.$name()) + "', ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }, TMP_3.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstGetNode(){};
        var self = $ConstGetNode = $klass($base, $super, 'ConstGetNode', $ConstGetNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4;

        self.$handle("colon2");

        self.$children("base", "name");

        return (Opal.defn(self, '$compile', TMP_4 = function ːcompile() {
          var self = this;

          self.$push("((");
          self.$push(self.$expr(self.$base()));
          return self.$push(").$$scope.get('" + (self.$name()) + "'))");
        }, TMP_4.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $TopConstNode(){};
        var self = $TopConstNode = $klass($base, $super, 'TopConstNode', $TopConstNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_5;

        self.$handle("colon3");

        self.$children("name");

        return (Opal.defn(self, '$compile', TMP_5 = function ːcompile() {
          var self = this;

          return self.$push("Opal.get('" + (self.$name()) + "')");
        }, TMP_5.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $TopConstAssignNode(){};
        var self = $TopConstAssignNode = $klass($base, $super, 'TopConstAssignNode', $TopConstAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6;

        self.$handle("casgn3");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
          var self = this;

          self.$push("Opal.casgn(Opal.Object, '" + (self.$name()) + "', ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }, TMP_6.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    Opal.defs(self, '$normalize', TMP_1 = function ːnormalize(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return what};
      if ((($a = $rb_gt(what, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 1};
      if ((($a = $rb_lt(what, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return -1};
      return 0;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var $a, self = this, cmp = nil;

      try {
        if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    
        if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$>', TMP_3 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$>=', TMP_4 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<', TMP_5 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$<=', TMP_6 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$between?', TMP_7 = function(min, max) {
      var self = this;

      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_7.$$arity = 2);
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["pathname"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $module = Opal.module;

  Opal.add_stubs(['$require', '$include', '$quote', '$===', '$to_s', '$path', '$respond_to?', '$to_path', '$is_a?', '$nil?', '$raise', '$class', '$==', '$attr_reader', '$!', '$relative?', '$chop_basename', '$basename', '$=~', '$new', '$source', '$[]', '$rindex', '$sub', '$absolute?', '$expand_path', '$plus', '$unshift', '$length', '$!=', '$empty?', '$first', '$shift', '$+', '$join', '$dirname', '$pop', '$reverse_each', '$directory?', '$extname', '$<=>']);
  self.$require("corelib/comparable");
  (function($base, $super) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    def.path = nil;
    self.$include($scope.get('Comparable'));

    Opal.cdecl($scope, 'SEPARATOR_PAT', (new RegExp("" + $scope.get('Regexp').$quote((($scope.get('File')).$$scope.get('SEPARATOR'))))));

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(path) {
      var $a, self = this;

      if ((($a = $scope.get('Pathname')['$==='](path)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.path = path.$path().$to_s()
      } else if ((($a = path['$respond_to?']("to_path")) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.path = path.$to_path()
      } else if ((($a = path['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.path = path
      } else if ((($a = path['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
      };
      if (self.path['$==']("\x00")) {
        return self.$raise($scope.get('ArgumentError'))
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    self.$attr_reader("path");

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      return other.$path()['$=='](self.path);
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$absolute?', TMP_3 = function() {
      var self = this;

      return self['$relative?']()['$!']();
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$relative?', TMP_4 = function() {
      var $a, $b, $c, self = this, path = nil, r = nil;

      path = self.path;
      while ((($b = r = self.$chop_basename(path)) !== nil && (!$b.$$is_boolean || $b == true))) {
      $c = r, $b = Opal.to_ary($c), path = ($b[0] == null ? nil : $b[0]), $c};
      return path['$==']("");
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$chop_basename', TMP_5 = function ːchop_basename(path) {
      var $a, self = this, base = nil;

      base = $scope.get('File').$basename(path);
      if ((($a = $scope.get('Regexp').$new("^" + ((($scope.get('Pathname')).$$scope.get('SEPARATOR_PAT')).$source()) + "?$")['$=~'](base)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return [path['$[]'](0, path.$rindex(base)), base]
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$root?', TMP_6 = function() {
      var self = this;

      return self.path['$==']("/");
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$parent', TMP_7 = function ːparent() {
      var $a, self = this, new_path = nil;

      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ((($a = self['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return "."
        }; return nil; })()};
      return $scope.get('Pathname').$new(new_path);
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$sub', TMP_8 = function ːsub($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('Pathname').$new(($b = self.path).$sub.apply($b, Opal.to_a(args)));
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$cleanpath', TMP_9 = function ːcleanpath() {
      var self = this;

      return Opal.normalize(self.path);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$to_path', TMP_10 = function ːto_path() {
      var self = this;

      return self.path;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$hash', TMP_11 = function ːhash() {
      var self = this;

      return self.path;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$expand_path', TMP_12 = function ːexpand_path() {
      var self = this;

      return $scope.get('File').$expand_path(self.path);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$+', TMP_13 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Pathname')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        other = $scope.get('Pathname').$new(other)
      };
      return $scope.get('Pathname').$new(self.$plus(self.path, other.$to_s()));
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$plus', TMP_14 = function ːplus(path1, path2) {
      var $a, $b, $c, $d, self = this, prefix2 = nil, index_list2 = nil, basename_list2 = nil, r2 = nil, basename2 = nil, prefix1 = nil, r1 = nil, basename1 = nil, suffix2 = nil;

      prefix2 = path2;
      index_list2 = [];
      basename_list2 = [];
      while ((($b = r2 = self.$chop_basename(prefix2)) !== nil && (!$b.$$is_boolean || $b == true))) {
      $c = r2, $b = Opal.to_ary($c), prefix2 = ($b[0] == null ? nil : $b[0]), basename2 = ($b[1] == null ? nil : $b[1]), $c;
      index_list2.$unshift(prefix2.$length());
      basename_list2.$unshift(basename2);};
      if ((($a = prefix2['$!=']("")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return path2};
      prefix1 = path1;
      while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
      while ((($c = ($d = basename_list2['$empty?']()['$!'](), $d !== false && $d !== nil ?basename_list2.$first()['$=='](".") : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
      index_list2.$shift();
      basename_list2.$shift();};
      if ((($b = r1 = self.$chop_basename(prefix1)) !== nil && (!$b.$$is_boolean || $b == true))) {
        } else {
        break;
      };
      $c = r1, $b = Opal.to_ary($c), prefix1 = ($b[0] == null ? nil : $b[0]), basename1 = ($b[1] == null ? nil : $b[1]), $c;
      if (basename1['$=='](".")) {
        continue;};
      if ((($b = ((($c = ((($d = basename1['$==']("..")) !== false && $d !== nil) ? $d : basename_list2['$empty?']())) !== false && $c !== nil) ? $c : basename_list2.$first()['$!='](".."))) !== nil && (!$b.$$is_boolean || $b == true))) {
        prefix1 = $rb_plus(prefix1, basename1);
        break;;};
      index_list2.$shift();
      basename_list2.$shift();};
      r1 = self.$chop_basename(prefix1);
      if ((($a = ($b = r1['$!'](), $b !== false && $b !== nil ?(new RegExp("" + $scope.get('SEPARATOR_PAT')))['$=~']($scope.get('File').$basename(prefix1)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        while ((($b = ($c = basename_list2['$empty?']()['$!'](), $c !== false && $c !== nil ?basename_list2.$first()['$==']("..") : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
        index_list2.$shift();
        basename_list2.$shift();}};
      if ((($a = basename_list2['$empty?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        suffix2 = path2['$[]']($range(index_list2.$first(), -1, false));
        if (r1 !== false && r1 !== nil) {
          return $scope.get('File').$join(prefix1, suffix2)
          } else {
          return $rb_plus(prefix1, suffix2)
        };
      } else if (r1 !== false && r1 !== nil) {
        return prefix1
        } else {
        return $scope.get('File').$dirname(prefix1)
      };
    }, TMP_14.$$arity = 2);

    Opal.defn(self, '$join', TMP_16 = function ːjoin($a_rest) {try {

      var $b, $c, TMP_15, self = this, args, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = args['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
        return self};
      result = args.$pop();
      if ((($b = $scope.get('Pathname')['$==='](result)) !== nil && (!$b.$$is_boolean || $b == true))) {
        } else {
        result = $scope.get('Pathname').$new(result)
      };
      if ((($b = result['$absolute?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
        return result};
      ($b = ($c = args).$reverse_each, $b.$$p = (TMP_15 = function(arg){var self = TMP_15.$$s || this, $a;
if (arg == null) arg = nil;
      if ((($a = $scope.get('Pathname')['$==='](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          arg = $scope.get('Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ((($a = result['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.ret(result)
          } else {
          return nil
        };}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      return $rb_plus(self, result);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$split', TMP_17 = function ːsplit() {
      var self = this;

      return [self.$dirname(), self.$basename()];
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$dirname', TMP_18 = function ːdirname() {
      var self = this;

      return $scope.get('Pathname').$new($scope.get('File').$dirname(self.path));
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$basename', TMP_19 = function ːbasename() {
      var self = this;

      return $scope.get('Pathname').$new($scope.get('File').$basename(self.path));
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$directory?', TMP_20 = function() {
      var self = this;

      return $scope.get('File')['$directory?'](self.path);
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$extname', TMP_21 = function ːextname() {
      var self = this;

      return $scope.get('File').$extname(self.path);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$<=>', TMP_22 = function(other) {
      var self = this;

      return self.$path()['$<=>'](other.$path());
    }, TMP_22.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.alias(self, 'to_str', 'to_path');

    return Opal.alias(self, 'to_s', 'to_path');
  })($scope.base, null);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_23;

    Opal.defn(self, '$Pathname', TMP_23 = function ːPathname(path) {
      var self = this;

      return $scope.get('Pathname').$new(path);
    }, TMP_23.$$arity = 1)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/runtime_helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new', '$children', '$==', '$include?', '$to_sym', '$<<', '$define_method', '$to_proc', '$meth', '$__send__', '$raise', '$helper', '$[]', '$arglist', '$js_truthy', '$js_falsy']);
  self.$require("set");
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RuntimeHelpers(){};
        var self = $RuntimeHelpers = $klass($base, $super, 'RuntimeHelpers', $RuntimeHelpers);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, $a, $b, TMP_4, $c, TMP_5;

        Opal.cdecl($scope, 'HELPERS', $scope.get('Set').$new());

        self.$children("recvr", "meth", "arglist");

        Opal.defs(self, '$compatible?', TMP_1 = function(recvr, meth, arglist) {
          var $a, self = this;

          return (($a = recvr['$=='](["const", "Opal"])) ? $scope.get('HELPERS')['$include?'](meth.$to_sym()) : recvr['$=='](["const", "Opal"]));
        }, TMP_1.$$arity = 3);

        Opal.defs(self, '$helper', TMP_2 = function ːhelper(name) {
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          $scope.get('HELPERS')['$<<'](name);
          return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, "compile_" + (name));
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, self = this;

          if ((($a = $scope.get('HELPERS')['$include?'](self.$meth().$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$__send__("compile_" + (self.$meth()))
            } else {
            return self.$raise("Helper not supported: " + (self.$meth()))
          };
        }, TMP_3.$$arity = 0);

        ($a = ($b = self).$helper, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, sexp = nil;

        if ((($c = sexp = self.$arglist()['$[]'](1)) !== nil && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise("truthy? requires an object")
          };
          return self.$js_truthy(sexp);}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b, "truthy?");

        return ($a = ($c = self).$helper, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $d, sexp = nil;

        if ((($d = sexp = self.$arglist()['$[]'](1)) !== nil && (!$d.$$is_boolean || $d == true))) {
            } else {
            self.$raise("falsy? requires an object")
          };
          return self.$js_falsy(sexp);}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c, "falsy?");
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/call"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]=', '$define_method', '$to_proc', '$handle_special', '$compile_default?', '$record_method?', '$<<', '$method_calls', '$compiler', '$to_sym', '$meth', '$using_irb?', '$compile_irb_var', '$default_compile', '$private', '$block_being_passed', '$new_temp', '$scope', '$splat?', '$has_break?', '$expr', '$add_method', '$add_block', '$add_invocation', '$unshift', '$line', '$queue_temp', '$!=', '$receiver_fragment', '$arguments_fragment', '$redefine_this?', '$arguments_array?', '$push', '$apply_call_target', '$any?', '$method_jsid', '$==', '$first', '$arguments_without_block', '$recvr', '$s', '$recv', '$recv_sexp', '$arguments_sexp', '$[]', '$arglist', '$===', '$last', '$type', '$pop', '$iter', '$mid_to_jsid', '$to_s', '$=~', '$with_temp', '$variable', '$intern', '$+', '$irb?', '$top?', '$nil?', '$include?', '$__send__', '$compatible?', '$compile', '$new', '$each', '$add_special', '$inline_operators?', '$operator_helpers', '$fragment', '$compile_default!', '$resolve', '$requires', '$file', '$dirname', '$cleanpath', '$join', '$Pathname', '$inspect', '$process', '$class_scope?', '$required_trees', '$handle_block_given_call', '$def?', '$mid', '$arity_check?', '$handle_part', '$map', '$expand_path', '$split', '$dynamic_require_severity', '$error', '$warning', '$inject']);
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/runtime_helpers");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CallNode(){};
        var self = $CallNode = $klass($base, $super, 'CallNode', $CallNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_23, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, $a, $b, TMP_31, $c, TMP_33, $d, TMP_34, $e, TMP_35, $f, TMP_36, $g, TMP_37, $h, TMP_38, $i, TMP_39, $j, TMP_40, $k, TMP_41;

        def.arguments_without_block = def.block_being_passed = def.assignment = def.compiler = def.sexp = def.level = def.compile_default = nil;
        self.$handle("call");

        self.$children("recvr", "meth", "arglist", "iter");

        Opal.cdecl($scope, 'SPECIALS', $hash2([], {}));

        Opal.cdecl($scope, 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}));

        Opal.defs(self, '$add_special', TMP_1 = function ːadd_special(name, options) {
          var $a, $b, self = this, $iter = TMP_1.$$p, handler = $iter || nil;

          if (options == null) {
            options = $hash2([], {});
          }
          TMP_1.$$p = null;
          $scope.get('SPECIALS')['$[]='](name, options);
          return ($a = ($b = self).$define_method, $a.$$p = handler.$to_proc(), $a).call($b, "handle_" + (name));
        }, TMP_1.$$arity = -2);

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, self = this;

          self.$handle_special();
          if ((($a = self['$compile_default?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = self['$record_method?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())};
          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_irb_var()};
          return self.$default_compile();
        }, TMP_2.$$arity = 0);

        self.$private();

        Opal.defn(self, '$default_compile', TMP_4 = function ːdefault_compile() {
          var $a, $b, TMP_3, self = this, block_temp = nil, temporary_receiver = nil, has_break = nil;

          if ((($a = self.$block_being_passed()) !== nil && (!$a.$$is_boolean || $a == true))) {
            block_temp = self.$scope().$new_temp()};
          if ((($a = ((($b = self['$splat?']()) !== false && $b !== nil) ? $b : block_temp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            temporary_receiver = self.$scope().$new_temp()};
          if ((($a = self.$block_being_passed()) !== nil && (!$a.$$is_boolean || $a == true))) {
            has_break = ($a = ($b = self.$compiler())['$has_break?'], $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
              if (self.block_being_passed == null) self.block_being_passed = nil;

            return self.block_being_passed = self.$expr(self.block_being_passed)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)};
          self.$add_method(temporary_receiver);
          if (block_temp !== false && block_temp !== nil) {
            self.$add_block(block_temp)};
          self.$add_invocation(temporary_receiver);
          if (has_break !== false && has_break !== nil) {
            self.$unshift("return ");
            self.$unshift("(function(){var $brk = Opal.new_brk(); try {");
            self.$line("} catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()");};
          if (block_temp !== false && block_temp !== nil) {
            return self.$scope().$queue_temp(block_temp)
            } else {
            return nil
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$redefine_this?', TMP_5 = function(temporary_receiver) {
          var self = this;

          return temporary_receiver['$!='](nil);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$apply_call_target', TMP_6 = function ːapply_call_target(temporary_receiver) {
          var $a, self = this;

          return ((($a = temporary_receiver) !== false && $a !== nil) ? $a : self.$receiver_fragment());
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$arguments_array?', TMP_7 = function() {
          var self = this;

          return self['$splat?']();
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$add_invocation', TMP_8 = function ːadd_invocation(temporary_receiver) {
          var $a, $b, self = this, args = nil;

          args = self.$arguments_fragment();
          if ((($a = ((($b = self['$redefine_this?'](temporary_receiver)) !== false && $b !== nil) ? $b : self['$arguments_array?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$arguments_array?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push(".apply(")
              } else {
              self.$push(".call(")
            };
            self.$push(self.$apply_call_target(temporary_receiver));
            if ((($a = args['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push(", ", args)};
            return self.$push(")");
            } else {
            return self.$push("(", args, ")")
          };
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$add_method', TMP_9 = function ːadd_method(temporary_receiver) {
          var self = this;

          if (temporary_receiver !== false && temporary_receiver !== nil) {
            return self.$push("(" + (temporary_receiver) + " = ", self.$receiver_fragment(), ")" + (self.$method_jsid()))
            } else {
            return self.$push(self.$receiver_fragment(), self.$method_jsid())
          };
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$add_block', TMP_10 = function ːadd_block(block_temp) {
          var self = this;

          self.$unshift("(" + (block_temp) + " = ");
          return self.$push(", " + (block_temp) + ".$$p = ", self.$block_being_passed(), ", " + (block_temp) + ")");
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$splat?', TMP_12 = function() {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = self.$arguments_without_block())['$any?'], $a.$$p = (TMP_11 = function(a){var self = TMP_11.$$s || this;
if (a == null) a = nil;
          return a.$first()['$==']("splat")}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$recv_sexp', TMP_13 = function ːrecv_sexp() {
          var $a, self = this;

          return ((($a = self.$recvr()) !== false && $a !== nil) ? $a : self.$s("self"));
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$receiver_fragment', TMP_14 = function ːreceiver_fragment() {
          var self = this;

          return self.$recv(self.$recv_sexp());
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$arguments_fragment', TMP_15 = function ːarguments_fragment() {
          var self = this;

          return self.$expr(self.$arguments_sexp());
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$arguments_sexp', TMP_16 = function ːarguments_sexp() {
          var $a, self = this, only_args = nil;

          only_args = self.$arguments_without_block();
          return ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(only_args)));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$arguments_without_block', TMP_17 = function ːarguments_without_block() {
          var $a, self = this;

          return ((($a = self.arguments_without_block) !== false && $a !== nil) ? $a : self.arguments_without_block = self.$arglist()['$[]']($range(1, -1, false)));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$block_being_passed', TMP_18 = function ːblock_being_passed() {
          var $a, $b, $c, self = this, args = nil;

          return ((($a = self.block_being_passed) !== false && $a !== nil) ? $a : self.block_being_passed = (function() {args = self.$arguments_without_block();
          if ((($b = ($c = $scope.get('Sexp')['$==='](args.$last()), $c !== false && $c !== nil ?args.$last().$type()['$==']("block_pass") : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return args.$pop()
            } else {
            return self.$iter()
          };})());
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$method_jsid', TMP_19 = function ːmethod_jsid() {
          var self = this;

          return self.$mid_to_jsid(self.$meth().$to_s());
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$record_method?', TMP_20 = function() {
          var self = this;

          return true;
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$attr_assignment?', TMP_21 = function() {
          var $a, self = this;

          return ((($a = self.assignment) !== false && $a !== nil) ? $a : self.assignment = self.$meth().$to_s()['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[\\da-z]+\\=" + $scope.get('REGEXP_END')))));
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$compile_irb_var', TMP_23 = function ːcompile_irb_var() {
          var $a, $b, TMP_22, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_22 = function(tmp){var self = TMP_22.$$s || this, lvar = nil, call = nil;
if (tmp == null) tmp = nil;
          lvar = self.$variable(self.$meth());
            call = self.$s("call", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), " : " + (tmp) + ")");}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$compile_assignment', TMP_26 = function ːcompile_assignment() {
          var $a, $b, TMP_24, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_24 = function(args_tmp){var self = TMP_24.$$s || this, $c, $d, TMP_25;
if (args_tmp == null) args_tmp = nil;
          return ($c = ($d = self).$with_temp, $c.$$p = (TMP_25 = function(recv_tmp){var self = TMP_25.$$s || this, args = nil, mid = nil;
if (recv_tmp == null) recv_tmp = nil;
            args = self.$expr(self.$arglist());
              mid = self.$mid_to_jsid(self.$meth().$to_s());
              return self.$push("((" + (args_tmp) + " = [", args, $rb_plus("]), ", "" + (recv_tmp) + " = "), self.$recv(self.$recv_sexp()), ", ", recv_tmp, mid, $rb_plus(".apply(" + (recv_tmp) + ", " + (args_tmp) + "), ", "" + (args_tmp) + "[" + (args_tmp) + ".length-1])"));}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $c).call($d)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$using_irb?', TMP_27 = function() {
          var $a, $b, $c, $d, self = this;

          return ($a = ($b = ($c = ($d = self.compiler['$irb?'](), $d !== false && $d !== nil ?self.$scope()['$top?']() : $d), $c !== false && $c !== nil ?self.$arglist()['$=='](self.$s("arglist")) : $c), $b !== false && $b !== nil ?self.$recvr()['$nil?']() : $b), $a !== false && $a !== nil ?self.$iter()['$nil?']() : $a);
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$handle_special', TMP_28 = function ːhandle_special() {
          var $a, self = this;

          self.compile_default = true;
          if ((($a = $scope.get('SPECIALS')['$include?'](self.$meth())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.compile_default = false;
            return self.$__send__("handle_" + (self.$meth()));
          } else if ((($a = $scope.get('RuntimeHelpers')['$compatible?'](self.$recvr(), self.$meth(), self.$arglist())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.compile_default = false;
            return self.$push($scope.get('RuntimeHelpers').$new(self.sexp, self.level, self.compiler).$compile());
            } else {
            return nil
          };
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$compile_default!', TMP_29 = function() {
          var self = this;

          return self.compile_default = true;
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$compile_default?', TMP_30 = function() {
          var self = this;

          return self.compile_default;
        }, TMP_30.$$arity = 0);

        ($a = ($b = $scope.get('OPERATORS')).$each, $a.$$p = (TMP_31 = function(operator, name){var self = TMP_31.$$s || this, $c, $d, TMP_32;
if (operator == null) operator = nil;if (name == null) name = nil;
        return ($c = ($d = self).$add_special, $c.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $e, lhs = nil, rhs = nil;

          if ((($e = self.$compiler()['$inline_operators?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
              if ((($e = self['$record_method?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())};
              self.$compiler().$operator_helpers()['$<<'](operator.$to_sym());
              $e = [self.$expr(self.$recvr()), self.$expr(self.$arglist()['$[]'](1))], lhs = $e[0], rhs = $e[1], $e;
              self.$push(self.$fragment("$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
              } else {
              return self['$compile_default!']()
            }}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $c).call($d, operator.$to_sym())}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b);

        ($a = ($c = self).$add_special, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this, $d, str = nil;

        self['$compile_default!']();
          str = $scope.get('DependencyResolver').$new(self.$compiler(), self.$arglist()['$[]'](1)).$resolve();
          if ((($d = str['$nil?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
            } else {
            self.$compiler().$requires()['$<<'](str)
          };
          return self.$push(self.$fragment(""));}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $a).call($c, "require");

        ($a = ($d = self).$add_special, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, arg = nil, file = nil, dir = nil;

        arg = self.$arglist()['$[]'](1);
          file = self.$compiler().$file();
          if (arg['$[]'](0)['$==']("str")) {
            dir = $scope.get('File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg['$[]'](1)).$cleanpath().$to_s());};
          self.$push(self.$fragment("self.$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($d, "require_relative");

        ($a = ($e = self).$add_special, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $f, str = nil;

        if ((($f = self.$scope()['$class_scope?']()) !== nil && (!$f.$$is_boolean || $f == true))) {
            self['$compile_default!']();
            str = $scope.get('DependencyResolver').$new(self.$compiler(), self.$arglist()['$[]'](2)).$resolve();
            if ((($f = str['$nil?']()) !== nil && (!$f.$$is_boolean || $f == true))) {
              } else {
              self.$compiler().$requires()['$<<'](str)
            };
            return self.$push(self.$fragment(""));
            } else {
            return nil
          }}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($e, "autoload");

        ($a = ($f = self).$add_special, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, arg = nil, relative_path = nil, dir = nil, full_path = nil;

        arg = self.$arglist()['$[]'](1);
          if (arg['$[]'](0)['$==']("str")) {
            relative_path = arg['$[]'](1);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $scope.get('File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            arg['$[]='](1, full_path);};
          self['$compile_default!']();
          return self.$push(self.$fragment(""));}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($f, "require_tree");

        ($a = ($g = self).$add_special, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;
          if (self.sexp == null) self.sexp = nil;

        return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($g, "block_given?");

        ($a = ($h = self).$add_special, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $i;

        if ((($i = self.$scope()['$def?']()) !== nil && (!$i.$$is_boolean || $i == true))) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
            } else {
            return self.$push(self.$fragment("nil"))
          }}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $a).call($h, "__callee__");

        ($a = ($i = self).$add_special, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this, $j;

        if ((($j = self.$scope()['$def?']()) !== nil && (!$j.$$is_boolean || $j == true))) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
            } else {
            return self.$push(self.$fragment("nil"))
          }}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $a).call($i, "__method__");

        ($a = ($j = self).$add_special, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$push(self.$fragment("debugger"))}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $a).call($j, "debugger");

        ($a = ($k = self).$add_special, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this;

        return self.$push(self.$fragment("Opal.hash({ arity_check: " + (self.$compiler()['$arity_check?']()) + " })"))}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $a).call($k, "__OPAL_COMPILER_CONFIG__");

        return (function($base, $super) {
          function $DependencyResolver(){};
          var self = $DependencyResolver = $klass($base, $super, 'DependencyResolver', $DependencyResolver);

          var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_45, TMP_47;

          def.sexp = def.compiler = nil;
          Opal.defn(self, '$initialize', TMP_42 = function ːinitialize(compiler, sexp) {
            var self = this;

            self.compiler = compiler;
            return self.sexp = sexp;
          }, TMP_42.$$arity = 2);

          Opal.defn(self, '$resolve', TMP_43 = function ːresolve() {
            var self = this;

            return self.$handle_part(self.sexp);
          }, TMP_43.$$arity = 0);

          Opal.defn(self, '$handle_part', TMP_45 = function ːhandle_part(sexp) {
            var $a, $b, TMP_44, self = this, type = nil, _ = nil, recv = nil, meth = nil, args = nil, parts = nil, msg = nil, $case = nil;

            type = sexp.$type();
            if (type['$==']("str")) {
              return sexp['$[]'](1)
            } else if (type['$==']("call")) {
              $b = sexp, $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), recv = ($a[1] == null ? nil : $a[1]), meth = ($a[2] == null ? nil : $a[2]), args = ($a[3] == null ? nil : $a[3]), $b;
              parts = ($a = ($b = args['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_44 = function(s){var self = TMP_44.$$s || this;
if (s == null) s = nil;
              return self.$handle_part(s)}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $a).call($b);
              if (recv['$=='](["const", "File"])) {
                if (meth['$==']("expand_path")) {
                  return ($a = self).$expand_path.apply($a, Opal.to_a(parts))
                } else if (meth['$==']("join")) {
                  return self.$expand_path(parts.$join("/"))
                } else if (meth['$==']("dirname")) {
                  return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))}};};
            msg = "Cannot handle dynamic require";
            return (function() {$case = self.compiler.$dynamic_require_severity();if ("error"['$===']($case)) {return self.compiler.$error(msg, self.sexp.$line())}else if ("warning"['$===']($case)) {return self.compiler.$warning(msg, self.sexp.$line())}else { return nil }})();
          }, TMP_45.$$arity = 1);

          return (Opal.defn(self, '$expand_path', TMP_47 = function ːexpand_path(path, base) {
            var $a, $b, TMP_46, self = this;

            if (base == null) {
              base = "";
            }
            return ($a = ($b = (((("") + (base)) + "/") + (path)).$split("/")).$inject, $a.$$p = (TMP_46 = function(p, part){var self = TMP_46.$$s || this;
if (p == null) p = nil;if (part == null) part = nil;
            if (part['$==']("")) {
              } else if (part['$==']("..")) {
                p.$pop()
                } else {
                p['$<<'](part)
              };
              return p;}, TMP_46.$$s = self, TMP_46.$$arity = 2, TMP_46), $a).call($b, []).$join("/");
          }, TMP_47.$$arity = -2), nil) && 'expand_path';
        })($scope.base, null);
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/call_special"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$!~', '$to_s', '$meth', '$with_temp', '$expr', '$arglist', '$mid_to_jsid', '$push', '$+', '$recv', '$recv_sexp', '$[]', '$==', '$any?', '$first', '$===', '$last', '$type', '$pop', '$iter', '$new_temp', '$scope', '$s', '$unshift', '$queue_temp', '$lhs', '$rhs', '$process', '$recvr', '$args', '$op', '$compile_or', '$compile_and', '$compile_operator', '$to_sym', '$first_arg', '$mid']);
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $AttrAssignNode(){};
        var self = $AttrAssignNode = $klass($base, $super, 'AttrAssignNode', $AttrAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$handle("attrasgn");

        self.$children("recvr", "meth", "arglist");

        return (Opal.defn(self, '$default_compile', TMP_1 = function ːdefault_compile() {
          var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($a = self.$meth().$to_s()['$!~']((new RegExp("" + $scope.get('REGEXP_START') + "\\w+=" + $scope.get('REGEXP_END'))))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self, Opal.find_super_dispatcher(self, 'default_compile', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper)};
          return ($a = ($c = self).$with_temp, $a.$$p = (TMP_2 = function(args_tmp){var self = TMP_2.$$s || this, $d, $e, TMP_3;
if (args_tmp == null) args_tmp = nil;
          return ($d = ($e = self).$with_temp, $d.$$p = (TMP_3 = function(recv_tmp){var self = TMP_3.$$s || this, args = nil, mid = nil;
if (recv_tmp == null) recv_tmp = nil;
            args = self.$expr(self.$arglist());
              mid = self.$mid_to_jsid(self.$meth().$to_s());
              return self.$push("((" + (args_tmp) + " = [", args, $rb_plus("]), ", "" + (recv_tmp) + " = "), self.$recv(self.$recv_sexp()), ", ", recv_tmp, mid, $rb_plus(".apply(" + (recv_tmp) + ", " + (args_tmp) + "), ", "" + (args_tmp) + "[" + (args_tmp) + ".length-1])"));}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $d).call($e)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
        }, TMP_1.$$arity = 0), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $JsAttrAssignNode(){};
        var self = $JsAttrAssignNode = $klass($base, $super, 'JsAttrAssignNode', $JsAttrAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

        self.$handle("jsattrasgn");

        Opal.defn(self, '$record_method?', TMP_4 = function() {
          var self = this;

          return false;
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$default_compile', TMP_5 = function ːdefault_compile() {
          var self = this;

          return self.$push(self.$recv(self.$recv_sexp()), "[", self.$expr(self.$arglist()['$[]'](1)), "]", "=", self.$expr(self.$arglist()['$[]'](2)));
        }, TMP_5.$$arity = 0), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $JsCallNode(){};
        var self = $JsCallNode = $klass($base, $super, 'JsCallNode', $JsCallNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_8;

        self.$handle("jscall");

        Opal.defn(self, '$record_method?', TMP_6 = function() {
          var self = this;

          return false;
        }, TMP_6.$$arity = 0);

        return (Opal.defn(self, '$default_compile', TMP_8 = function ːdefault_compile() {
          var $a, $b, TMP_7, $c, self = this, mid = nil, splat = nil, block = nil, blktmp = nil, tmprecv = nil, recv_code = nil, call_recv = nil, args = nil;

          if (self.$meth()['$==']("[]")) {
            return self.$push(self.$recv(self.$recv_sexp()), "[", self.$expr(self.$arglist()), "]")
            } else {
            mid = "." + (self.$meth());
            splat = ($a = ($b = self.$arglist()['$[]']($range(1, -1, false)))['$any?'], $a.$$p = (TMP_7 = function(a){var self = TMP_7.$$s || this;
if (a == null) a = nil;
            return a.$first()['$==']("splat")}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
            if ((($a = ($c = $scope.get('Sexp')['$==='](self.$arglist().$last()), $c !== false && $c !== nil ?self.$arglist().$last().$type()['$==']("block_pass") : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
              block = self.$arglist().$pop()
            } else if ((($a = self.$iter()) !== nil && (!$a.$$is_boolean || $a == true))) {
              block = self.$iter()};
            if (block !== false && block !== nil) {
              blktmp = self.$scope().$new_temp()};
            if (splat !== false && splat !== nil) {
              tmprecv = self.$scope().$new_temp()};
            if (block !== false && block !== nil) {
              block = self.$expr(block)};
            recv_code = self.$recv(self.$recv_sexp());
            call_recv = self.$s("js_tmp", ((($a = blktmp) !== false && $a !== nil) ? $a : recv_code));
            if (blktmp !== false && blktmp !== nil) {
              self.$arglist().$push(call_recv)};
            args = self.$expr(self.$arglist());
            if (tmprecv !== false && tmprecv !== nil) {
              self.$push("(" + (tmprecv) + " = ", recv_code, ")" + (mid))
              } else {
              self.$push(recv_code, mid)
            };
            if (blktmp !== false && blktmp !== nil) {
              self.$unshift("(" + (blktmp) + " = ", block, ", ");
              self.$push(")");};
            if (splat !== false && splat !== nil) {
              self.$push(".apply(", tmprecv, ", ", args, ")")
              } else {
              self.$push("(", args, ")")
            };
            if (blktmp !== false && blktmp !== nil) {
              return self.$scope().$queue_temp(blktmp)
              } else {
              return nil
            };
          };
        }, TMP_8.$$arity = 0), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $Match3Node(){};
        var self = $Match3Node = $klass($base, $super, 'Match3Node', $Match3Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_9;

        def.level = nil;
        self.$handle("match3");

        self.$children("lhs", "rhs");

        return (Opal.defn(self, '$compile', TMP_9 = function ːcompile() {
          var self = this, sexp = nil;

          sexp = self.$s("call", self.$lhs(), "=~", self.$s("arglist", self.$rhs()));
          return self.$push(self.$process(sexp, self.level));
        }, TMP_9.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgnOrNode(){};
        var self = $OpAsgnOrNode = $klass($base, $super, 'OpAsgnOrNode', $OpAsgnOrNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_10;

        self.$handle("op_asgn_or");

        self.$children("recvr", "rhs");

        return (Opal.defn(self, '$compile', TMP_10 = function ːcompile() {
          var self = this, sexp = nil;

          sexp = self.$s("or", self.$recvr(), self.$rhs());
          return self.$push(self.$expr(sexp));
        }, TMP_10.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgnAndNode(){};
        var self = $OpAsgnAndNode = $klass($base, $super, 'OpAsgnAndNode', $OpAsgnAndNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_11;

        self.$handle("op_asgn_and");

        self.$children("recvr", "rhs");

        return (Opal.defn(self, '$compile', TMP_11 = function ːcompile() {
          var self = this, sexp = nil;

          sexp = self.$s("and", self.$recvr(), self.$rhs());
          return self.$push(self.$expr(sexp));
        }, TMP_11.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgn1Node(){};
        var self = $OpAsgn1Node = $klass($base, $super, 'OpAsgn1Node', $OpAsgn1Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_12, TMP_13, TMP_16, TMP_19, TMP_22;

        self.$handle("op_asgn1");

        self.$children("lhs", "args", "op", "rhs");

        Opal.defn(self, '$first_arg', TMP_12 = function ːfirst_arg() {
          var self = this;

          return self.$args()['$[]'](1);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$compile', TMP_13 = function ːcompile() {
          var self = this, $case = nil;

          return (function() {$case = self.$op().$to_s();if ("||"['$===']($case)) {return self.$compile_or()}else if ("&&"['$===']($case)) {return self.$compile_and()}else {return self.$compile_operator()}})();
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$compile_operator', TMP_16 = function ːcompile_operator() {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_14 = function(a){var self = TMP_14.$$s || this, $c, $d, TMP_15;
if (a == null) a = nil;
          return ($c = ($d = self).$with_temp, $c.$$p = (TMP_15 = function(r){var self = TMP_15.$$s || this, cur = nil, rhs = nil, call = nil;
if (r == null) r = nil;
            cur = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              rhs = self.$s("call", cur, self.$op().$to_sym(), self.$s("arglist", self.$rhs()));
              call = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), rhs));
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(call), ")");}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $c).call($d)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$compile_or', TMP_19 = function ːcompile_or() {
          var $a, $b, TMP_17, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_17 = function(a){var self = TMP_17.$$s || this, $c, $d, TMP_18;
if (a == null) a = nil;
          return ($c = ($d = self).$with_temp, $c.$$p = (TMP_18 = function(r){var self = TMP_18.$$s || this, aref = nil, aset = nil, orop = nil;
if (r == null) r = nil;
            aref = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              aset = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), self.$rhs()));
              orop = self.$s("or", aref, aset);
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(orop), ")");}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $c).call($d)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        }, TMP_19.$$arity = 0);

        return (Opal.defn(self, '$compile_and', TMP_22 = function ːcompile_and() {
          var $a, $b, TMP_20, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_20 = function(a){var self = TMP_20.$$s || this, $c, $d, TMP_21;
if (a == null) a = nil;
          return ($c = ($d = self).$with_temp, $c.$$p = (TMP_21 = function(r){var self = TMP_21.$$s || this, aref = nil, aset = nil, andop = nil;
if (r == null) r = nil;
            aref = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              aset = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), self.$rhs()));
              andop = self.$s("and", aref, aset);
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(andop), ")");}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($d)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
        }, TMP_22.$$arity = 0), nil) && 'compile_and';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgn2Node(){};
        var self = $OpAsgn2Node = $klass($base, $super, 'OpAsgn2Node', $OpAsgn2Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_23, TMP_24, TMP_26, TMP_28, TMP_30;

        self.$handle("op_asgn2");

        self.$children("lhs", "mid", "op", "rhs");

        Opal.defn(self, '$meth', TMP_23 = function ːmeth() {
          var self = this;

          return self.$mid().$to_s()['$[]']($range(0, -2, false));
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$compile', TMP_24 = function ːcompile() {
          var self = this, $case = nil;

          return (function() {$case = self.$op().$to_s();if ("||"['$===']($case)) {return self.$compile_or()}else if ("&&"['$===']($case)) {return self.$compile_and()}else {return self.$compile_operator()}})();
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$compile_or', TMP_26 = function ːcompile_or() {
          var $a, $b, TMP_25, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_25 = function(tmp){var self = TMP_25.$$s || this, getr = nil, asgn = nil, orop = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", self.$rhs()));
            orop = self.$s("or", getr, asgn);
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(orop), ")");}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$compile_and', TMP_28 = function ːcompile_and() {
          var $a, $b, TMP_27, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_27 = function(tmp){var self = TMP_27.$$s || this, getr = nil, asgn = nil, andop = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", self.$rhs()));
            andop = self.$s("and", getr, asgn);
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(andop), ")");}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
        }, TMP_28.$$arity = 0);

        return (Opal.defn(self, '$compile_operator', TMP_30 = function ːcompile_operator() {
          var $a, $b, TMP_29, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_29 = function(tmp){var self = TMP_29.$$s || this, getr = nil, oper = nil, asgn = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            oper = self.$s("call", getr, self.$op(), self.$s("arglist", self.$rhs()));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", oper));
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(asgn), ")");}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
        }, TMP_30.$$arity = 0), nil) && 'compile_operator';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/scope"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$call', '$==', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$proto', '$%', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$has_temp?', '$pop', '$next_temp', '$succ', '$uses_block!', '$identify!', '$unique_temp', '$add_scope_temp', '$parent', '$def?', '$type', '$mid', '$rescue_else_sexp']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ScopeNode(){};
        var self = $ScopeNode = $klass($base, $super, 'ScopeNode', $ScopeNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40;

        def.type = def.defs = def.parent = def.temps = def.locals = def.compiler = def.proto_ivars = def.ivars = def.gvars = def.args = def.queue = def.unique = def.while_stack = def.identity = def.uses_block = def.in_ensure = nil;
        self.$attr_accessor("parent");

        self.$attr_accessor("name");

        self.$attr_accessor("block_name");

        self.$attr_reader("scope_name");

        self.$attr_reader("locals");

        self.$attr_reader("ivars");

        self.$attr_reader("gvars");

        self.$attr_accessor("mid");

        self.$attr_accessor("defs");

        self.$attr_reader("methods");

        self.$attr_accessor("uses_super");

        self.$attr_accessor("uses_zuper");

        self.$attr_accessor("catch_return", "has_break");

        self.$attr_accessor("rescue_else_sexp");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
          var $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          ($b = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $b.$$p = $iter, $b).apply($c, $zuper);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          return self.proto_ivars = [];
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$in_scope', TMP_2 = function ːin_scope() {
          var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = self).$indent, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $c, $d;
            if (self.parent == null) self.parent = nil;

          self.parent = self.$compiler().$scope();
            (($c = [self]), $d = self.$compiler(), $d['$scope='].apply($d, $c), $c[$c.length-1]);
            block.$call(self);
            return (($c = [self.parent]), $d = self.$compiler(), $d['$scope='].apply($d, $c), $c[$c.length-1]);}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$class_scope?', TMP_4 = function() {
          var $a, self = this;

          return ((($a = self.type['$==']("class")) !== false && $a !== nil) ? $a : self.type['$==']("module"));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$class?', TMP_5 = function() {
          var self = this;

          return self.type['$==']("class");
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$module?', TMP_6 = function() {
          var self = this;

          return self.type['$==']("module");
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$sclass?', TMP_7 = function() {
          var self = this;

          return self.type['$==']("sclass");
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$top?', TMP_8 = function() {
          var self = this;

          return self.type['$==']("top");
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$iter?', TMP_9 = function() {
          var self = this;

          return self.type['$==']("iter");
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$def?', TMP_10 = function() {
          var self = this;

          return self.type['$==']("def");
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$def_in_class?', TMP_11 = function() {
          var $a, $b, $c, self = this;

          return ($a = ($b = ($c = self.defs['$!'](), $c !== false && $c !== nil ?self.type['$==']("def") : $c), $b !== false && $b !== nil ?self.parent : $b), $a !== false && $a !== nil ?self.parent['$class?']() : $a);
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$proto', TMP_12 = function ːproto() {
          var self = this;

          return "def";
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$to_vars', TMP_17 = function ːto_vars() {
          var $a, $b, $c, TMP_13, $d, TMP_14, $e, TMP_15, $f, TMP_16, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil, result = nil;

          vars = self.temps.$dup();
          ($a = vars).$push.apply($a, Opal.to_a(($b = ($c = self.locals).$map, $b.$$p = (TMP_13 = function(l){var self = TMP_13.$$s || this;
if (l == null) l = nil;
          return "" + (l) + " = nil"}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $b).call($c)));
          iv = ($b = ($d = self.$ivars()).$map, $b.$$p = (TMP_14 = function(ivar){var self = TMP_14.$$s || this;
if (ivar == null) ivar = nil;
          return "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n"}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $b).call($d);
          gv = ($b = ($e = self.$gvars()).$map, $b.$$p = (TMP_15 = function(gvar){var self = TMP_15.$$s || this;
if (gvar == null) gvar = nil;
          return "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n"}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($e);
          indent = self.compiler.$parser_indent();
          str = (function() {if ((($b = vars['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ""
            } else {
            return "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ((($b = self.$ivars()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ((($b = self.$gvars()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ((($b = ($f = self['$class?'](), $f !== false && $f !== nil ?self.proto_ivars['$empty?']()['$!']() : $f)) !== nil && (!$b.$$is_boolean || $b == true))) {
            pvars = ($b = ($f = self.proto_ivars).$map, $b.$$p = (TMP_16 = function(i){var self = TMP_16.$$s || this;
if (i == null) i = nil;
            return "" + (self.$proto()) + (i)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $b).call($f).$join(" = ");
            result = "%s\n%s%s = nil;"['$%']([str, indent, pvars]);
            } else {
            result = str
          };
          return self.$fragment(result);
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$add_scope_ivar', TMP_18 = function ːadd_scope_ivar(ivar) {
          var $a, self = this;

          if ((($a = self['$def_in_class?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ((($a = self.ivars['$include?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.ivars['$<<'](ivar)
          };
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$add_scope_gvar', TMP_19 = function ːadd_scope_gvar(gvar) {
          var $a, self = this;

          if ((($a = self.gvars['$include?'](gvar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.gvars['$<<'](gvar)
          };
        }, TMP_19.$$arity = 1);

        Opal.defn(self, '$add_proto_ivar', TMP_20 = function ːadd_proto_ivar(ivar) {
          var $a, self = this;

          if ((($a = self.proto_ivars['$include?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.proto_ivars['$<<'](ivar)
          };
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$add_arg', TMP_21 = function ːadd_arg(arg) {
          var $a, self = this;

          if ((($a = self.args['$include?'](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.args['$<<'](arg)
          };
          return arg;
        }, TMP_21.$$arity = 1);

        Opal.defn(self, '$add_scope_local', TMP_22 = function ːadd_scope_local(local) {
          var $a, self = this;

          if ((($a = self['$has_local?'](local)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return self.locals['$<<'](local);
        }, TMP_22.$$arity = 1);

        Opal.defn(self, '$has_local?', TMP_23 = function(local) {
          var $a, $b, $c, self = this;

          if ((($a = ((($b = ((($c = self.locals['$include?'](local)) !== false && $c !== nil) ? $c : self.args['$include?'](local))) !== false && $b !== nil) ? $b : self.temps['$include?'](local))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true};
          if ((($a = ($b = self.parent, $b !== false && $b !== nil ?self.type['$==']("iter") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent['$has_local?'](local)};
          return false;
        }, TMP_23.$$arity = 1);

        Opal.defn(self, '$add_scope_temp', TMP_24 = function ːadd_scope_temp(tmp) {
          var $a, self = this;

          if ((($a = self['$has_temp?'](tmp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return self.temps.$push(tmp);
        }, TMP_24.$$arity = 1);

        Opal.defn(self, '$has_temp?', TMP_25 = function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp);
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$new_temp', TMP_26 = function ːnew_temp() {
          var $a, self = this, tmp = nil;

          if ((($a = self.queue['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$next_temp', TMP_27 = function ːnext_temp() {
          var $a, $b, self = this, tmp = nil;

          while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
          tmp = "$" + (self.unique);
          self.unique = self.unique.$succ();
          if ((($b = self['$has_local?'](tmp)) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            break;
          };};
          return tmp;
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$queue_temp', TMP_28 = function ːqueue_temp(name) {
          var self = this;

          return self.queue['$<<'](name);
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$push_while', TMP_29 = function ːpush_while() {
          var self = this, info = nil;

          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$pop_while', TMP_30 = function ːpop_while() {
          var self = this;

          return self.while_stack.$pop();
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$in_while?', TMP_31 = function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']();
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$uses_block!', TMP_32 = function() {
          var $a, $b, self = this;

          if ((($a = (($b = self.type['$==']("iter")) ? self.parent : self.type['$==']("iter"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent['$uses_block!']()
            } else {
            self.uses_block = true;
            return self['$identify!']();
          };
        }, TMP_32.$$arity = 0);

        Opal.defn(self, '$identify!', TMP_33 = function() {
          var $a, self = this;

          if ((($a = self.identity) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.identity};
          self.identity = self.compiler.$unique_temp();
          if ((($a = self.parent) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$identity', TMP_34 = function ːidentity() {
          var self = this;

          return self.identity;
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$find_parent_def', TMP_35 = function ːfind_parent_def() {
          var $a, $b, self = this, scope = nil;

          scope = self;
          while ((($b = scope = scope.$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = scope['$def?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return scope}};
          return nil;
        }, TMP_35.$$arity = 0);

        Opal.defn(self, '$get_super_chain', TMP_36 = function ːget_super_chain() {
          var $a, $b, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          $a = [[], self, "null", "null"], chain = $a[0], scope = $a[1], defn = $a[2], mid = $a[3], $a;
          while (scope !== false && scope !== nil) {
          if (scope.$type()['$==']("iter")) {
            chain['$<<'](scope['$identify!']());
            if ((($b = scope.$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
              scope = scope.$parent()};
          } else if (scope.$type()['$==']("def")) {
            defn = scope['$identify!']();
            mid = "'" + (scope.$mid()) + "'";
            break;;
            } else {
            break;
          }};
          return [chain, defn, mid];
        }, TMP_36.$$arity = 0);

        Opal.defn(self, '$uses_block?', TMP_37 = function() {
          var self = this;

          return self.uses_block;
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$has_rescue_else?', TMP_38 = function() {
          var self = this;

          return self.$rescue_else_sexp()['$!']()['$!']();
        }, TMP_38.$$arity = 0);

        Opal.defn(self, '$in_ensure', TMP_39 = function ːin_ensure() {
          var self = this, $iter = TMP_39.$$p, $yield = $iter || nil, result = nil;

          TMP_39.$$p = null;
          if (($yield !== nil)) {
            } else {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          return self.in_ensure = false;
        }, TMP_39.$$arity = 0);

        return (Opal.defn(self, '$in_ensure?', TMP_40 = function() {
          var self = this;

          return self.in_ensure['$!']()['$!']();
        }, TMP_40.$$arity = 0), nil) && 'in_ensure?';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/module"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$add_temp', '$proto', '$stmt', '$body', '$s', '$empty_line', '$to_vars', '$==', '$type', '$cid', '$to_s', '$[]', '$expr', '$raise']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ModuleNode(){};
        var self = $ModuleNode = $klass($base, $super, 'ModuleNode', $ModuleNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

        self.$handle("module");

        self.$children("cid", "body");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this, name = nil, base = nil;

          $b = self.$name_and_base(), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), base = ($a[1] == null ? nil : $a[1]), $b;
          self.$helper("module");
          self.$push("(function($base) {");
          self.$line("  var $" + (name) + ", self = $" + (name) + " = $module($base, '" + (name) + "');");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, body_code = nil;

          (($c = [name]), $d = self.$scope(), $d['$name='].apply($d, $c), $c[$c.length-1]);
            self.$add_temp("" + (self.$scope().$proto()) + " = self.$$proto");
            self.$add_temp("$scope = self.$$scope");
            body_code = self.$stmt(((($c = self.$body()) !== false && $c !== nil) ? $c : self.$s("nil")));
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return self.$line("})(", base, ")");
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$name_and_base', TMP_3 = function ːname_and_base() {
          var self = this;

          if (self.$cid().$type()['$==']("const")) {
            return [self.$cid()['$[]'](1).$to_s(), "$scope.base"]
          } else if (self.$cid().$type()['$==']("colon2")) {
            return [self.$cid()['$[]'](2).$to_s(), self.$expr(self.$cid()['$[]'](1))]
          } else if (self.$cid().$type()['$==']("colon3")) {
            return [self.$cid()['$[]'](1).$to_s(), "Opal.Object"]
            } else {
            return self.$raise("Bad receiver in module")
          };
        }, TMP_3.$$arity = 0), nil) && 'name_and_base';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$add_temp', '$proto', '$body_code', '$empty_line', '$to_vars', '$super_code', '$sup', '$expr', '$stmt', '$returns', '$compiler', '$body', '$s']);
  self.$require("opal/nodes/module");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ClassNode(){};
        var self = $ClassNode = $klass($base, $super, 'ClassNode', $ClassNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

        self.$handle("class");

        self.$children("cid", "sup", "body");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this, name = nil, base = nil;

          $b = self.$name_and_base(), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), base = ($a[1] == null ? nil : $a[1]), $b;
          self.$helper("klass");
          self.$push("(function($base, $super) {");
          self.$line("  function $" + (name) + "(){};");
          self.$line("  var self = $" + (name) + " = $klass($base, $super, '" + (name) + "', $" + (name) + ");");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, body_code = nil;

          (($c = [name]), $d = self.$scope(), $d['$name='].apply($d, $c), $c[$c.length-1]);
            self.$add_temp("" + (self.$scope().$proto()) + " = self.$$proto");
            self.$add_temp("$scope = self.$$scope");
            body_code = self.$body_code();
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return self.$line("})(", base, ", ", self.$super_code(), ")");
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$super_code', TMP_3 = function ːsuper_code() {
          var $a, self = this;

          if ((($a = self.$sup()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$sup())
            } else {
            return "null"
          };
        }, TMP_3.$$arity = 0);

        return (Opal.defn(self, '$body_code', TMP_4 = function ːbody_code() {
          var $a, self = this;

          return self.$stmt(self.$compiler().$returns(((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil"))));
        }, TMP_4.$$arity = 0), nil) && 'body_code';
      })($scope.base, $scope.get('ModuleNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/singleton_class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SingletonClassNode(){};
        var self = $SingletonClassNode = $klass($base, $super, 'SingletonClassNode', $SingletonClassNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        self.$handle("sclass");

        self.$children("object", "body");

        return (Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this;

          self.$push("(function(self) {");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, body_stmt = nil;

          self.$add_temp("$scope = self.$$scope");
            self.$add_temp("def = self.$$proto");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "))");
        }, TMP_2.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/inline_args"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$push', '$join', '$arg_names', '$inject', '$type', '$===', '$<<', '$add_arg', '$next_temp', '$scope', '$[]=', '$mlhs_mapping', '$to_s', '$variable', '$[]', '$!', '$meta', '$!=', '$+', '$raise', '$inspect', '$children', '$to_sym']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $InlineArgs(){};
        var self = $InlineArgs = $klass($base, $super, 'InlineArgs', $InlineArgs);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4;

        self.$handle("inline_args");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this;

          return self.$push(self.$arg_names().$join(", "));
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$arg_names', TMP_3 = function ːarg_names() {
          var $a, $b, TMP_2, self = this, done_kwargs = nil;

          done_kwargs = false;
          return ($a = ($b = self.$children()).$inject, $a.$$p = (TMP_2 = function(result, child){var self = TMP_2.$$s || this, $c, $d, $case = nil, tmp = nil, arg_name = nil, tmp_arg_name = nil;
if (result == null) result = nil;if (child == null) child = nil;
          $case = child.$type();if ("kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case)) {if (done_kwargs !== false && done_kwargs !== nil) {
              } else {
              done_kwargs = true;
              result['$<<']("$kwargs");
            };
            self.$add_arg(child);}else if ("mlhs"['$===']($case)) {tmp = self.$scope().$next_temp();
            result['$<<'](tmp);
            self.$scope().$mlhs_mapping()['$[]='](child, tmp);}else if ("arg"['$===']($case) || "optarg"['$===']($case)) {arg_name = self.$variable(child['$[]'](1)).$to_s();
            if ((($c = ($d = child.$meta()['$[]']("inline")['$!'](), $d !== false && $d !== nil ?arg_name['$[]'](0)['$!=']("$") : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
              arg_name = "$" + (arg_name)};
            result['$<<'](arg_name);
            self.$add_arg(child);}else if ("restarg"['$===']($case)) {tmp_arg_name = $rb_plus(self.$scope().$next_temp(), "_rest");
            result['$<<'](tmp_arg_name);
            self.$add_arg(child);}else {self.$raise("Unknown argument type " + (child.$inspect()))};
            return result;}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, []);
        }, TMP_3.$$arity = 0);

        return (Opal.defn(self, '$add_arg', TMP_4 = function ːadd_arg(arg) {
          var $a, self = this, arg_name = nil;

          if ((($a = arg['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            arg_name = self.$variable(arg['$[]'](1).$to_sym());
            return self.$scope().$add_arg(arg_name);
            } else {
            return nil
          };
        }, TMP_4.$$arity = 1), nil) && 'add_arg';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/normarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$to_sym', '$[]', '$variable', '$meta', '$add_temp', '$line', '$working_arguments', '$scope', '$in_mlhs?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NormargNode(){};
        var self = $NormargNode = $klass($base, $super, 'NormargNode', $NormargNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.sexp = nil;
        self.$handle("arg");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, self = this, arg_name = nil, var_name = nil;

          arg_name = self.sexp['$[]'](1).$to_sym();
          var_name = self.$variable(arg_name);
          if ((($a = self.sexp.$meta()['$[]']("post")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$add_temp(var_name);
            self.$line("" + (var_name) + " = " + (self.$scope().$working_arguments()) + ".splice(0,1)[0];");};
          if ((($a = self.$scope()['$in_mlhs?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$line("if (" + (var_name) + " == null) {");
            self.$line("  " + (var_name) + " = nil;");
            return self.$line("}");
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/optarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$to_sym', '$[]', '$variable', '$==', '$line', '$expr', '$push']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $OptargNode(){};
        var self = $OptargNode = $klass($base, $super, 'OptargNode', $OptargNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.sexp = nil;
        self.$handle("optarg");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this, optarg_name = nil, default_value = nil, var_name = nil;

          optarg_name = self.sexp['$[]'](1).$to_sym();
          default_value = self.sexp['$[]'](2);
          var_name = self.$variable(optarg_name);
          if (default_value['$[]'](2)['$==']("undefined")) {
            return nil};
          self.$line("if (" + (var_name) + " == null) {");
          self.$line("  " + (var_name) + " = ", self.$expr(default_value));
          self.$push(";");
          return self.$line("}");
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/mlhsarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$s', '$children', '$[]', '$meta', '$mlhs_name', '$[]=', '$with_inline_args', '$push', '$process', '$scope', '$mlhs_mapping', '$line', '$in_mlhs', '$each', '$type', '$===', '$<<', '$join', '$to_s', '$take_while', '$!=']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MlhsArgNode(){};
        var self = $MlhsArgNode = $klass($base, $super, 'MlhsArgNode', $MlhsArgNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_6, TMP_8;

        def.sexp = def.mlhs_name = def.inline_args = nil;
        self.$handle("mlhs");

        Opal.defn(self, '$compile', TMP_4 = function ːcompile() {
          var $a, $b, $c, TMP_1, $d, TMP_2, self = this, args_sexp = nil, mlhs_sexp = nil, var_name = nil;

          args_sexp = ($a = self).$s.apply($a, ["post_args"].concat(Opal.to_a(self.$children())));
          if ((($b = self.sexp.$meta()['$[]']("post")) !== nil && (!$b.$$is_boolean || $b == true))) {
            mlhs_sexp = self.$s("arg", self.$mlhs_name());
            mlhs_sexp.$meta()['$[]=']("post", true);
            ($b = ($c = self.$scope()).$with_inline_args, $b.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$push(self.$process(mlhs_sexp))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $b).call($c, []);
            var_name = args_sexp.$meta()['$[]=']("js_source", self.$mlhs_name());
            } else {
            var_name = args_sexp.$meta()['$[]=']("js_source", self.$scope().$mlhs_mapping()['$[]'](self.sexp))
          };
          self.$line("if (" + (var_name) + " == null) {");
          self.$line("  " + (var_name) + " = nil;");
          self.$line("}");
          self.$line("if (!" + (var_name) + ".$$is_array) {");
          self.$line("  " + (var_name) + " = [" + (var_name) + "];");
          self.$line("}");
          return ($b = ($d = self.$scope()).$with_inline_args, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $e, $f, TMP_3;

          return ($e = ($f = self.$scope()).$in_mlhs, $e.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$push(self.$process(args_sexp))}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $e).call($f)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $b).call($d, []);
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$mlhs_name', TMP_6 = function ːmlhs_name() {
          var $a, $b, $c, TMP_5, self = this, result = nil;

          return ((($a = self.mlhs_name) !== false && $a !== nil) ? $a : self.mlhs_name = (function() {if ((($b = self.sexp.$meta()['$[]']("post")) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = ["$mlhs_of"];
            ($b = ($c = self.$children()).$each, $b.$$p = (TMP_5 = function(child){var self = TMP_5.$$s || this, $case = nil;
if (child == null) child = nil;
            return (function() {$case = child.$type();if ("arg"['$===']($case)) {return result['$<<'](child['$[]'](1))}else if ("mlhs"['$===']($case)) {return result['$<<']("mlhs")}else { return nil }})()}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $b).call($c);
            return result.$join("_");
            } else {
            return self.sexp['$[]'](1).$to_s()
          }; return nil; })());
        }, TMP_6.$$arity = 0);

        return (Opal.defn(self, '$inline_args', TMP_8 = function ːinline_args() {
          var $a, $b, $c, TMP_7, self = this;

          return ((($a = self.inline_args) !== false && $a !== nil) ? $a : self.inline_args = ($b = ($c = self.$children()).$take_while, $b.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this, $d;
if (arg == null) arg = nil;
          return ($d = arg.$type()['$!=']("restarg"), $d !== false && $d !== nil ?arg.$type()['$!=']("optarg") : $d)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $b).call($c));
        }, TMP_8.$$arity = 0), nil) && 'inline_args';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/restarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$[]', '$variable', '$to_sym', '$add_temp', '$meta', '$line', '$working_arguments', '$scope']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RestargNode(){};
        var self = $RestargNode = $klass($base, $super, 'RestargNode', $RestargNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.sexp = nil;
        self.$handle("restarg");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, self = this, restarg_name = nil, var_name = nil, offset = nil;

          restarg_name = self.sexp['$[]'](1);
          if (restarg_name !== false && restarg_name !== nil) {
            } else {
            return nil
          };
          var_name = self.$variable(restarg_name.$to_sym());
          self.$add_temp(var_name);
          if ((($a = self.sexp.$meta()['$[]']("post")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("" + (var_name) + " = " + (self.$scope().$working_arguments()) + ";")
            } else {
            offset = self.sexp.$meta()['$[]']("offset");
            self.$line("var $args_len = arguments.length, $rest_len = $args_len - " + (offset) + ";");
            self.$line("if ($rest_len < 0) { $rest_len = 0; }");
            self.$line("" + (var_name) + " = new Array($rest_len);");
            self.$line("for (var $arg_idx = " + (offset) + "; $arg_idx < $args_len; $arg_idx++) {");
            self.$line("  " + (var_name) + "[$arg_idx - " + (offset) + "] = arguments[$arg_idx];");
            return self.$line("}");
          };
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/initialize_kwargs"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$kwargs_initialized', '$scope', '$helper', '$line', '$kwargs_initialized=']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $InitializeKwargsNode(){};
        var self = $InitializeKwargsNode = $klass($base, $super, 'InitializeKwargsNode', $InitializeKwargsNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defn(self, '$initialize_kw_args_if_needed', TMP_1 = function ːinitialize_kw_args_if_needed() {
          var $a, $b, self = this;

          if ((($a = self.$scope().$kwargs_initialized()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.$helper("hash2");
          self.$line("if ($kwargs == null || !$kwargs.$$is_hash) {");
          self.$line("  if ($kwargs == null) {");
          self.$line("    $kwargs = $hash2([], {});");
          self.$line("  } else {");
          self.$line("    throw Opal.ArgumentError.$new('expected kwargs');");
          self.$line("  }");
          self.$line("}");
          return (($a = [true]), $b = self.$scope(), $b['$kwargs_initialized='].apply($b, $a), $a[$a.length-1]);
        }, TMP_1.$$arity = 0), nil) && 'initialize_kw_args_if_needed'
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/kwarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$initialize_kw_args_if_needed', '$to_sym', '$[]', '$variable', '$add_temp', '$line', '$<<', '$used_kwargs', '$scope']);
  self.$require("opal/nodes/args/initialize_kwargs");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $KwargNode(){};
        var self = $KwargNode = $klass($base, $super, 'KwargNode', $KwargNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.sexp = nil;
        self.$handle("kwarg");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this, kwarg_name = nil, var_name = nil;

          self.$initialize_kw_args_if_needed();
          kwarg_name = self.sexp['$[]'](1).$to_sym();
          var_name = self.$variable(kwarg_name);
          self.$add_temp(var_name);
          self.$line("if (!$kwargs.$$smap.hasOwnProperty('" + (kwarg_name) + "')) {");
          self.$line("  throw Opal.ArgumentError.$new('missing keyword: " + (kwarg_name) + "');");
          self.$line("}");
          self.$line("" + (var_name) + " = $kwargs.$$smap['" + (kwarg_name) + "'];");
          return self.$scope().$used_kwargs()['$<<'](kwarg_name);
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('InitializeKwargsNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/kwoptarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$initialize_kw_args_if_needed', '$to_sym', '$[]', '$variable', '$add_temp', '$line', '$expr', '$<<', '$used_kwargs', '$scope']);
  self.$require("opal/nodes/args/initialize_kwargs");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $KwoptArgNode(){};
        var self = $KwoptArgNode = $klass($base, $super, 'KwoptArgNode', $KwoptArgNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.sexp = nil;
        self.$handle("kwoptarg");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this, kwoptarg_name = nil, default_value = nil, var_name = nil;

          self.$initialize_kw_args_if_needed();
          kwoptarg_name = self.sexp['$[]'](1).$to_sym();
          default_value = self.sexp['$[]'](2);
          var_name = self.$variable(kwoptarg_name);
          self.$add_temp(var_name);
          self.$line("if ((" + (var_name) + " = $kwargs.$$smap['" + (kwoptarg_name) + "']) == null) {");
          self.$line("  " + (var_name) + " = ", self.$expr(default_value));
          self.$line("}");
          return self.$scope().$used_kwargs()['$<<'](kwoptarg_name);
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('InitializeKwargsNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/kwrestarg"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$initialize_kw_args_if_needed', '$[]', '$used_kwargs', '$variable', '$to_sym', '$add_temp', '$line', '$map', '$scope', '$join']);
  self.$require("opal/nodes/args/initialize_kwargs");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $KwrestArgNode(){};
        var self = $KwrestArgNode = $klass($base, $super, 'KwrestArgNode', $KwrestArgNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

        def.sexp = nil;
        self.$handle("kwrestarg");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this, kwrestarg_name = nil, extract_code = nil, var_name = nil;

          self.$initialize_kw_args_if_needed();
          kwrestarg_name = self.sexp['$[]'](1);
          extract_code = "Opal.kwrestargs($kwargs, " + (self.$used_kwargs()) + ");";
          if (kwrestarg_name !== false && kwrestarg_name !== nil) {
            var_name = self.$variable(kwrestarg_name.$to_sym());
            self.$add_temp(var_name);
            return self.$line("" + (var_name) + " = " + (extract_code));
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$used_kwargs', TMP_3 = function ːused_kwargs() {
          var $a, $b, TMP_2, self = this, args = nil;

          args = ($a = ($b = self.$scope().$used_kwargs()).$map, $a.$$p = (TMP_2 = function(arg_name){var self = TMP_2.$$s || this;
if (arg_name == null) arg_name = nil;
          return "'" + (arg_name) + "': true"}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          return "{" + (args.$join(",")) + "}";
        }, TMP_3.$$arity = 0), nil) && 'used_kwargs';
      })($scope.base, $scope.get('InitializeKwargsNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/post_kwargs"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$initialize_kw_args', '$each', '$push', '$process', '$line', '$working_arguments', '$scope']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PostKwargsNode(){};
        var self = $PostKwargsNode = $klass($base, $super, 'PostKwargsNode', $PostKwargsNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

        self.$handle("post_kwargs");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.$initialize_kw_args();
          return ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
          return self.$push(self.$process(arg))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$initialize_kw_args', TMP_3 = function ːinitialize_kw_args() {
          var self = this;

          return self.$line("$kwargs = Opal.extract_kwargs(" + (self.$scope().$working_arguments()) + ");");
        }, TMP_3.$$arity = 0), nil) && 'initialize_kw_args';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/args/post_args"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$attr_reader', '$each', '$[]=', '$meta', '$type', '$===', '$<<', '$children', '$empty?', '$working_arguments', '$scope', '$[]', '$working_arguments=', '$add_temp', '$line', '$size', '$inline_args', '$extract_arguments', '$push', '$process', '$kwargs_sexp', '$compile_required_arg', '$required_left_args', '$compile_optarg', '$optargs', '$compile_restarg', '$required_right_args', '$variable', '$to_sym', '$indent', '$restarg', '$extract_restarg', '$extract_blank_restarg', '$s', '$kwargs']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PostArgsNode(){};
        var self = $PostArgsNode = $klass($base, $super, 'PostArgsNode', $PostArgsNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_7, TMP_9, TMP_10, TMP_13, TMP_14, TMP_15, TMP_16;

        def.sexp = nil;
        self.$handle("post_args");

        self.$attr_reader("kwargs");

        self.$attr_reader("required_left_args");

        self.$attr_reader("optargs");

        self.$attr_reader("restarg");

        self.$attr_reader("required_right_args");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
          var $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          ($b = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $b.$$p = $iter, $b).apply($c, $zuper);
          self.kwargs = [];
          self.required_left_args = [];
          self.optargs = [];
          self.restarg = nil;
          return self.required_right_args = [];
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$extract_arguments', TMP_3 = function ːextract_arguments() {
          var $a, $b, TMP_2, self = this, found_opt_or_rest = nil;

          found_opt_or_rest = false;
          return ($a = ($b = self.$children()).$each, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this, $case = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.required_right_args == null) self.required_right_args = nil;
            if (self.required_left_args == null) self.required_left_args = nil;
if (arg == null) arg = nil;
          arg.$meta()['$[]=']("post", true);
            return (function() {$case = arg.$type();if ("kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case)) {return self.kwargs['$<<'](arg)}else if ("restarg"['$===']($case)) {self.restarg = arg;
            return found_opt_or_rest = true;}else if ("optarg"['$===']($case)) {self.optargs['$<<'](arg);
            return found_opt_or_rest = true;}else if ("arg"['$===']($case) || "mlhs"['$===']($case)) {if (found_opt_or_rest !== false && found_opt_or_rest !== nil) {
              return self.required_right_args['$<<'](arg)
              } else {
              return self.required_left_args['$<<'](arg)
            }}else { return nil }})();}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$compile', TMP_7 = function ːcompile() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, self = this, old_working_arguments = nil, js_source = nil;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          old_working_arguments = self.$scope().$working_arguments();
          if ((($a = self.sexp.$meta()['$[]']("js_source")) !== nil && (!$a.$$is_boolean || $a == true))) {
            js_source = self.sexp.$meta()['$[]']("js_source");
            (($a = ["" + (js_source) + "_args"]), $b = self.$scope(), $b['$working_arguments='].apply($b, $a), $a[$a.length-1]);
            } else {
            js_source = "arguments";
            (($a = ["$post_args"]), $b = self.$scope(), $b['$working_arguments='].apply($b, $a), $a[$a.length-1]);
          };
          self.$add_temp("" + (self.$scope().$working_arguments()));
          self.$line("" + (self.$scope().$working_arguments()) + " = Opal.slice.call(" + (js_source) + ", " + (self.$scope().$inline_args().$size()) + ", " + (js_source) + ".length);");
          self.$extract_arguments();
          self.$push(self.$process(self.$kwargs_sexp()));
          ($a = ($b = self.$required_left_args()).$each, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
          return self.$compile_required_arg(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
          ($a = ($c = self.$optargs()).$each, $a.$$p = (TMP_5 = function(optarg){var self = TMP_5.$$s || this;
if (optarg == null) optarg = nil;
          return self.$compile_optarg(optarg)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c);
          self.$compile_restarg();
          ($a = ($d = self.$required_right_args()).$each, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
          return self.$compile_required_arg(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d);
          return (($a = [old_working_arguments]), $e = self.$scope(), $e['$working_arguments='].apply($e, $a), $a[$a.length-1]);
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$compile_optarg', TMP_9 = function ːcompile_optarg(optarg) {
          var $a, $b, TMP_8, self = this, var_name = nil;

          var_name = self.$variable(optarg['$[]'](1).$to_sym());
          self.$add_temp(var_name);
          self.$line("if (" + (self.$required_right_args().$size()) + " < " + (self.$scope().$working_arguments()) + ".length) {");
          ($a = ($b = self).$indent, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$line("" + (var_name) + " = " + (self.$scope().$working_arguments()) + ".splice(0,1)[0];")}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
          self.$line("}");
          return self.$push(self.$process(optarg));
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$compile_required_arg', TMP_10 = function ːcompile_required_arg(arg) {
          var self = this;

          return self.$push(self.$process(arg));
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$compile_restarg', TMP_13 = function ːcompile_restarg() {
          var $a, $b, TMP_11, $c, TMP_12, self = this;

          if ((($a = self.$restarg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          self.$line("if (" + (self.$required_right_args().$size()) + " < " + (self.$scope().$working_arguments()) + ".length) {");
          ($a = ($b = self).$indent, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$extract_restarg()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b);
          self.$line("} else {");
          ($a = ($c = self).$indent, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

          return self.$extract_blank_restarg()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($c);
          return self.$line("}");
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$extract_restarg', TMP_14 = function ːextract_restarg() {
          var $a, self = this, extract_code = nil, var_name = nil;

          extract_code = "" + (self.$scope().$working_arguments()) + ".splice(0, " + (self.$scope().$working_arguments()) + ".length - " + (self.$required_right_args().$size()) + ");";
          if ((($a = self.$restarg()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            var_name = self.$variable(self.$restarg()['$[]'](1).$to_sym());
            self.$add_temp(var_name);
            return self.$line("" + (var_name) + " = " + (extract_code));
            } else {
            return self.$line(extract_code)
          };
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$extract_blank_restarg', TMP_15 = function ːextract_blank_restarg() {
          var $a, self = this, var_name = nil;

          if ((($a = self.$restarg()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            var_name = self.$variable(self.$restarg()['$[]'](1).$to_sym());
            self.$add_temp(var_name);
            return self.$line("" + (var_name) + " = [];");
            } else {
            return nil
          };
        }, TMP_15.$$arity = 0);

        return (Opal.defn(self, '$kwargs_sexp', TMP_16 = function ːkwargs_sexp() {
          var $a, self = this;

          return ($a = self).$s.apply($a, ["post_kwargs"].concat(Opal.to_a(self.$kwargs())));
        }, TMP_16.$$arity = 0), nil) && 'kwargs_sexp';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/node_with_args"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_writer', '$attr_reader', '$[]', '$args', '$each_with_index', '$==', '$-', '$length', '$type', '$===', '$<<', '$any?', '$!=', '$each', '$[]=', '$meta', '$inline_args', '$optimize_args!', '$select', '$first', '$find', '$include?', '$s', '$post_args', '$push', '$process', '$post_args_sexp', '$uses_block?', '$scope', '$identity', '$block_name', '$add_temp', '$line', '$inline_args=', '$pop', '$keyword_args', '$all?', '$rest_arg', '$opt_args', '$has_only_optional_kwargs?', '$negative_arity', '$positive_arity', '$children', '$size', '$has_required_kwargs?', '$+', '$-@', '$map', '$build_parameter', '$block_arg', '$join']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NodeWithArgs(){};
        var self = $NodeWithArgs = $klass($base, $super, 'NodeWithArgs', $NodeWithArgs);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_7, TMP_9, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_23, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32;

        def.opt_args = def.rest_arg = def.keyword_args = def.in_mlhs = nil;
        self.$attr_accessor("mlhs_args");

        self.$attr_accessor("used_kwargs");

        self.$attr_accessor("mlhs_mapping");

        self.$attr_accessor("working_arguments");

        self.$attr_writer("inline_args");

        self.$attr_accessor("kwargs_initialized");

        self.$attr_reader("inline_args", "post_args");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
          var $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          ($b = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $b.$$p = $iter, $b).apply($c, $zuper);
          self.mlhs_args = $hash2([], {});
          self.used_kwargs = [];
          self.mlhs_mapping = $hash2([], {});
          self.working_arguments = nil;
          self.in_mlhs = false;
          self.kwargs_initialized = false;
          self.inline_args = [];
          self.post_args = [];
          return self.post_args_started = false;
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$split_args', TMP_5 = function ːsplit_args() {
          var $a, $b, TMP_2, $c, TMP_4, self = this, args = nil;

          args = self.$args()['$[]']($range(1, -1, false));
          ($a = ($b = args).$each_with_index, $a.$$p = (TMP_2 = function(arg, idx){var self = TMP_2.$$s || this, $c, $d, $e, TMP_3, last_argument = nil, $case = nil;
            if (self.post_args_started == null) self.post_args_started = nil;
            if (self.post_args == null) self.post_args = nil;
            if (self.inline_args == null) self.inline_args = nil;
if (arg == null) arg = nil;if (idx == null) idx = nil;
          last_argument = (idx['$==']($rb_minus(args.$length(), 1)));
            return (function() {$case = arg.$type();if ("arg"['$===']($case) || "mlhs"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case)) {if ((($c = self.post_args_started) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.post_args['$<<'](arg)
              } else {
              return self.inline_args['$<<'](arg)
            }}else if ("restarg"['$===']($case)) {self.post_args_started = true;
            return self.post_args['$<<'](arg);}else if ("optarg"['$===']($case)) {if ((($c = ($d = ($e = args['$[]'](idx, args.$length()))['$any?'], $d.$$p = (TMP_3 = function(next_arg){var self = TMP_3.$$s || this, $f;
if (next_arg == null) next_arg = nil;
            return ($f = next_arg.$type()['$!=']("optarg"), $f !== false && $f !== nil ?next_arg.$type()['$!=']("restarg") : $f)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $d).call($e)) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.post_args_started = true};
            if ((($c = self.post_args_started) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.post_args['$<<'](arg)
              } else {
              return self.inline_args['$<<'](arg)
            };}else { return nil }})();}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
          ($a = ($c = self.$inline_args()).$each, $a.$$p = (TMP_4 = function(inline_arg){var self = TMP_4.$$s || this;
if (inline_arg == null) inline_arg = nil;
          return inline_arg.$meta()['$[]=']("inline", true)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($c);
          return self['$optimize_args!']();
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$opt_args', TMP_7 = function ːopt_args() {
          var $a, $b, $c, TMP_6, self = this;

          return ((($a = self.opt_args) !== false && $a !== nil) ? $a : self.opt_args = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$select, $b.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
          return arg.$first()['$==']("optarg")}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$rest_arg', TMP_9 = function ːrest_arg() {
          var $a, $b, $c, TMP_8, self = this;

          return ((($a = self.rest_arg) !== false && $a !== nil) ? $a : self.rest_arg = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$find, $b.$$p = (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return arg.$first()['$==']("restarg")}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$keyword_args', TMP_11 = function ːkeyword_args() {
          var $a, $b, $c, TMP_10, self = this;

          return ((($a = self.keyword_args) !== false && $a !== nil) ? $a : self.keyword_args = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$select, $b.$$p = (TMP_10 = function(arg){var self = TMP_10.$$s || this;
if (arg == null) arg = nil;
          return ["kwarg", "kwoptarg", "kwrestarg"]['$include?'](arg.$first())}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $b).call($c));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$inline_args_sexp', TMP_12 = function ːinline_args_sexp() {
          var $a, self = this;

          return ($a = self).$s.apply($a, ["inline_args"].concat(Opal.to_a(self.$args()['$[]']($range(1, -1, false)))));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$post_args_sexp', TMP_13 = function ːpost_args_sexp() {
          var $a, self = this;

          return ($a = self).$s.apply($a, ["post_args"].concat(Opal.to_a(self.$post_args())));
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$compile_inline_args', TMP_15 = function ːcompile_inline_args() {
          var $a, $b, TMP_14, self = this;

          return ($a = ($b = self.$inline_args()).$each, $a.$$p = (TMP_14 = function(inline_arg){var self = TMP_14.$$s || this;
if (inline_arg == null) inline_arg = nil;
          return self.$push(self.$process(inline_arg))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$compile_post_args', TMP_16 = function ːcompile_post_args() {
          var self = this;

          return self.$push(self.$process(self.$post_args_sexp()));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$compile_block_arg', TMP_17 = function ːcompile_block_arg() {
          var $a, self = this, scope_name = nil, yielder = nil;

          if ((($a = self.$scope()['$uses_block?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            scope_name = self.$scope().$identity();
            yielder = self.$scope().$block_name();
            self.$add_temp("$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + (scope_name) + ".$$p = null;");
            } else {
            return nil
          };
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$with_inline_args', TMP_18 = function ːwith_inline_args(args) {
          var $a, $b, self = this, $iter = TMP_18.$$p, $yield = $iter || nil, old_inline_args = nil;

          TMP_18.$$p = null;
          old_inline_args = self.$inline_args();
          (($a = [args]), $b = self, $b['$inline_args='].apply($b, $a), $a[$a.length-1]);
          Opal.yieldX($yield, []);
          return (($a = [old_inline_args]), $b = self, $b['$inline_args='].apply($b, $a), $a[$a.length-1]);
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$in_mlhs', TMP_19 = function ːin_mlhs() {
          var self = this, $iter = TMP_19.$$p, $yield = $iter || nil, old_mlhs = nil;

          TMP_19.$$p = null;
          old_mlhs = self.in_mlhs;
          self.in_mlhs = true;
          Opal.yieldX($yield, []);
          return self.in_mlhs = old_mlhs;
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$in_mlhs?', TMP_20 = function() {
          var self = this;

          return self.in_mlhs;
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$optimize_args!', TMP_21 = function() {
          var $a, $b, self = this, rest_arg = nil;

          if ((($a = (($b = self.$post_args().$length()['$=='](1)) ? self.$post_args().$first().$type()['$==']("restarg") : self.$post_args().$length()['$=='](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
            rest_arg = self.$post_args().$pop();
            rest_arg.$meta()['$[]=']("offset", self.$inline_args().$length());
            return self.$inline_args()['$<<'](rest_arg);
            } else {
            return nil
          };
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$has_only_optional_kwargs?', TMP_23 = function() {
          var $a, $b, $c, TMP_22, self = this;

          return ($a = self.$keyword_args()['$any?'](), $a !== false && $a !== nil ?($b = ($c = self.$keyword_args())['$all?'], $b.$$p = (TMP_22 = function(arg){var self = TMP_22.$$s || this;
if (arg == null) arg = nil;
          return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type())}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c) : $a);
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$has_required_kwargs?', TMP_25 = function() {
          var $a, $b, TMP_24, self = this;

          return ($a = ($b = self.$keyword_args())['$any?'], $a.$$p = (TMP_24 = function(arg){var self = TMP_24.$$s || this;
if (arg == null) arg = nil;
          return arg.$type()['$==']("kwarg")}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$arity', TMP_26 = function ːarity() {
          var $a, $b, $c, self = this;

          if ((($a = ((($b = ((($c = self.$rest_arg()) !== false && $c !== nil) ? $c : self.$opt_args()['$any?']())) !== false && $b !== nil) ? $b : self['$has_only_optional_kwargs?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$negative_arity()
            } else {
            return self.$positive_arity()
          };
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$negative_arity', TMP_28 = function ːnegative_arity() {
          var $a, $b, TMP_27, self = this, required_plain_args = nil, result = nil;

          required_plain_args = ($a = ($b = self.$args().$children()).$select, $a.$$p = (TMP_27 = function(arg){var self = TMP_27.$$s || this;
if (arg == null) arg = nil;
          return ["arg", "mlhs"]['$include?'](arg.$type())}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
          result = required_plain_args.$size();
          if ((($a = self['$has_required_kwargs?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = $rb_plus(result, 1)};
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$positive_arity', TMP_29 = function ːpositive_arity() {
          var $a, self = this, result = nil;

          result = $rb_minus(self.$args().$size(), 1);
          result = $rb_minus(result, self.$keyword_args().$size());
          if ((($a = self.$keyword_args()['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = $rb_plus(result, 1)};
          return result;
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$build_parameter', TMP_30 = function ːbuild_parameter(parameter_type, parameter_name) {
          var self = this;

          if (parameter_name !== false && parameter_name !== nil) {
            return "['" + (parameter_type) + "', '" + (parameter_name) + "']"
            } else {
            return "['" + (parameter_type) + "']"
          };
        }, TMP_30.$$arity = 2);

        Opal.cdecl($scope, 'SEXP_TO_PARAMETERS', $hash2(["arg", "mlhs", "optarg", "restarg", "kwarg", "kwoptarg", "kwrestarg"], {"arg": "req", "mlhs": "req", "optarg": "opt", "restarg": "rest", "kwarg": "keyreq", "kwoptarg": "key", "kwrestarg": "keyrest"}));

        return (Opal.defn(self, '$parameters_code', TMP_32 = function ːparameters_code() {
          var $a, $b, TMP_31, self = this, stringified_parameters = nil;

          stringified_parameters = ($a = ($b = self.$args().$children()).$map, $a.$$p = (TMP_31 = function(arg){var self = TMP_31.$$s || this, value = nil;
if (arg == null) arg = nil;
          value = (function() {if (arg.$type()['$==']("mlhs")) {
              return nil
              } else {
              return arg['$[]'](1)
            }; return nil; })();
            return self.$build_parameter($scope.get('SEXP_TO_PARAMETERS')['$[]'](arg.$type()), value);}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
          if ((($a = self.$block_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            stringified_parameters['$<<']("['block', '" + (self.$block_arg()) + "']")};
          return "[" + (stringified_parameters.$join(", ")) + "]";
        }, TMP_32.$$arity = 0), nil) && 'parameters_code';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/iter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$attr_accessor', '$extract_block_arg', '$extract_shadow_args', '$split_args', '$in_scope', '$process', '$inline_args_sexp', '$identify!', '$scope', '$add_temp', '$compile_shadow_args', '$compile_inline_args', '$compile_post_args', '$compile_block_arg', '$compile_norm_args', '$stmt', '$body', '$to_vars', '$line', '$unshift', '$push', '$has_break?', '$compiler', '$arity', '$arity_check?', '$parameters_code', '$has_top_level_mlhs_arg?', '$has_trailing_comma_in_args?', '$select', '$==', '$type', '$[]', '$args', '$each', '$variable', '$norm_args', '$block_arg', '$block_name=', '$is_a?', '$last', '$block_arg=', '$to_sym', '$pop', '$add_local', '$shadow_args', '$each_with_index', '$<<', '$delete', '$===', '$args_sexp', '$nil?', '$s', '$delete_at', '$returns', '$body_sexp', '$keys', '$mlhs_mapping', '$any?', '$meta']);
  self.$require("opal/nodes/node_with_args");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $IterNode(){};
        var self = $IterNode = $klass($base, $super, 'IterNode', $IterNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4, TMP_6, TMP_7, TMP_8, TMP_10, TMP_12, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19;

        def.norm_args = nil;
        self.$handle("iter");

        self.$children("args_sexp", "body_sexp");

        self.$attr_accessor("block_arg", "shadow_args");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this, inline_params = nil, to_vars = nil, identity = nil, body_code = nil;

          inline_params = nil;
          self.$extract_block_arg();
          self.$extract_shadow_args();
          self.$split_args();
          to_vars = identity = body_code = nil;
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          inline_params = self.$process(self.$inline_args_sexp());
            identity = self.$scope()['$identify!']();
            self.$add_temp("self = " + (identity) + ".$$s || this");
            self.$compile_shadow_args();
            self.$compile_inline_args();
            self.$compile_post_args();
            self.$compile_block_arg();
            self.$compile_norm_args();
            body_code = self.$stmt(self.$body());
            return to_vars = self.$scope().$to_vars();}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          self.$line(body_code);
          self.$unshift(to_vars);
          self.$unshift("(" + (identity) + " = function(", inline_params, "){");
          self.$push("}, " + (identity) + ".$$s = self,");
          if ((($a = self.$compiler()['$has_break?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(" " + (identity) + ".$$brk = $brk,")};
          self.$push(" " + (identity) + ".$$arity = " + (self.$arity()) + ",");
          if ((($a = self.$compiler()['$arity_check?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(" " + (identity) + ".$$parameters = " + (self.$parameters_code()) + ",")};
          if ((($a = self['$has_top_level_mlhs_arg?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(" " + (identity) + ".$$has_top_level_mlhs_arg = true,")};
          if ((($a = self['$has_trailing_comma_in_args?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(" " + (identity) + ".$$has_trailing_comma_in_args = true,")};
          return self.$push(" " + (identity) + ")");
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$norm_args', TMP_4 = function ːnorm_args() {
          var $a, $b, $c, TMP_3, self = this;

          return ((($a = self.norm_args) !== false && $a !== nil) ? $a : self.norm_args = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$select, $b.$$p = (TMP_3 = function(arg){var self = TMP_3.$$s || this;
if (arg == null) arg = nil;
          return arg.$type()['$==']("arg")}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$compile_norm_args', TMP_6 = function ːcompile_norm_args() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self.$norm_args()).$each, $a.$$p = (TMP_5 = function(arg){var self = TMP_5.$$s || this;
if (arg == null) arg = nil;
          arg = self.$variable(arg['$[]'](1));
            return self.$push("if (" + (arg) + " == null) " + (arg) + " = nil;");}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$compile_block_arg', TMP_7 = function ːcompile_block_arg() {
          var $a, $b, self = this, scope_name = nil;

          if ((($a = self.$block_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [self.$block_arg()]), $b = self.$scope(), $b['$block_name='].apply($b, $a), $a[$a.length-1]);
            self.$scope().$add_temp(self.$block_arg());
            scope_name = self.$scope()['$identify!']();
            return self.$line("" + (self.$block_arg()) + " = " + (scope_name) + ".$$p || nil, " + (scope_name) + ".$$p = null;");
            } else {
            return nil
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$extract_block_arg', TMP_8 = function ːextract_block_arg() {
          var $a, $b, $c, self = this;

          if ((($a = ($b = ($c = self.$args()['$is_a?']($scope.get('Sexp')), $c !== false && $c !== nil ?self.$args().$last()['$is_a?']($scope.get('Sexp')) : $c), $b !== false && $b !== nil ?self.$args().$last().$type()['$==']("block_pass") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($a = [self.$args().$pop()['$[]'](1)['$[]'](1).$to_sym()]), $b = self, $b['$block_arg='].apply($b, $a), $a[$a.length-1])
            } else {
            return nil
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$compile_shadow_args', TMP_10 = function ːcompile_shadow_args() {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = self.$shadow_args()).$each, $a.$$p = (TMP_9 = function(shadow_arg){var self = TMP_9.$$s || this;
if (shadow_arg == null) shadow_arg = nil;
          return self.$scope().$add_local(shadow_arg.$last())}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$extract_shadow_args', TMP_12 = function ːextract_shadow_args() {
          var $a, $b, TMP_11, self = this;

          if ((($a = self.$args()['$is_a?']($scope.get('Sexp'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.shadow_args = [];
            return ($a = ($b = self.$args().$children()).$each_with_index, $a.$$p = (TMP_11 = function(arg, idx){var self = TMP_11.$$s || this;
              if (self.shadow_args == null) self.shadow_args = nil;
if (arg == null) arg = nil;if (idx == null) idx = nil;
            if (arg.$type()['$==']("shadowarg")) {
                return self.shadow_args['$<<'](self.$args().$delete(arg))
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
            } else {
            return nil
          };
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$args', TMP_14 = function ːargs() {
          var $a, $b, $c, TMP_13, self = this, sexp = nil, caught_blank_argument = nil;

          sexp = (function() {if ((($a = ((($b = $scope.get('Fixnum')['$==='](self.$args_sexp())) !== false && $b !== nil) ? $b : self.$args_sexp()['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$s("args")
          } else if ((($a = ($b = self.$args_sexp()['$is_a?']($scope.get('Sexp')), $b !== false && $b !== nil ?self.$args_sexp().$type()['$==']("lasgn") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$s("args", ($a = self).$s.apply($a, ["arg"].concat(Opal.to_a(self.$args_sexp()['$[]'](1)))))
            } else {
            return self.$args_sexp()['$[]'](1)
          }; return nil; })();
          caught_blank_argument = false;
          ($b = ($c = sexp).$each_with_index, $b.$$p = (TMP_13 = function(part, idx){var self = TMP_13.$$s || this, $d, $e;
if (part == null) part = nil;if (idx == null) idx = nil;
          if ((($d = ($e = part['$is_a?']($scope.get('Sexp')), $e !== false && $e !== nil ?part.$last()['$==']("_") : $e)) !== nil && (!$d.$$is_boolean || $d == true))) {
              if (caught_blank_argument !== false && caught_blank_argument !== nil) {
                sexp.$delete_at(idx)};
              return caught_blank_argument = true;
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $b).call($c);
          return sexp;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$body', TMP_15 = function ːbody() {
          var $a, self = this;

          return self.$compiler().$returns(((($a = self.$body_sexp()) !== false && $a !== nil) ? $a : self.$s("nil")));
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$mlhs_args', TMP_16 = function ːmlhs_args() {
          var self = this;

          return self.$scope().$mlhs_mapping().$keys();
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$has_top_level_mlhs_arg?', TMP_18 = function() {
          var $a, $b, TMP_17, self = this;

          return ($a = ($b = self.$args().$children())['$any?'], $a.$$p = (TMP_17 = function(arg){var self = TMP_17.$$s || this;
if (arg == null) arg = nil;
          return arg.$type()['$==']("mlhs")}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$has_trailing_comma_in_args?', TMP_19 = function() {
          var self = this;

          return self.$args().$meta()['$[]']("has_trailing_comma");
        }, TMP_19.$$arity = 0), nil) && 'has_trailing_comma_in_args?';
      })($scope.base, $scope.get('NodeWithArgs'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/def"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$attr_accessor', '$is_a?', '$last', '$args', '$==', '$type', '$[]', '$pop', '$extract_block_arg', '$split_args', '$block_arg', '$to_sym', '$variable', '$in_scope', '$mid=', '$mid', '$scope', '$recvr', '$defs=', '$uses_block!', '$add_arg', '$block_name=', '$process', '$inline_args_sexp', '$stmt', '$returns', '$compiler', '$stmts', '$add_temp', '$compile_inline_args', '$compile_post_args', '$identify!', '$arity_check?', '$arity_check', '$identity', '$compile_block_arg', '$line', '$uses_zuper', '$add_local', '$unshift', '$current_indent', '$to_vars', '$catch_return', '$push', '$valid_name?', '$arity', '$parameters_code', '$recv', '$iter?', '$wrap', '$module?', '$class?', '$sclass?', '$defs', '$eval?', '$top?', '$def?', '$raise', '$expr?', '$inspect', '$to_s', '$-', '$size', '$opt_args', '$rest_arg', '$keyword_args', '$!', '$empty?', '$-@', '$<', '$+', '$>', '$<<', '$join']);
  self.$require("opal/nodes/node_with_args");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DefNode(){};
        var self = $DefNode = $klass($base, $super, 'DefNode', $DefNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4;

        self.$handle("def");

        self.$children("recvr", "mid", "args", "stmts");

        self.$attr_accessor("block_arg");

        Opal.defn(self, '$extract_block_arg', TMP_1 = function ːextract_block_arg() {
          var $a, $b, self = this;

          if ((($a = ($b = self.$args().$last()['$is_a?']($scope.get('Sexp')), $b !== false && $b !== nil ?self.$args().$last().$type()['$==']("blockarg") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.block_arg = self.$args().$pop()['$[]'](1)
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_2, $c, self = this, inline_params = nil, scope_name = nil, block_name = nil, function_name = nil;

          self.$extract_block_arg();
          self.$split_args();
          inline_params = nil;
          scope_name = nil;
          if ((($a = self.$block_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            block_name = self.$variable(self.$block_arg()).$to_sym()};
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $c, $d, $e, stmt_code = nil, arity_code = nil;

          (($c = [self.$mid()]), $d = self.$scope(), $d['$mid='].apply($d, $c), $c[$c.length-1]);
            if ((($c = self.$recvr()) !== nil && (!$c.$$is_boolean || $c == true))) {
              (($c = [true]), $d = self.$scope(), $d['$defs='].apply($d, $c), $c[$c.length-1])};
            if (block_name !== false && block_name !== nil) {
              self.$scope()['$uses_block!']();
              self.$scope().$add_arg(block_name);};
            (($c = [((($e = block_name) !== false && $e !== nil) ? $e : "$yield")]), $d = self.$scope(), $d['$block_name='].apply($d, $c), $c[$c.length-1]);
            inline_params = self.$process(self.$inline_args_sexp());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$add_temp("self = this");
            self.$compile_inline_args();
            self.$compile_post_args();
            self.$scope()['$identify!']();
            if ((($c = self.$compiler()['$arity_check?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              arity_code = self.$arity_check(self.$mid())};
            scope_name = self.$scope().$identity();
            self.$compile_block_arg();
            if (arity_code !== false && arity_code !== nil) {
              self.$line(arity_code)};
            if ((($c = self.$scope().$uses_zuper()) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$add_local("$zuper");
              self.$add_local("$zuper_index");
              self.$add_local("$zuper_length");
              self.$line("$zuper = [];");
              self.$line();
              self.$line("for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {");
              self.$line("  $zuper[$zuper_index] = arguments[$zuper_index];");
              self.$line("}");};
            self.$unshift("\n" + (self.$current_indent()), self.$scope().$to_vars());
            self.$line(stmt_code);
            if ((($c = self.$scope().$catch_return()) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);
          function_name = (function() {if ((($a = self['$valid_name?'](self.$mid())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return " ː" + (self.$mid())
            } else {
            return ""
          }; return nil; })();
          self.$unshift(") {");
          self.$unshift(inline_params);
          self.$unshift("function" + (function_name) + "(");
          if (scope_name !== false && scope_name !== nil) {
            self.$unshift("" + (scope_name) + " = ")};
          self.$line("}");
          self.$push(", " + (scope_name) + ".$$arity = " + (self.$arity()));
          if ((($a = self.$compiler()['$arity_check?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(", " + (scope_name) + ".$$parameters = " + (self.$parameters_code()))};
          if ((($a = self.$recvr()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$unshift("Opal.defs(", self.$recv(self.$recvr()), ", '$" + (self.$mid()) + "', ");
            self.$push(")");
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$wrap("Opal.def(self, '$" + (self.$mid()) + "', ", ")")
          } else if ((($a = ((($c = self.$scope()['$module?']()) !== false && $c !== nil) ? $c : self.$scope()['$class?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$wrap("Opal.defn(self, '$" + (self.$mid()) + "', ", ")")
          } else if ((($a = self.$scope()['$sclass?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.$scope().$defs()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$unshift("Opal.defs(self, '$" + (self.$mid()) + "', ")
              } else {
              self.$unshift("Opal.defn(self, '$" + (self.$mid()) + "', ")
            };
            self.$push(")");
          } else if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$unshift("Opal.def(self, '$" + (self.$mid()) + "', ");
            self.$push(")");
          } else if ((($a = self.$scope()['$top?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$unshift("Opal.defn(Opal.Object, '$" + (self.$mid()) + "', ");
            self.$push(")");
          } else if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$wrap("Opal.def(self, '$" + (self.$mid()) + "', ", ")")
            } else {
            self.$raise("Unsupported use of `def`; please file a bug at https://github.com/opal/opal reporting this message.")
          };
          if ((($a = self['$expr?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ", nil) && '" + (self.$mid()) + "'")
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0);

        return (Opal.defn(self, '$arity_check', TMP_4 = function ːarity_check(mid) {
          var $a, $b, $c, self = this, meth = nil, arity = nil, aritycode = nil, min_arity = nil, max_arity = nil, checks = nil;

          meth = mid.$to_s().$inspect();
          arity = $rb_minus(self.$args().$size(), 1);
          arity = $rb_minus(arity, (self.$opt_args().$size()));
          if ((($a = self.$rest_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, (self.$keyword_args().$size()));
          if ((($a = ((($b = ((($c = self.$opt_args()['$empty?']()['$!']()) !== false && $c !== nil) ? $c : self.$keyword_args()['$empty?']()['$!']())) !== false && $b !== nil) ? $b : self.$rest_arg())) !== nil && (!$a.$$is_boolean || $a == true))) {
            arity = $rb_minus(arity['$-@'](), 1)};
          aritycode = "var $arity = arguments.length;";
          if ((($a = $rb_lt(arity, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
            min_arity = ($rb_plus(arity, 1))['$-@']();
            max_arity = $rb_minus(self.$args().$size(), 1);
            checks = [];
            if ((($a = $rb_gt(min_arity, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              checks['$<<']("$arity < " + (min_arity))};
            if ((($a = (($b = max_arity !== false && max_arity !== nil) ? (self.$rest_arg())['$!']() : max_arity)) !== nil && (!$a.$$is_boolean || $a == true))) {
              checks['$<<']("$arity > " + (max_arity))};
            if ((($a = $rb_gt(checks.$size(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $rb_plus(aritycode, "if (" + (checks.$join(" || ")) + ") { Opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }")
              } else {
              return nil
            };
            } else {
            return $rb_plus(aritycode, "if ($arity !== " + (arity) + ") { Opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }")
          };
        }, TMP_4.$$arity = 1), nil) && 'arity_check';
      })($scope.base, $scope.get('NodeWithArgs'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/if"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$skip_check_present?', '$skip_check_present_not?', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $IfNode(){};
        var self = $IfNode = $klass($base, $super, 'IfNode', $IfNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        self.$handle("if");

        self.$children("test", "true_body", "false_body");

        Opal.cdecl($scope, 'RUBY_ENGINE_CHECK', ["call", ["const", "RUBY_ENGINE"], "==", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_ENGINE_CHECK_NOT', ["call", ["const", "RUBY_ENGINE"], "!=", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_PLATFORM_CHECK', ["call", ["const", "RUBY_PLATFORM"], "==", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_PLATFORM_CHECK_NOT', ["call", ["const", "RUBY_PLATFORM"], "!=", ["arglist", ["str", "opal"]]]);

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_1, $c, TMP_2, self = this, truthy = nil, falsy = nil;

          $a = [self.$truthy(), self.$falsy()], truthy = $a[0], falsy = $a[1], $a;
          if ((($a = self['$skip_check_present?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            falsy = nil};
          if ((($a = self['$skip_check_present_not?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            truthy = nil};
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if (truthy !== false && truthy !== nil) {
            ($a = ($b = self).$indent, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$line(self.$stmt(truthy))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b)};
          if (falsy !== false && falsy !== nil) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
              } else {
              ($a = ($c = self).$indent, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              self.$line("} else {");
                return self.$line(self.$stmt(falsy));}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c);
              self.$line("}");
            }
            } else {
            self.$push("}")
          };
          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() {", "; return nil; })()")
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$skip_check_present?', TMP_4 = function() {
          var $a, self = this;

          return ((($a = self.$test()['$==']($scope.get('RUBY_ENGINE_CHECK'))) !== false && $a !== nil) ? $a : self.$test()['$==']($scope.get('RUBY_PLATFORM_CHECK')));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$skip_check_present_not?', TMP_5 = function() {
          var $a, self = this;

          return ((($a = self.$test()['$==']($scope.get('RUBY_ENGINE_CHECK_NOT'))) !== false && $a !== nil) ? $a : self.$test()['$==']($scope.get('RUBY_PLATFORM_CHECK_NOT')));
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$truthy', TMP_6 = function ːtruthy() {
          var $a, self = this;

          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(((($a = self.$true_body()) !== false && $a !== nil) ? $a : self.$s("nil")))
            } else {
            return self.$true_body()
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$falsy', TMP_7 = function ːfalsy() {
          var $a, self = this;

          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(((($a = self.$false_body()) !== false && $a !== nil) ? $a : self.$s("nil")))
            } else {
            return self.$false_body()
          };
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$needs_wrapper?', TMP_8 = function() {
          var $a, self = this;

          return ((($a = self['$expr?']()) !== false && $a !== nil) ? $a : self['$recv?']());
        }, TMP_8.$$arity = 0), nil) && 'needs_wrapper?';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/logic"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_while?', '$push', '$expr_or_nil', '$value', '$wrap', '$compile_while', '$iter?', '$scope', '$compile_iter', '$error', '$[]', '$while_loop', '$stmt?', '$has_break!', '$compiler', '$line', '$break_val', '$nil?', '$expr', '$s', '$>', '$size', '$[]=', '$identity', '$with_temp', '$==', '$empty_splat?', '$type', '$recv', '$rhs', '$compile_if', '$compile_ternary', '$raise', '$lhs', '$indent', '$js_truthy_optimize', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$to_s']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NextNode(){};
        var self = $NextNode = $klass($base, $super, 'NextNode', $NextNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$handle("next");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("continue;")};
          self.$push(self.$expr_or_nil(self.$value()));
          return self.$wrap("return ", ";");
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BreakNode(){};
        var self = $BreakNode = $klass($base, $super, 'BreakNode', $BreakNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

        self.$handle("break");

        self.$children("value");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_while()
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_iter()
            } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$compile_while', TMP_3 = function ːcompile_while() {
          var $a, self = this;

          if ((($a = self.$while_loop()['$[]']("closure")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
            } else {
            return self.$push("break;")
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$compile_iter', TMP_4 = function ːcompile_iter() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$error("break must be used as a statement")
          };
          self.$compiler()['$has_break!']();
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$break_val', TMP_5 = function ːbreak_val() {
          var $a, self = this;

          if ((($a = self.$value()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$s("nil"))
          } else if ((($a = $rb_gt(self.$children().$size(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(($a = self).$s.apply($a, ["array"].concat(Opal.to_a(self.$children()))))
            } else {
            return self.$expr(self.$value())
          };
        }, TMP_5.$$arity = 0), nil) && 'break_val';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RedoNode(){};
        var self = $RedoNode = $klass($base, $super, 'RedoNode', $RedoNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8;

        self.$handle("redo");

        Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_while()
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_iter()
            } else {
            return self.$push("REDO()")
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$compile_while', TMP_7 = function ːcompile_while() {
          var self = this;

          self.$while_loop()['$[]=']("use_redo", true);
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true");
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$compile_iter', TMP_8 = function ːcompile_iter() {
          var self = this;

          return self.$push("return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }, TMP_8.$$arity = 0), nil) && 'compile_iter';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $NotNode(){};
        var self = $NotNode = $klass($base, $super, 'NotNode', $NotNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_10;

        self.$handle("not");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_10 = function ːcompile() {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_9 = function(tmp){var self = TMP_9.$$s || this;
if (tmp == null) tmp = nil;
          self.$push(self.$expr(self.$value()));
            return self.$wrap("(" + (tmp) + " = ", ", (" + (tmp) + " === nil || " + (tmp) + " === false))");}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $SplatNode(){};
        var self = $SplatNode = $klass($base, $super, 'SplatNode', $SplatNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12;

        self.$handle("splat");

        self.$children("value");

        Opal.defn(self, '$empty_splat?', TMP_11 = function() {
          var $a, self = this;

          return ((($a = self.$value()['$=='](["nil"])) !== false && $a !== nil) ? $a : self.$value()['$=='](["paren", ["nil"]]));
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_12 = function ːcompile() {
          var $a, self = this;

          if ((($a = self['$empty_splat?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("[]")
          } else if (self.$value().$type()['$==']("sym")) {
            return self.$push("[", self.$expr(self.$value()), "]")
            } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          };
        }, TMP_12.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BinaryOp(){};
        var self = $BinaryOp = $klass($base, $super, 'BinaryOp', $BinaryOp);

        var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15;

        Opal.defn(self, '$compile', TMP_13 = function ːcompile() {
          var self = this;

          if (self.$rhs().$type()['$==']("break")) {
            return self.$compile_if()
            } else {
            return self.$compile_ternary()
          };
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$compile_ternary', TMP_14 = function ːcompile_ternary() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$compile_if', TMP_15 = function ːcompile_if() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }, TMP_15.$$arity = 0), nil) && 'compile_if';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OrNode(){};
        var self = $OrNode = $klass($base, $super, 'OrNode', $OrNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_21;

        self.$handle("or");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$compile_ternary', TMP_17 = function ːcompile_ternary() {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_16 = function(tmp){var self = TMP_16.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("(((" + (tmp) + " = ");
            self.$push(self.$expr(self.$lhs()));
            self.$push(") !== false && " + (tmp) + " !== nil) ? " + (tmp) + " : ");
            self.$push(self.$expr(self.$rhs()));
            return self.$push(")");}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
        }, TMP_17.$$arity = 0);

        return (Opal.defn(self, '$compile_if', TMP_21 = function ːcompile_if() {
          var $a, $b, TMP_18, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_18 = function(tmp){var self = TMP_18.$$s || this, $c, $d, TMP_19, $e, TMP_20;
if (tmp == null) tmp = nil;
          self.$push("if (" + (tmp) + " = ", self.$expr(self.$lhs()), ", " + (tmp) + " !== false && " + (tmp) + " !== nil) {");
            ($c = ($d = self).$indent, $c.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

            return self.$line(tmp)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $c).call($d);
            self.$line("} else {");
            ($c = ($e = self).$indent, $c.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

            return self.$line(self.$expr(self.$rhs()))}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $c).call($e);
            return self.$line("}");}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
        }, TMP_21.$$arity = 0), nil) && 'compile_if';
      })($scope.base, $scope.get('BinaryOp'));

      (function($base, $super) {
        function $AndNode(){};
        var self = $AndNode = $klass($base, $super, 'AndNode', $AndNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_23, TMP_27;

        self.$handle("and");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$compile_ternary', TMP_23 = function ːcompile_ternary() {
          var $a, $b, TMP_22, self = this, truthy_opt = nil;

          truthy_opt = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_22 = function(tmp){var self = TMP_22.$$s || this, $c;
if (tmp == null) tmp = nil;
          if ((($c = truthy_opt = self.$js_truthy_optimize(self.$lhs())) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$push("((" + (tmp) + " = ", truthy_opt);
              self.$push(") ? ");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : ", self.$expr(self.$lhs()), ")");
              } else {
              self.$push("(" + (tmp) + " = ");
              self.$push(self.$expr(self.$lhs()));
              self.$push(", " + (tmp) + " !== false && " + (tmp) + " !== nil ?");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : " + (tmp) + ")");
            }}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
        }, TMP_23.$$arity = 0);

        return (Opal.defn(self, '$compile_if', TMP_27 = function ːcompile_if() {
          var $a, $b, TMP_24, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_24 = function(tmp){var self = TMP_24.$$s || this, $c, $d, TMP_25, $e, TMP_26, truthy_opt = nil;
if (tmp == null) tmp = nil;
          if ((($c = truthy_opt = self.$js_truthy_optimize(self.$lhs())) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$push("if (" + (tmp) + " = ", truthy_opt, ") {")
              } else {
              self.$push("if (" + (tmp) + " = ", self.$expr(self.$lhs()), ", " + (tmp) + " !== false && " + (tmp) + " !== nil) {")
            };
            ($c = ($d = self).$indent, $c.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

            return self.$line(self.$expr(self.$rhs()))}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $c).call($d);
            self.$line("} else {");
            ($c = ($e = self).$indent, $c.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

            return self.$line(self.$expr(self.$lhs()))}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $c).call($e);
            return self.$line("}");}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);
        }, TMP_27.$$arity = 0), nil) && 'compile_if';
      })($scope.base, $scope.get('BinaryOp'));

      (function($base, $super) {
        function $ReturnNode(){};
        var self = $ReturnNode = $klass($base, $super, 'ReturnNode', $ReturnNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32;

        self.$handle("return");

        self.$children("value");

        Opal.defn(self, '$return_val', TMP_28 = function ːreturn_val() {
          var $a, self = this;

          if ((($a = self.$value()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$s("nil"))
          } else if ((($a = $rb_gt(self.$children().$size(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(($a = self).$s.apply($a, ["array"].concat(Opal.to_a(self.$children()))))
            } else {
            return self.$expr(self.$value())
          };
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$return_in_iter?', TMP_29 = function() {
          var $a, $b, self = this, parent_def = nil;

          if ((($a = ($b = self.$scope()['$iter?'](), $b !== false && $b !== nil ?parent_def = self.$scope().$find_parent_def() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return parent_def
            } else {
            return nil
          };
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$return_expr_in_def?', TMP_30 = function() {
          var $a, $b, self = this;

          if ((($a = ($b = self['$expr?'](), $b !== false && $b !== nil ?self.$scope()['$def?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$scope()
            } else {
            return nil
          };
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$scope_to_catch_return', TMP_31 = function ːscope_to_catch_return() {
          var $a, self = this;

          return ((($a = self['$return_in_iter?']()) !== false && $a !== nil) ? $a : self['$return_expr_in_def?']());
        }, TMP_31.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_32 = function ːcompile() {
          var $a, $b, self = this, def_scope = nil;

          if ((($a = def_scope = self.$scope_to_catch_return()) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [true]), $b = def_scope, $b['$catch_return='].apply($b, $a), $a[$a.length-1]);
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("return ", self.$return_val())
            } else {
            return self.$raise($scope.get('SyntaxError'), "void value expression: cannot return as an expression")
          };
        }, TMP_32.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $JSReturnNode(){};
        var self = $JSReturnNode = $klass($base, $super, 'JSReturnNode', $JSReturnNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_33;

        self.$handle("js_return");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_33 = function ːcompile() {
          var self = this;

          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, TMP_33.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $JSTempNode(){};
        var self = $JSTempNode = $klass($base, $super, 'JSTempNode', $JSTempNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_34;

        self.$handle("js_tmp");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_34 = function ːcompile() {
          var self = this;

          return self.$push(self.$value().$to_s());
        }, TMP_34.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BlockPassNode(){};
        var self = $BlockPassNode = $klass($base, $super, 'BlockPassNode', $BlockPassNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_35;

        self.$handle("block_pass");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_35 = function ːcompile() {
          var self = this;

          return self.$push(self.$expr(self.$s("call", self.$value(), "to_proc", self.$s("arglist"))));
        }, TMP_35.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/definitions"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$process', '$value', '$each', '$[]', '$==', '$<<', '$expr', '$s', '$to_s', '$>', '$length', '$!=', '$first', '$line', '$mid_to_jsid', '$new_name', '$old_name', '$class?', '$scope', '$module?', '$methods', '$!', '$stmt?', '$type', '$body', '$stmt', '$returns', '$compiler', '$wrap', '$each_with_index', '$empty?', '$stmt_join', '$find_inline_yield', '$child_is_expr?', '$class_scope?', '$current_indent', '$raw_expression?', '$include?', '$===', '$[]=', '$+', '$has_temp?', '$add_temp']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SvalueNode(){};
        var self = $SvalueNode = $klass($base, $super, 'SvalueNode', $SvalueNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.level = nil;
        self.$handle("svalue");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this;

          return self.$push(self.$process(self.$value(), self.level));
        }, TMP_1.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $UndefNode(){};
        var self = $UndefNode = $klass($base, $super, 'UndefNode', $UndefNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        self.$handle("undef");

        return (Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.$children()).$each, $a.$$p = (TMP_2 = function(child){var self = TMP_2.$$s || this, $c, $d, value = nil, statements = nil;
if (child == null) child = nil;
          value = child['$[]'](1);
            statements = [];
            if (child['$[]'](0)['$==']("js_return")) {
              value = value['$[]'](1);
              statements['$<<'](self.$expr(self.$s("js_return")));};
            statements['$<<']("Opal.udef(self, '$" + (value.$to_s()) + "');");
            if ((($c = ($d = $rb_gt(self.$children().$length(), 1), $d !== false && $d !== nil ?child['$!='](self.$children().$first()) : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
              return ($c = self).$line.apply($c, Opal.to_a(statements))
              } else {
              return ($d = self).$push.apply($d, Opal.to_a(statements))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $AliasNode(){};
        var self = $AliasNode = $klass($base, $super, 'AliasNode', $AliasNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6;

        self.$handle("alias");

        self.$children("new_name", "old_name");

        Opal.defn(self, '$new_mid', TMP_4 = function ːnew_mid() {
          var self = this;

          return self.$mid_to_jsid(self.$new_name()['$[]'](1).$to_s());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$old_mid', TMP_5 = function ːold_mid() {
          var self = this;

          return self.$mid_to_jsid(self.$old_name()['$[]'](1).$to_s());
        }, TMP_5.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$scope()['$class?']()) !== false && $b !== nil) ? $b : self.$scope()['$module?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$scope().$methods()['$<<']("$" + (self.$new_name()['$[]'](1)))};
          return self.$push("Opal.alias(self, '" + (self.$new_name()['$[]'](1)) + "', '" + (self.$old_name()['$[]'](1)) + "')");
        }, TMP_6.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BeginNode(){};
        var self = $BeginNode = $klass($base, $super, 'BeginNode', $BeginNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_7;

        def.level = nil;
        self.$handle("begin");

        self.$children("body");

        return (Opal.defn(self, '$compile', TMP_7 = function ːcompile() {
          var $a, $b, self = this;

          if ((($a = ($b = self['$stmt?']()['$!'](), $b !== false && $b !== nil ?self.$body().$type()['$==']("block") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(self.$stmt(self.$compiler().$returns(self.$body())));
            return self.$wrap("(function() {", "})()");
            } else {
            return self.$push(self.$process(self.$body(), self.level))
          };
        }, TMP_7.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ParenNode(){};
        var self = $ParenNode = $klass($base, $super, 'ParenNode', $ParenNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_9;

        def.level = nil;
        self.$handle("paren");

        self.$children("body");

        return (Opal.defn(self, '$compile', TMP_9 = function ːcompile() {
          var $a, $b, TMP_8, self = this;

          if (self.$body().$type()['$==']("block")) {
            ($a = ($b = self.$body().$children()).$each_with_index, $a.$$p = (TMP_8 = function(child, idx){var self = TMP_8.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
            if (idx['$=='](0)) {
                } else {
                self.$push(", ")
              };
              return self.$push(self.$expr(child));}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($b);
            return self.$wrap("(", ")");
            } else {
            self.$push(self.$process(self.$body(), self.level));
            if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$wrap("(", ")")
            };
          };
        }, TMP_9.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BlockNode(){};
        var self = $BlockNode = $klass($base, $super, 'BlockNode', $BlockNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_13, TMP_14, TMP_17;

        def.level = nil;
        self.$handle("block");

        Opal.defn(self, '$compile', TMP_11 = function ːcompile() {
          var $a, $b, TMP_10, self = this;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("nil")};
          return ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_10 = function(child, idx){var self = TMP_10.$$s || this, $c, yasgn = nil;
            if (self.level == null) self.level = nil;
if (child == null) child = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(self.$stmt_join())
            };
            if ((($c = yasgn = self.$find_inline_yield(child)) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$push(self.$compiler().$process(yasgn, self.level));
              self.$push(";");};
            self.$push(self.$compiler().$process(child, self.level));
            if ((($c = self['$child_is_expr?'](child)) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.$push(";")
              } else {
              return nil
            };}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$stmt_join', TMP_12 = function ːstmt_join() {
          var $a, self = this;

          if ((($a = self.$scope()['$class_scope?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "\n\n" + (self.$current_indent())
            } else {
            return "\n" + (self.$current_indent())
          };
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$child_is_expr?', TMP_13 = function(child) {
          var $a, self = this;

          return ($a = self['$raw_expression?'](child), $a !== false && $a !== nil ?["stmt", "stmt_closure"]['$include?'](self.level) : $a);
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$raw_expression?', TMP_14 = function(child) {
          var self = this;

          return ["xstr", "dxstr"]['$include?'](child.$type())['$!']();
        }, TMP_14.$$arity = 1);

        return (Opal.defn(self, '$find_inline_yield', TMP_17 = function ːfind_inline_yield(stmt) {
          var $a, $b, TMP_15, $c, TMP_16, self = this, found = nil, $case = nil, arglist = nil;

          found = nil;
          $case = stmt.$first();if ("js_return"['$===']($case)) {if ((($a = found = self.$find_inline_yield(stmt['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
            found = found['$[]'](2)}}else if ("array"['$===']($case)) {($a = ($b = stmt['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_15 = function(el, idx){var self = TMP_15.$$s || this;
if (el == null) el = nil;if (idx == null) idx = nil;
          if (el.$first()['$==']("yield")) {
              found = el;
              return stmt['$[]=']($rb_plus(idx, 1), self.$s("js_tmp", "$yielded"));
              } else {
              return nil
            }}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b)}else if ("call"['$===']($case)) {arglist = stmt['$[]'](3);
          ($a = ($c = arglist['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_16 = function(el, idx){var self = TMP_16.$$s || this;
if (el == null) el = nil;if (idx == null) idx = nil;
          if (el.$first()['$==']("yield")) {
              found = el;
              return arglist['$[]=']($rb_plus(idx, 1), self.$s("js_tmp", "$yielded"));
              } else {
              return nil
            }}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $a).call($c);};
          if (found !== false && found !== nil) {
            if ((($a = self.$scope()['$has_temp?']("$yielded")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$scope().$add_temp("$yielded")
            };
            return self.$s("yasgn", "$yielded", found);
            } else {
            return nil
          };
        }, TMP_17.$$arity = 1), nil) && 'find_inline_yield';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/yield"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$yields_single_arg?', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call', '$children', '$[]', '$yield_args', '$var_name']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BaseYieldNode(){};
        var self = $BaseYieldNode = $klass($base, $super, 'BaseYieldNode', $BaseYieldNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5;

        Opal.defn(self, '$compile_call', TMP_1 = function ːcompile_call(children, level) {
          var $a, $b, self = this, yielding_scope = nil, block_name = nil;

          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          block_name = ((($a = yielding_scope.$block_name()) !== false && $a !== nil) ? $a : "$yield");
          if ((($a = self['$yields_single_arg?'](children)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(self.$expr(children.$first()));
            return self.$wrap("Opal.yield1(" + (block_name) + ", ", ")");
            } else {
            self.$push(self.$expr(($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(children)))));
            if ((($b = self['$uses_splat?'](children)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", ", ")")
              } else {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, TMP_1.$$arity = 2);

        Opal.defn(self, '$find_yielding_scope', TMP_2 = function ːfind_yielding_scope() {
          var $a, $b, $c, self = this, working = nil;

          working = self.$scope();
          while (working !== false && working !== nil) {
          if ((($b = ((($c = working.$block_name()) !== false && $c !== nil) ? $c : working['$def?']())) !== nil && (!$b.$$is_boolean || $b == true))) {
            break;};
          working = working.$parent();};
          return working;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$yields_single_arg?', TMP_3 = function(children) {
          var $a, self = this;

          return ($a = self['$uses_splat?'](children)['$!'](), $a !== false && $a !== nil ?children.$size()['$=='](1) : $a);
        }, TMP_3.$$arity = 1);

        return (Opal.defn(self, '$uses_splat?', TMP_5 = function(children) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = children)['$any?'], $a.$$p = (TMP_4 = function(child){var self = TMP_4.$$s || this;
if (child == null) child = nil;
          return child.$type()['$==']("splat")}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 1), nil) && 'uses_splat?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $YieldNode(){};
        var self = $YieldNode = $klass($base, $super, 'YieldNode', $YieldNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_6;

        def.level = nil;
        self.$handle("yield");

        return (Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
          var self = this;

          return self.$compile_call(self.$children(), self.level);
        }, TMP_6.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));

      (function($base, $super) {
        function $YasgnNode(){};
        var self = $YasgnNode = $klass($base, $super, 'YasgnNode', $YasgnNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_7;

        self.$handle("yasgn");

        self.$children("var_name", "yield_args");

        return (Opal.defn(self, '$compile', TMP_7 = function ːcompile() {
          var $a, self = this;

          self.$compile_call(($a = self).$s.apply($a, Opal.to_a(self.$yield_args()['$[]']($range(1, -1, false)))), "stmt");
          return self.$wrap("(" + (self.$var_name()) + " = ", ")");
        }, TMP_7.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));

      (function($base, $super) {
        function $ReturnableYieldNode(){};
        var self = $ReturnableYieldNode = $klass($base, $super, 'ReturnableYieldNode', $ReturnableYieldNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_8;

        def.level = nil;
        self.$handle("returnable_yield");

        return (Opal.defn(self, '$compile', TMP_8 = function ːcompile() {
          var self = this;

          self.$compile_call(self.$children(), self.level);
          return self.$wrap("return ", ";");
        }, TMP_8.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/rescue"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$stmt?', '$lhs', '$returns', '$compiler', '$rhs', '$line', '$expr', '$body', '$indent', '$new', '$rescue_val', '$wrap', '$push', '$in_ensure', '$process', '$body_sexp', '$has_rescue_else?', '$unshift', '$rescue_else_sexp', '$scope', '$ensr_sexp', '$wrap_in_closure?', '$begn', '$==', '$type', '$s', '$ensr', '$recv?', '$expr?', '$rescue_else_sexp=', '$detect', '$!=', '$[]', '$handle_rescue_else_manually?', '$body_code', '$each_with_index', '$!', '$in_ensure?', '$empty?', '$rescue_exprs', '$rescue_variable', '$[]=', '$rescue_body', '$===', '$include?', '$rescue_variable?', '$last', '$args', '$dup', '$pop']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RescueModNode(){};
        var self = $RescueModNode = $klass($base, $super, 'RescueModNode', $RescueModNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

        self.$handle("rescue_mod");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$body', TMP_1 = function ːbody() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$lhs()
            } else {
            return self.$compiler().$returns(self.$lhs())
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$rescue_val', TMP_2 = function ːrescue_val() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$rhs()
            } else {
            return self.$compiler().$returns(self.$rhs())
          };
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_4 = function ːcompile() {
          var $a, $b, TMP_3, self = this;

          self.$line("try {", self.$expr(self.$body()), " } catch ($err) { ");
          ($a = ($b = self).$indent, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          self.$line("if (Opal.rescue($err, [", self.$expr($scope.get('Sexp').$new(["const", "StandardError"])), "])) {");
            self.$line(self.$expr(self.$rescue_val()));
            return self.$line("} else { throw $err; } }");}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b);
          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$wrap("(function() {", "})()")
          };
        }, TMP_4.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $EnsureNode(){};
        var self = $EnsureNode = $klass($base, $super, 'EnsureNode', $EnsureNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_10, TMP_11, TMP_12;

        self.$handle("ensure");

        self.$children("begn", "ensr");

        Opal.defn(self, '$compile', TMP_9 = function ːcompile() {
          var $a, $b, TMP_5, $c, TMP_6, self = this;

          self.$push("try {");
          ($a = ($b = self).$in_ensure, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;
            if (self.level == null) self.level = nil;

          return self.$line(self.$compiler().$process(self.$body_sexp(), self.level))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
          self.$line("} finally {");
          ($a = ($c = self).$indent, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $d, $e, TMP_7;
            if (self.level == null) self.level = nil;

          if ((($d = self['$has_rescue_else?']()) !== nil && (!$d.$$is_boolean || $d == true))) {
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              ($d = ($e = self).$indent, $d.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $f, $g, TMP_8;

              self.$line("$rescue_else_result = (function() {");
                ($f = ($g = self).$indent, $f.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;
                  if (self.level == null) self.level = nil;

                return self.$line(self.$compiler().$process(self.$compiler().$returns(self.$scope().$rescue_else_sexp()), self.level))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $f).call($g);
                return self.$line("})();");}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $d).call($e);
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
              } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c);
          self.$line("}");
          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() { ", "; })()")
            } else {
            return nil
          };
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$body_sexp', TMP_10 = function ːbody_sexp() {
          var $a, self = this, sexp = nil;

          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            sexp = self.$compiler().$returns(self.$begn());
            if (sexp.$type()['$==']("rescue")) {
              return self.$s("js_return", sexp)
              } else {
              return sexp
            };
            } else {
            return sexp = self.$begn()
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$ensr_sexp', TMP_11 = function ːensr_sexp() {
          var $a, self = this;

          return ((($a = self.$ensr()) !== false && $a !== nil) ? $a : self.$s("nil"));
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$wrap_in_closure?', TMP_12 = function() {
          var $a, $b, self = this;

          return ((($a = ((($b = self['$recv?']()) !== false && $b !== nil) ? $b : self['$expr?']())) !== false && $a !== nil) ? $a : self['$has_rescue_else?']());
        }, TMP_12.$$arity = 0), nil) && 'wrap_in_closure?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RescueNode(){};
        var self = $RescueNode = $klass($base, $super, 'RescueNode', $RescueNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_20, TMP_21, TMP_22;

        self.$handle("rescue");

        self.$children("body");

        Opal.defn(self, '$compile', TMP_20 = function ːcompile() {
          var $a, $b, $c, $d, TMP_13, TMP_14, TMP_15, $e, TMP_17, $f, self = this, has_rescue_handlers = nil;

          (($a = [($c = ($d = self.$children()['$[]']($range(1, -1, false))).$detect, $c.$$p = (TMP_13 = function(sexp){var self = TMP_13.$$s || this;
if (sexp == null) sexp = nil;
          return sexp.$type()['$!=']("resbody")}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $c).call($d)]), $b = self.$scope(), $b['$rescue_else_sexp='].apply($b, $a), $a[$a.length-1]);
          has_rescue_handlers = false;
          if ((($a = self['$handle_rescue_else_manually?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$line("var $no_errors = true;")};
          self.$push("try {");
          ($a = ($b = self).$indent, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;
            if (self.level == null) self.level = nil;

          return self.$line(self.$process(self.$body_code(), self.level))}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b);
          self.$line("} catch ($err) {");
          ($a = ($c = self).$indent, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $e, $f, TMP_16;

          if ((($e = self['$has_rescue_else?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
              self.$line("$no_errors = false;")};
            ($e = ($f = self.$children()['$[]']($range(1, -1, false))).$each_with_index, $e.$$p = (TMP_16 = function(child, idx){var self = TMP_16.$$s || this;
              if (self.level == null) self.level = nil;
if (child == null) child = nil;if (idx == null) idx = nil;
            if (child.$type()['$==']("resbody")) {
                has_rescue_handlers = true;
                if (idx['$=='](0)) {
                  } else {
                  self.$push(" else ")
                };
                return self.$line(self.$process(child, self.level));
                } else {
                return nil
              }}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $e).call($f);
            return self.$push(" else { throw $err; }");}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($c);
          self.$line("}");
          if ((($a = self['$handle_rescue_else_manually?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push("finally {");
            ($a = ($e = self).$indent, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $f, $g, TMP_18;

            self.$line("if ($no_errors) { ");
              ($f = ($g = self).$indent, $f.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $h, $i, TMP_19;

              self.$line("return (function() {");
                ($h = ($i = self).$indent, $h.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;
                  if (self.level == null) self.level = nil;

                return self.$line(self.$compiler().$process(self.$compiler().$returns(self.$scope().$rescue_else_sexp()), self.level))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $h).call($i);
                return self.$line("})();");}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $f).call($g);
              return self.$line("}");}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($e);
            self.$push("}");};
          if ((($a = ((($f = self['$expr?']()) !== false && $f !== nil) ? $f : self['$recv?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() { ", "})()")
            } else {
            return nil
          };
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$body_code', TMP_21 = function ːbody_code() {
          var $a, self = this, body_code = nil;

          body_code = ((function() {if (self.$body().$type()['$==']("resbody")) {
            return self.$s("nil")
            } else {
            return self.$body()
          }; return nil; })());
          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, TMP_21.$$arity = 0);

        return (Opal.defn(self, '$handle_rescue_else_manually?', TMP_22 = function() {
          var $a, self = this;

          return ($a = self.$scope()['$in_ensure?']()['$!'](), $a !== false && $a !== nil ?self.$scope()['$has_rescue_else?']() : $a);
        }, TMP_22.$$arity = 0), nil) && 'handle_rescue_else_manually?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ResBodyNode(){};
        var self = $ResBodyNode = $klass($base, $super, 'ResBodyNode', $ResBodyNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30;

        self.$handle("resbody");

        self.$children("args", "body");

        Opal.defn(self, '$compile', TMP_26 = function ːcompile() {
          var $a, $b, TMP_23, $c, TMP_24, self = this;

          self.$push("if (Opal.rescue($err, [");
          if ((($a = self.$rescue_exprs()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(self.$expr($scope.get('Sexp').$new(["const", "StandardError"])))
            } else {
            ($a = ($b = self.$rescue_exprs()).$each_with_index, $a.$$p = (TMP_23 = function(rexpr, idx){var self = TMP_23.$$s || this;
if (rexpr == null) rexpr = nil;if (idx == null) idx = nil;
            if (idx['$=='](0)) {
                } else {
                self.$push(", ")
              };
              return self.$push(self.$expr(rexpr));}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $a).call($b)
          };
          self.$push("])) {");
          ($a = ($c = self).$indent, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this, $d, $e, TMP_25, variable = nil;

          if ((($d = variable = self.$rescue_variable()) !== nil && (!$d.$$is_boolean || $d == true))) {
              variable['$[]='](2, self.$s("js_tmp", "$err"));
              self.$push(self.$expr(variable), ";");};
            self.$line("try {");
            ($d = ($e = self).$indent, $d.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;
              if (self.level == null) self.level = nil;

            return self.$line(self.$process(self.$rescue_body(), self.level))}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $d).call($e);
            return self.$line("} finally { Opal.pop_exception() }");}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($c);
          return self.$line("}");
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$rescue_variable?', TMP_27 = function(variable) {
          var $a, self = this;

          return ($a = $scope.get('Sexp')['$==='](variable), $a !== false && $a !== nil ?["lasgn", "iasgn"]['$include?'](variable.$type()) : $a);
        }, TMP_27.$$arity = 1);

        Opal.defn(self, '$rescue_variable', TMP_28 = function ːrescue_variable() {
          var $a, self = this;

          if ((($a = self['$rescue_variable?'](self.$args().$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$args().$last().$dup()
            } else {
            return nil
          };
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$rescue_exprs', TMP_29 = function ːrescue_exprs() {
          var $a, self = this, exprs = nil;

          exprs = self.$args().$dup();
          if ((($a = self['$rescue_variable?'](exprs.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            exprs.$pop()};
          return exprs.$children();
        }, TMP_29.$$arity = 0);

        return (Opal.defn(self, '$rescue_body', TMP_30 = function ːrescue_body() {
          var $a, self = this, body_code = nil;

          body_code = (((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil")));
          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, TMP_30.$$arity = 0), nil) && 'rescue_body';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/case"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$condition', '$[]=', '$case_stmt', '$add_local', '$push', '$expr', '$each_with_index', '$==', '$type', '$needs_closure?', '$returns', '$compiler', '$stmt', '$case_parts', '$!', '$wrap', '$stmt?', '$[]', '$s', '$js_truthy', '$when_checks', '$process', '$body_code', '$whens', '$body']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CaseNode(){};
        var self = $CaseNode = $klass($base, $super, 'CaseNode', $CaseNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

        self.$handle("case");

        self.$children("condition");

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_1, self = this, handled_else = nil;

          handled_else = false;
          return ($a = ($b = self.$compiler()).$in_case, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e;

          if ((($c = self.$condition()) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$case_stmt()['$[]=']("cond", true);
              self.$add_local("$case");
              self.$push("$case = ", self.$expr(self.$condition()), ";");};
            ($c = ($d = self.$case_parts()).$each_with_index, $c.$$p = (TMP_2 = function(wen, idx){var self = TMP_2.$$s || this, $e, $f;
if (wen == null) wen = nil;if (idx == null) idx = nil;
            if ((($e = (($f = wen !== false && wen !== nil) ? wen.$type()['$==']("when") : wen)) !== nil && (!$e.$$is_boolean || $e == true))) {
                if ((($e = self['$needs_closure?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                  self.$compiler().$returns(wen)};
                if (idx['$=='](0)) {
                  } else {
                  self.$push("else ")
                };
                return self.$push(self.$stmt(wen));
              } else if (wen !== false && wen !== nil) {
                handled_else = true;
                if ((($e = self['$needs_closure?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                  wen = self.$compiler().$returns(wen)};
                return self.$push("else {", self.$stmt(wen), "}");
                } else {
                return nil
              }}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $c).call($d);
            if ((($c = ($e = self['$needs_closure?'](), $e !== false && $e !== nil ?handled_else['$!']() : $e)) !== nil && (!$c.$$is_boolean || $c == true))) {
              self.$push("else { return nil }")};
            if ((($c = self['$needs_closure?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return self.$wrap("(function() {", "})()")
              } else {
              return nil
            };}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$needs_closure?', TMP_4 = function() {
          var self = this;

          return self['$stmt?']()['$!']();
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$case_parts', TMP_5 = function ːcase_parts() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false));
        }, TMP_5.$$arity = 0);

        return (Opal.defn(self, '$case_stmt', TMP_6 = function ːcase_stmt() {
          var self = this;

          return self.$compiler().$case_stmt();
        }, TMP_6.$$arity = 0), nil) && 'case_stmt';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $WhenNode(){};
        var self = $WhenNode = $klass($base, $super, 'WhenNode', $WhenNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, TMP_10, TMP_11;

        def.level = nil;
        self.$handle("when");

        self.$children("whens", "body");

        Opal.defn(self, '$compile', TMP_8 = function ːcompile() {
          var $a, $b, TMP_7, self = this;

          self.$push("if (");
          ($a = ($b = self.$when_checks()).$each_with_index, $a.$$p = (TMP_7 = function(check, idx){var self = TMP_7.$$s || this, $c, call = nil;
if (check == null) check = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              self.$push("(function($splt) { for (var i = 0; i < $splt.length; i++) {");
              self.$push("if ($splt[i]['$===']($case)) { return true; }");
              return self.$push("} return false; })(", self.$expr(check['$[]'](1)), ")");
            } else if ((($c = self.$case_stmt()['$[]']("cond")) !== nil && (!$c.$$is_boolean || $c == true))) {
              call = self.$s("call", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
              } else {
              return self.$push(self.$js_truthy(check))
            };}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$when_checks', TMP_9 = function ːwhen_checks() {
          var self = this;

          return self.$whens().$children();
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$case_stmt', TMP_10 = function ːcase_stmt() {
          var self = this;

          return self.$compiler().$case_stmt();
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$body_code', TMP_11 = function ːbody_code() {
          var $a, self = this;

          return ((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil"));
        }, TMP_11.$$arity = 0), nil) && 'body_code';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/super"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$children', '$def?', '$scope', '$uses_block!', '$default_compile', '$private', '$s', '$raw_iter', '$arglist', '$raise', '$find_parent_def', '$containing_def_scope', '$to_s', '$mid', '$identify!', '$defs', '$name', '$parent', '$defined_check_param', '$get_super_chain', '$join', '$map', '$implicit_arguments_param', '$super_method_invocation', '$iter?', '$super_block_invocation', '$push', '$receiver_fragment', '$handle', '$add_method', '$method_missing?', '$compiler', '$wrap', '$==', '$uses_zuper=', '$formal_block_parameter', '$!', '$iter', '$[]', '$<<', '$===', '$extract_block_arg', '$block_arg']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BaseSuperNode(){};
        var self = $BaseSuperNode = $klass($base, $super, 'BaseSuperNode', $BaseSuperNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_12, TMP_13;

        def.iter = def.implicit_args = nil;
        self.$children("arglist", "raw_iter");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, self = this;

          if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$scope()['$uses_block!']()};
          return self.$default_compile();
        }, TMP_1.$$arity = 0);

        self.$private();

        Opal.defn(self, '$recvr', TMP_2 = function ːrecvr() {
          var self = this;

          return self.$s("self");
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$iter', TMP_3 = function ːiter() {
          var $a, $b, self = this;

          return ((($a = self.iter) !== false && $a !== nil) ? $a : self.iter = (function() {if ((($b = self.$raw_iter()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$raw_iter()
          } else if ((($b = self.$arglist()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$s("js_tmp", "null")
            } else {
            self.$scope()['$uses_block!']();
            return self.$s("js_tmp", "$iter");
          }; return nil; })());
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$method_jsid', TMP_4 = function ːmethod_jsid() {
          var self = this;

          return self.$raise("Not implemented, see #add_method");
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$redefine_this?', TMP_5 = function(temporary_receiver) {
          var self = this;

          return true;
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$arguments_array?', TMP_6 = function() {
          var $a, $b, $c, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_6.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = ($b = ($c = self, Opal.find_super_dispatcher(self, 'arguments_array?', TMP_6, false)), $b.$$p = $iter, $b).apply($c, $zuper)) !== false && $a !== nil) ? $a : self.implicit_args);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$containing_def_scope', TMP_7 = function ːcontaining_def_scope() {
          var $a, self = this;

          if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$scope()};
          return self.$scope().$find_parent_def();
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$defined_check_param', TMP_8 = function ːdefined_check_param() {
          var self = this;

          return "false";
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$implicit_arguments_param', TMP_9 = function ːimplicit_arguments_param() {
          var $a, self = this;

          if ((($a = self.implicit_args) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "true"
            } else {
            return "false"
          };
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$super_method_invocation', TMP_10 = function ːsuper_method_invocation() {
          var $a, self = this, def_scope = nil, method_jsid = nil, current_func = nil, class_name = nil;

          def_scope = self.$containing_def_scope();
          method_jsid = def_scope.$mid().$to_s();
          current_func = def_scope['$identify!']();
          if ((($a = def_scope.$defs()) !== nil && (!$a.$$is_boolean || $a == true))) {
            class_name = (function() {if ((($a = def_scope.$parent().$name()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "$" + (def_scope.$parent().$name())
              } else {
              return "self.$$class.$$proto"
            }; return nil; })();
            return "Opal.find_super_dispatcher(self, '" + (method_jsid) + "', " + (current_func) + ", " + (self.$defined_check_param()) + ", " + (class_name) + ")";
            } else {
            return "Opal.find_super_dispatcher(self, '" + (method_jsid) + "', " + (current_func) + ", " + (self.$defined_check_param()) + ")"
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$super_block_invocation', TMP_12 = function ːsuper_block_invocation() {
          var $a, $b, TMP_11, self = this, chain = nil, cur_defn = nil, mid = nil, trys = nil, implicit = nil;

          $b = self.$scope().$get_super_chain(), $a = Opal.to_ary($b), chain = ($a[0] == null ? nil : $a[0]), cur_defn = ($a[1] == null ? nil : $a[1]), mid = ($a[2] == null ? nil : $a[2]), $b;
          trys = ($a = ($b = chain).$map, $a.$$p = (TMP_11 = function(c){var self = TMP_11.$$s || this;
if (c == null) c = nil;
          return "" + (c) + ".$$def"}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b).$join(" || ");
          implicit = self.implicit_args.$to_s();
          return "Opal.find_iter_super_dispatcher(self, " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), " + (self.$defined_check_param()) + ", " + (self.$implicit_arguments_param()) + ")";
        }, TMP_12.$$arity = 0);

        return (Opal.defn(self, '$add_method', TMP_13 = function ːadd_method(temporary_receiver) {
          var $a, self = this, super_call = nil;

          super_call = (function() {if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$super_method_invocation()
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$super_block_invocation()
            } else {
            return self.$raise("unexpected compilation error")
          }; return nil; })();
          if (temporary_receiver !== false && temporary_receiver !== nil) {
            return self.$push("(" + (temporary_receiver) + " = ", self.$receiver_fragment(), ", ", super_call, ")")
            } else {
            return self.$push(super_call)
          };
        }, TMP_13.$$arity = 1), nil) && 'add_method';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $DefinedSuperNode(){};
        var self = $DefinedSuperNode = $klass($base, $super, 'DefinedSuperNode', $DefinedSuperNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_14, TMP_15;

        self.$handle("defined_super");

        Opal.defn(self, '$defined_check_param', TMP_14 = function ːdefined_check_param() {
          var self = this;

          return "true";
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$compile', TMP_15 = function ːcompile() {
          var $a, self = this;

          self.$add_method(nil);
          if ((($a = self.$compiler()['$method_missing?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(!(", ".$$stub) ? \"super\" : nil)")
            } else {
            return self.$wrap("((", ") != null ? \"super\" : nil)")
          };
        }, TMP_15.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('BaseSuperNode'));

      (function($base, $super) {
        function $SuperNode(){};
        var self = $SuperNode = $klass($base, $super, 'SuperNode', $SuperNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17;

        def.arguments_without_block = nil;
        self.$handle("super");

        Opal.defn(self, '$compile', TMP_16 = function ːcompile() {
          var $a, $b, self = this, $iter = TMP_16.$$p, $yield = $iter || nil, block_arg = nil, expr = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_16.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self.$arglist()['$=='](nil)) {
            self.implicit_args = true;
            if ((($a = self.$containing_def_scope()) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [true]), $b = self.$containing_def_scope(), $b['$uses_zuper='].apply($b, $a), $a[$a.length-1]);
              self.arguments_without_block = [self.$s("js_tmp", "$zuper")];
              if ((($a = ($b = (block_arg = self.$formal_block_parameter()), $b !== false && $b !== nil ?self.$iter()['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                expr = self.$s("block_pass", self.$s("lvar", block_arg['$[]'](1)));
                self.arguments_without_block['$<<'](expr);};
              } else {
              self.arguments_without_block = []
            };};
          return ($a = ($b = self, Opal.find_super_dispatcher(self, 'compile', TMP_16, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        }, TMP_16.$$arity = 0);

        self.$private();

        return (Opal.defn(self, '$formal_block_parameter', TMP_17 = function ːformal_block_parameter() {
          var self = this, $case = nil;

          return (function() {$case = self.$containing_def_scope();if ((((($scope.get('Opal')).$$scope.get('Nodes'))).$$scope.get('IterNode'))['$===']($case)) {return self.$containing_def_scope().$extract_block_arg()}else if ((((($scope.get('Opal')).$$scope.get('Nodes'))).$$scope.get('DefNode'))['$===']($case)) {return self.$containing_def_scope().$block_arg()}else {return self.$raise("Don't know what to do with scope " + (self.$containing_def_scope()))}})();
        }, TMP_17.$$arity = 0), nil) && 'formal_block_parameter';
      })($scope.base, $scope.get('BaseSuperNode'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.10.0.beta3")
  })($scope.base)
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/top"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$stmt', '$stmts', '$is_a?', '$eval?', '$compiler', '$add_temp', '$add_used_helpers', '$add_used_operators', '$line', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$to_s', '$cleanpath', '$Pathname', '$file', '$inspect', '$returns', '$body', '$irb?', '$to_a', '$helpers', '$each', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content']);
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $TopNode(){};
        var self = $TopNode = $klass($base, $super, 'TopNode', $TopNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_12, TMP_13, TMP_14;

        self.$handle("top");

        self.$children("body");

        Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this;

          self.$push(self.$version_comment());
          self.$opening();
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, body_code = nil;

          body_code = self.$stmt(self.$stmts());
            if ((($c = body_code['$is_a?']($scope.get('Array'))) !== nil && (!$c.$$is_boolean || $c == true))) {
              } else {
              body_code = [body_code]
            };
            if ((($c = self.$compiler()['$eval?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              } else {
              self.$add_temp("self = Opal.top")
            };
            self.$add_temp((function() {if ((($c = self.$compiler()['$eval?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
              return "$scope = (self.$$scope || self.$$class.$$scope)"
              } else {
              return "$scope = Opal"
            }; return nil; })());
            self.$add_temp("nil = Opal.nil");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return self.$closing();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$opening', TMP_3 = function ːopening() {
          var $a, self = this, path = nil;

          if ((($a = self.$compiler()['$requirable?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            path = self.$Pathname(self.$compiler().$file()).$cleanpath().$to_s();
            return self.$line("Opal.modules[" + (path.$inspect()) + "] = function(Opal) {");
          } else if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("(function(Opal, self) {")
            } else {
            return self.$line("(function(Opal) {")
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$closing', TMP_4 = function ːclosing() {
          var $a, self = this;

          if ((($a = self.$compiler()['$requirable?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("};\n")
          } else if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("})(Opal, self)")
            } else {
            return self.$line("})(Opal);\n")
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$stmts', TMP_5 = function ːstmts() {
          var self = this;

          return self.$compiler().$returns(self.$body());
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$compile_irb_vars', TMP_6 = function ːcompile_irb_vars() {
          var $a, self = this;

          if ((($a = self.$compiler()['$irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
            } else {
            return nil
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$add_used_helpers', TMP_8 = function ːadd_used_helpers() {
          var $a, $b, TMP_7, self = this, helpers = nil;

          helpers = self.$compiler().$helpers().$to_a();
          return ($a = ($b = helpers.$to_a()).$each, $a.$$p = (TMP_7 = function(h){var self = TMP_7.$$s || this;
if (h == null) h = nil;
          return self.$add_temp("$" + (h) + " = Opal." + (h))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$add_used_operators', TMP_10 = function ːadd_used_operators() {
          var $a, $b, TMP_9, self = this, operators = nil;

          operators = self.$compiler().$operator_helpers().$to_a();
          return ($a = ($b = operators).$each, $a.$$p = (TMP_9 = function(op){var self = TMP_9.$$s || this, name = nil;
if (op == null) op = nil;
          name = (((($scope.get('Nodes')).$$scope.get('CallNode'))).$$scope.get('OPERATORS'))['$[]'](op);
            self.$line("function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$compile_method_stubs', TMP_12 = function ːcompile_method_stubs() {
          var $a, $b, TMP_11, self = this, calls = nil, stubs = nil;

          if ((($a = self.$compiler()['$method_missing?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            calls = self.$compiler().$method_calls();
            stubs = ($a = ($b = calls.$to_a()).$map, $a.$$p = (TMP_11 = function(k){var self = TMP_11.$$s || this;
if (k == null) k = nil;
            return "'$" + (k) + "'"}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b).$join(", ");
            if ((($a = stubs['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$line("Opal.add_stubs([" + (stubs) + "]);")
            };
            } else {
            return nil
          };
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$compile_end_construct', TMP_13 = function ːcompile_end_construct() {
          var $a, self = this, content = nil;

          if ((($a = content = self.$compiler().$eof_content()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("$__END__.$read = function() { return " + (content.$inspect()) + "; };");
            } else {
            return nil
          };
        }, TMP_13.$$arity = 0);

        return (Opal.defn(self, '$version_comment', TMP_14 = function ːversion_comment() {
          var self = this;

          return "/* Generated by Opal " + ((($scope.get('Opal')).$$scope.get('VERSION'))) + " */";
        }, TMP_14.$$arity = 0), nil) && 'version_comment';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/while"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$js_truthy', '$test', '$in_while', '$wrap_in_closure?', '$[]=', '$while_loop', '$stmt', '$body', '$uses_redo?', '$push', '$while_open', '$while_close', '$line', '$compiler', '$wrap', '$[]', '$expr?', '$recv?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $WhileNode(){};
        var self = $WhileNode = $klass($base, $super, 'WhileNode', $WhileNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

        self.$handle("while");

        self.$children("test", "body");

        Opal.defn(self, '$compile', TMP_3 = function ːcompile() {
          var $a, $b, TMP_1, self = this;

          ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(redo_var){var self = TMP_1.$$s || this, $c, $d, TMP_2, test_code = nil;
if (redo_var == null) redo_var = nil;
          test_code = self.$js_truthy(self.$test());
            return ($c = ($d = self.$compiler()).$in_while, $c.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $e, body_code = nil;

            if ((($e = self['$wrap_in_closure?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                self.$while_loop()['$[]=']("closure", true)};
              self.$while_loop()['$[]=']("redo_var", redo_var);
              body_code = self.$stmt(self.$body());
              if ((($e = self['$uses_redo?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                self.$push("" + (redo_var) + " = false; " + (self.$while_open()) + (redo_var) + " || ");
                self.$push(test_code);
                self.$push(self.$while_close());
                } else {
                self.$push(self.$while_open(), test_code, self.$while_close())
              };
              if ((($e = self['$uses_redo?']()) !== nil && (!$e.$$is_boolean || $e == true))) {
                self.$push("" + (redo_var) + " = false;")};
              return self.$line(body_code, "}");}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $c).call($d);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() {", "; return nil; })()")
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$while_open', TMP_4 = function ːwhile_open() {
          var self = this;

          return "while (";
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$while_close', TMP_5 = function ːwhile_close() {
          var self = this;

          return ") {";
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$uses_redo?', TMP_6 = function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo");
        }, TMP_6.$$arity = 0);

        return (Opal.defn(self, '$wrap_in_closure?', TMP_7 = function() {
          var $a, self = this;

          return ((($a = self['$expr?']()) !== false && $a !== nil) ? $a : self['$recv?']());
        }, TMP_7.$$arity = 0), nil) && 'wrap_in_closure?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $UntilNode(){};
        var self = $UntilNode = $klass($base, $super, 'UntilNode', $UntilNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

        self.$handle("until");

        Opal.defn(self, '$while_open', TMP_8 = function ːwhile_open() {
          var self = this;

          return "while (!(";
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$while_close', TMP_9 = function ːwhile_close() {
          var self = this;

          return ")) {";
        }, TMP_9.$$arity = 0), nil) && 'while_close';
      })($scope.base, $scope.get('WhileNode'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/for"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$==', '$type', '$args_sexp', '$s', '$<<', '$body_sexp', '$first', '$insert', '$each', '$[]', '$===', '$add_local', '$value', '$push', '$expr']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ForNode(){};
        var self = $ForNode = $klass($base, $super, 'ForNode', $ForNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_4;

        self.$handle("for");

        self.$children("value", "args_sexp", "body_sexp");

        return (Opal.defn(self, '$compile', TMP_4 = function ːcompile() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(loop_var){var self = TMP_1.$$s || this, $c, $d, TMP_2, assign = nil, iter = nil, sexp = nil;
if (loop_var == null) loop_var = nil;
          if (self.$args_sexp().$type()['$==']("array")) {
              assign = self.$s("masgn", self.$args_sexp());
              assign['$<<'](self.$s("to_ary", self.$s("js_tmp", loop_var)));
              } else {
              assign = self.$args_sexp()['$<<'](self.$s("js_tmp", loop_var))
            };
            if ((($c = self.$body_sexp()) !== nil && (!$c.$$is_boolean || $c == true))) {
              if (self.$body_sexp().$first()['$==']("block")) {
                self.$body_sexp().$insert(1, assign);
                assign = self.$body_sexp();
                } else {
                assign = self.$s("block", assign, self.$body_sexp())
              }};
            ($c = ($d = assign.$children()).$each, $c.$$p = (TMP_2 = function(sexp){var self = TMP_2.$$s || this, $e, $f, TMP_3, $case = nil;
if (sexp == null) sexp = nil;
            return (function() {$case = sexp['$[]'](0);if ("lasgn"['$===']($case)) {return self.$add_local(sexp['$[]'](1))}else if ("masgn"['$===']($case)) {if (sexp['$[]'](1)['$[]'](0)['$==']("array")) {
                return ($e = ($f = sexp['$[]'](1)['$[]'](1)).$each, $e.$$p = (TMP_3 = function(sexp){var self = TMP_3.$$s || this;
if (sexp == null) sexp = nil;
                if (sexp['$[]'](0)['$==']("lasgn")) {
                    return self.$add_local(sexp['$[]'](1))
                    } else {
                    return nil
                  }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $e).call($f)
                } else {
                return nil
              }}else { return nil }})()}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $c).call($d);
            iter = self.$s("iter", self.$s("lasgn", loop_var), assign);
            sexp = self.$s("call", self.$value(), "each", self.$s("arglist"), iter);
            return self.$push(self.$expr(sexp));}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        }, TMP_4.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$attr_accessor', '$each', '$==', '$type', '$has_kwsplat=', '$<<', '$values', '$keys', '$children', '$all?', '$include?', '$extract_kv_pairs_and_kwsplats', '$has_kwsplat', '$compile_merge', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$empty?', '$expr', '$s', '$each_with_index', '$push', '$wrap', '$times', '$inspect', '$to_s', '$[]', '$[]=', '$size', '$join', '$value']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $HashNode(){};
        var self = $HashNode = $klass($base, $super, 'HashNode', $HashNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6, TMP_9, TMP_11, TMP_14;

        self.$handle("hash");

        self.$attr_accessor("has_kwsplat", "keys", "values");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
          var $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          ($b = ($c = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $b.$$p = $iter, $b).apply($c, $zuper);
          self.has_kwsplat = false;
          self.keys = [];
          return self.values = [];
        }, TMP_1.$$arity = -1);

        Opal.defn(self, '$extract_kv_pairs_and_kwsplats', TMP_3 = function ːextract_kv_pairs_and_kwsplats() {
          var $a, $b, TMP_2, self = this, found_key = nil;

          found_key = false;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_2 = function(obj){var self = TMP_2.$$s || this, $c, $d;
if (obj == null) obj = nil;
          if (obj.$type()['$==']("kwsplat")) {
              return (($c = [true]), $d = self, $d['$has_kwsplat='].apply($d, $c), $c[$c.length-1])
            } else if (found_key !== false && found_key !== nil) {
              self.$values()['$<<'](obj);
              return found_key = false;
              } else {
              self.$keys()['$<<'](obj);
              return found_key = true;
            }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          return [self.$keys(), self.$values()];
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$simple_keys?', TMP_5 = function() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self.$keys())['$all?'], $a.$$p = (TMP_4 = function(key){var self = TMP_4.$$s || this;
if (key == null) key = nil;
          return ["sym", "str"]['$include?'](key.$type())}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
          var $a, self = this;

          self.$extract_kv_pairs_and_kwsplats();
          if ((($a = self.$has_kwsplat()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_merge()
          } else if ((($a = self['$simple_keys?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_hash2()
            } else {
            return self.$compile_hash()
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$compile_merge', TMP_9 = function ːcompile_merge() {
          var $a, $b, TMP_7, $c, $d, TMP_8, self = this, result = nil, seq = nil;

          self.$helper("hash");
          $a = [[], []], result = $a[0], seq = $a[1], $a;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_7 = function(child){var self = TMP_7.$$s || this, $c;
if (child == null) child = nil;
          if (child.$type()['$==']("kwsplat")) {
              if ((($c = seq['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                } else {
                result['$<<'](self.$expr(($c = self).$s.apply($c, ["hash"].concat(Opal.to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return seq = [];
              } else {
              return seq['$<<'](child)
            }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
          if ((($a = seq['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            result['$<<'](self.$expr(($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(seq)))))
          };
          return ($c = ($d = result).$each_with_index, $c.$$p = (TMP_8 = function(fragment, idx){var self = TMP_8.$$s || this;
if (fragment == null) fragment = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              return self.$push(fragment)
              } else {
              return self.$push(".$merge(", fragment, ")")
            }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $c).call($d);
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$compile_hash', TMP_11 = function ːcompile_hash() {
          var $a, $b, TMP_10, self = this;

          self.$helper("hash");
          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_10 = function(child, idx){var self = TMP_10.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(child));}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b);
          return self.$wrap("$hash(", ")");
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$compile_hash2', TMP_14 = function ːcompile_hash2() {
          var $a, $b, TMP_12, $c, TMP_13, self = this, hash_obj = nil, hash_keys = nil;

          $a = [$hash2([], {}), []], hash_obj = $a[0], hash_keys = $a[1], $a;
          self.$helper("hash2");
          ($a = ($b = self.$keys().$size()).$times, $a.$$p = (TMP_12 = function(idx){var self = TMP_12.$$s || this, $c, key = nil;
if (idx == null) idx = nil;
          key = self.$keys()['$[]'](idx)['$[]'](1).$to_s().$inspect();
            if ((($c = hash_obj['$include?'](key)) !== nil && (!$c.$$is_boolean || $c == true))) {
              } else {
              hash_keys['$<<'](key)
            };
            return hash_obj['$[]='](key, self.$expr(self.$values()['$[]'](idx)));}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b);
          ($a = ($c = hash_keys).$each_with_index, $a.$$p = (TMP_13 = function(key, idx){var self = TMP_13.$$s || this;
if (key == null) key = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $a).call($c);
          return self.$wrap("$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, TMP_14.$$arity = 0), nil) && 'compile_hash2';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $KwSplatNode(){};
        var self = $KwSplatNode = $klass($base, $super, 'KwSplatNode', $KwSplatNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_15;

        self.$handle("kwsplat");

        self.$children("value");

        return (Opal.defn(self, '$compile', TMP_15 = function ːcompile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")");
        }, TMP_15.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/array"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArrayNode(){};
        var self = $ArrayNode = $klass($base, $super, 'ArrayNode', $ArrayNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        self.$handle("array");

        return (Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this, code = nil, work = nil, join = nil;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("[]")};
          $a = [[], []], code = $a[0], work = $a[1], $a;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this, $c, splat = nil, part = nil;
if (child == null) child = nil;
          splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if (splat !== false && splat !== nil) {
              if ((($c = work['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                if ((($c = code['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                  } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
                } else {
                if ((($c = code['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                  } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return work = [];
              } else {
              if ((($c = work['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
          if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              code = join
              } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, TMP_2.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/defined"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$expr', '$s', '$[]', '$respond_to?', '$__send__', '$mid_to_jsid', '$with_temp', '$handle_block_given_call', '$compiler', '$wrap', '$include?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DefinedNode(){};
        var self = $DefinedNode = $klass($base, $super, 'DefinedNode', $DefinedNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14, TMP_16;

        def.sexp = nil;
        self.$handle("defined");

        self.$children("value");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var $a, self = this, type = nil, $case = nil;

          type = self.$value().$type();
          return (function() {$case = type;if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(type.$to_s().$inspect())}else if ("lasgn"['$===']($case) || "iasgn"['$===']($case) || "gasgn"['$===']($case) || "cvdecl"['$===']($case) || "masgn"['$===']($case) || "op_asgn_or"['$===']($case) || "op_asgn_and"['$===']($case)) {return self.$push("'assignment'")}else if ("paren"['$===']($case) || "not"['$===']($case)) {return self.$push(self.$expr(self.$s("defined", self.$value()['$[]'](1))))}else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}else {if ((($a = self['$respond_to?']("compile_" + (type))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$__send__("compile_" + (type))
            } else {
            return self.$push("'expression'")
          }}})();
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$compile_call', TMP_3 = function ːcompile_call() {
          var $a, $b, TMP_2, self = this, mid = nil, recv = nil;

          mid = self.$mid_to_jsid(self.$value()['$[]'](2).$to_s());
          recv = (function() {if ((($a = self.$value()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$value()['$[]'](1))
            } else {
            return "self"
          }; return nil; })();
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("(((" + (tmp) + " = ", recv, "" + (mid) + ") && !" + (tmp) + ".$$stub) || ", recv);
            return self.$push("['$respond_to_missing?']('" + (self.$value()['$[]'](2).$to_s()) + "') ? 'method' : nil)");}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$compile_ivar', TMP_5 = function ːcompile_ivar() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_4 = function(tmp){var self = TMP_4.$$s || this, name = nil;
if (tmp == null) tmp = nil;
          name = self.$value()['$[]'](1).$to_s()['$[]']($range(1, -1, false));
            self.$push("((" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil) ? ");
            return self.$push("'instance-variable' : nil)");}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$compile_super', TMP_6 = function ːcompile_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super", self.$value())));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$compile_yield', TMP_7 = function ːcompile_yield() {
          var self = this;

          self.$push(self.$compiler().$handle_block_given_call(self.sexp));
          return self.$wrap("((", ") != null ? \"yield\" : nil)");
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$compile_xstr', TMP_8 = function ːcompile_xstr() {
          var self = this;

          self.$push(self.$expr(self.$value()));
          return self.$wrap("(typeof(", ") !== \"undefined\")");
        }, TMP_8.$$arity = 0);

        Opal.alias(self, 'compile_dxstr', 'compile_xstr');

        Opal.defn(self, '$compile_const', TMP_9 = function ːcompile_const() {
          var self = this;

          return self.$push("($scope." + (self.$value()['$[]'](1)) + " != null)");
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$compile_colon2', TMP_10 = function ːcompile_colon2() {
          var self = this;

          self.$push("(function(){ try { return ((");
          self.$push(self.$expr(self.$value()));
          self.$push(") != null ? 'constant' : nil); } catch (err) { if (err.$$class");
          return self.$push(" === Opal.NameError) { return nil; } else { throw(err); }}; })()");
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$compile_colon3', TMP_11 = function ːcompile_colon3() {
          var self = this;

          return self.$push("(Opal.Object.$$scope." + (self.$value()['$[]'](1)) + " == null ? nil : 'constant')");
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$compile_cvar', TMP_12 = function ːcompile_cvar() {
          var self = this;

          return self.$push("(Opal.cvars['" + (self.$value()['$[]'](1)) + "'] != null ? 'class variable' : nil)");
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$compile_gvar', TMP_14 = function ːcompile_gvar() {
          var $a, $b, TMP_13, self = this, name = nil;

          name = self.$value()['$[]'](1).$to_s()['$[]']($range(1, -1, false));
          if ((($a = ["~", "!"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("'global-variable'")
          } else if ((($a = ["`", "'", "+", "&"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$with_temp, $a.$$p = (TMP_13 = function(tmp){var self = TMP_13.$$s || this;
if (tmp == null) tmp = nil;
            self.$push("((" + (tmp) + " = $gvars['~'], " + (tmp) + " != null && " + (tmp) + " !== nil) ? ");
              return self.$push("'global-variable' : nil)");}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b)
            } else {
            return self.$push("($gvars[" + (name.$inspect()) + "] != null ? 'global-variable' : nil)")
          };
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$compile_nth_ref', TMP_16 = function ːcompile_nth_ref() {
          var $a, $b, TMP_15, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_15 = function(tmp){var self = TMP_15.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("((" + (tmp) + " = $gvars['~'], " + (tmp) + " != null && " + (tmp) + " != nil) ? ");
            return self.$push("'global-variable' : nil)");}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
        }, TMP_16.$$arity = 0), nil) && 'compile_nth_ref';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/masgn"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$new_temp', '$scope', '$==', '$type', '$rhs', '$push', '$expr', '$compile_masgn', '$lhs', '$-', '$size', '$[]', '$queue_temp', '$raise', '$take_while', '$!=', '$drop', '$each_with_index', '$compile_assignment', '$empty?', '$shift', '$<<', '$dup', '$s', '$!', '$>=', '$include?', '$[]=', '$to_sym', '$last']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MassAssignNode(){};
        var self = $MassAssignNode = $klass($base, $super, 'MassAssignNode', $MassAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6;

        Opal.cdecl($scope, 'SIMPLE_ASSIGNMENT', ["lasgn", "iasgn", "lvar", "gasgn", "cdecl"]);

        self.$handle("masgn");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$compile', TMP_1 = function ːcompile() {
          var self = this, array = nil, retval = nil;

          array = self.$scope().$new_temp();
          if (self.$rhs().$type()['$==']("array")) {
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            self.$compile_masgn(self.$lhs().$children(), array, $rb_minus(self.$rhs().$size(), 1));
            self.$push(", " + (array));
          } else if (self.$rhs().$type()['$==']("to_ary")) {
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()['$[]'](1)));
            self.$push(", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push(", " + (retval));
            self.$scope().$queue_temp(retval);
          } else if (self.$rhs().$type()['$==']("splat")) {
            self.$push("" + (array) + " = Opal.to_a(", self.$expr(self.$rhs()['$[]'](1)), ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push(", " + (array));
            } else {
            self.$raise("unsupported mlhs type")
          };
          return self.$scope().$queue_temp(array);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$compile_masgn', TMP_5 = function ːcompile_masgn(lhs_items, array, len) {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          if (len == null) {
            len = nil;
          }
          pre_splat = ($a = ($b = lhs_items).$take_while, $a.$$p = (TMP_2 = function(child){var self = TMP_2.$$s || this;
if (child == null) child = nil;
          return child.$type()['$!=']("splat")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          post_splat = lhs_items.$drop(pre_splat.$size());
          ($a = ($c = pre_splat).$each_with_index, $a.$$p = (TMP_3 = function(child, idx){var self = TMP_3.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
          return self.$compile_assignment(child, array, idx, len)}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($c);
          if ((($a = post_splat['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            splat = post_splat.$shift();
            if ((($a = post_splat['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = part = splat['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
                } else {
                return nil
              }
              } else {
              tmp = self.$scope().$new_temp();
              self.$push(", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push(", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ((($a = part = splat['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));};
              ($a = ($d = post_splat).$each_with_index, $a.$$p = (TMP_4 = function(child, idx){var self = TMP_4.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
              if (idx['$=='](0)) {
                  return self.$compile_assignment(child, array, tmp)
                  } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                }}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($d);
              return self.$scope().$queue_temp(tmp);
            };
          };
        }, TMP_5.$$arity = -3);

        return (Opal.defn(self, '$compile_assignment', TMP_6 = function ːcompile_assignment(child, array, idx, len) {
          var $a, $b, self = this, assign = nil, part = nil, tmp = nil;

          if (len == null) {
            len = nil;
          }
          if ((($a = ((($b = len['$!']()) !== false && $b !== nil) ? $b : $rb_ge(idx, len))) !== nil && (!$a.$$is_boolean || $a == true))) {
            assign = self.$s("js_tmp", "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")
            } else {
            assign = self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")
          };
          part = child.$dup();
          if ((($a = $scope.get('SIMPLE_ASSIGNMENT')['$include?'](child.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
            part['$<<'](assign)
          } else if (child.$type()['$==']("call")) {
            part['$[]='](2, ((("") + (part['$[]'](2))) + "=").$to_sym());
            part.$last()['$<<'](assign);
          } else if (child.$type()['$==']("attrasgn")) {
            part.$last()['$<<'](assign)
          } else if (child.$type()['$==']("array")) {
            tmp = self.$scope().$new_temp();
            self.$push(", (" + (tmp) + " = Opal.to_ary(" + (assign['$[]'](1)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
            } else {
            self.$raise("Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }, TMP_6.$$arity = -4), nil) && 'compile_assignment';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes/arglist"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$each', '$==', '$first', '$expr', '$empty?', '$<<', '$fragment', '$children', '$push']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArglistNode(){};
        var self = $ArglistNode = $klass($base, $super, 'ArglistNode', $ArglistNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        self.$handle("arglist");

        return (Opal.defn(self, '$compile', TMP_2 = function ːcompile() {
          var $a, $b, TMP_1, self = this, code = nil, work = nil, join = nil;

          $a = [[], []], code = $a[0], work = $a[1], $a;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(current){var self = TMP_1.$$s || this, $c, splat = nil, arg = nil;
if (current == null) current = nil;
          splat = current.$first()['$==']("splat");
            arg = self.$expr(current);
            if (splat !== false && splat !== nil) {
              if ((($c = work['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                if ((($c = code['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                  code['$<<'](arg)
                  } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
                } else {
                if ((($c = code['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                  } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return work = [];
              } else {
              if ((($c = work['$empty?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
          if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            join = work;
            if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              code = join
              } else {
              code['$<<'](self.$fragment(".concat("))['$<<'](join)['$<<'](self.$fragment(")"))
            };
          };
          return ($a = self).$push.apply($a, Opal.to_a(code));
        }, TMP_2.$$arity = 0), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/nodes"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/inline_args");
  self.$require("opal/nodes/args/normarg");
  self.$require("opal/nodes/args/optarg");
  self.$require("opal/nodes/args/mlhsarg");
  self.$require("opal/nodes/args/restarg");
  self.$require("opal/nodes/args/kwarg");
  self.$require("opal/nodes/args/kwoptarg");
  self.$require("opal/nodes/args/kwrestarg");
  self.$require("opal/nodes/args/post_kwargs");
  self.$require("opal/nodes/args/post_args");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/case");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/for");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  return self.$require("opal/nodes/arglist");
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/compiler"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$compile', '$new', '$[]', '$define_method', '$fetch', '$!', '$include?', '$raise', '$+', '$inspect', '$compiler_option', '$attr_reader', '$attr_accessor', '$parse', '$file', '$message', '$backtrace', '$s', '$eof_content', '$lexer', '$flatten', '$process', '$join', '$map', '$to_proc', '$class', '$warn', '$<<', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$pop_while', '$==', '$in_while?', '$fragment', '$scope', '$handlers', '$type', '$compile_to_fragments', '$returns', '$===', '$pop', '$[]=', '$>', '$length', '$=~', '$source=', '$source', '$uses_block!', '$block_name', '$find_parent_def']);
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$compile', TMP_1 = function ːcompile(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return $scope.get('Compiler').$new(source, options).$compile();
    }, TMP_1.$$arity = -2);

    (function($base, $super) {
      function $Compiler(){};
      var self = $Compiler = $klass($base, $super, 'Compiler', $Compiler);

      var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32;

      def.parser = def.source = def.sexp = def.fragments = def.helpers = def.operator_helpers = def.method_calls = def.indent = def.unique = def.scope = def.in_ensure = def.break_detected = def.case_stmt = def.handlers = def.requires = def.required_trees = nil;
      Opal.cdecl($scope, 'INDENT', "  ");

      Opal.cdecl($scope, 'COMPARE', ["<", ">", "<=", ">="]);

      Opal.defs(self, '$compiler_option', TMP_4 = function ːcompiler_option(name, default_value, options) {
        var $a, $b, TMP_2, $c, self = this, mid = nil, valid_values = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        mid = options['$[]']("as");
        valid_values = options['$[]']("valid_values");
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $c, $d, TMP_3, $e, value = nil;
          if (self.options == null) self.options = nil;

        value = ($c = ($d = self.options).$fetch, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return default_value}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d, name);
          if ((($c = (($e = valid_values !== false && valid_values !== nil) ? (valid_values['$include?'](value))['$!']() : valid_values)) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.$raise($scope.get('ArgumentError'), $rb_plus("invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ", "(valid values: " + (valid_values.$inspect()) + ")"))};
          return value;}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b, ((($c = mid) !== false && $c !== nil) ? $c : name));
      }, TMP_4.$$arity = -3);

      self.$compiler_option("file", "(file)");

      self.$compiler_option("method_missing", true, $hash2(["as"], {"as": "method_missing?"}));

      self.$compiler_option("arity_check", false, $hash2(["as"], {"as": "arity_check?"}));

      self.$compiler_option("freezing", true, $hash2(["as"], {"as": "freezing?"}));

      self.$compiler_option("tainting", true, $hash2(["as"], {"as": "tainting?"}));

      self.$compiler_option("irb", false, $hash2(["as"], {"as": "irb?"}));

      self.$compiler_option("dynamic_require_severity", "warning", $hash2(["valid_values"], {"valid_values": ["error", "warning", "ignore"]}));

      self.$compiler_option("requirable", false, $hash2(["as"], {"as": "requirable?"}));

      self.$compiler_option("inline_operators", true, $hash2(["as"], {"as": "inline_operators?"}));

      self.$compiler_option("eval", false, $hash2(["as"], {"as": "eval?"}));

      self.$attr_reader("result");

      self.$attr_reader("fragments");

      self.$attr_accessor("scope");

      self.$attr_reader("case_stmt");

      self.$attr_reader("eof_content");

      Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(source, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        self.source = source;
        self.indent = "";
        self.unique = 0;
        return self.options = options;
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$compile', TMP_6 = function ːcompile() {
        var $a, $b, self = this, parsed = nil, error = nil, message = nil;

        try {
          self.parser = $scope.get('Parser').$new();
          parsed = (function() { try {
            return self.parser.$parse(self.source, self.$file())
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {error = $err;
              try {
                return self.$raise($scope.get('SyntaxError'), error.$message(), error.$backtrace())
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          self.sexp = self.$s("top", ((($a = parsed) !== false && $a !== nil) ? $a : self.$s("nil")));
          self.eof_content = self.parser.$lexer().$eof_content();
          self.fragments = self.$process(self.sexp).$flatten();
          return self.result = ($a = ($b = self.fragments).$map, $a.$$p = "code".$to_proc(), $a).call($b).$join("");
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('Exception')])) {error = $err;
            try {
              message = "An error occurred while compiling: " + (self.$file()) + "\n" + (error.$message());
              return self.$raise(error.$class(), message, error.$backtrace());
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$source_map', TMP_7 = function ːsource_map(source_file) {
        var $a, self = this;

        if (source_file == null) {
          source_file = nil;
        }
        return (($scope.get('Opal')).$$scope.get('SourceMap')).$new(self.fragments, ((($a = source_file) !== false && $a !== nil) ? $a : self.$file()));
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$helpers', TMP_8 = function ːhelpers() {
        var $a, self = this;

        return ((($a = self.helpers) !== false && $a !== nil) ? $a : self.helpers = $scope.get('Set').$new(["breaker", "slice"]));
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$operator_helpers', TMP_9 = function ːoperator_helpers() {
        var $a, self = this;

        return ((($a = self.operator_helpers) !== false && $a !== nil) ? $a : self.operator_helpers = $scope.get('Set').$new());
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$method_calls', TMP_10 = function ːmethod_calls() {
        var $a, self = this;

        return ((($a = self.method_calls) !== false && $a !== nil) ? $a : self.method_calls = $scope.get('Set').$new());
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$error', TMP_11 = function ːerror(msg, line) {
        var self = this;

        if (line == null) {
          line = nil;
        }
        return self.$raise($scope.get('SyntaxError'), "" + (msg) + " :" + (self.$file()) + ":" + (line));
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$warning', TMP_12 = function ːwarning(msg, line) {
        var self = this;

        if (line == null) {
          line = nil;
        }
        return self.$warn("WARNING: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, TMP_12.$$arity = -2);

      Opal.defn(self, '$parser_indent', TMP_13 = function ːparser_indent() {
        var self = this;

        return self.indent;
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$s', TMP_14 = function ːs($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $scope.get('Sexp').$new(parts);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$fragment', TMP_15 = function ːfragment(str, scope, sexp) {
        var self = this;

        if (sexp == null) {
          sexp = nil;
        }
        return $scope.get('Fragment').$new(str, scope, sexp);
      }, TMP_15.$$arity = -3);

      Opal.defn(self, '$unique_temp', TMP_16 = function ːunique_temp() {
        var self = this;

        return "TMP_" + (self.unique = $rb_plus(self.unique, 1));
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$helper', TMP_17 = function ːhelper(name) {
        var self = this;

        return self.$helpers()['$<<'](name);
      }, TMP_17.$$arity = 1);

      Opal.defn(self, '$indent', TMP_18 = function ːindent() {
        var self = this, $iter = TMP_18.$$p, block = $iter || nil, indent = nil, res = nil;

        TMP_18.$$p = null;
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $scope.get('INDENT'));
        self.space = "\n" + (self.indent);
        res = Opal.yieldX(block, []);
        self.indent = indent;
        self.space = "\n" + (self.indent);
        return res;
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$with_temp', TMP_19 = function ːwith_temp() {
        var self = this, $iter = TMP_19.$$p, block = $iter || nil, tmp = nil, res = nil;

        TMP_19.$$p = null;
        tmp = self.scope.$new_temp();
        res = Opal.yield1(block, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$in_while', TMP_20 = function ːin_while() {
        var self = this, $iter = TMP_20.$$p, $yield = $iter || nil, result = nil;

        TMP_20.$$p = null;
        if (($yield !== nil)) {
          } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = Opal.yieldX($yield, []);
        self.scope.$pop_while();
        return result;
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$in_ensure', TMP_21 = function ːin_ensure() {
        var self = this, $iter = TMP_21.$$p, $yield = $iter || nil, result = nil;

        TMP_21.$$p = null;
        if (($yield !== nil)) {
          } else {
          return nil
        };
        self.in_ensure = true;
        result = Opal.yieldX($yield, []);
        self.in_ensure = false;
        return result;
      }, TMP_21.$$arity = 0);

      Opal.defn(self, '$in_ensure?', TMP_22 = function() {
        var self = this;

        return self.in_ensure;
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$has_break?', TMP_23 = function() {
        var self = this, $iter = TMP_23.$$p, $yield = $iter || nil, result = nil, detected = nil;

        TMP_23.$$p = null;
        if (($yield !== nil)) {
          } else {
          return self.break_detected
        };
        self.break_detected = false;
        result = Opal.yieldX($yield, []);
        detected = self.break_detected;
        self.break_detected = nil;
        return detected;
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$has_break!', TMP_24 = function() {
        var self = this;

        if (self.break_detected['$=='](false)) {
          return self.break_detected = true
          } else {
          return nil
        };
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$in_case', TMP_25 = function ːin_case() {
        var self = this, $iter = TMP_25.$$p, $yield = $iter || nil, old = nil;

        TMP_25.$$p = null;
        if (($yield !== nil)) {
          } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return self.case_stmt = old;
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$in_while?', TMP_26 = function() {
        var self = this;

        return self.scope['$in_while?']();
      }, TMP_26.$$arity = 0);

      Opal.defn(self, '$process', TMP_27 = function ːprocess(sexp, level) {
        var $a, self = this, handler = nil;

        if (level == null) {
          level = "expr";
        }
        if (sexp['$=='](nil)) {
          return self.$fragment("", self.$scope())};
        if ((($a = handler = self.$handlers()['$[]'](sexp.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
          } else {
          return self.$raise("Unsupported sexp: " + (sexp.$type()))
        };
      }, TMP_27.$$arity = -2);

      Opal.defn(self, '$handlers', TMP_28 = function ːhandlers() {
        var $a, self = this;

        return ((($a = self.handlers) !== false && $a !== nil) ? $a : self.handlers = (((($scope.get('Opal')).$$scope.get('Nodes'))).$$scope.get('Base')).$handlers());
      }, TMP_28.$$arity = 0);

      Opal.defn(self, '$requires', TMP_29 = function ːrequires() {
        var $a, self = this;

        return ((($a = self.requires) !== false && $a !== nil) ? $a : self.requires = []);
      }, TMP_29.$$arity = 0);

      Opal.defn(self, '$required_trees', TMP_30 = function ːrequired_trees() {
        var $a, self = this;

        return ((($a = self.required_trees) !== false && $a !== nil) ? $a : self.required_trees = []);
      }, TMP_30.$$arity = 0);

      Opal.defn(self, '$returns', TMP_31 = function ːreturns(sexp) {
        var $a, $b, self = this, $case = nil, last = nil, return_sexp = nil;

        if (sexp !== false && sexp !== nil) {
          } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();if ("undef"['$===']($case)) {last = sexp.$pop();
        return sexp['$<<'](self.$returns(last));}else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case)) {return sexp}else if ("yield"['$===']($case)) {sexp['$[]='](0, "returnable_yield");
        return sexp;}else if ("scope"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("block"['$===']($case)) {if ((($a = $rb_gt(sexp.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp['$[]='](-1, self.$returns(sexp['$[]'](-1)))
          } else {
          sexp['$<<'](self.$returns(self.$s("nil")))
        };
        return sexp;}else if ("when"['$===']($case)) {sexp['$[]='](2, self.$returns(sexp['$[]'](2)));
        return sexp;}else if ("rescue"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        if ((($a = ($b = sexp['$[]'](2), $b !== false && $b !== nil ?sexp['$[]'](2)['$[]'](0)['$==']("resbody") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = sexp['$[]'](2)['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
            sexp['$[]'](2)['$[]='](2, self.$returns(sexp['$[]'](2)['$[]'](2)))
            } else {
            sexp['$[]'](2)['$[]='](2, self.$returns(self.$s("nil")))
          }};
        return sexp;}else if ("ensure"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("begin"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("rescue_mod"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        sexp['$[]='](2, self.$returns(sexp['$[]'](2)));
        return sexp;}else if ("while"['$===']($case)) {return sexp}else if ("return"['$===']($case) || "js_return"['$===']($case)) {return sexp}else if ("xstr"['$===']($case)) {if ((($a = /return|;/['$=~'](sexp['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          sexp['$[]='](1, "return " + (sexp['$[]'](1)) + ";")
        };
        return sexp;}else if ("dxstr"['$===']($case)) {if ((($a = /return|;|\n/['$=~'](sexp['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          sexp['$[]='](1, "return " + (sexp['$[]'](1)))
        };
        return sexp;}else if ("if"['$===']($case)) {sexp['$[]='](2, self.$returns(((($a = sexp['$[]'](2)) !== false && $a !== nil) ? $a : self.$s("nil"))));
        sexp['$[]='](3, self.$returns(((($a = sexp['$[]'](3)) !== false && $a !== nil) ? $a : self.$s("nil"))));
        return sexp;}else {return_sexp = self.$s("js_return", sexp);
        (($a = [sexp.$source()]), $b = return_sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return return_sexp;}})();
      }, TMP_31.$$arity = 1);

      return (Opal.defn(self, '$handle_block_given_call', TMP_32 = function ːhandle_block_given_call(sexp) {
        var $a, $b, self = this, scope = nil;

        self.scope['$uses_block!']();
        if ((($a = self.scope.$block_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$fragment("(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if ((($a = ($b = scope = self.scope.$find_parent_def(), $b !== false && $b !== nil ?scope.$block_name() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$fragment("(" + (scope.$block_name()) + " !== nil)", scope, sexp)
          } else {
          return self.$fragment("false", scope, sexp)
        };
      }, TMP_32.$$arity = 1), nil) && 'handle_block_given_call';
    })($scope.base, null);
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal/erb"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$compile', '$new', '$fix_quotes', '$find_contents', '$find_code', '$wrap_compiled', '$require_erb', '$prepared_source', '$gsub', '$+', '$=~', '$sub']);
  self.$require("opal/compiler");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ERB, self = $ERB = $module($base, 'ERB');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defs(self, '$compile', TMP_1 = function ːcompile(source, file_name) {
        var self = this;

        if (file_name == null) {
          file_name = "(erb)";
        }
        return $scope.get('Compiler').$new(source, file_name).$compile();
      }, TMP_1.$$arity = -2);

      (function($base, $super) {
        function $Compiler(){};
        var self = $Compiler = $klass($base, $super, 'Compiler', $Compiler);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_11;

        def.prepared_source = def.source = def.file_name = nil;
        Opal.cdecl($scope, 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/);

        Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(source, file_name) {
          var $a, self = this;

          if (file_name == null) {
            file_name = "(erb)";
          }
          return $a = [source, file_name, source], self.source = $a[0], self.file_name = $a[1], self.result = $a[2], $a;
        }, TMP_2.$$arity = -2);

        Opal.defn(self, '$prepared_source', TMP_3 = function ːprepared_source() {
          var $a, self = this, source = nil;

          return ((($a = self.prepared_source) !== false && $a !== nil) ? $a : self.prepared_source = (function() {source = self.source;
          source = self.$fix_quotes(source);
          source = self.$find_contents(source);
          source = self.$find_code(source);
          source = self.$wrap_compiled(source);
          source = self.$require_erb(source);
          return source;})());
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$compile', TMP_4 = function ːcompile() {
          var self = this;

          return $scope.get('Opal').$compile(self.$prepared_source());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$fix_quotes', TMP_5 = function ːfix_quotes(result) {
          var self = this;

          return result.$gsub("\"", "\\\"");
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$require_erb', TMP_6 = function ːrequire_erb(result) {
          var self = this;

          return $rb_plus("require \"erb\";", result);
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$find_contents', TMP_8 = function ːfind_contents(result) {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = result).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c, inner = nil;

          inner = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ((($c = inner['$=~']($scope.get('BLOCK_EXPR'))) !== nil && (!$c.$$is_boolean || $c == true))) {
              return "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
              } else {
              return "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b, /<%=([\s\S]+?)%>/);
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$find_code', TMP_10 = function ːfind_code(result) {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = result).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $c, inner = nil;

          inner = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$gsub(/\\"/, "\"");
            return "\")\n" + (inner) + "\noutput_buffer.append(\"";}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b, /<%([\s\S]+?)%>/);
        }, TMP_10.$$arity = 1);

        return (Opal.defn(self, '$wrap_compiled', TMP_11 = function ːwrap_compiled(result) {
          var self = this, path = nil;

          path = self.file_name.$sub((new RegExp("\\.opalerb" + $scope.get('REGEXP_END'))), "");
          return result = "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, TMP_11.$$arity = 1), nil) && 'wrap_compiled';
      })($scope.base, null);
    })($scope.base)
  })($scope.base);
};
/* Generated by Opal 0.10.0.beta3 */
Opal.modules["opal-parser"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$coerce_to!', '$merge', '$compile', '$eval']);
  self.$require("opal/compiler");
  self.$require("opal/erb");
  self.$require("opal/version");
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$eval', TMP_1 = function(str) {
      var self = this, default_eval_options = nil, compiling_options = nil, code = nil;

      str = $scope.get('Opal')['$coerce_to!'](str, $scope.get('String'), "to_str");
      default_eval_options = $hash2(["file", "eval"], {"file": "(eval)", "eval": true});
      compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
      code = $scope.get('Opal').$compile(str, compiling_options);
      
      return (function(self) {
        return eval(code);
      })(self)
    ;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$require_remote', TMP_2 = function ːrequire_remote(url) {
      var self = this;

      
      var r = new XMLHttpRequest();
      r.open("GET", url, false);
      r.send('');
    
      return self.$eval(r.responseText);
    }, TMP_2.$$arity = 1);
  })($scope.base);
  
  Opal.compile = function(str, options) {
    if (options) {
      options = Opal.hash(options);
    }
    return Opal.Opal.$compile(str, options);
  };

  Opal['eval'] = function(str, options) {
   return eval(Opal.compile(str, options));
  };

  function run_ruby_scripts() {
    var tag, tags = document.getElementsByTagName('script');

    for (var i = 0, len = tags.length; i < len; i++) {
      tag = tags[i];
      if (tag.type === "text/ruby") {
        if (tag.src)       Opal.Kernel.$require_remote(tag.src);
        if (tag.innerHTML) Opal.Kernel.$eval(tag.innerHTML);
      }
    }
  }

  if (typeof(document) !== 'undefined') {
    if (window.addEventListener) {
      window.addEventListener('DOMContentLoaded', run_ruby_scripts, false);
    }
    else {
      window.attachEvent('onload', run_ruby_scripts);
    }
  }

};
