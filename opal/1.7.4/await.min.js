Opal.modules["promise/v2"]=function(Opal){var $klass=Opal.klass,$def=Opal.def,$slice=Opal.slice,$eqeq=Opal.eqeq,$send=Opal.send,$alias=Opal.alias,$truthy=Opal.truthy,$rb_gt=Opal.rb_gt,$rb_minus=Opal.rb_minus,$to_a=Opal.to_a,$eqeqeq=Opal.eqeqeq,$rb_plus=Opal.rb_plus,$nesting=[],nil=Opal.nil;return Opal.add_stubs("instance_variable_set,Array,==,length,first,tap,when,reject,resolve,attr_reader,!=,native?,raise,include?,any?,proc,call,nativity_check!,gen_tracing_proc,<<,there_can_be_only_one!,then,to_proc,fail,always,!,>,value,unshift,-,prev,trace,light_nativity_check!,nil?,resolved?,===,rejected?,map,new,rescue,class,+,object_id,inspect,fail!,then!,always!,itself"),function($base,$super,$parent_nesting){var self=$klass($base,Promise,"PromiseV2"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting),$proto=self.$$prototype;return $proto.type=$proto.next=$proto.realized=$proto.resolve_proc=$proto.reject_proc=$proto.value=nil,function(self,$parent_nesting){$def(self,"$allocate",(function(){var $a,ok=nil,fail=nil,prom=nil;return ok=($a=[nil,nil])[0],fail=$a[1],(prom=new this.$$constructor((function(_ok,_fail){ok=_ok,fail=_fail}))).$instance_variable_set("@type","opal"),prom.$instance_variable_set("@resolve_proc",ok),prom.$instance_variable_set("@reject_proc",fail),prom})),$def(self,"$when",(function($a){var promises,self=this;return promises=$slice(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.all(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","when")}))}),-1),$def(self,"$all_resolved",(function($a){var promises,self=this;return promises=$slice(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.allResolved(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","all_resolved")}))}),-1),$def(self,"$any",(function($a){var promises,self=this;return promises=$slice(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.any(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","any")}))}),-1),$def(self,"$race",(function($a){var promises,self=this;return promises=$slice(arguments),promises=self.$Array($eqeq(promises.$length(),1)?promises.$first():promises),$send(Promise.race(promises),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","race")}))}),-1),$def(self,"$resolve",(function(value){return null==value&&(value=nil),$send(Promise.resolve(value),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","resolve"),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",value)}))}),-1),$def(self,"$reject",(function(value){return null==value&&(value=nil),$send(Promise.reject(value),"tap",[],(function(prom){return null==prom&&(prom=nil),prom.$instance_variable_set("@type","reject"),prom.$instance_variable_set("@realized","reject"),prom.$instance_variable_set("@value",value)}))}),-1),$alias(self,"all","when"),$alias(self,"error","reject"),$alias(self,"value","resolve")}(Opal.get_singleton_class(self)),self.$attr_reader("prev","next"),$def(self,"$native?",(function(){return this.type["$!="]("opal")})),$def(self,"$nativity_check!",(function(){return $truthy(this["$native?"]())?this.$raise($$("ArgumentError"),"this promise is native to JavaScript"):nil})),$def(self,"$light_nativity_check!",(function(){return $truthy(["reject","resolve","trace","always","fail","then"]["$include?"](this.type))?nil:$truthy(this["$native?"]())?this.$raise($$("ArgumentError"),"this promise is native to JavaScript"):nil})),$def(self,"$there_can_be_only_one!",(function(){return $truthy(this.next)&&$truthy(this.next["$any?"]())?this.$raise($$("ArgumentError"),"a promise has already been chained"):nil})),$def(self,"$gen_tracing_proc",(function $$gen_tracing_proc(passing){var block=$$gen_tracing_proc.$$p||nil;return $$gen_tracing_proc.$$p=null,$send(this,"proc",[],(function(i){var res;return null==i&&(i=nil),res=passing.$call(i),Opal.yield1(block,res),res}))})),$def(self,"$resolve",(function(value){return null==value&&(value=nil),this["$nativity_check!"](),$truthy(this.realized)&&this.$raise($$("ArgumentError"),"this promise was already resolved"),this.value=value,this.realized="resolve",this.resolve_proc.$call(value),this}),-1),$def(self,"$reject",(function(value){return null==value&&(value=nil),this["$nativity_check!"](),$truthy(this.realized)&&this.$raise($$("ArgumentError"),"this promise was already resolved"),this.value=value,this.realized="reject",this.reject_proc.$call(value),this}),-1),$def(self,"$then",(function $$then(){var blk,$ret_or_1,block=$$then.$$p||nil,prom=nil;return $$then.$$p=null,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)})),(prom=this.then(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","then"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom})),$def(self,"$then!",(function $PromiseV2_then$excl$13(){var block=$PromiseV2_then$excl$13.$$p||nil;return $PromiseV2_then$excl$13.$$p=null,this["$there_can_be_only_one!"](),$send(this,"then",[],block.$to_proc())})),$def(self,"$fail",(function $$fail(){var blk,$ret_or_1,block=$$fail.$$p||nil,prom=nil;return $$fail.$$p=null,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)})),(prom=this.catch(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","fail"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom})),$def(self,"$fail!",(function $PromiseV2_fail$excl$15(){var block=$PromiseV2_fail$excl$15.$$p||nil;return $PromiseV2_fail$excl$15.$$p=null,this["$there_can_be_only_one!"](),$send(this,"fail",[],block.$to_proc())})),$def(self,"$always",(function $$always(){var blk,$ret_or_1,block=$$always.$$p||nil,prom=nil;return $$always.$$p=null,prom=nil,blk=$send(this,"gen_tracing_proc",[block],(function(val){return null==val&&(val=nil),prom.$instance_variable_set("@realized","resolve"),prom.$instance_variable_set("@value",val)})),(prom=this.finally(blk)).$instance_variable_set("@prev",this),prom.$instance_variable_set("@type","always"),(this.next=$truthy($ret_or_1=this.next)?$ret_or_1:[])["$<<"](prom),prom})),$def(self,"$always!",(function $PromiseV2_always$excl$17(){var block=$PromiseV2_always$excl$17.$$p||nil;return $PromiseV2_always$excl$17.$$p=null,this["$there_can_be_only_one!"](),$send(this,"always",[],block.$to_proc())})),$def(self,"$trace",(function $$trace(depth){var block=$$trace.$$p||nil,prom=nil;return $$trace.$$p=null,null==depth&&(depth=nil),(prom=$send(this,"then",[],(function $$18(){var values=nil,$ret_or_1=nil,$ret_or_2=nil,val=nil;for(values=[],prom=null==$$18.$$s?this:$$18.$$s;$truthy($truthy($ret_or_1=prom)?$truthy($ret_or_2=depth["$!"]())?$ret_or_2:$rb_gt(depth,0):$ret_or_1);){val=nil;try{val=prom.$value()}catch($err){if(!Opal.rescue($err,[$$("ArgumentError")]))throw $err;try{val="native"}finally{Opal.pop_exception()}}values.$unshift(val),$truthy(depth)&&(depth=$rb_minus(depth,1)),prom=prom.$prev()}return Opal.yieldX(block,$to_a(values))}),{$$s:this})).$instance_variable_set("@type","trace"),prom}),-1),$def(self,"$trace!",(function $PromiseV2_trace$excl$19($a){var args,block=$PromiseV2_trace$excl$19.$$p||nil,self=this;return $PromiseV2_trace$excl$19.$$p=null,args=$slice(arguments),self["$there_can_be_only_one!"](),$send(self,"trace",$to_a(args),block.$to_proc())}),-1),$def(self,"$resolved?",(function(){return this["$light_nativity_check!"](),this.realized["$=="]("resolve")})),$def(self,"$rejected?",(function(){return this["$light_nativity_check!"](),this.realized["$=="]("reject")})),$def(self,"$realized?",(function(){return this["$light_nativity_check!"](),this.realized["$nil?"]()["$!"]()})),$def(self,"$value",(function(){return $truthy(this["$resolved?"]())?$eqeqeq($$("PromiseV2"),this.value)?this.value.$value():this.value:nil})),$def(self,"$error",(function(){return this["$light_nativity_check!"](),$truthy(this["$rejected?"]())?this.value:nil})),$def(self,"$and",(function($a){var $post_args,promises,self=this;return $post_args=$slice(arguments),promises=$send(promises=$post_args,"map",[],(function(i){return null==i&&(i=nil),$eqeqeq($$("PromiseV2"),i)?i:$$("PromiseV2").$value(i)})),$send($send($$("PromiseV2"),"when",[self].concat($to_a(promises))),"then",[],(function(a,$b){var b;return null==a&&(a=nil),b=$slice(arguments,1),[].concat($to_a(a)).concat($to_a(b))}),-2)}),-1),$def(self,"$initialize",(function $$initialize(){var block=$$initialize.$$p||nil;return $$initialize.$$p=null,block!==nil?Opal.yield1(block,this):nil})),$def(self,"$to_v1",(function(){var v1=nil;return v1=$$("PromiseV1").$new(),$send($send(this,"then",[],(function(i){return null==i&&(i=nil),v1.$resolve(i)})),"rescue",[],(function(i){return null==i&&(i=nil),v1.$reject(i)})),v1})),$def(self,"$inspect",(function(){var result=nil;return result="#<"+this.$class(),$truthy(this.type)?$truthy(["opal","resolve","reject"]["$include?"](this.type))||(result=$rb_plus(result,":"+this.type)):result=$rb_plus(result,":native"),$truthy(this.realized)&&(result=$rb_plus(result,":"+this.realized)),result=$rb_plus(result,"("+this.$object_id()+")"),$truthy(this.next)&&$truthy(this.next["$any?"]())&&(result=$rb_plus(result," >> "+this.next.$inspect())),$truthy(this.value)&&(result=$rb_plus(result,": "+this.value.$inspect())),result=$rb_plus(result,">")})),$alias(self,"catch","fail"),$alias(self,"catch!","fail!"),$alias(self,"do","then"),$alias(self,"do!","then!"),$alias(self,"ensure","always"),$alias(self,"ensure!","always!"),$alias(self,"finally","always"),$alias(self,"finally!","always!"),$alias(self,"reject!","reject"),$alias(self,"rescue","fail"),$alias(self,"rescue!","fail!"),$alias(self,"resolve!","resolve"),$alias(self,"to_n","itself"),$alias(self,"to_v2","itself")}($nesting[0],0,$nesting)},Opal.modules.await=function(Opal){var $coerce_to=Opal.coerce_to,$klass=Opal.klass,$truthy=Opal.truthy,$rb_lt=Opal.rb_lt,$rb_plus=Opal.rb_plus,$def=Opal.def,$module=Opal.module,$send=Opal.send,$to_a=Opal.to_a,$gvars=Opal.gvars,$rb_times=Opal.rb_times,$alias=Opal.alias,$slice=Opal.slice,$Kernel=Opal.Kernel,self=Opal.top,$nesting=[],nil=Opal.nil,$$$=Opal.$$$;Opal.add_stubs("require,<,<<,await,[],+,when,map,to_proc,empty?,pop,call,new,proc,resolve,*,itself,async?,raise");var AsyncFunction=Object.getPrototypeOf((async function(){})).constructor;return self.$require("promise/v2"),function($base,$super){var self=$klass($base,null,"Array");$def(self,"$map_await",(async function $$map_await(){var block=$$map_await.$$p||nil,i=nil,results=nil;for($$map_await.$$p=null,i=0,results=[];$truthy($rb_lt(i,this.length));)results["$<<"](await Opal.yield1(block,this["$[]"](i)).$await()),i=$rb_plus(i,1);return results})),$def(self,"$each_await",(async function $$each_await(){var block=$$each_await.$$p||nil,i=nil;for($$each_await.$$p=null,i=0;$truthy($rb_lt(i,this.length));)await Opal.yield1(block,this["$[]"](i)).$await(),i=$rb_plus(i,1);return this}))}($nesting[0]),function($base,$parent_nesting){var self=$module($base,"Enumerable"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$each_async",(async function $$each_async(){var block=$$each_async.$$p||nil;return $$each_async.$$p=null,await $send($$("PromiseV2"),"when",$to_a($send(this,"map",[],block.$to_proc()))).$await()}))}($nesting[0],$nesting),function($base,$parent_nesting){var self=$module($base,"Kernel"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);$def(self,"$exit",(async function(status){var $ret_or_1,block=nil;for(null==$gvars.__at_exit__&&($gvars.__at_exit__=nil),null==status&&(status=!0),$gvars.__at_exit__=$truthy($ret_or_1=$gvars.__at_exit__)?$ret_or_1:[];!$truthy($gvars.__at_exit__["$empty?"]());)block=$gvars.__at_exit__.$pop(),await block.$call().$await();return status=status.$$is_boolean?status?0:1:$coerce_to(status,$$("Integer"),"to_int"),Opal.exit(status),nil}),-1),$def(self,"$sleep",(function(seconds){var prom=nil;return prom=$$("PromiseV2").$new(),setTimeout($send(this,"proc",[],(function(){return prom.$resolve()})),$rb_times(seconds,1e3)),prom})),$alias(self,"await","itself")}($nesting[0],$nesting),function($base,$super){var self=$klass($base,null,"Proc");$def(self,"$async?",(function(){return this instanceof AsyncFunction}))}($nesting[0]),function($base,$super){var self=$klass($base,null,"Method");self.$$prototype.method=nil,$def(self,"$async?",(function(){return this.method["$async?"]()}))}($nesting[0]),function($base,$super){var self=$klass($base,null,"BasicObject");return $def(self,"$instance_exec_await",(async function $$instance_exec_await($a){var args,block=$$instance_exec_await.$$p||nil,self=this;$$instance_exec_await.$$p=null,args=$slice(arguments),$truthy(block)||$Kernel.$raise($$$("ArgumentError"),"no block given"),await nil;var result,block_self=block.$$s;if(block.$$s=null,self.$$is_a_module){self.$$eval=!0;try{result=await block.apply(self,args)}finally{self.$$eval=!1}}else result=await block.apply(self,args);return block.$$s=block_self,result}),-1)}($nesting[0])};
