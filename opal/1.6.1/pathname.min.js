Opal.modules["corelib/comparable"]=function(Opal){var $truthy=Opal.truthy,$module=Opal.module,$rb_gt=Opal.rb_gt,$rb_lt=Opal.rb_lt,$eqeqeq=Opal.eqeqeq,$Kernel=Opal.Kernel,$def=Opal.def,nil=Opal.nil,$$$=Opal.$$$;return Opal.add_stubs(">,<,===,raise,class,<=>,equal?"),function($base){var self=$module("::","Comparable"),$ret_or_1=nil;function normalize(what){return Opal.is_a(what,Opal.Integer)?what:$rb_gt(what,0)?1:$rb_lt(what,0)?-1:0}function cmp_or_fail(lhs,rhs){var cmp=lhs["$<=>"](rhs);return $truthy(cmp)||function(lhs,rhs){var class_name;class_name=$eqeqeq(nil,$ret_or_1=rhs)||$eqeqeq(!0,$ret_or_1)||$eqeqeq(!1,$ret_or_1)||$eqeqeq($$$("Integer"),$ret_or_1)||$eqeqeq($$$("Float"),$ret_or_1)?rhs.$inspect():rhs.$$class,$Kernel.$raise($$$("ArgumentError"),"comparison of "+lhs.$class()+" with "+class_name+" failed")}(lhs,rhs),normalize(cmp)}return $def(self,"$==",(function(other){var cmp;return!!$truthy(this["$equal?"](other))||this["$<=>"]!=Opal.Kernel["$<=>"]&&(this.$$comparable?(this.$$comparable=!1,!1):!!$truthy(cmp=this["$<=>"](other))&&0==normalize(cmp))}),1),$def(self,"$>",(function(other){return cmp_or_fail(this,other)>0}),1),$def(self,"$>=",(function(other){return cmp_or_fail(this,other)>=0}),1),$def(self,"$<",(function(other){return cmp_or_fail(this,other)<0}),1),$def(self,"$<=",(function(other){return cmp_or_fail(this,other)<=0}),1),$def(self,"$between?",(function(min,max){return!$rb_lt(this,min)&&!$rb_gt(this,max)}),2),$def(self,"$clamp",(function(min,max){var c,excl;if(null==max&&(max=nil),max===nil&&(Opal.is_a(min,Opal.Range)||$Kernel.$raise($$$("TypeError"),"wrong argument type "+min.$class()+" (expected Range)"),excl=min.excl,max=min.end,min=min.begin,max!==nil&&excl&&$Kernel.$raise($$$("ArgumentError"),"cannot clamp with an exclusive range")),min!==nil&&max!==nil&&cmp_or_fail(min,max)>0&&$Kernel.$raise($$$("ArgumentError"),"min argument must be smaller than max argument"),min!==nil){if(0==(c=cmp_or_fail(this,min)))return this;if(c<0)return min}return max!==nil&&(c=cmp_or_fail(this,max))>0?max:this}),-2)}()},Opal.queue((function(Opal){var $klass=Opal.klass,$const_set=Opal.const_set,$regexp=Opal.regexp,$eqeqeq=Opal.eqeqeq,$truthy=Opal.truthy,$eqeq=Opal.eqeq,$def=Opal.def,$defs=Opal.defs,$to_ary=Opal.to_ary,$slice=Opal.slice,$send=Opal.send,$to_a=Opal.to_a,$return_ivar=Opal.return_ivar,$neqeq=Opal.neqeq,$rb_plus=Opal.rb_plus,$not=Opal.not,$thrower=Opal.thrower,$alias=Opal.alias,$module=Opal.module,self=Opal.top,$nesting=[],nil=Opal.nil,$$$=Opal.$$$;return Opal.add_stubs("require,include,quote,===,to_s,path,respond_to?,to_path,is_a?,nil?,raise,class,==,new,pwd,attr_reader,!,relative?,chop_basename,basename,=~,source,[],rindex,sub,absolute?,expand_path,plus,unshift,length,!=,empty?,first,shift,+,join,dirname,pop,reverse_each,directory?,extname,<=>,nonzero?,proc,casecmp,cleanpath,inspect,include?,fill,map,entries"),self.$require("corelib/comparable"),function($base,$super,$parent_nesting){var self=$klass($base,null,"Pathname"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);self.$$prototype.path=nil,self.$include($$("Comparable")),$const_set($nesting[0],"SEPARATOR_PAT",$regexp([$$("Regexp").$quote($$$($$("File"),"SEPARATOR"))])),$def(self,"$initialize",(function(path){return $eqeqeq($$("Pathname"),path)?this.path=path.$path().$to_s():$truthy(path["$respond_to?"]("to_path"))?this.path=path.$to_path():$truthy(path["$is_a?"]($$("String")))?this.path=path:$truthy(path["$nil?"]())?this.$raise($$("TypeError"),"no implicit conversion of nil into String"):this.$raise($$("TypeError"),"no implicit conversion of "+path.$class()+" into String"),$eqeq(this.path,"\0")?this.$raise($$("ArgumentError")):nil}),1),$defs(self,"$pwd",(function(){return this.$new($$("Dir").$pwd())}),0),self.$attr_reader("path"),$def(self,"$==",(function(other){return other.$path()["$=="](this.path)}),1),$def(self,"$absolute?",(function(){return this["$relative?"]()["$!"]()}),0),$def(self,"$relative?",(function(){var $a,path=nil,r=nil;for(path=this.path;$truthy(r=this.$chop_basename(path));)path=null==($a=$to_ary(r))[0]?nil:$a[0];return path["$=="]("")}),0),$def(self,"$chop_basename",(function(path){var base;return base=$$("File").$basename(path),$truthy($$("Regexp").$new("^"+$$$($$("Pathname"),"SEPARATOR_PAT").$source()+"?$")["$=~"](base))?nil:[path["$[]"](0,path.$rindex(base)),base]}),1),$def(self,"$root?",(function(){return this.path["$=="]("/")}),0),$def(self,"$parent",(function(){var new_path=nil;return new_path=this.path.$sub(/\/([^\/]+\/?$)/,""),$eqeq(new_path,"")&&(new_path=$truthy(this["$absolute?"]())?"/":"."),$$("Pathname").$new(new_path)}),0),$def(self,"$sub",(function($a){var args,self=this;return args=$slice.call(arguments),$$("Pathname").$new($send(self.path,"sub",$to_a(args)))}),-1),$def(self,"$cleanpath",(function(){return Opal.normalize(this.path)}),0),$def(self,"$to_path",$return_ivar("path"),0),$def(self,"$hash",$return_ivar("path"),0),$def(self,"$expand_path",(function(){return $$("Pathname").$new($$("File").$expand_path(this.path))}),0),$def(self,"$+",(function(other){return $eqeqeq($$("Pathname"),other)||(other=$$("Pathname").$new(other)),$$("Pathname").$new(this.$plus(this.path,other.$to_s()))}),1),$def(self,"$plus",(function(path1,path2){var $a,prefix2=nil,index_list2=nil,basename_list2=nil,r2=nil,basename2=nil,prefix1=nil,$ret_or_1=nil,r1=nil,basename1=nil,suffix2=nil;for(prefix2=path2,index_list2=[],basename_list2=[];$truthy(r2=this.$chop_basename(prefix2));)prefix2=null==($a=$to_ary(r2))[0]?nil:$a[0],basename2=null==$a[1]?nil:$a[1],index_list2.$unshift(prefix2.$length()),basename_list2.$unshift(basename2);if($neqeq(prefix2,""))return path2;for(prefix1=path1;$truthy(!0);){for(;$truthy($truthy($ret_or_1=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="]("."):$ret_or_1);)index_list2.$shift(),basename_list2.$shift();if(!$truthy(r1=this.$chop_basename(prefix1)))break;if(prefix1=null==($a=$to_ary(r1))[0]?nil:$a[0],basename1=null==$a[1]?nil:$a[1],!$eqeq(basename1,".")){if($eqeq(basename1,"..")||$truthy(basename_list2["$empty?"]())||$neqeq(basename_list2.$first(),"..")){prefix1=$rb_plus(prefix1,basename1);break}index_list2.$shift(),basename_list2.$shift()}}if(r1=this.$chop_basename(prefix1),$not(r1)&&$truthy($regexp([$$("SEPARATOR_PAT")])["$=~"]($$("File").$basename(prefix1))))for(;$truthy($truthy($ret_or_1=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="](".."):$ret_or_1);)index_list2.$shift(),basename_list2.$shift();return $not(basename_list2["$empty?"]())?(suffix2=path2["$[]"](Opal.Range.$new(index_list2.$first(),-1,!1)),$truthy(r1)?$$("File").$join(prefix1,suffix2):$rb_plus(prefix1,suffix2)):$truthy(r1)?prefix1:$$("File").$dirname(prefix1)}),2),$def(self,"$join",(function($a){try{var $post_args,args,$t_return=$thrower("return"),self=this,result=nil;return $post_args=$slice.call(arguments),$truthy((args=$post_args)["$empty?"]())?self:(result=args.$pop(),$eqeqeq($$("Pathname"),result)||(result=$$("Pathname").$new(result)),$truthy(result["$absolute?"]())?result:($send(args,"reverse_each",[],(function(arg){if(null==arg&&(arg=nil),$eqeqeq($$("Pathname"),arg)||(arg=$$("Pathname").$new(arg)),result=$rb_plus(arg,result),!$truthy(result["$absolute?"]()))return nil;$t_return.$throw(result)}),{$$arity:1,$$ret:$t_return}),$rb_plus(self,result)))}catch($e){if($e===$t_return)return $e.$v;throw $e}}),-1),$def(self,"$split",(function(){return[this.$dirname(),this.$basename()]}),0),$def(self,"$dirname",(function(){return $$("Pathname").$new($$("File").$dirname(this.path))}),0),$def(self,"$basename",(function(){return $$("Pathname").$new($$("File").$basename(this.path))}),0),$def(self,"$directory?",(function(){return $$("File")["$directory?"](this.path)}),0),$def(self,"$extname",(function(){return $$("File").$extname(this.path)}),0),$def(self,"$<=>",(function(other){return this.$path()["$<=>"](other.$path())}),1),$const_set($nesting[0],"SAME_PATHS",$truthy($$$($$("File"),"FNM_SYSCASE")["$nonzero?"]())?$send(self,"proc",[],(function(a,b){return null==a&&(a=nil),null==b&&(b=nil),a.$casecmp(b)["$=="](0)}),2):$send(self,"proc",[],(function(a,b){return null==a&&(a=nil),null==b&&(b=nil),a["$=="](b)}),2)),$def(self,"$relative_path_from",(function(base_directory){var $a,dest_directory,dest_prefix=nil,dest_names=nil,r=nil,basename=nil,base_prefix=nil,base_names=nil,$ret_or_1=nil,$ret_or_2=nil,relpath_names=nil;for(dest_directory=this.$cleanpath().$to_s(),base_directory=base_directory.$cleanpath().$to_s(),dest_prefix=dest_directory,dest_names=[];$truthy(r=this.$chop_basename(dest_prefix));)dest_prefix=null==($a=$to_ary(r))[0]?nil:$a[0],basename=null==$a[1]?nil:$a[1],$neqeq(basename,".")&&dest_names.$unshift(basename);for(base_prefix=base_directory,base_names=[];$truthy(r=this.$chop_basename(base_prefix));)base_prefix=null==($a=$to_ary(r))[0]?nil:$a[0],basename=null==$a[1]?nil:$a[1],$neqeq(basename,".")&&base_names.$unshift(basename);for($truthy($$("SAME_PATHS")["$[]"](dest_prefix,base_prefix))||this.$raise($$("ArgumentError"),"different prefix: "+dest_prefix.$inspect()+" and "+base_directory.$inspect());$truthy($truthy($ret_or_1=$truthy($ret_or_2=dest_names["$empty?"]()["$!"]())?base_names["$empty?"]()["$!"]():$ret_or_2)?$$("SAME_PATHS")["$[]"](dest_names.$first(),base_names.$first()):$ret_or_1);)dest_names.$shift(),base_names.$shift();return $truthy(base_names["$include?"](".."))&&this.$raise($$("ArgumentError"),"base_directory has ..: "+base_directory.$inspect()),base_names.$fill(".."),relpath_names=$rb_plus(base_names,dest_names),$truthy(relpath_names["$empty?"]())?$$("Pathname").$new("."):$$("Pathname").$new($send($$("File"),"join",$to_a(relpath_names)))}),1),$def(self,"$entries",(function(){return $send($$("Dir").$entries(this.path),"map",[],(function $$11(f){return null==f&&(f=nil),(null==$$11.$$s?this:$$11.$$s).$class().$new(f)}),{$$arity:1,$$s:this})}),0),$alias(self,"===","=="),$alias(self,"eql?","=="),$alias(self,"to_s","to_path"),$alias(self,"to_str","to_path")}($nesting[0],0,$nesting),function($base,$parent_nesting){var self=$module($base,"Kernel"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $def(self,"$Pathname",(function(path){return $$("Pathname").$new(path)}),1)}($nesting[0],$nesting)}));
