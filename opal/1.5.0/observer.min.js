Opal.modules.observer=function(Opal){var $nesting=[],nil=Opal.nil,$module=Opal.module,$truthy=Opal.truthy,$hash2=Opal.hash2,$send=Opal.send,$def=Opal.def,$to_a=Opal.to_a;return Opal.add_stubs("respond_to?,raise,new,to_s,[]=,delete,clear,size,each,send"),function($base,$parent_nesting){var self=$module($base,"Observable"),$nesting=[self].concat($parent_nesting),$$=Opal.$r($nesting);return $def(self,"$add_observer",(function(observer,func){var $a,$b;return null==this.observer_peers&&(this.observer_peers=nil),null==func&&(func="update"),$truthy(null!=($a=this.observer_peers)&&$a!==nil?"instance-variable":nil)||(this.observer_peers=$hash2([],{})),$truthy(observer["$respond_to?"](func))||this.$raise($$("NoMethodError").$new("observer does not respond to `"+func.$to_s()+"'",func.$to_s())),$b=[observer,func],$send(this.observer_peers,"[]=",$b),$b[$b.length-1]}),-2),$def(self,"$delete_observer",(function(observer){var $a;return null==this.observer_peers&&(this.observer_peers=nil),$truthy(null!=($a=this.observer_peers)&&$a!==nil?"instance-variable":nil)?this.observer_peers.$delete(observer):nil}),1),$def(self,"$delete_observers",(function(){var $a;return null==this.observer_peers&&(this.observer_peers=nil),$truthy(null!=($a=this.observer_peers)&&$a!==nil?"instance-variable":nil)?this.observer_peers.$clear():nil}),0),$def(self,"$count_observers",(function(){var $a;return null==this.observer_peers&&(this.observer_peers=nil),$truthy(null!=($a=this.observer_peers)&&$a!==nil?"instance-variable":nil)?this.observer_peers.$size():0}),0),$def(self,"$changed",(function(state){return null==state&&(state=!0),this.observer_state=state}),-1),$def(self,"$changed?",(function(){var $a;return null==this.observer_state&&(this.observer_state=nil),!(!$truthy(($a=this.observer_state,null!=$a&&$a!==nil?"instance-variable":nil))||!$truthy(this.observer_state))}),0),$def(self,"$notify_observers",(function($a){var $post_args,arg,$b,$c,self=this;return null==self.observer_state&&(self.observer_state=nil),null==self.observer_peers&&(self.observer_peers=nil),$post_args=Opal.slice.call(arguments),arg=$post_args,$truthy(null!=($b=self.observer_state)&&$b!==nil?"instance-variable":nil)&&$truthy(self.observer_state)?($truthy(null!=($c=self.observer_peers)&&$c!==nil?"instance-variable":nil)&&$send(self.observer_peers,"each",[],(function(k,v){return null==k&&(k=nil),null==v&&(v=nil),$send(k,"send",[v].concat($to_a(arg)))}),2),self.observer_state=!1):nil}),-1)}($nesting[0],$nesting)};
