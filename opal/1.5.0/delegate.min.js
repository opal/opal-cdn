Opal.modules.delegate=function(Opal){var self=Opal.top,$nesting=[],$$=Opal.$r($nesting),nil=Opal.nil,$klass=Opal.klass,$def=Opal.def,$truthy=Opal.truthy,$send=Opal.send,$to_a=Opal.to_a,$send2=Opal.send2,$find_super=Opal.find_super,$return_ivar=Opal.return_ivar,$assign_ivar=Opal.assign_ivar;return Opal.add_stubs("__setobj__,__getobj__,respond_to?,__send__,to_proc"),function($base,$super){var self=$klass($base,$super,"Delegator");$def(self,"$initialize",(function(obj){return this.$__setobj__(obj)}),1),$def(self,"$method_missing",(function $$method_missing(m,$a){var args,block=$$method_missing.$$p||nil,self=this,target=nil;return delete $$method_missing.$$p,args=Opal.slice.call(arguments,1),target=self.$__getobj__(),$truthy(target["$respond_to?"](m))?$send(target,"__send__",[m].concat($to_a(args)),block.$to_proc()):$send2(self,$find_super(self,"method_missing",$$method_missing,!1,!0),"method_missing",[m].concat($to_a(args)),block.$to_proc())}),-2),$def(self,"$respond_to_missing?",(function(m,include_private){return this.$__getobj__()["$respond_to?"](m,include_private)}),2)}($nesting[0],$$("BasicObject")),function($base,$super){var self=$klass($base,$super,"SimpleDelegator");$def(self,"$__getobj__",$return_ivar("delegate_sd_obj"),0),$def(self,"$__setobj__",$assign_ivar("delegate_sd_obj"),0)}($nesting[0],$$("Delegator")),$def(self,"$DelegateClass",(function(superklass){return $$("SimpleDelegator")}),1)};
