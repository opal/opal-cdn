#!/usr/bin/env ruby
require 'fileutils'
require 'pathname'

include FileUtils

def sh *args
  args = args.map(&:to_s)
  system *args or raise "command failed: #{args}"
end

def git *args
  sh 'git', *args
end

root = Pathname("#{__dir__}/..").expand_path
opal = Pathname(ENV['OPAL_REPO'] || root.join('tmp/opal')).expand_path
version = ARGV.first or raise "missing version, usage: bin/build v0.10.1"

mkdir_p opal.dirname

unless opal.join('.git').directory?
  git :clone, 'https://github.com/opal/opal.git', opal, '--recursive'
end

ENV['GIT_DIR'] = opal.join('.git').to_s
git :fetch, '--all', '--prune'
git :checkout, 'master'
git :reset, '--hard', 'origin/master'

ENV['GIT_DIR'] = nil
opal_version = root.join("tmp/#{version}")
rm_rf opal_version if opal_version.exist?
git :clone, opal, opal_version, '--single-branch', '--branch', version, '--reference', opal

cd opal_version.to_s do
  references = [
    'test/cruby',
    'spec/mspec',
    'spec/ruby',
  ].map do |dir|
    dir = opal.join("#{dir}/.git")
    if dir.exist?
      ['--reference', dir.to_s]
    else
      warn "#{dir} not found, use `git clone https://github.com/opal #{opal} --recursive` to speed up the generation"
      nil
    end
  end.compact.flatten

  git('submodule', 'update', '--init', '--jobs', '4', '--recommend-shallow', '--checkout', *references)

  sh 'bundle'
  sh 'npm', 'i'
  sh 'bundle', 'exec', 'rake', 'dist', "DIR=#{root.join 'opal', version.gsub(/^v/, '')}"
end

system "#{__dir__}/build-index"

current = Dir['opal/*'].map { |path| File.basename(path) }.sort_by do |v|
  Gem::Version.new(v) rescue Gem::Version.new('0.0')
end.select { |i| i =~ /^[0-9.]+$/ }.last

system "#{__dir__}/set-current", current

git 'add', '.'
git 'commit', '-a', '-m', version
git 'push'
unless version == 'master'
  git 'tag', version
  git 'push', '--tags'
end
